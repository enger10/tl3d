/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';var m=this;function q(c,d){var a=c.split("."),b=m;!(a[0]in b)&&b.execScript&&b.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&void 0!==d?b[e]=d:b=b[e]?b[e]:b[e]={}};var s="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;function t(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,l,p,n,r,K;for(n=0;n<d;++n)c[n]>a&&(a=c[n]),c[n]<b&&(b=c[n]);e=1<<a;f=new (s?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(n=0;n<d;++n)if(c[n]===g){l=0;p=h;for(r=0;r<g;++r)l=l<<1|p&1,p>>=1;K=g<<16|n;for(r=l;r<e;r+=k)f[r]=K;++h}++g;h<<=1;k<<=1}return[f,a,b]};function u(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=s?new Uint8Array(c):c;this.m=!1;this.i=v;this.s=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.s=d.resize);switch(this.i){case w:this.b=32768;this.c=new (s?Uint8Array:Array)(32768+this.h+258);break;case v:this.b=0;this.c=new (s?Uint8Array:Array)(this.h);this.e=this.A;this.n=this.w;this.j=this.z;break;default:throw Error("invalid inflate mode");
}}var w=0,v=1,x={u:w,t:v};
u.prototype.k=function(){for(;!this.m;){var c=y(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=void 0,h=void 0,k=b.length,l=void 0;this.d=this.f=0;if(a+1>=f)throw Error("invalid uncompressed block header: LEN");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error("invalid uncompressed block header: NLEN");h=d[a++]|d[a++]<<8;if(g===~h)throw Error("invalid uncompressed block header: length verify");if(a+g>d.length)throw Error("input buffer is broken");switch(this.i){case w:for(;e+
g>b.length;){l=k-e;g-=l;if(s)b.set(d.subarray(a,a+l),e),e+=l,a+=l;else for(;l--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case v:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error("invalid inflate mode");}if(s)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(z,A);break;case 2:B(this);break;default:throw Error("unknown BTYPE: "+c);}}return this.n()};
var C=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=s?new Uint16Array(C):C,E=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],F=s?new Uint16Array(E):E,G=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],H=s?new Uint8Array(G):G,I=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],J=s?new Uint16Array(I):I,L=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,
13],M=s?new Uint8Array(L):L,N=new (s?Uint8Array:Array)(288),O,P;O=0;for(P=N.length;O<P;++O)N[O]=143>=O?8:255>=O?9:279>=O?7:8;var z=t(N),Q=new (s?Uint8Array:Array)(30),R,S;R=0;for(S=Q.length;R<S;++R)Q[R]=5;var A=t(Q);function y(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error("input buffer is broken");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}
function T(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],l,p;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;l=h[a&(1<<k)-1];p=l>>>16;c.f=a>>p;c.d=b-p;c.a=f;return l&65535}
function B(c){function d(a,c,b){var d,e=this.q,f,g;for(g=0;g<a;)switch(d=T(this,c),d){case 16:for(f=3+y(this,2);f--;)b[g++]=e;break;case 17:for(f=3+y(this,3);f--;)b[g++]=0;e=0;break;case 18:for(f=11+y(this,7);f--;)b[g++]=0;e=0;break;default:e=b[g++]=d}this.q=e;return b}var a=y(c,5)+257,b=y(c,5)+1,e=y(c,4)+4,f=new (s?Uint8Array:Array)(D.length),g,h,k,l;for(l=0;l<e;++l)f[D[l]]=y(c,3);if(!s){l=e;for(e=f.length;l<e;++l)f[D[l]]=0}g=t(f);h=new (s?Uint8Array:Array)(a);k=new (s?Uint8Array:Array)(b);c.q=0;
c.j(t(d.call(c,a,g,h)),t(d.call(c,b,g,k)))}u.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=T(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=F[g];0<H[g]&&(k+=y(this,H[g]));f=T(this,d);h=J[f];0<M[f]&&(h+=y(this,M[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};
u.prototype.z=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=T(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=F[g];0<H[g]&&(k+=y(this,H[g]));f=T(this,d);h=J[f];0<M[f]&&(h+=y(this,M[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};
u.prototype.e=function(){var c=new (s?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(s)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(s)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};
u.prototype.A=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&("number"===typeof c.p&&(a=c.p),"number"===typeof c.v&&(a+=c.v));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;s?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};
u.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (s?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return s?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};
u.prototype.w=function(){var c,d=this.b;s?this.s?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function U(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.B=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case V:this.method=V;break;default:throw Error("unsupported compression method");}if(0!==((a<<8)+b)%31)throw Error("invalid fcheck flag:"+((a<<8)+b)%31);if(b&32)throw Error("fdict flag is not supported");this.r=new u(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}
U.prototype.k=function(){var c=this.input,d,a;d=this.r.k();this.a=this.r.a;if(this.B){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if("string"===typeof b){var e=b.split(""),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,l=b.length,p,n=0;0<l;){p=1024<l?1024:l;l-=p;do h+=b[n++],k+=h;while(--p);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error("invalid adler-32 checksum");}return d};var V=8;q("Zlib.Inflate",U);q("Zlib.Inflate.prototype.decompress",U.prototype.k);var W={ADAPTIVE:x.t,BLOCK:x.u},X,Y,Z,$;if(Object.keys)X=Object.keys(W);else for(Y in X=[],Z=0,W)X[Z++]=Y;Z=0;for($=X.length;Z<$;++Z)Y=X[Z],q("Zlib.Inflate.BufferType."+Y,W[Y]);}).call(this); //# sourceMappingURL=inflate.min.js.map


/***********************************/
/*http://www.layabox.com  2017/3/23*/
/***********************************/
var Laya=window.Laya=(function(window,document){
	var Laya={
		__internals:[],
		__packages:{},
		__classmap:{'Object':Object,'Function':Function,'Array':Array,'String':String},
		__sysClass:{'object':'Object','array':'Array','string':'String','dictionary':'Dictionary'},
		__propun:{writable: true,enumerable: false,configurable: true},
		__presubstr:String.prototype.substr,
		__substr:function(ofs,sz){return arguments.length==1?Laya.__presubstr.call(this,ofs):Laya.__presubstr.call(this,ofs,sz>0?sz:(this.length+sz));},
		__init:function(_classs){_classs.forEach(function(o){o.__init$ && o.__init$();});},
		__isClass:function(o){return o && (o.__isclass || o==Object || o==String || o==Array);},
		__newvec:function(sz,value){
			var d=[];
			d.length=sz;
			for(var i=0;i<sz;i++) d[i]=value;
			return d;
		},
		__extend:function(d,b){
			for (var p in b){
				if (!b.hasOwnProperty(p)) continue;
				var gs=Object.getOwnPropertyDescriptor(b, p);
				var g = gs.get, s = gs.set; 
				if ( g || s ) {
					if ( g && s)
						Object.defineProperty(d,p,gs);
					else{
						g && Object.defineProperty(d, p, g);
						s && Object.defineProperty(d, p, s);
					}
				}
				else d[p] = b[p];
			}
			function __() { Laya.un(this,'constructor',d); }__.prototype=b.prototype;d.prototype=new __();Laya.un(d.prototype,'__imps',Laya.__copy({},b.prototype.__imps));
		},
		__copy:function(dec,src){
			if(!src) return null;
			dec=dec||{};
			for(var i in src) dec[i]=src[i];
			return dec;
		},
		__package:function(name,o){
			if(Laya.__packages[name]) return;
			Laya.__packages[name]=true;
			var p=window,strs=name.split('.');
			if(strs.length>1){
				for(var i=0,sz=strs.length-1;i<sz;i++){
					var c=p[strs[i]];
					p=c?c:(p[strs[i]]={});
				}
			}
			p[strs[strs.length-1]] || (p[strs[strs.length-1]]=o||{});
		},
		__hasOwnProperty:function(name,o){
			o=o ||this;
		    function classHas(name,o){
				if(Object.hasOwnProperty.call(o.prototype,name)) return true;
				var s=o.prototype.__super;
				return s==null?null:classHas(name,s);
			}
			return (Object.hasOwnProperty.call(o,name)) || classHas(name,o.__class);
		},
		__typeof:function(o,value){
			if(!o || !value) return false;
			if(value===String) return (typeof o==='string');
			if(value===Number) return (typeof o==='number');
			if(value.__interface__) value=value.__interface__;
			else if(typeof value!='string')  return (o instanceof value);
			return (o.__imps && o.__imps[value]) || (o.__class==value);
		},
		__as:function(value,type){
			return (this.__typeof(value,type))?value:null;
		},		
		interface:function(name,_super){
			Laya.__package(name,{});
			var ins=Laya.__internals;
			var a=ins[name]=ins[name] || {self:name};
			if(_super)
			{
				var supers=_super.split(',');
				a.extend=[];
				for(var i=0;i<supers.length;i++){
					var nm=supers[i];
					ins[nm]=ins[nm] || {self:nm};
					a.extend.push(ins[nm]);
				}
			}
			var o=window,words=name.split('.');
			for(var i=0;i<words.length-1;i++) o=o[words[i]];
			o[words[words.length-1]]={__interface__:name};
		},
		class:function(o,fullName,_super,miniName){
			_super && Laya.__extend(o,_super);
			if(fullName){
				Laya.__package(fullName,o);
				Laya.__classmap[fullName]=o;
				if(fullName.indexOf('.')>0){
					if(fullName.indexOf('laya.')==0){
						var paths=fullName.split('.');
						miniName=miniName || paths[paths.length-1];
						if(Laya[miniName]) console.log("Warning!,this class["+miniName+"] already exist:",Laya[miniName]);
						Laya[miniName]=o;
					}
				}
				else {
					if(fullName=="Main")
						window.Main=o;
					else{
						if(Laya[fullName]){
							console.log("Error!,this class["+fullName+"] already exist:",Laya[fullName]);
						}
						Laya[fullName]=o;
					}
				}
			}
			var un=Laya.un,p=o.prototype;
			un(p,'hasOwnProperty',Laya.__hasOwnProperty);
			un(p,'__class',o);
			un(p,'__super',_super);
			un(p,'__className',fullName);
			un(o,'__super',_super);
			un(o,'__className',fullName);
			un(o,'__isclass',true);
			un(o,'super',function(o){this.__super.call(o);});
		},
		imps:function(dec,src){
			if(!src) return null;
			var d=dec.__imps|| Laya.un(dec,'__imps',{});
			function __(name){
				var c,exs;
				if(! (c=Laya.__internals[name]) ) return;
				d[name]=true;
				if(!(exs=c.extend)) return;
				for(var i=0;i<exs.length;i++){
					__(exs[i].self);
				}
			}
			for(var i in src) __(i);
		},
        superSet:function(clas,o,prop,value){
            var fun = clas.prototype["_$set_"+prop];
            fun && fun.call(o,value);
        },
        superGet:function(clas,o,prop){
            var fun = clas.prototype["_$get_"+prop];
           	return fun?fun.call(o):null;
        },
		getset:function(isStatic,o,name,getfn,setfn){
			if(!isStatic){
				getfn && Laya.un(o,'_$get_'+name,getfn);
				setfn && Laya.un(o,'_$set_'+name,setfn);
			}
			else{
				getfn && (o['_$GET_'+name]=getfn);
				setfn && (o['_$SET_'+name]=setfn);
			}
			if(getfn && setfn) 
				Object.defineProperty(o,name,{get:getfn,set:setfn,enumerable:false});
			else{
				getfn && Object.defineProperty(o,name,{get:getfn,enumerable:false});
				setfn && Object.defineProperty(o,name,{set:setfn,enumerable:false});
			}
		},
		static:function(_class,def){
				for(var i=0,sz=def.length;i<sz;i+=2){
					if(def[i]=='length') 
						_class.length=def[i+1].call(_class);
					else{
						function tmp(){
							var name=def[i];
							var getfn=def[i+1];
							Object.defineProperty(_class,name,{
								get:function(){delete this[name];return this[name]=getfn.call(this);},
								set:function(v){delete this[name];this[name]=v;},enumerable: true,configurable: true});
						}
						tmp();
					}
				}
		},		
		un:function(obj,name,value){
			value || (value=obj[name]);
			Laya.__propun.value=value;
			Object.defineProperty(obj, name, Laya.__propun);
			return value;
		},
		uns:function(obj,names){
			names.forEach(function(o){Laya.un(obj,o)});
		}
	};

    window.console=window.console || ({log:function(){}});
	window.trace=window.console.log;
	Error.prototype.throwError=function(){throw arguments;};
	//String.prototype.substr=Laya.__substr;
	Object.defineProperty(Array.prototype,'fixed',{enumerable: false});

	return Laya;
})(window,document);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
Laya.interface('laya.runtime.IMarket');
Laya.interface('laya.filters.IFilter');
Laya.interface('laya.display.ILayout');
Laya.interface('laya.resource.IDispose');
Laya.interface('laya.runtime.IPlatform');
Laya.interface('laya.resource.IDestroy');
Laya.interface('laya.runtime.IConchNode');
Laya.interface('laya.filters.IFilterAction');
Laya.interface('laya.runtime.ICPlatformClass');
Laya.interface('laya.resource.ICreateResource');
Laya.interface('laya.runtime.IConchRenderObject');
Laya.interface('laya.runtime.IPlatformClass','laya.runtime.IPlatform');
/**
*@private
*/
//class laya.utils.RunDriver
var RunDriver=(function(){
	function RunDriver(){}
	__class(RunDriver,'laya.utils.RunDriver');
	RunDriver.FILTER_ACTIONS=[];
	RunDriver.pixelRatio=-1;
	RunDriver._charSizeTestDiv=null;
	RunDriver.now=function(){
		return /*__JS__ */Date.now();
	}

	RunDriver.getWindow=function(){
		return /*__JS__ */window;
	}

	RunDriver.getPixelRatio=function(){
		if (RunDriver.pixelRatio < 0){
			var ctx=Browser.context;
			var backingStore=ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
			RunDriver.pixelRatio=(Browser.window.devicePixelRatio || 1)/ backingStore;
			if (RunDriver.pixelRatio < 1)RunDriver.pixelRatio=1;
		}
		return RunDriver.pixelRatio;
	}

	RunDriver.getIncludeStr=function(name){
		return null;
	}

	RunDriver.createShaderCondition=function(conditionScript){
		var fn="(function() {return "+conditionScript+";})";
		return Browser.window.eval(fn);
	}

	RunDriver.fontMap=[];
	RunDriver.measureText=function(txt,font){
		var isChinese=RunDriver.hanzi.test(txt);
		if (isChinese && RunDriver.fontMap[font]){
			return RunDriver.fontMap[font];
		};
		var ctx=Browser.context;
		ctx.font=font;
		var r=ctx.measureText(txt);
		if (isChinese)RunDriver.fontMap[font]=r;
		return r;
	}

	RunDriver.getWebGLContext=function(canvas){
	};

	RunDriver.beginFlush=function(){
	};

	RunDriver.endFinish=function(){
	};

	RunDriver.addToAtlas=null;
	RunDriver.flashFlushImage=function(atlasWebGLCanvas){
	};

	RunDriver.drawToCanvas=function(sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
		var canvas=HTMLCanvas.create("2D");
		var context=new RenderContext(canvasWidth,canvasHeight,canvas);
		RenderSprite.renders[_renderType]._fun(sprite,context,offsetX,offsetY);
		return canvas;
	}

	RunDriver.createParticleTemplate2D=null;
	RunDriver.createGLTextur=null;
	RunDriver.createWebGLContext2D=null;
	RunDriver.changeWebGLSize=function(w,h){
	};

	RunDriver.createRenderSprite=function(type,next){
		return new RenderSprite(type,next);
	}

	RunDriver.createFilterAction=function(type){
		return new ColorFilterAction();
	}

	RunDriver.createGraphics=function(){
		return new Graphics();
	}

	RunDriver.clear=function(value){
		Render._context.ctx.clear();
	}

	RunDriver.clearAtlas=function(value){
	};

	RunDriver.isAtlas=function(bitmap){
		return false;
	}

	RunDriver.addTextureToAtlas=function(value){
	};

	RunDriver.getTexturePixels=function(value,x,y,width,height){
		return null;
	}

	RunDriver.skinAniSprite=function(){
		return null;
	}

	RunDriver.update3DLoop=function(){
	};

	__static(RunDriver,
	['hanzi',function(){return this.hanzi=new RegExp("^[\u4E00-\u9FA5]$");}
	]);
	return RunDriver;
})()


/**
*<code>Laya</code> 是全局对象的引用入口集。
*Laya类引用了一些常用的全局对象，比如Laya.stage：舞台，Laya.timer：时间管理器，Laya.loader：加载管理器，使用时注意大小写。
*/
//class Laya
var ___Laya=(function(){
	//function Laya(){}
	/**
	*表示是否捕获全局错误并弹出提示。默认为false。
	*适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。
	*/
	__getset(1,Laya,'alertGlobalError',null,function(value){
		var erralert=0;
		if (value){
			Browser.window.onerror=function (msg,url,line,column,detail){
				if (erralert++< 5 && detail)
					alert("出错啦，请把此信息截图给研发商\n"+msg+"\n"+detail.stack||detail);
			}
			}else {
			Browser.window.onerror=null;
		}
	});

	Laya.init=function(width,height,__plugins){
		var plugins=[];for(var i=2,sz=arguments.length;i<sz;i++)plugins.push(arguments[i]);
		if (Laya._isinit)return;
		ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice=Laya._arrayBufferSlice);
		Laya._isinit=true;
		Browser.__init__();
		Context.__init__();
		Graphics.__init__();
		Laya.timer=new Timer();
		Laya.scaleTimer=new Timer();
		Laya.loader=new LoaderManager();
		WeakObject.__init__();
		for (var i=0,n=plugins.length;i < n;i++){
			if (plugins[i].enable)plugins[i].enable();
		}
		Font.__init__();
		Style.__init__();
		ResourceManager.__init__();
		CacheManager.beginCheck();
		Laya._currentStage=Laya.stage=new Stage();
		Laya.stage.conchModel && Laya.stage.conchModel.setRootNode();
		Laya.getUrlPath();
		Laya.render=new Render(0,0);
		Laya.stage.size(width,height);
		RenderSprite.__init__();
		KeyBoardManager.__init__();
		MouseManager.instance.__init__(Laya.stage,Render.canvas);
		Input.__init__();
		SoundManager.autoStopMusic=true;
		LocalStorage.__init__();
		return Render.canvas;
	}

	Laya.getUrlPath=function(){
		var location=Browser.window.location;
		var pathName=location.pathname;
		pathName=pathName.charAt(2)==':' ? pathName.substring(1):pathName;
		URL.rootPath=URL.basePath=URL.getPath(location.protocol=="file:" ? pathName :location.protocol+"//"+location.host+location.pathname);
	}

	Laya._arrayBufferSlice=function(start,end){
		var arr=/*__JS__ */this;
		var arrU8List=new Uint8Array(arr,start,end-start);
		var newU8List=new Uint8Array(arrU8List.length);
		newU8List.set(arrU8List);
		return newU8List.buffer;
	}

	Laya.stage=null;
	Laya.timer=null;
	Laya.scaleTimer=null;
	Laya.loader=null;
	Laya.version="1.7.15";
	Laya.render=null;
	Laya._currentStage=null;
	Laya._isinit=false;
	__static(Laya,
	['conchMarket',function(){return this.conchMarket=/*__JS__ */window.conch?conchMarket:null;},'PlatformClass',function(){return this.PlatformClass=/*__JS__ */window.PlatformClass;},'MiniAdpter',function(){return this.MiniAdpter=/*__JS__ */{init:function(){if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("MiniGame")>-1)console.error("请先引用小游戏适配库laya.wxmini.js,详细教程：https://ldc.layabox.com/doc/?nav=zh-ts-5-0-0")}};}
	]);
	return Laya;
})()


/**
*Config 用于配置一些全局参数。如需更改，请在初始化引擎之前设置。
*/
//class Config
var Config=(function(){
	function Config(){}
	__class(Config,'Config');
	Config.WebGLTextCacheCount=500;
	Config.atlasEnable=false;
	Config.showCanvasMark=false;
	Config.animationInterval=50;
	Config.isAntialias=false;
	Config.isAlpha=false;
	Config.premultipliedAlpha=true;
	Config.isStencil=true;
	Config.preserveDrawingBuffer=false;
	return Config;
})()


/**
*<code>EventDispatcher</code> 类是可调度事件的所有类的基类。
*/
//class laya.events.EventDispatcher
var EventDispatcher=(function(){
	var EventHandler;
	function EventDispatcher(){
		/**@private */
		this._events=null;
	}

	__class(EventDispatcher,'laya.events.EventDispatcher');
	var __proto=EventDispatcher.prototype;
	/**
	*检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
	*@param type 事件的类型。
	*@return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
	*/
	__proto.hasListener=function(type){
		var listener=this._events && this._events[type];
		return !!listener;
	}

	/**
	*派发事件。
	*@param type 事件类型。
	*@param data （可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
	*@return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
	*/
	__proto.event=function(type,data){
		if (!this._events || !this._events[type])return false;
		var listeners=this._events[type];
		if (listeners.run){
			if (listeners.once)delete this._events[type];
			data !=null ? listeners.runWith(data):listeners.run();
			}else {
			for (var i=0,n=listeners.length;i < n;i++){
				var listener=listeners[i];
				if (listener){
					(data !=null)? listener.runWith(data):listener.run();
				}
				if (!listener || listener.once){
					listeners.splice(i,1);
					i--;
					n--;
				}
			}
			if (listeners.length===0 && this._events)delete this._events[type];
		}
		return true;
	}

	/**
	*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		return this._createListener(type,caller,listener,args,false);
	}

	/**
	*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		return this._createListener(type,caller,listener,args,true);
	}

	/**@private */
	__proto._createListener=function(type,caller,listener,args,once,offBefore){
		(offBefore===void 0)&& (offBefore=true);
		offBefore && this.off(type,caller,listener,once);
		var handler=EventHandler.create(caller || this,listener,args,once);
		this._events || (this._events={});
		var events=this._events;
		if (!events[type])events[type]=handler;
		else {
			if (!events[type].run)events[type].push(handler);
			else events[type]=[events[type],handler];
		}
		return this;
	}

	/**
	*从 EventDispatcher 对象中删除侦听器。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param onceOnly （可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.off=function(type,caller,listener,onceOnly){
		(onceOnly===void 0)&& (onceOnly=false);
		if (!this._events || !this._events[type])return this;
		var listeners=this._events[type];
		if (listener !=null){
			if (listeners.run){
				if ((!caller || listeners.caller===caller)&& listeners.method===listener && (!onceOnly || listeners.once)){
					delete this._events[type];
					listeners.recover();
				}
				}else {
				var count=0;
				for (var i=0,n=listeners.length;i < n;i++){
					var item=listeners[i];
					if (item && (!caller || item.caller===caller)&& item.method===listener && (!onceOnly || item.once)){
						count++;
						listeners[i]=null;
						item.recover();
					}
				}
				if (count===n)delete this._events[type];
			}
		}
		return this;
	}

	/**
	*从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
	*@param type （可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.offAll=function(type){
		var events=this._events;
		if (!events)return this;
		if (type){
			this._recoverHandlers(events[type]);
			delete events[type];
			}else {
			for (var name in events){
				this._recoverHandlers(events[name]);
			}
			this._events=null;
		}
		return this;
	}

	__proto._recoverHandlers=function(arr){
		if (!arr)return;
		if (arr.run){
			arr.recover();
			}else {
			for (var i=arr.length-1;i >-1;i--){
				if (arr[i]){
					arr[i].recover();
					arr[i]=null;
				}
			}
		}
	}

	/**
	*检测指定事件类型是否是鼠标事件。
	*@param type 事件的类型。
	*@return 如果是鼠标事件，则值为 true;否则，值为 false。
	*/
	__proto.isMouseEvent=function(type){
		return EventDispatcher.MOUSE_EVENTS[type];
	}

	__static(EventDispatcher,
	['MOUSE_EVENTS',function(){return this.MOUSE_EVENTS={"rightmousedown":true,"rightmouseup":true,"rightclick":true,"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true};}
	]);
	EventDispatcher.__init$=function(){
		Object.defineProperty(laya.events.EventDispatcher.prototype,"_events",{enumerable:false,writable:true});
		/**@private */
		//class EventHandler extends laya.utils.Handler
		EventHandler=(function(_super){
			function EventHandler(caller,method,args,once){
				EventHandler.__super.call(this,caller,method,args,once);
			}
			__class(EventHandler,'',_super);
			var __proto=EventHandler.prototype;
			__proto.recover=function(){
				if (this._id > 0){
					this._id=0;
					EventHandler._pool.push(this.clear());
				}
			}
			EventHandler.create=function(caller,method,args,once){
				(once===void 0)&& (once=true);
				if (EventHandler._pool.length)return EventHandler._pool.pop().setTo(caller,method,args,once);
				return new EventHandler(caller,method,args,once);
			}
			EventHandler._pool=[];
			return EventHandler;
		})(Handler)
	}

	return EventDispatcher;
})()


/**
*<p><code>Handler</code> 是事件处理器类。</p>
*<p>推荐使用 Handler.create()方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover()将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>
*<p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>
*/
//class laya.utils.Handler
var Handler=(function(){
	function Handler(caller,method,args,once){
		/**执行域(this)。*/
		//this.caller=null;
		/**处理方法。*/
		//this.method=null;
		/**参数。*/
		//this.args=null;
		/**表示是否只执行一次。如果为true，回调后执行recover()进行回收，回收后会被再利用，默认为false 。*/
		this.once=false;
		/**@private */
		this._id=0;
		(once===void 0)&& (once=false);
		this.setTo(caller,method,args,once);
	}

	__class(Handler,'laya.utils.Handler');
	var __proto=Handler.prototype;
	/**
	*设置此对象的指定属性值。
	*@param caller 执行域(this)。
	*@param method 回调方法。
	*@param args 携带的参数。
	*@param once 是否只执行一次，如果为true，执行后执行recover()进行回收。
	*@return 返回 handler 本身。
	*/
	__proto.setTo=function(caller,method,args,once){
		this._id=Handler._gid++;
		this.caller=caller;
		this.method=method;
		this.args=args;
		this.once=once;
		return this;
	}

	/**
	*执行处理器。
	*/
	__proto.run=function(){
		if (this.method==null)return null;
		var id=this._id;
		var result=this.method.apply(this.caller,this.args);
		this._id===id && this.once && this.recover();
		return result;
	}

	/**
	*执行处理器，携带额外数据。
	*@param data 附加的回调数据，可以是单数据或者Array(作为多参)。
	*/
	__proto.runWith=function(data){
		if (this.method==null)return null;
		var id=this._id;
		if (data==null)
			var result=this.method.apply(this.caller,this.args);
		else if (!this.args && !data.unshift)result=this.method.call(this.caller,data);
		else if (this.args)result=this.method.apply(this.caller,this.args.concat(data));
		else result=this.method.apply(this.caller,data);
		this._id===id && this.once && this.recover();
		return result;
	}

	/**
	*清理对象引用。
	*/
	__proto.clear=function(){
		this.caller=null;
		this.method=null;
		this.args=null;
		return this;
	}

	/**
	*清理并回收到 Handler 对象池内。
	*/
	__proto.recover=function(){
		if (this._id > 0){
			this._id=0;
			Handler._pool.push(this.clear());
		}
	}

	Handler.create=function(caller,method,args,once){
		(once===void 0)&& (once=true);
		if (Handler._pool.length)return Handler._pool.pop().setTo(caller,method,args,once);
		return new Handler(caller,method,args,once);
	}

	Handler._pool=[];
	Handler._gid=1;
	return Handler;
})()


/**
*<code>BitmapFont</code> 是位图字体类，用于定义位图字体信息。
*/
//class laya.display.BitmapFont
var BitmapFont=(function(){
	function BitmapFont(){
		this._texture=null;
		this._fontCharDic={};
		this._fontWidthMap={};
		this._complete=null;
		this._path=null;
		this._maxWidth=0;
		this._spaceWidth=10;
		this._padding=null;
		/**当前位图字体字号。*/
		this.fontSize=12;
		/**表示是否根据实际使用的字体大小缩放位图字体大小。*/
		this.autoScaleSize=false;
		/**字符间距（以像素为单位）。*/
		this.letterSpacing=0;
	}

	__class(BitmapFont,'laya.display.BitmapFont');
	var __proto=BitmapFont.prototype;
	/**
	*通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。
	*@param path 位图字体文件的路径。
	*@param complete 加载并解析完成的回调。如果成功返回this,如果失败返回null
	*/
	__proto.loadFont=function(path,complete){
		this._path=path;
		this._complete=complete;
		Laya.loader.load([{url:this._path,type:/*laya.net.Loader.XML*/"xml"},{url:this._path.replace(".fnt",".png"),type:/*laya.net.Loader.IMAGE*/"image"}],Handler.create(this,this.onLoaded));
	}

	/**
	*@private
	*/
	__proto.onLoaded=function(){
		this.parseFont(Loader.getRes(this._path),Loader.getRes(this._path.replace(".fnt",".png")));
		this._complete && this._complete.runWith(this._texture?this:null);
	}

	/**
	*解析字体文件。
	*@param xml 字体文件XML。
	*@param texture 字体的纹理。
	*/
	__proto.parseFont=function(xml,texture){
		if (xml==null || texture==null)return;
		this._texture=texture;
		var tX=0;
		var tScale=1;
		var tInfo=xml.getElementsByTagName("info");
		if (!tInfo[0].getAttributeNode){
			return this.parseFont2(xml,texture);
		}
		this.fontSize=parseInt(tInfo[0].getAttributeNode("size").nodeValue);
		var tPadding=tInfo[0].getAttributeNode("padding").nodeValue;
		var tPaddingArray=tPadding.split(",");
		this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
		var chars;
		chars=xml.getElementsByTagName("char");
		var i=0;
		for (i=0;i < chars.length;i++){
			var tAttribute=chars[i];
			var tId=parseInt(tAttribute.getAttributeNode("id").nodeValue);
			var xOffset=parseInt(tAttribute.getAttributeNode("xoffset").nodeValue)/ tScale;
			var yOffset=parseInt(tAttribute.getAttributeNode("yoffset").nodeValue)/ tScale;
			var xAdvance=parseInt(tAttribute.getAttributeNode("xadvance").nodeValue)/ tScale;
			var region=new Rectangle();
			region.x=parseInt(tAttribute.getAttributeNode("x").nodeValue);
			region.y=parseInt(tAttribute.getAttributeNode("y").nodeValue);
			region.width=parseInt(tAttribute.getAttributeNode("width").nodeValue);
			region.height=parseInt(tAttribute.getAttributeNode("height").nodeValue);
			var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
			this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
			this._fontCharDic[tId]=tTexture;
			this._fontWidthMap[tId]=xAdvance;
		}
	}

	/**
	*@private
	*解析字体文件。
	*@param xml 字体文件XML。
	*@param texture 字体的纹理。
	*/
	__proto.parseFont2=function(xml,texture){
		if (xml==null || texture==null)return;
		this._texture=texture;
		var tX=0;
		var tScale=1;
		var tInfo=xml.getElementsByTagName("info");
		this.fontSize=parseInt(tInfo[0].attributes["size"].nodeValue);
		var tPadding=tInfo[0].attributes["padding"].nodeValue;
		var tPaddingArray=tPadding.split(",");
		this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
		var chars=xml.getElementsByTagName("char");
		var i=0;
		for (i=0;i < chars.length;i++){
			var tAttribute=chars[i].attributes;
			var tId=parseInt(tAttribute["id"].nodeValue);
			var xOffset=parseInt(tAttribute["xoffset"].nodeValue)/ tScale;
			var yOffset=parseInt(tAttribute["yoffset"].nodeValue)/ tScale;
			var xAdvance=parseInt(tAttribute["xadvance"].nodeValue)/ tScale;
			var region=new Rectangle();
			region.x=parseInt(tAttribute["x"].nodeValue);
			region.y=parseInt(tAttribute["y"].nodeValue);
			region.width=parseInt(tAttribute["width"].nodeValue);
			region.height=parseInt(tAttribute["height"].nodeValue);
			var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
			this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
			this._fontCharDic[tId]=tTexture;
			this._fontWidthMap[tId]=xAdvance;
		}
	}

	/**
	*获取指定字符的字体纹理对象。
	*@param char 字符。
	*@return 指定的字体纹理对象。
	*/
	__proto.getCharTexture=function(char){
		return this._fontCharDic[char.charCodeAt(0)];
	}

	/**
	*销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。
	*/
	__proto.destroy=function(){
		if (this._texture){
			for (var p in this._fontCharDic){
				var tTexture=this._fontCharDic[p];
				if (tTexture)tTexture.destroy();
			}
			this._texture.destroy();
			this._fontCharDic=null;
			this._fontWidthMap=null;
			this._texture=null;
		}
	}

	/**
	*设置空格的宽（如果字体库有空格，这里就可以不用设置了）。
	*@param spaceWidth 宽度，单位为像素。
	*/
	__proto.setSpaceWidth=function(spaceWidth){
		this._spaceWidth=spaceWidth;
	}

	/**
	*获取指定字符的宽度。
	*@param char 字符。
	*@return 宽度。
	*/
	__proto.getCharWidth=function(char){
		var code=char.charCodeAt(0);
		if (this._fontWidthMap[code])return this._fontWidthMap[code]+this.letterSpacing;
		if (char==" ")return this._spaceWidth+this.letterSpacing;
		return 0;
	}

	/**
	*获取指定文本内容的宽度。
	*@param text 文本内容。
	*@return 宽度。
	*/
	__proto.getTextWidth=function(text){
		var tWidth=0;
		for (var i=0,n=text.length;i < n;i++){
			tWidth+=this.getCharWidth(text.charAt(i));
		}
		return tWidth;
	}

	/**
	*获取最大字符宽度。
	*/
	__proto.getMaxWidth=function(){
		return this._maxWidth;
	}

	/**
	*获取最大字符高度。
	*/
	__proto.getMaxHeight=function(){
		return this.fontSize;
	}

	/**
	*@private
	*将指定的文本绘制到指定的显示对象上。
	*/
	__proto.drawText=function(text,sprite,drawX,drawY,align,width){
		var tWidth=this.getTextWidth(text);
		var tTexture;
		var dx=0;
		align==="center" && (dx=(width-tWidth)/ 2);
		align==="right" && (dx=(width-tWidth));
		var tX=0;
		for (var i=0,n=text.length;i < n;i++){
			tTexture=this.getCharTexture(text.charAt(i));
			if (tTexture){
				sprite.graphics.drawTexture(tTexture,drawX+tX+dx,drawY);
				tX+=this.getCharWidth(text.charAt(i));
			}
		}
	}

	return BitmapFont;
})()


/**
*@private
*<code>Style</code> 类是元素样式定义类。
*/
//class laya.display.css.Style
var Style=(function(){
	function Style(){
		/**透明度。*/
		this.alpha=1;
		/**表示是否显示。*/
		this.visible=true;
		/**表示滚动区域。*/
		this.scrollRect=null;
		/**混合模式。*/
		this.blendMode=null;
		/**@private */
		this._type=0;
		this._tf=Style._TF_EMPTY;
	}

	__class(Style,'laya.display.css.Style');
	var __proto=Style.prototype;
	__proto.getTransform=function(){
		return this._tf;
	}

	__proto.setTransform=function(value){
		this._tf=value==='none' || !value ? Style._TF_EMPTY :value;
	}

	__proto.setTranslateX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateX=value;
	}

	__proto.setTranslateY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateY=value;
	}

	__proto.setScaleX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=value;
	}

	__proto.setScale=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=x;
		this._tf.scaleY=y;
	}

	__proto.setScaleY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleY=value;
	}

	__proto.setRotate=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.rotate=value;
	}

	__proto.setSkewX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.skewX=value;
	}

	__proto.setSkewY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.skewY=value;
	}

	/**销毁此对象。*/
	__proto.destroy=function(){
		this.scrollRect=null;
	}

	/**@private */
	__proto.render=function(sprite,context,x,y){}
	/**@private */
	__proto.getCSSStyle=function(){
		return CSSStyle.EMPTY;
	}

	/**@private */
	__proto._enableLayout=function(){
		return false;
	}

	/**X 轴缩放值。*/
	__getset(0,__proto,'scaleX',function(){
		return this._tf.scaleX;
		},function(value){
		this.setScaleX(value);
	});

	/**元素应用的 2D 或 3D 转换的值。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/
	__getset(0,__proto,'transform',function(){
		return this.getTransform();
		},function(value){
		this.setTransform(value);
	});

	/**定义转换，只是用 X 轴的值。*/
	__getset(0,__proto,'translateX',function(){
		return this._tf.translateX;
		},function(value){
		this.setTranslateX(value);
	});

	/**定义转换，只是用 Y 轴的值。*/
	__getset(0,__proto,'translateY',function(){
		return this._tf.translateY;
		},function(value){
		this.setTranslateY(value);
	});

	/**Y 轴缩放值。*/
	__getset(0,__proto,'scaleY',function(){
		return this._tf.scaleY;
		},function(value){
		this.setScaleY(value);
	});

	/**表示元素是否显示为块级元素。*/
	__getset(0,__proto,'block',function(){
		return (this._type & 0x1)!=0;
	});

	/**定义沿着 Y 轴的 2D 倾斜转换。*/
	__getset(0,__proto,'skewY',function(){
		return this._tf.skewY;
		},function(value){
		this.setSkewY(value);
	});

	/**定义旋转角度。*/
	__getset(0,__proto,'rotate',function(){
		return this._tf.rotate;
		},function(value){
		this.setRotate(value);
	});

	/**定义沿着 X 轴的 2D 倾斜转换。*/
	__getset(0,__proto,'skewX',function(){
		return this._tf.skewX;
		},function(value){
		this.setSkewX(value);
	});

	/**表示元素的左内边距。*/
	__getset(0,__proto,'paddingLeft',function(){
		return 0;
	});

	/**表示元素的上内边距。*/
	__getset(0,__proto,'paddingTop',function(){
		return 0;
	});

	/**是否为绝对定位。*/
	__getset(0,__proto,'absolute',function(){
		return true;
	});

	Style.__init__=function(){
		Style._TF_EMPTY=new TransformInfo();
		Style.EMPTY=new Style();
	}

	Style.EMPTY=null;
	Style._TF_EMPTY=null;
	return Style;
})()


/**
*@private
*<code>Font</code> 类是字体显示定义类。
*/
//class laya.display.css.Font
var Font=(function(){
	function Font(src){
		this._type=0;
		this._weight=0;
		this._decoration=null;
		this._text=null;
		/**
		*首行缩进 （以像素为单位）。
		*/
		this.indent=0;
		this._color=Color.create(Font.defaultColor);
		this.family=Font.defaultFamily;
		this.stroke=Font._STROKE;
		this.size=Font.defaultSize;
		src && src!==Font.EMPTY && src.copyTo(this);
	}

	__class(Font,'laya.display.css.Font');
	var __proto=Font.prototype;
	/**
	*字体样式字符串。
	*/
	__proto.set=function(value){
		this._text=null;
		var strs=value.split(' ');
		for (var i=0,n=strs.length;i < n;i++){
			var str=strs[i];
			switch (str){
				case 'italic':
					this.italic=true;
					continue ;
				case 'bold':
					this.bold=true;
					continue ;
				}
			if (str.indexOf('px')> 0){
				this.size=parseInt(str);
				this.family=strs[i+1];
				i++;
				continue ;
			}
		}
	}

	/**
	*返回字体样式字符串。
	*@return 字体样式字符串。
	*/
	__proto.toString=function(){
		this._text=""
		this.italic && (this._text+="italic ");
		this.bold && (this._text+="bold ");
		return this._text+=this.size+"px "+this.family;
	}

	/**
	*将当前的属性值复制到传入的 <code>Font</code> 对象。
	*@param dec 一个 Font 对象。
	*/
	__proto.copyTo=function(dec){
		dec._type=this._type;
		dec._text=this._text;
		dec._weight=this._weight;
		dec._color=this._color;
		dec.family=this.family;
		dec.stroke=this.stroke !=Font._STROKE ? this.stroke.slice():Font._STROKE;
		dec.indent=this.indent;
		dec.size=this.size;
	}

	/**
	*表示是否为密码格式。
	*/
	__getset(0,__proto,'password',function(){
		return (this._type & 0x400)!==0;
		},function(value){
		value ? (this._type |=0x400):(this._type &=~0x400);
	});

	/**
	*表示颜色字符串。
	*/
	__getset(0,__proto,'color',function(){
		return this._color.strColor;
		},function(value){
		this._color=Color.create(value);
	});

	/**
	*表示是否为斜体。
	*/
	__getset(0,__proto,'italic',function(){
		return (this._type & 0x200)!==0;
		},function(value){
		value ? (this._type |=0x200):(this._type &=~0x200);
	});

	/**
	*表示是否为粗体。
	*/
	__getset(0,__proto,'bold',function(){
		return (this._type & 0x800)!==0;
		},function(value){
		value ? (this._type |=0x800):(this._type &=~0x800);
	});

	/**
	*文本的粗细。
	*/
	__getset(0,__proto,'weight',function(){
		return ""+this._weight;
		},function(value){
		var weight=0;
		switch (value){
			case 'normal':
				break ;
			case 'bold':
				this.bold=true;
				weight=700;
				break ;
			case 'bolder':
				weight=800;
				break ;
			case 'lighter':
				weight=100;
				break ;
			default :
				weight=parseInt(value);
			}
		this._weight=weight;
		this._text=null;
	});

	/**
	*规定添加到文本的修饰。
	*/
	__getset(0,__proto,'decoration',function(){
		return this._decoration ? this._decoration.value :"none";
		},function(value){
		var strs=value.split(' ');
		this._decoration || (this._decoration={});
		switch (strs[0]){
			case '_':
				this._decoration.type='underline'
				break ;
			case '-':
				this._decoration.type='line-through'
				break ;
			case 'overline':
				this._decoration.type='overline'
				break ;
			default :
				this._decoration.type=strs[0];
			}
		strs[1] && (this._decoration.color=Color.create(strs));
		this._decoration.value=value;
	});

	Font.__init__=function(){
		Font.EMPTY=new Font(null);
	}

	Font.EMPTY=null;
	Font.defaultColor="#000000";
	Font.defaultSize=12;
	Font.defaultFamily="Arial";
	Font.defaultFont="12px Arial";
	Font._ITALIC=0x200;
	Font._PASSWORD=0x400;
	Font._BOLD=0x800;
	__static(Font,
	['_STROKE',function(){return this._STROKE=[0,"#000000"];}
	]);
	return Font;
})()


/**
*@private
*/
//class laya.display.css.TransformInfo
var TransformInfo=(function(){
	function TransformInfo(){
		this.translateX=0;
		this.translateY=0;
		this.scaleX=1;
		this.scaleY=1;
		this.rotate=0;
		this.skewX=0;
		this.skewY=0;
	}

	__class(TransformInfo,'laya.display.css.TransformInfo');
	return TransformInfo;
})()


/**
*<code>Graphics</code> 类用于创建绘图显示对象。Graphics可以同时绘制多个位图或者矢量图，还可以结合save，restore，transform，scale，rotate，translate，alpha等指令对绘图效果进行变化。
*Graphics以命令流方式存储，可以通过cmds属性访问所有命令流。Graphics是比Sprite更轻量级的对象，合理使用能提高应用性能(比如把大量的节点绘图改为一个节点的Graphics命令集合，能减少大量节点创建消耗)。
*@see laya.display.Sprite#graphics
*/
//class laya.display.Graphics
var Graphics=(function(){
	function Graphics(){
		/**@private */
		//this._sp=null;
		/**@private */
		this._one=null;
		/**@private */
		this._cmds=null;
		/**@private */
		//this._vectorgraphArray=null;
		/**@private */
		//this._graphicBounds=null;
		this._render=this._renderEmpty;
		if (Render.isConchNode){
			var _this_=this;
			_this_._nativeObj=new (window)._conchGraphics();
			_this_.id=_this_._nativeObj.conchID;
		}
	}

	__class(Graphics,'laya.display.Graphics');
	var __proto=Graphics.prototype;
	/**
	*<p>销毁此对象。</p>
	*/
	__proto.destroy=function(){
		this.clear();
		if (this._graphicBounds)this._graphicBounds.destroy();
		this._graphicBounds=null;
		this._vectorgraphArray=null;
		this._sp && (this._sp._renderType=0);
		this._sp=null;
	}

	/**
	*<p>清空绘制命令。</p>
	*@param recoverCmds 是否回收绘图指令
	*/
	__proto.clear=function(recoverCmds){
		(recoverCmds===void 0)&& (recoverCmds=false);
		var i=0,len=0;
		if (recoverCmds){
			var tCmd=this._one;
			if (this._cmds){
				len=this._cmds.length;
				for (i=0;i < len;i++){
					tCmd=this._cmds[i];
					if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
						tCmd[0]=null;
						Graphics._cache.push(tCmd);
					}
				}
				this._cmds.length=0;
				}else if (tCmd){
				if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
					tCmd[0]=null;
					Graphics._cache.push(tCmd);
				}
			}
			}else {
			this._cmds=null;
		}
		this._one=null;
		this._render=this._renderEmpty;
		this._sp && (this._sp._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01 & ~ /*laya.renders.RenderSprite.GRAPHICS*/0x200);
		this._repaint();
		if (this._vectorgraphArray){
			for (i=0,len=this._vectorgraphArray.length;i < len;i++){
				VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[i]);
			}
			this._vectorgraphArray.length=0;
		}
	}

	/**@private */
	__proto._clearBoundsCache=function(){
		if (this._graphicBounds)this._graphicBounds.reset();
	}

	/**@private */
	__proto._initGraphicBounds=function(){
		if (!this._graphicBounds){
			this._graphicBounds=new GraphicsBounds();
			this._graphicBounds._graphics=this;
		}
	}

	/**
	*@private
	*重绘此对象。
	*/
	__proto._repaint=function(){
		this._clearBoundsCache();
		this._sp && this._sp.repaint();
	}

	/**@private */
	__proto._isOnlyOne=function(){
		return !this._cmds || this._cmds.length===0;
	}

	/**
	*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 位置与宽高组成的 一个 Rectangle 对象。
	*/
	__proto.getBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		this._initGraphicBounds();
		return this._graphicBounds.getBounds(realSize);
	}

	/**
	*@private
	*@param realSize （可选）使用图片的真实大小，默认为false
	*获取端点列表。
	*/
	__proto.getBoundPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		this._initGraphicBounds();
		return this._graphicBounds.getBoundPoints(realSize);
	}

	__proto._addCmd=function(a){
		this._cmds=this._cmds || [];
		a.callee=a.shift();
		this._cmds.push(a);
	}

	__proto.setFilters=function(fs){
		this._saveToCmd(Render._context._setFilters,fs);
	}

	/**
	*绘制纹理。
	*@param tex 纹理。
	*@param x （可选）X轴偏移量。
	*@param y （可选）Y轴偏移量。
	*@param width （可选）宽度。
	*@param height （可选）高度。
	*@param m （可选）矩阵信息。
	*@param alpha （可选）透明度。
	*/
	__proto.drawTexture=function(tex,x,y,width,height,m,alpha){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(alpha===void 0)&& (alpha=1);
		if (!tex || alpha < 0.01)return null;
		if (!width)width=tex.sourceWidth;
		if (!height)height=tex.sourceHeight;
		alpha=alpha < 0 ? 0 :(alpha > 1 ? 1 :alpha);
		var wRate=width / tex.sourceWidth;
		var hRate=height / tex.sourceHeight;
		width=tex.width *wRate;
		height=tex.height *hRate;
		if (tex.loaded && (width <=0 || height <=0))return null;
		x+=tex.offsetX *wRate;
		y+=tex.offsetY *hRate;
		this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
		var args;
		if (Graphics._cache.length){
			args=Graphics._cache.pop();
			args[0]=tex;
			args[1]=x;
			args[2]=y;
			args[3]=width;
			args[4]=height;
			args[5]=m;
			args[6]=alpha;
			}else {
			args=[tex,x,y,width,height,m,alpha];
		}
		args.callee=(m || alpha !=1)? Render._context._drawTextureWithTransform :Render._context._drawTexture;
		if (this._one==null && !m && alpha==1){
			this._one=args;
			this._render=this._renderOneImg;
			}else {
			this._saveToCmd(args.callee,args);
		}
		if (!tex.loaded){
			tex.once(/*laya.events.Event.LOADED*/"loaded",this,this._textureLoaded,[tex,args]);
		}
		this._repaint();
		return args;
	}

	/**
	*@private 清理贴图并替换为最新的
	*@param tex
	*/
	__proto.cleanByTexture=function(tex,x,y,width,height){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		if (!tex)return this.clear();
		if (this._one && this._render===this._renderOneImg){
			if (!width)width=tex.sourceWidth;
			if (!height)height=tex.sourceHeight;
			var wRate=width / tex.sourceWidth;
			var hRate=height / tex.sourceHeight;
			width=tex.width *wRate;
			height=tex.height *hRate;
			x+=tex.offsetX *wRate;
			y+=tex.offsetY *hRate;
			this._one[0]=tex;
			this._one[1]=x;
			this._one[2]=y;
			this._one[3]=width;
			this._one[4]=height;
			}else {
			this.clear();
			tex && this.drawTexture(tex,x,y,width,height);
		}
	}

	/**
	*批量绘制同样纹理。
	*@param tex 纹理。
	*@param pos 绘制坐标。
	*/
	__proto.drawTextures=function(tex,pos){
		if (!tex)return;
		this._saveToCmd(Render._context._drawTextures,[tex,pos]);
	}

	/**
	*用texture填充。
	*@param tex 纹理。
	*@param x X轴偏移量。
	*@param y Y轴偏移量。
	*@param width （可选）宽度。
	*@param height （可选）高度。
	*@param type （可选）填充类型 repeat|repeat-x|repeat-y|no-repeat
	*@param offset （可选）贴图纹理偏移
	*/
	__proto.fillTexture=function(tex,x,y,width,height,type,offset){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(type===void 0)&& (type="repeat");
		if (!tex)return;
		var args=[tex,x,y,width,height,type,offset || Point.EMPTY,{}];
		if (!tex.loaded){
			tex.once(/*laya.events.Event.LOADED*/"loaded",this,this._textureLoaded,[tex,args]);
		}
		this._saveToCmd(Render._context._fillTexture,args);
	}

	__proto._textureLoaded=function(tex,param){
		param[3]=param[3] || tex.width;
		param[4]=param[4] || tex.height;
		this._repaint();
	}

	/**
	*@private
	*保存到命令流。
	*/
	__proto._saveToCmd=function(fun,args){
		this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
		if (this._one==null){
			this._one=args;
			this._render=this._renderOne;
			}else {
			this._sp && (this._sp._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01);
			this._render=this._renderAll;
			(this._cmds || (this._cmds=[])).length===0 && this._cmds.push(this._one);
			this._cmds.push(args);
		}
		args.callee=fun;
		this._repaint();
		return args;
	}

	/**
	*设置剪裁区域，超出剪裁区域的坐标不显示。
	*@param x X 轴偏移量。
	*@param y Y 轴偏移量。
	*@param width 宽度。
	*@param height 高度。
	*/
	__proto.clipRect=function(x,y,width,height){
		this._saveToCmd(Render._context._clipRect,[x,y,width,height]);
	}

	/**
	*在画布上绘制文本。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字号和字体，比如"20px Arial"。
	*@param color 定义文本颜色，比如"#ff0000"。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.fillText=function(text,x,y,font,color,textAlign,underLine){
		(underLine===void 0)&& (underLine=0);
		this._saveToCmd(Render._context._fillText,[text,x,y,font || Font.defaultFont,color,textAlign]);
	}

	/**
	*在画布上绘制“被填充且镶边的”文本。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字体和字号，比如"20px Arial"。
	*@param fillColor 定义文本颜色，比如"#ff0000"。
	*@param borderColor 定义镶边文本颜色。
	*@param lineWidth 镶边线条宽度。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
		this._saveToCmd(Render._context._fillBorderText,[text,x,y,font || Font.defaultFont,fillColor,borderColor,lineWidth,textAlign]);
	}

	/**
	*在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字体和字号，比如"20px Arial"。
	*@param color 定义文本颜色，比如"#ff0000"。
	*@param lineWidth 线条宽度。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		this._saveToCmd(Render._context._strokeText,[text,x,y,font || Font.defaultFont,color,lineWidth,textAlign]);
	}

	/**
	*设置透明度。
	*@param value 透明度。
	*/
	__proto.alpha=function(value){
		value=value < 0 ? 0 :(value > 1 ? 1 :value);
		this._saveToCmd(Render._context._alpha,[value]);
	}

	/**
	*设置当前透明度。
	*@param value 透明度。
	*/
	__proto.setAlpha=function(value){
		value=value < 0 ? 0 :(value > 1 ? 1 :value);
		this._saveToCmd(Render._context._setAlpha,[value]);
	}

	/**
	*替换绘图的当前转换矩阵。
	*@param mat 矩阵。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.transform=function(matrix,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._transform,[matrix,pivotX,pivotY]);
	}

	/**
	*旋转当前绘图。(推荐使用transform，性能更高)
	*@param angle 旋转角度，以弧度计。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.rotate=function(angle,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._rotate,[angle,pivotX,pivotY]);
	}

	/**
	*缩放当前绘图至更大或更小。(推荐使用transform，性能更高)
	*@param scaleX 水平方向缩放值。
	*@param scaleY 垂直方向缩放值。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.scale=function(scaleX,scaleY,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._scale,[scaleX,scaleY,pivotX,pivotY]);
	}

	/**
	*重新映射画布上的 (0,0)位置。
	*@param x 添加到水平坐标（x）上的值。
	*@param y 添加到垂直坐标（y）上的值。
	*/
	__proto.translate=function(x,y){
		this._saveToCmd(Render._context._translate,[x,y]);
	}

	/**
	*保存当前环境的状态。
	*/
	__proto.save=function(){
		this._saveToCmd(Render._context._save,[]);
	}

	/**
	*返回之前保存过的路径状态和属性。
	*/
	__proto.restore=function(){
		this._saveToCmd(Render._context._restore,[]);
	}

	/**
	*@private
	*替换文本内容。
	*@param text 文本内容。
	*@return 替换成功则值为true，否则值为flase。
	*/
	__proto.replaceText=function(text){
		this._repaint();
		var cmds=this._cmds;
		if (!cmds){
			if (this._one && this._isTextCmd(this._one.callee)){
				if (this._one[0].toUpperCase)this._one[0]=text;
				else this._one[0].setText(text);
				return true;
			}
			}else {
			for (var i=cmds.length-1;i >-1;i--){
				if (this._isTextCmd(cmds[i].callee)){
					if (cmds[i][0].toUpperCase)cmds[i][0]=text;
					else cmds[i][0].setText(text);
					return true;
				}
			}
		}
		return false;
	}

	/**@private */
	__proto._isTextCmd=function(fun){
		return fun===Render._context._fillText || fun===Render._context._fillBorderText || fun===Render._context._strokeText;
	}

	/**
	*@private
	*替换文本颜色。
	*@param color 颜色。
	*/
	__proto.replaceTextColor=function(color){
		this._repaint();
		var cmds=this._cmds;
		if (!cmds){
			if (this._one && this._isTextCmd(this._one.callee)){
				this._one[4]=color;
				if (!this._one[0].toUpperCase)this._one[0].changed=true;
			}
			}else {
			for (var i=cmds.length-1;i >-1;i--){
				if (this._isTextCmd(cmds[i].callee)){
					cmds[i][4]=color;
					if (!cmds[i][0].toUpperCase)cmds[i][0].changed=true;
				}
			}
		}
	}

	/**
	*加载并显示一个图片。
	*@param url 图片地址。
	*@param x （可选）显示图片的x位置。
	*@param y （可选）显示图片的y位置。
	*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
	*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
	*@param complete （可选）加载完成回调。
	*/
	__proto.loadImage=function(url,x,y,width,height,complete){
		var _$this=this;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		var tex=Loader.getRes(url);
		if (tex)onloaded(tex);
		else Laya.loader.load(url,Handler.create(null,onloaded),null,/*laya.net.Loader.IMAGE*/"image");
		function onloaded (tex){
			if (tex){
				_$this.drawTexture(tex,x,y,width,height);
				if (complete !=null)complete.call(_$this._sp,tex);
			}
		}
	}

	/**
	*@private
	*/
	__proto._renderEmpty=function(sprite,context,x,y){}
	/**
	*@private
	*/
	__proto._renderAll=function(sprite,context,x,y){
		var cmds=this._cmds,cmd;
		for (var i=0,n=cmds.length;i < n;i++){
			(cmd=cmds[i]).callee.call(context,x,y,cmd);
		}
	}

	/**
	*@private
	*/
	__proto._renderOne=function(sprite,context,x,y){
		this._one.callee.call(context,x,y,this._one);
	}

	/**
	*@private
	*/
	__proto._renderOneImg=function(sprite,context,x,y){
		this._one.callee.call(context,x,y,this._one);
		if (sprite._renderType!==2305){
			sprite._renderType |=/*laya.renders.RenderSprite.IMAGE*/0x01;
		}
	}

	/**
	*绘制一条线。
	*@param fromX X轴开始位置。
	*@param fromY Y轴开始位置。
	*@param toX X轴结束位置。
	*@param toY Y轴结束位置。
	*@param lineColor 颜色。
	*@param lineWidth （可选）线条宽度。
	*/
	__proto.drawLine=function(fromX,fromY,toX,toY,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var offset=lineWidth % 2===0 ? 0 :0.5;
		var arr=[fromX+offset,fromY+offset,toX+offset,toY+offset,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawLine,arr);
	}

	/**
	*绘制一系列线段。
	*@param x 开始绘制的X轴位置。
	*@param y 开始绘制的Y轴位置。
	*@param points 线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。
	*@param lineColor 线段颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）线段宽度。
	*/
	__proto.drawLines=function(x,y,points,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		if (!points || points.length < 4)return;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var offset=lineWidth % 2===0 ? 0 :0.5;
		var arr=[x+offset,y+offset,points,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawLines,arr);
	}

	/**
	*绘制一系列曲线。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param points 线段的点集合，格式[startx,starty,ctrx,ctry,startx,starty...]。
	*@param lineColor 线段颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）线段宽度。
	*/
	__proto.drawCurves=function(x,y,points,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var arr=[x,y,points,lineColor,lineWidth];
		this._saveToCmd(Render._context._drawCurves,arr);
	}

	/**
	*绘制矩形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param width 矩形宽度。
	*@param height 矩形高度。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawRect=function(x,y,width,height,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var lineOffset=lineColor ? lineWidth :0;
		var arr=[x+offset,y+offset,width-lineOffset,height-lineOffset,fillColor,lineColor,lineWidth];
		this._saveToCmd(Render._context._drawRect,arr);
	}

	/**
	*绘制圆形。
	*@param x 圆点X 轴位置。
	*@param y 圆点Y 轴位置。
	*@param radius 半径。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawCircle=function(x,y,radius,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var arr=[x,y,radius-offset,fillColor,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawCircle,arr);
	}

	/**
	*绘制扇形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param radius 扇形半径。
	*@param startAngle 开始角度。
	*@param endAngle 结束角度。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawPie=function(x,y,radius,startAngle,endAngle,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var lineOffset=lineColor ? lineWidth :0;
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var arr=[x+offset,y+offset,radius-lineOffset,startAngle,endAngle,fillColor,lineColor,lineWidth,tId];
		arr[3]=Utils.toRadian(startAngle);
		arr[4]=Utils.toRadian(endAngle);
		this._saveToCmd(Render._context._drawPie,arr);
	}

	/**
	*绘制多边形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param points 多边形的点集合。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawPoly=function(x,y,points,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		var tIsConvexPolygon=false;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
			if (points.length > 6){
				tIsConvexPolygon=false;
				}else {
				tIsConvexPolygon=true;
			}
		};
		var offset=lineColor ? (lineWidth % 2===0 ? 0 :0.5):0;
		var arr=[x+offset,y+offset,points,fillColor,lineColor,lineWidth,tId,tIsConvexPolygon];
		this._saveToCmd(Render._context._drawPoly,arr);
	}

	/**
	*绘制路径。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y,x,y,x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
	*@param brush （可选）刷子定义，支持以下设置{fillStyle}。
	*@param pen （可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin,lineCap,miterLimit}。
	*/
	__proto.drawPath=function(x,y,paths,brush,pen){
		var arr=[x,y,paths,brush,pen];
		this._saveToCmd(Render._context._drawPath,arr);
	}

	/**
	*@private
	*命令流。存储了所有绘制命令。
	*/
	__getset(0,__proto,'cmds',function(){
		return this._cmds;
		},function(value){
		this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
		this._cmds=value;
		this._render=this._renderAll;
		this._repaint();
	});

	Graphics.__init__=function(){
		if (Render.isConchNode){
			var from=laya.display.Graphics.prototype;
			var to=Browser.window.ConchGraphics.prototype;
			var list=["clear","destroy","alpha","rotate","transform","scale","translate","save","restore","clipRect","blendMode","fillText","fillBorderText","_fands","drawRect","drawCircle","drawPie","drawPoly","drawPath","drawImageM","drawLine","drawLines","_drawPs","drawCurves","replaceText","replaceTextColor","_fillImage","fillTexture","setSkinMesh","drawParticle","drawImageS"];
			for (var i=0,len=list.length;i <=len;i++){
				var temp=list[i];
				from[temp]=to[temp];
			}
			from._saveToCmd=null;
			if (to.drawImageS){
				from.drawTextures=function (tex,pos){
					if (!tex)return;
					if (!(tex.loaded && tex.bitmap && tex.source)){
						return;
					};
					var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
					this.drawImageS(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,tex.offsetX,tex.offsetY,tex.width,tex.height,pos);
				}
			}
			from.drawTexture=function (tex,x,y,width,height,m,alpha){
				(x===void 0)&& (x=0);
				(y===void 0)&& (y=0);
				(width===void 0)&& (width=0);
				(height===void 0)&& (height=0);
				(alpha===void 0)&& (alpha=1);
				if (!tex)return;
				if (!tex.loaded){
					tex.once(/*laya.events.Event.LOADED*/"loaded",this,function(){
						this.drawTexture(tex,x,y,width,height,m);
					});
					return;
				}
				if (!(tex.loaded && tex.bitmap && tex.source)){
					return;
				}
				if (!width)width=tex.sourceWidth;
				if (!height)height=tex.sourceHeight;
				alpha=alpha < 0 ? 0 :(alpha > 1 ? 1 :alpha);
				width=width-tex.sourceWidth+tex.width;
				height=height-tex.sourceHeight+tex.height;
				if (width <=0 || height <=0)return;
				x+=tex.offsetX;
				y+=tex.offsetY;
				var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
				this.drawImageM(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x,y,width,height,m,alpha);
				this._repaint();
			}
			from.fillTexture=function (tex,x,y,width,height,type,offset){
				(width===void 0)&& (width=0);
				(height===void 0)&& (height=0);
				(type===void 0)&& (type="repeat");
				if (!tex)return;
				if (tex.loaded){
					var ctxi=Render._context.ctx;
					var w=tex.bitmap.width,h=tex.bitmap.height,uv=tex.uv;
					var pat;
					if (tex.uv !=Texture.DEF_UV){
						pat=ctxi.createPattern(tex.bitmap.source,type,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h);
						}else {
						pat=ctxi.createPattern(tex.bitmap.source,type);
					};
					var sX=0,sY=0;
					if (offset){
						x+=offset.x % tex.width;
						y+=offset.y % tex.height;
						sX-=offset.x % tex.width;
						sY-=offset.y % tex.height;
					}
					this._fillImage(pat,x,y,sX,sY,width,height);
				}
			}
		}
	}

	Graphics._cache=[];
	return Graphics;
})()


/**
*@private
*Graphic bounds数据类
*/
//class laya.display.GraphicsBounds
var GraphicsBounds=(function(){
	function GraphicsBounds(){
		/**@private */
		//this._temp=null;
		/**@private */
		//this._bounds=null;
		/**@private */
		//this._rstBoundPoints=null;
		/**@private */
		this._cacheBoundsType=false;
		/**@private */
		//this._graphics=null;
	}

	__class(GraphicsBounds,'laya.display.GraphicsBounds');
	var __proto=GraphicsBounds.prototype;
	/**
	*销毁
	*/
	__proto.destroy=function(){
		this._graphics=null;
		this._temp=null;
		this._rstBoundPoints=null;
		this._bounds=null;
	}

	/**
	*重置数据
	*/
	__proto.reset=function(){
		this._temp && (this._temp.length=0);
	}

	/**
	*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 位置与宽高组成的 一个 Rectangle 对象。
	*/
	__proto.getBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._bounds || !this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType){
			this._bounds=Rectangle._getWrapRec(this.getBoundPoints(realSize),this._bounds)
		}
		this._cacheBoundsType=realSize;
		return this._bounds;
	}

	/**
	*@private
	*@param realSize （可选）使用图片的真实大小，默认为false
	*获取端点列表。
	*/
	__proto.getBoundPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType)
			this._temp=this._getCmdPoints(realSize);
		this._cacheBoundsType=realSize;
		return this._rstBoundPoints=Utils.copyArray(this._rstBoundPoints,this._temp);
	}

	__proto._getCmdPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		var context=Render._context;
		var cmds=this._graphics.cmds;
		var rst;
		rst=this._temp || (this._temp=[]);
		rst.length=0;
		if (!cmds && this._graphics._one !=null){
			GraphicsBounds._tempCmds.length=0;
			GraphicsBounds._tempCmds.push(this._graphics._one);
			cmds=GraphicsBounds._tempCmds;
		}
		if (!cmds)
			return rst;
		var matrixs;
		matrixs=GraphicsBounds._tempMatrixArrays;
		matrixs.length=0;
		var tMatrix=GraphicsBounds._initMatrix;
		tMatrix.identity();
		var tempMatrix=GraphicsBounds._tempMatrix;
		var cmd;
		var tex;
		var wRate=NaN;
		var hRate=NaN;
		var oWidth=NaN;
		var oHeight=NaN;
		var offX=NaN;
		var offY=NaN;
		for (var i=0,n=cmds.length;i < n;i++){
			cmd=cmds[i];
			if (!cmd.callee)continue ;
			switch (cmd.callee){
				case context._save:
				case 7:
					matrixs.push(tMatrix);
					tMatrix=tMatrix.clone();
					break ;
				case context._restore:
				case 8:
					tMatrix=matrixs.pop();
					break ;
				case context._scale:
				case 5:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[2],-cmd[3]);
					tempMatrix.scale(cmd[0],cmd[1]);
					tempMatrix.translate(cmd[2],cmd[3]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._rotate:
				case 3:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[1],-cmd[2]);
					tempMatrix.rotate(cmd[0]);
					tempMatrix.translate(cmd[1],cmd[2]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._translate:
				case 6:
					tempMatrix.identity();
					tempMatrix.translate(cmd[0],cmd[1]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._transform:
				case 4:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[1],-cmd[2]);
					tempMatrix.concat(cmd[0]);
					tempMatrix.translate(cmd[1],cmd[2]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case 16:
				case 24:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
					break ;
				case 17:
					tMatrix.copyTo(tempMatrix);
					tempMatrix.concat(cmd[4]);
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tempMatrix);
					break ;
				case context._drawTexture:
					tex=cmd[0];
					if (realSize){
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
						}
						}else {
						wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
						hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
						oWidth=wRate *tex.sourceWidth;
						oHeight=hRate *tex.sourceHeight;
						offX=tex.offsetX > 0 ? tex.offsetX :0;
						offY=tex.offsetY > 0 ? tex.offsetY :0;
						offX *=wRate;
						offY *=hRate;
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),tMatrix);
					}
					break ;
				case context._fillTexture:
					if (cmd[3] && cmd[4]){
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
						}else {
						tex=cmd[0];
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
					}
					break ;
				case context._drawTextureWithTransform:;
					var drawMatrix;
					if (cmd[5]){
						tMatrix.copyTo(tempMatrix);
						tempMatrix.concat(cmd[5]);
						drawMatrix=tempMatrix;
						}else {
						drawMatrix=tMatrix;
					}
					if (realSize){
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),drawMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),drawMatrix);
						}
						}else {
						tex=cmd[0];
						wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
						hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
						oWidth=wRate *tex.sourceWidth;
						oHeight=hRate *tex.sourceHeight;
						offX=tex.offsetX > 0 ? tex.offsetX :0;
						offY=tex.offsetY > 0 ? tex.offsetY :0;
						offX *=wRate;
						offY *=hRate;
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),drawMatrix);
					}
					break ;
				case context._drawRect:
				case 13:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
					break ;
				case context._drawCircle:
				case context._fillCircle:
				case 14:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0]-cmd[2],cmd[1]-cmd[2],cmd[2]+cmd[2],cmd[2]+cmd[2]),tMatrix);
					break ;
				case context._drawLine:
				case 20:
					GraphicsBounds._tempPoints.length=0;
					var lineWidth=NaN;
					lineWidth=cmd[5] *0.5;
					if (cmd[0]==cmd[2]){
						GraphicsBounds._tempPoints.push(cmd[0]+lineWidth,cmd[1],cmd[2]+lineWidth,cmd[3],cmd[0]-lineWidth,cmd[1],cmd[2]-lineWidth,cmd[3]);
						}else if (cmd[1]==cmd[3]){
						GraphicsBounds._tempPoints.push(cmd[0],cmd[1]+lineWidth,cmd[2],cmd[3]+lineWidth,cmd[0],cmd[1]-lineWidth,cmd[2],cmd[3]-lineWidth);
						}else {
						GraphicsBounds._tempPoints.push(cmd[0],cmd[1],cmd[2],cmd[3]);
					}
					GraphicsBounds._addPointArrToRst(rst,GraphicsBounds._tempPoints,tMatrix);
					break ;
				case context._drawCurves:
				case 22:
					GraphicsBounds._addPointArrToRst(rst,Bezier.I.getBezierPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPoly:
				case context._drawLines:
				case 18:
					GraphicsBounds._addPointArrToRst(rst,cmd[2],tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPath:
				case 19:
					GraphicsBounds._addPointArrToRst(rst,this._getPathPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPie:
				case 15:
					GraphicsBounds._addPointArrToRst(rst,this._getPiePoints(cmd[0],cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
					break ;
				}
		}
		if (rst.length > 200){
			rst=Utils.copyArray(rst,Rectangle._getWrapRec(rst)._getBoundPoints());
		}else if (rst.length > 8)
		rst=GrahamScan.scanPList(rst);
		return rst;
	}

	__proto._switchMatrix=function(tMatix,tempMatrix){
		tempMatrix.concat(tMatix);
		tempMatrix.copyTo(tMatix);
	}

	__proto._getPiePoints=function(x,y,radius,startAngle,endAngle){
		var rst=GraphicsBounds._tempPoints;
		GraphicsBounds._tempPoints.length=0;
		rst.push(x,y);
		var delta=(endAngle-startAngle)% (2 *Math.PI);
		var segnum=10;
		var step=delta / segnum;
		var i=NaN;
		var angle=startAngle;
		for (i=0;i <=segnum;i++){
			rst.push(x+radius *Math.cos(angle),y+radius *Math.sin(angle));
			angle+=step;
		}
		return rst;
	}

	__proto._getPathPoints=function(paths){
		var i=0,len=0;
		var rst=GraphicsBounds._tempPoints;
		rst.length=0;
		len=paths.length;
		var tCMD;
		for (i=0;i < len;i++){
			tCMD=paths[i];
			if (tCMD.length > 1){
				rst.push(tCMD[1],tCMD[2]);
				if (tCMD.length > 3){
					rst.push(tCMD[3],tCMD[4]);
				}
			}
		}
		return rst;
	}

	GraphicsBounds._addPointArrToRst=function(rst,points,matrix,dx,dy){
		(dx===void 0)&& (dx=0);
		(dy===void 0)&& (dy=0);
		var i=0,len=0;
		len=points.length;
		for (i=0;i < len;i+=2){
			GraphicsBounds._addPointToRst(rst,points[i]+dx,points[i+1]+dy,matrix);
		}
	}

	GraphicsBounds._addPointToRst=function(rst,x,y,matrix){
		var _tempPoint=Point.TEMP;
		_tempPoint.setTo(x ? x :0,y ? y :0);
		matrix.transformPoint(_tempPoint);
		rst.push(_tempPoint.x,_tempPoint.y);
	}

	GraphicsBounds._tempPoints=[];
	GraphicsBounds._tempMatrixArrays=[];
	GraphicsBounds._tempCmds=[];
	__static(GraphicsBounds,
	['_tempMatrix',function(){return this._tempMatrix=new Matrix();},'_initMatrix',function(){return this._initMatrix=new Matrix();}
	]);
	return GraphicsBounds;
})()


/**
*<code>Event</code> 是事件类型的集合。一般当发生事件时，<code>Event</code> 对象将作为参数传递给事件侦听器。
*/
//class laya.events.Event
var Event=(function(){
	function Event(){
		/**事件类型。*/
		//this.type=null;
		/**原生浏览器事件。*/
		//this.nativeEvent=null;
		/**事件目标触发对象。*/
		//this.target=null;
		/**事件当前冒泡对象。*/
		//this.currentTarget=null;
		/**@private */
		//this._stoped=false;
		/**分配给触摸点的唯一标识号（作为 int）。*/
		//this.touchId=0;
		/**键盘值*/
		//this.keyCode=0;
		/**滚轮滑动增量*/
		//this.delta=0;
	}

	__class(Event,'laya.events.Event');
	var __proto=Event.prototype;
	/**
	*设置事件数据。
	*@param type 事件类型。
	*@param currentTarget 事件目标触发对象。
	*@param target 事件当前冒泡对象。
	*@return 返回当前 Event 对象。
	*/
	__proto.setTo=function(type,currentTarget,target){
		this.type=type;
		this.currentTarget=currentTarget;
		this.target=target;
		return this;
	}

	/**
	*阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget)中的任何事件侦听器。
	*/
	__proto.stopPropagation=function(){
		this._stoped=true;
	}

	/**鼠标在 Stage 上的 Y 轴坐标*/
	__getset(0,__proto,'stageY',function(){
		return Laya.stage.mouseY;
	});

	/**
	*包含按下或释放的键的字符代码值。字符代码值为英文键盘值。
	*/
	__getset(0,__proto,'charCode',function(){
		return this.nativeEvent.charCode;
	});

	/**
	*触摸点列表。
	*/
	__getset(0,__proto,'touches',function(){
		var arr=this.nativeEvent.touches;
		if (arr){
			var stage=Laya.stage;
			for (var i=0,n=arr.length;i < n;i++){
				var e=arr[i];
				var point=Point.TEMP;
				point.setTo(e.clientX,e.clientY);
				stage._canvasTransform.invertTransformPoint(point);
				stage.transform.invertTransformPoint(point);
				e.stageX=point.x;
				e.stageY=point.y;
			}
		}
		return arr;
	});

	/**
	*表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。<br>
	*例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 KeyLocation.LEFT，右 Shift 键的值为 KeyLocation.RIGHT。另一个示例是区分标准键盘 (KeyLocation.STANDARD)与数字键盘 (KeyLocation.NUM_PAD)上按下的数字键。
	*/
	__getset(0,__proto,'keyLocation',function(){
		return this.nativeEvent.keyLocation;
	});

	/**
	*表示 Ctrl 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'ctrlKey',function(){
		return this.nativeEvent.ctrlKey;
	});

	/**
	*表示 Alt 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'altKey',function(){
		return this.nativeEvent.altKey;
	});

	/**
	*表示 Shift 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'shiftKey',function(){
		return this.nativeEvent.shiftKey;
	});

	/**鼠标在 Stage 上的 X 轴坐标*/
	__getset(0,__proto,'stageX',function(){
		return Laya.stage.mouseX;
	});

	Event.MOUSE_DOWN="mousedown";
	Event.MOUSE_UP="mouseup";
	Event.CLICK="click";
	Event.RIGHT_MOUSE_DOWN="rightmousedown";
	Event.RIGHT_MOUSE_UP="rightmouseup";
	Event.RIGHT_CLICK="rightclick";
	Event.MOUSE_MOVE="mousemove";
	Event.MOUSE_OVER="mouseover";
	Event.MOUSE_OUT="mouseout";
	Event.MOUSE_WHEEL="mousewheel";
	Event.ROLL_OVER="mouseover";
	Event.ROLL_OUT="mouseout";
	Event.DOUBLE_CLICK="doubleclick";
	Event.CHANGE="change";
	Event.CHANGED="changed";
	Event.RESIZE="resize";
	Event.ADDED="added";
	Event.REMOVED="removed";
	Event.DISPLAY="display";
	Event.UNDISPLAY="undisplay";
	Event.ERROR="error";
	Event.COMPLETE="complete";
	Event.LOADED="loaded";
	Event.PROGRESS="progress";
	Event.INPUT="input";
	Event.RENDER="render";
	Event.OPEN="open";
	Event.MESSAGE="message";
	Event.CLOSE="close";
	Event.KEY_DOWN="keydown";
	Event.KEY_PRESS="keypress";
	Event.KEY_UP="keyup";
	Event.FRAME="enterframe";
	Event.DRAG_START="dragstart";
	Event.DRAG_MOVE="dragmove";
	Event.DRAG_END="dragend";
	Event.ENTER="enter";
	Event.SELECT="select";
	Event.BLUR="blur";
	Event.FOCUS="focus";
	Event.VISIBILITY_CHANGE="visibilitychange";
	Event.FOCUS_CHANGE="focuschange";
	Event.PLAYED="played";
	Event.PAUSED="paused";
	Event.STOPPED="stopped";
	Event.START="start";
	Event.END="end";
	Event.ENABLE_CHANGED="enablechanged";
	Event.ACTIVE_IN_HIERARCHY_CHANGED="activeinhierarchychanged";
	Event.COMPONENT_ADDED="componentadded";
	Event.COMPONENT_REMOVED="componentremoved";
	Event.LAYER_CHANGED="layerchanged";
	Event.HIERARCHY_LOADED="hierarchyloaded";
	Event.RECOVERED="recovered";
	Event.RELEASED="released";
	Event.LINK="link";
	Event.LABEL="label";
	Event.FULL_SCREEN_CHANGE="fullscreenchange";
	Event.DEVICE_LOST="devicelost";
	Event.MESH_CHANGED="meshchanged";
	Event.MATERIAL_CHANGED="materialchanged";
	Event.WORLDMATRIX_NEEDCHANGE="worldmatrixneedchanged";
	Event.ANIMATION_CHANGED="animationchanged";
	Event.TRIGGER_ENTER="triggerenter";
	Event.TRIGGER_STAY="triggerstay";
	Event.TRIGGER_EXIT="triggerexit";
	Event.TRAIL_Filter_CHANGE="trailfilterchange";
	__static(Event,
	['EMPTY',function(){return this.EMPTY=new Event();}
	]);
	return Event;
})()


/**
*<code>Keyboard</code> 类的属性是一些常数，这些常数表示控制游戏时最常用的键。
*/
//class laya.events.Keyboard
var Keyboard=(function(){
	function Keyboard(){}
	__class(Keyboard,'laya.events.Keyboard');
	Keyboard.NUMBER_0=48;
	Keyboard.NUMBER_1=49;
	Keyboard.NUMBER_2=50;
	Keyboard.NUMBER_3=51;
	Keyboard.NUMBER_4=52;
	Keyboard.NUMBER_5=53;
	Keyboard.NUMBER_6=54;
	Keyboard.NUMBER_7=55;
	Keyboard.NUMBER_8=56;
	Keyboard.NUMBER_9=57;
	Keyboard.A=65;
	Keyboard.B=66;
	Keyboard.C=67;
	Keyboard.D=68;
	Keyboard.E=69;
	Keyboard.F=70;
	Keyboard.G=71;
	Keyboard.H=72;
	Keyboard.I=73;
	Keyboard.J=74;
	Keyboard.K=75;
	Keyboard.L=76;
	Keyboard.M=77;
	Keyboard.N=78;
	Keyboard.O=79;
	Keyboard.P=80;
	Keyboard.Q=81;
	Keyboard.R=82;
	Keyboard.S=83;
	Keyboard.T=84;
	Keyboard.U=85;
	Keyboard.V=86;
	Keyboard.W=87;
	Keyboard.X=88;
	Keyboard.Y=89;
	Keyboard.Z=90;
	Keyboard.F1=112;
	Keyboard.F2=113;
	Keyboard.F3=114;
	Keyboard.F4=115;
	Keyboard.F5=116;
	Keyboard.F6=117;
	Keyboard.F7=118;
	Keyboard.F8=119;
	Keyboard.F9=120;
	Keyboard.F10=121;
	Keyboard.F11=122;
	Keyboard.F12=123;
	Keyboard.F13=124;
	Keyboard.F14=125;
	Keyboard.F15=126;
	Keyboard.NUMPAD=21;
	Keyboard.NUMPAD_0=96;
	Keyboard.NUMPAD_1=97;
	Keyboard.NUMPAD_2=98;
	Keyboard.NUMPAD_3=99;
	Keyboard.NUMPAD_4=100;
	Keyboard.NUMPAD_5=101;
	Keyboard.NUMPAD_6=102;
	Keyboard.NUMPAD_7=103;
	Keyboard.NUMPAD_8=104;
	Keyboard.NUMPAD_9=105;
	Keyboard.NUMPAD_ADD=107;
	Keyboard.NUMPAD_DECIMAL=110;
	Keyboard.NUMPAD_DIVIDE=111;
	Keyboard.NUMPAD_ENTER=108;
	Keyboard.NUMPAD_MULTIPLY=106;
	Keyboard.NUMPAD_SUBTRACT=109;
	Keyboard.SEMICOLON=186;
	Keyboard.EQUAL=187;
	Keyboard.COMMA=188;
	Keyboard.MINUS=189;
	Keyboard.PERIOD=190;
	Keyboard.SLASH=191;
	Keyboard.BACKQUOTE=192;
	Keyboard.LEFTBRACKET=219;
	Keyboard.BACKSLASH=220;
	Keyboard.RIGHTBRACKET=221;
	Keyboard.QUOTE=222;
	Keyboard.ALTERNATE=18;
	Keyboard.BACKSPACE=8;
	Keyboard.CAPS_LOCK=20;
	Keyboard.COMMAND=15;
	Keyboard.CONTROL=17;
	Keyboard.DELETE=46;
	Keyboard.ENTER=13;
	Keyboard.ESCAPE=27;
	Keyboard.PAGE_UP=33;
	Keyboard.PAGE_DOWN=34;
	Keyboard.END=35;
	Keyboard.HOME=36;
	Keyboard.LEFT=37;
	Keyboard.UP=38;
	Keyboard.RIGHT=39;
	Keyboard.DOWN=40;
	Keyboard.SHIFT=16;
	Keyboard.SPACE=32;
	Keyboard.TAB=9;
	Keyboard.INSERT=45;
	return Keyboard;
})()


/**
*<p><code>KeyBoardManager</code> 是键盘事件管理类。该类从浏览器中接收键盘事件，并派发该事件。</p>
*<p>派发事件时若 Stage.focus 为空则只从 Stage 上派发该事件，否则将从 Stage.focus 对象开始一直冒泡派发该事件。所以在 Laya.stage 上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件。</p>
*<p>用户可以通过代码 Laya.stage.focus=someNode 的方式来设置focus对象。</p>
*<p>用户可统一的根据事件对象中 e.keyCode 来判断按键类型，该属性兼容了不同浏览器的实现。</p>
*/
//class laya.events.KeyBoardManager
var KeyBoardManager=(function(){
	function KeyBoardManager(){}
	__class(KeyBoardManager,'laya.events.KeyBoardManager');
	KeyBoardManager.__init__=function(){
		KeyBoardManager._addEvent("keydown");
		KeyBoardManager._addEvent("keypress");
		KeyBoardManager._addEvent("keyup");
	}

	KeyBoardManager._addEvent=function(type){
		Browser.document.addEventListener(type,function(e){
			laya.events.KeyBoardManager._dispatch(e,type);
		},true);
	}

	KeyBoardManager._dispatch=function(e,type){
		if (!KeyBoardManager.enabled)return;
		KeyBoardManager._event._stoped=false;
		KeyBoardManager._event.nativeEvent=e;
		KeyBoardManager._event.keyCode=e.keyCode || e.which || e.charCode;
		if (type==="keydown")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=true;
		else if (type==="keyup")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=null;
		var target=(Laya.stage.focus && (Laya.stage.focus.event !=null)&& Laya.stage.focus.displayedInStage)? Laya.stage.focus :Laya.stage;
		var ct=target;
		while (ct){
			ct.event(type,KeyBoardManager._event.setTo(type,ct,target));
			ct=ct.parent;
		}
	}

	KeyBoardManager.hasKeyDown=function(key){
		return KeyBoardManager._pressKeys[key];
	}

	KeyBoardManager._pressKeys={};
	KeyBoardManager.enabled=true;
	__static(KeyBoardManager,
	['_event',function(){return this._event=new Event();}
	]);
	return KeyBoardManager;
})()


/**
*<p><code>KeyLocation</code> 类包含表示在键盘或类似键盘的输入设备上按键位置的常量。</p>
*<p><code>KeyLocation</code> 常数用在键盘事件对象的 <code>keyLocation </code>属性中。</p>
*/
//class laya.events.KeyLocation
var KeyLocation=(function(){
	function KeyLocation(){}
	__class(KeyLocation,'laya.events.KeyLocation');
	KeyLocation.STANDARD=0;
	KeyLocation.LEFT=1;
	KeyLocation.RIGHT=2;
	KeyLocation.NUM_PAD=3;
	return KeyLocation;
})()


/**
*<p><code>MouseManager</code> 是鼠标、触摸交互管理器。</p>
*<p>鼠标事件流包括捕获阶段、目标阶段、冒泡阶段。<br/>
*捕获阶段：此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象；<br/>
*目标阶段：找到命中的目标对象；<br/>
*冒泡阶段：事件离开目标对象，按节点层级向上逐层通知，直到到达舞台的过程。</p>
*/
//class laya.events.MouseManager
var MouseManager=(function(){
	function MouseManager(){
		/**canvas 上的鼠标X坐标。*/
		this.mouseX=0;
		/**canvas 上的鼠标Y坐标。*/
		this.mouseY=0;
		/**是否禁用除 stage 以外的鼠标事件检测。*/
		this.disableMouseEvent=false;
		/**鼠标按下的时间。单位为毫秒。*/
		this.mouseDownTime=0;
		/**鼠标移动精度。*/
		this.mouseMoveAccuracy=2;
		this._stage=null;
		this._target=null;
		this._lastMoveTimer=0;
		this._isLeftMouse=false;
		this._eventList=[];
		this._touchIDs={};
		this._id=1;
		this._tTouchID=0;
		this._event=new Event();
		this._matrix=new Matrix();
		this._point=new Point();
		this._rect=new Rectangle();
		this._prePoint=new Point();
		this._curTouchID=NaN;
	}

	__class(MouseManager,'laya.events.MouseManager');
	var __proto=MouseManager.prototype;
	/**
	*@private
	*初始化。
	*/
	__proto.__init__=function(stage,canvas){
		var _$this=this;
		this._stage=stage;
		var _this=this;
		var list=this._eventList;
		canvas.oncontextmenu=function (e){
			if (MouseManager.enabled)return false;
		}
		canvas.addEventListener('mousedown',function(e){
			if (MouseManager.enabled){
				if(!Browser.onIE)e.preventDefault();
				list.push(e);
				_this.mouseDownTime=Browser.now();
			}
		});
		canvas.addEventListener('mouseup',function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
				_this.mouseDownTime=-Browser.now();
			}
		},true);
		canvas.addEventListener('mousemove',function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				var now=Browser.now();
				if (now-_this._lastMoveTimer < 10)return;
				_this._lastMoveTimer=now;
				list.push(e);
			}
		},true);
		canvas.addEventListener("mouseout",function(e){
			if (MouseManager.enabled)list.push(e);
		})
		canvas.addEventListener("mouseover",function(e){
			if (MouseManager.enabled)list.push(e);
		})
		canvas.addEventListener("touchstart",function(e){
			if (MouseManager.enabled){
				list.push(e);
				if (!MouseManager._isFirstTouch&&!Input.isInputting)e.preventDefault();
				_this.mouseDownTime=Browser.now();
			}
		});
		canvas.addEventListener("touchend",function(e){
			if (MouseManager.enabled){
				if (!MouseManager._isFirstTouch&&!Input.isInputting)e.preventDefault();
				MouseManager._isFirstTouch=false;
				list.push(e);
				_this.mouseDownTime=-Browser.now();
				}else {
				_$this._curTouchID=NaN;
			}
		},true);
		canvas.addEventListener("touchmove",function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
			}
		},true);
		canvas.addEventListener("touchcancel",function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
				}else {
				_$this._curTouchID=NaN;
			}
		},true);
		canvas.addEventListener('mousewheel',function(e){
			if (MouseManager.enabled)list.push(e);
		});
		canvas.addEventListener('DOMMouseScroll',function(e){
			if (MouseManager.enabled)list.push(e);
		});
	}

	__proto.initEvent=function(e,nativeEvent){
		var _this=this;
		_this._event._stoped=false;
		_this._event.nativeEvent=nativeEvent || e;
		_this._target=null;
		this._point.setTo(e.pageX || e.clientX,e.pageY || e.clientY);
		this._stage._canvasTransform.invertTransformPoint(this._point);
		_this.mouseX=this._point.x;
		_this.mouseY=this._point.y;
		_this._event.touchId=e.identifier || 0;
		this._tTouchID=_this._event.touchId;
		var evt;
		evt=TouchManager.I._event;
		evt._stoped=false;
		evt.nativeEvent=_this._event.nativeEvent;
		evt.touchId=_this._event.touchId;
	}

	__proto.checkMouseWheel=function(e){
		this._event.delta=e.wheelDelta ? e.wheelDelta *0.025 :-e.detail;
		var _lastOvers=TouchManager.I.getLastOvers();
		for (var i=0,n=_lastOvers.length;i < n;i++){
			var ele=_lastOvers[i];
			ele.event(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this._event.setTo(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",ele,this._target));
		}
	}

	// _stage.event(Event.MOUSE_WHEEL,_event.setTo(Event.MOUSE_WHEEL,_stage,_target));
	__proto.onMouseMove=function(ele){
		TouchManager.I.onMouseMove(ele,this._tTouchID);
	}

	__proto.onMouseDown=function(ele){
		if (Input.isInputting && Laya.stage.focus && Laya.stage.focus["focus"] && !Laya.stage.focus.contains(this._target)){
			var pre_input=Laya.stage.focus['_tf'] || Laya.stage.focus;
			var new_input=ele['_tf'] || ele;
			if ((new_input instanceof laya.display.Input )&& new_input.multiline==pre_input.multiline)
				pre_input['_focusOut']();
			else
			pre_input.focus=false;
		}
		TouchManager.I.onMouseDown(ele,this._tTouchID,this._isLeftMouse);
	}

	__proto.onMouseUp=function(ele){
		TouchManager.I.onMouseUp(ele,this._tTouchID,this._isLeftMouse);
	}

	__proto.check=function(sp,mouseX,mouseY,callBack){
		this._point.setTo(mouseX,mouseY);
		sp.fromParentPoint(this._point);
		mouseX=this._point.x;
		mouseY=this._point.y;
		var scrollRect=sp.scrollRect;
		if (scrollRect){
			this._rect.setTo(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
			if (!this._rect.contains(mouseX,mouseY))return false;
		}
		if (!this.disableMouseEvent){
			if (sp.hitTestPrior && !sp.mouseThrough && !this.hitTest(sp,mouseX,mouseY)){
				return false;
			}
			for (var i=sp._childs.length-1;i >-1;i--){
				var child=sp._childs[i];
				if (!child.destroyed && child.mouseEnabled && child.visible){
					if (this.check(child,mouseX,mouseY,callBack))return true;
				}
			}
		};
		var isHit=(sp.hitTestPrior && !sp.mouseThrough && !this.disableMouseEvent)? true :this.hitTest(sp,mouseX,mouseY);
		if (isHit){
			this._target=sp;
			callBack.call(this,sp);
			}else if (callBack===this.onMouseUp && sp===this._stage){
			this._target=this._stage;
			callBack.call(this,this._target);
		}
		return isHit;
	}

	__proto.hitTest=function(sp,mouseX,mouseY){
		var isHit=false;
		if (sp.scrollRect){
			mouseX-=sp.scrollRect.x;
			mouseY-=sp.scrollRect.y;
		}
		if ((sp.hitArea instanceof laya.utils.HitArea )){
			return sp.hitArea.isHit(mouseX,mouseY);
		}
		if (sp.width > 0 && sp.height > 0 || sp.mouseThrough || sp.hitArea){
			if (!sp.mouseThrough){
				var hitRect=this._rect;
				if (sp.hitArea)hitRect=sp.hitArea;
				else hitRect.setTo(0,0,sp.width,sp.height);
				isHit=hitRect.contains(mouseX,mouseY);
				}else {
				isHit=sp.getGraphicBounds().contains(mouseX,mouseY);
			}
		}
		return isHit;
	}

	/**
	*执行事件处理。
	*/
	__proto.runEvent=function(){
		var len=this._eventList.length;
		if (!len)return;
		var _this=this;
		var i=0,j=0,n=0,touch;
		while (i < len){
			var evt=this._eventList[i];
			if (evt.type!=='mousemove')this._prePoint.x=this._prePoint.y=-1000000;
			switch (evt.type){
				case 'mousedown':
					this._touchIDs[0]=this._id++;
					if (!MouseManager._isTouchRespond){
						_this._isLeftMouse=evt.button===0;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
					}else
					MouseManager._isTouchRespond=false;
					break ;
				case 'mouseup':
					_this._isLeftMouse=evt.button===0;
					_this.initEvent(evt);
					_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
					break ;
				case 'mousemove':
					if ((Math.abs(this._prePoint.x-evt.clientX)+Math.abs(this._prePoint.y-evt.clientY))>=this.mouseMoveAccuracy){
						this._prePoint.x=evt.clientX;
						this._prePoint.y=evt.clientY;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
					}
					break ;
				case "touchstart":
					MouseManager._isTouchRespond=true;
					_this._isLeftMouse=true;
					var touches=evt.changedTouches;
					for (j=0,n=touches.length;j < n;j++){
						touch=touches[j];
						if (MouseManager.multiTouchEnabled || isNaN(this._curTouchID)){
							this._curTouchID=touch.identifier;
							if (this._id % 200===0)this._touchIDs={};
							this._touchIDs[touch.identifier]=this._id++;
							_this.initEvent(touch,evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
						}
					}
					break ;
				case "touchend":
				case "touchcancel":
					MouseManager._isTouchRespond=true;
					_this._isLeftMouse=true;
					var touchends=evt.changedTouches;
					for (j=0,n=touchends.length;j < n;j++){
						touch=touchends[j];
						if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
							this._curTouchID=NaN;
							_this.initEvent(touch,evt);
							var isChecked=false;
							isChecked=_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
							if (!isChecked){
								_this.onMouseUp(null);
							}
						}
					}
					break ;
				case "touchmove":;
					var touchemoves=evt.changedTouches;
					for (j=0,n=touchemoves.length;j < n;j++){
						touch=touchemoves[j];
						if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
							_this.initEvent(touch,evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
						}
					}
					break ;
				case "wheel":
				case "mousewheel":
				case "DOMMouseScroll":
					_this.checkMouseWheel(evt);
					break ;
				case "mouseout":
					TouchManager.I.stageMouseOut();
					break ;
				case "mouseover":
					_this._stage.event(/*laya.events.Event.MOUSE_OVER*/"mouseover",_this._event.setTo(/*laya.events.Event.MOUSE_OVER*/"mouseover",_this._stage,_this._stage));
					break ;
				}
			i++;
		}
		this._eventList.length=0;
	}

	MouseManager.enabled=true;
	MouseManager.multiTouchEnabled=true;
	MouseManager._isTouchRespond=false;
	MouseManager._isFirstTouch=true;
	__static(MouseManager,
	['instance',function(){return this.instance=new MouseManager();}
	]);
	return MouseManager;
})()


/**
*@private
*Touch事件管理类，处理多点触控下的鼠标事件
*/
//class laya.events.TouchManager
var TouchManager=(function(){
	function TouchManager(){
		/**
		*当前over的touch表
		*/
		this.preOvers=[];
		/**
		*当前down的touch表
		*/
		this.preDowns=[];
		this.preRightDowns=[];
		/**
		*是否启用
		*/
		this.enable=true;
		this._lastClickTime=0;
		this._event=new Event();
	}

	__class(TouchManager,'laya.events.TouchManager');
	var __proto=TouchManager.prototype;
	__proto._clearTempArrs=function(){
		TouchManager._oldArr.length=0;
		TouchManager._newArr.length=0;
		TouchManager._tEleArr.length=0;
	}

	/**
	*从touch表里查找对应touchID的数据
	*@param touchID touch ID
	*@param arr touch表
	*@return
	*
	*/
	__proto.getTouchFromArr=function(touchID,arr){
		var i=0,len=0;
		len=arr.length;
		var tTouchO;
		for (i=0;i < len;i++){
			tTouchO=arr[i];
			if (tTouchO.id==touchID){
				return tTouchO;
			}
		}
		return null;
	}

	/**
	*从touch表里移除一个元素
	*@param touchID touch ID
	*@param arr touch表
	*
	*/
	__proto.removeTouchFromArr=function(touchID,arr){
		var i=0;
		for (i=arr.length-1;i >=0;i--){
			if (arr[i].id==touchID){
				arr.splice(i,1);
			}
		}
	}

	/**
	*创建一个touch数据
	*@param ele 当前的根节点
	*@param touchID touchID
	*@return
	*
	*/
	__proto.createTouchO=function(ele,touchID){
		var rst;
		rst=Pool.getItem("TouchData")|| {};
		rst.id=touchID;
		rst.tar=ele;
		return rst;
	}

	/**
	*处理touchStart
	*@param ele 根节点
	*@param touchID touchID
	*@param isLeft （可选）是否为左键
	*/
	__proto.onMouseDown=function(ele,touchID,isLeft){
		(isLeft===void 0)&& (isLeft=false);
		if (!this.enable)
			return;
		var preO;
		var tO;
		var arrs;
		preO=this.getTouchFromArr(touchID,this.preOvers);
		arrs=this.getEles(ele,null,TouchManager._tEleArr);
		if (!preO){
			tO=this.createTouchO(ele,touchID);
			this.preOvers.push(tO);
			}else {
			preO.tar=ele;
		}
		if (Browser.onMobile)
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
		var preDowns;
		preDowns=isLeft ? this.preDowns :this.preRightDowns;
		preO=this.getTouchFromArr(touchID,preDowns);
		if (!preO){
			tO=this.createTouchO(ele,touchID);
			preDowns.push(tO);
			}else {
			preO.tar=ele;
		}
		this.sendEvents(arrs,isLeft ? /*laya.events.Event.MOUSE_DOWN*/"mousedown" :/*laya.events.Event.RIGHT_MOUSE_DOWN*/"rightmousedown",touchID);
		this._clearTempArrs();
	}

	/**
	*派发事件。
	*@param eles 对象列表。
	*@param type 事件类型。
	*@param touchID （可选）touchID，默认为0。
	*/
	__proto.sendEvents=function(eles,type,touchID){
		(touchID===void 0)&& (touchID=0);
		var i=0,len=0;
		len=eles.length;
		this._event._stoped=false;
		var _target;
		_target=eles[0];
		var tE;
		for (i=0;i < len;i++){
			tE=eles[i];
			if (tE.destroyed)return;
			tE.event(type,this._event.setTo(type,tE,_target));
			if (this._event._stoped)
				break ;
		}
	}

	/**
	*获取对象列表。
	*@param start 起始节点。
	*@param end 结束节点。
	*@param rst 返回值。如果此值不为空，则将其赋值为计算结果，从而避免创建新数组；如果此值为空，则创建新数组返回。
	*@return Array 返回节点列表。
	*/
	__proto.getEles=function(start,end,rst){
		if (!rst){
			rst=[];
			}else {
			rst.length=0;
		}
		while (start && start !=end){
			rst.push(start);
			start=start.parent;
		}
		return rst;
	}

	/**
	*touchMove时处理out事件和over时间。
	*@param eleNew 新的根节点。
	*@param elePre 旧的根节点。
	*@param touchID （可选）touchID，默认为0。
	*/
	__proto.checkMouseOutAndOverOfMove=function(eleNew,elePre,touchID){
		(touchID===void 0)&& (touchID=0);
		if (elePre==eleNew)
			return;
		var tar;
		var arrs;
		var i=0,len=0;
		if (elePre.contains(eleNew)){
			arrs=this.getEles(eleNew,elePre,TouchManager._tEleArr);
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
			}else if (eleNew.contains(elePre)){
			arrs=this.getEles(elePre,eleNew,TouchManager._tEleArr);
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OUT*/"mouseout",touchID);
			}else {
			arrs=TouchManager._tEleArr;
			arrs.length=0;
			var oldArr;
			oldArr=this.getEles(elePre,null,TouchManager._oldArr);
			var newArr;
			newArr=this.getEles(eleNew,null,TouchManager._newArr);
			len=oldArr.length;
			var tIndex=0;
			for (i=0;i < len;i++){
				tar=oldArr[i];
				tIndex=newArr.indexOf(tar);
				if (tIndex >=0){
					newArr.splice(tIndex,newArr.length-tIndex);
					break ;
					}else {
					arrs.push(tar);
				}
			}
			if (arrs.length > 0){
				this.sendEvents(arrs,/*laya.events.Event.MOUSE_OUT*/"mouseout",touchID);
			}
			if (newArr.length > 0){
				this.sendEvents(newArr,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
			}
		}
	}

	/**
	*处理TouchMove事件
	*@param ele 根节点
	*@param touchID touchID
	*
	*/
	__proto.onMouseMove=function(ele,touchID){
		if (!this.enable)
			return;
		var preO;
		preO=this.getTouchFromArr(touchID,this.preOvers);
		var arrs;
		var tO;
		if (!preO){
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
			this.preOvers.push(this.createTouchO(ele,touchID));
			}else {
			this.checkMouseOutAndOverOfMove(ele,preO.tar);
			preO.tar=ele;
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
		}
		this.sendEvents(arrs,/*laya.events.Event.MOUSE_MOVE*/"mousemove",touchID);
		this._clearTempArrs();
	}

	__proto.getLastOvers=function(){
		TouchManager._tEleArr.length=0;
		if (this.preOvers.length > 0 && this.preOvers[0].tar){
			return this.getEles(this.preOvers[0].tar,null,TouchManager._tEleArr);
		}
		TouchManager._tEleArr.push(Laya.stage);
		return TouchManager._tEleArr;
	}

	__proto.stageMouseOut=function(){
		var lastOvers;
		lastOvers=this.getLastOvers();
		this.preOvers.length=0;
		this.sendEvents(lastOvers,/*laya.events.Event.MOUSE_OUT*/"mouseout",0);
	}

	/**
	*处理TouchEnd事件
	*@param ele 根节点
	*@param touchID touchID
	*@param isLeft 是否为左键
	*/
	__proto.onMouseUp=function(ele,touchID,isLeft){
		(isLeft===void 0)&& (isLeft=false);
		if (!this.enable)
			return;
		var preO;
		var tO;
		var arrs;
		var oldArr;
		var i=0,len=0;
		var tar;
		var sendArr;
		var onMobile=Browser.onMobile;
		arrs=this.getEles(ele,null,TouchManager._tEleArr);
		this.sendEvents(arrs,isLeft ? /*laya.events.Event.MOUSE_UP*/"mouseup" :/*laya.events.Event.RIGHT_MOUSE_UP*/"rightmouseup",touchID);
		var preDowns;
		preDowns=isLeft ? this.preDowns :this.preRightDowns;
		preO=this.getTouchFromArr(touchID,preDowns);
		if (!preO){
			}else {
			var isDouble=false;
			var now=Browser.now();
			isDouble=now-this._lastClickTime < 300;
			this._lastClickTime=now;
			if (ele==preO.tar){
				sendArr=arrs;
				}else {
				oldArr=this.getEles(preO.tar,null,TouchManager._oldArr);
				sendArr=TouchManager._newArr;
				sendArr.length=0;
				len=oldArr.length;
				for (i=0;i < len;i++){
					tar=oldArr[i];
					if (arrs.indexOf(tar)>=0){
						sendArr.push(tar);
					}
				}
			}
			if (sendArr.length > 0){
				this.sendEvents(sendArr,isLeft ? /*laya.events.Event.CLICK*/"click" :/*laya.events.Event.RIGHT_CLICK*/"rightclick",touchID);
			}
			if (isLeft && isDouble){
				this.sendEvents(sendArr,/*laya.events.Event.DOUBLE_CLICK*/"doubleclick",touchID);
			}
			this.removeTouchFromArr(touchID,preDowns);
			preO.tar=null;
			Pool.recover("TouchData",preO);
		}
		preO=this.getTouchFromArr(touchID,this.preOvers);
		if (!preO){
			}else {
			if (onMobile){
				sendArr=this.getEles(preO.tar,null,sendArr);
				if (sendArr && sendArr.length > 0){
					this.sendEvents(sendArr,/*laya.events.Event.MOUSE_OUT*/"mouseout",touchID);
				}
				this.removeTouchFromArr(touchID,this.preOvers);
				preO.tar=null;
				Pool.recover("TouchData",preO);
			}
		}
		this._clearTempArrs();
	}

	TouchManager._oldArr=[];
	TouchManager._newArr=[];
	TouchManager._tEleArr=[];
	__static(TouchManager,
	['I',function(){return this.I=new TouchManager();}
	]);
	return TouchManager;
})()


/**
*<code>Filter</code> 是滤镜基类。
*/
//class laya.filters.Filter
var Filter=(function(){
	function Filter(){
		/**@private */
		this._action=null;
	}

	__class(Filter,'laya.filters.Filter');
	var __proto=Filter.prototype;
	Laya.imps(__proto,{"laya.filters.IFilter":true})
	/**@private */
	__proto.callNative=function(sp){}
	/**@private 滤镜类型。*/
	__getset(0,__proto,'type',function(){return-1});
	/**@private 滤镜动作。*/
	__getset(0,__proto,'action',function(){return this._action });
	Filter.BLUR=0x10;
	Filter.COLOR=0x20;
	Filter.GLOW=0x08;
	Filter._filterStart=null;
	Filter._filterEnd=null;
	Filter._EndTarget=null;
	Filter._recycleScope=null;
	Filter._filter=null;
	Filter._useSrc=null;
	Filter._endSrc=null;
	Filter._useOut=null;
	Filter._endOut=null;
	return Filter;
})()


/**
*@private
*<code>ColorFilterAction</code> 是一个颜色滤镜应用类。
*/
//class laya.filters.ColorFilterAction
var ColorFilterAction=(function(){
	function ColorFilterAction(){
		this.data=null;
	}

	__class(ColorFilterAction,'laya.filters.ColorFilterAction');
	var __proto=ColorFilterAction.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterAction":true})
	/**
	*给指定的对象应用颜色滤镜。
	*@param srcCanvas 需要应用画布对象。
	*@return 应用了滤镜后的画布对象。
	*/
	__proto.apply=function(srcCanvas){
		var ctx=srcCanvas.ctx.ctx;
		var canvas=srcCanvas.ctx.ctx.canvas;
		if (canvas.width==0 || canvas.height==0)return canvas;
		var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
		var data=imgdata.data;
		var nData;
		for (var i=0,n=data.length;i < n;i+=4){
			nData=this.getColor(data[i],data[i+1],data[i+2],data[i+3]);
			if (data[i+3]==0)continue ;
			data[i]=nData[0];
			data[i+1]=nData[1];
			data[i+2]=nData[2];
			data[i+3]=nData[3];
		}
		ctx.putImageData(imgdata,0,0);
		return srcCanvas;
	}

	__proto.getColor=function(red,green,blue,alpha){
		var rst=[];
		if (this.data._mat && this.data._alpha){
			var mat=this.data._mat;
			var tempAlpha=this.data._alpha;
			rst[0]=mat[0] *red+mat[1] *green+mat[2] *blue+mat[3] *alpha+tempAlpha[0];
			rst[1]=mat[4] *red+mat[5] *green+mat[6] *blue+mat[7] *alpha+tempAlpha[1];
			rst[2]=mat[8] *red+mat[9] *green+mat[10] *blue+mat[11] *alpha+tempAlpha[2];
			rst[3]=mat[12] *red+mat[13] *green+mat[14] *blue+mat[15] *alpha+tempAlpha[3];
		}
		return rst;
	}

	return ColorFilterAction;
})()


/**
*@private
*/
//class laya.maths.Arith
var Arith=(function(){
	function Arith(){}
	__class(Arith,'laya.maths.Arith');
	Arith.formatR=function(r){
		if (r > Math.PI)r-=Math.PI *2;
		if (r <-Math.PI)r+=Math.PI *2;
		return r;
	}

	Arith.isPOT=function(w,h){
		return (w > 0 && (w & (w-1))===0 && h > 0 && (h & (h-1))===0);
	}

	Arith.setMatToArray=function(mat,array){
		mat.a,mat.b,0,0,mat.c,mat.d,0,0,0,0,1,0,mat.tx+20,mat.ty+20,0,1
		array[0]=mat.a;
		array[1]=mat.b;
		array[4]=mat.c;
		array[5]=mat.d;
		array[12]=mat.tx;
		array[13]=mat.ty;
	}

	return Arith;
})()


/**
*@private
*计算贝塞尔曲线的工具类。
*/
//class laya.maths.Bezier
var Bezier=(function(){
	function Bezier(){
		/**@private */
		this._controlPoints=[new Point(),new Point(),new Point()];
		this._calFun=this.getPoint2;
	}

	__class(Bezier,'laya.maths.Bezier');
	var __proto=Bezier.prototype;
	/**@private */
	__proto._switchPoint=function(x,y){
		var tPoint=this._controlPoints.shift();
		tPoint.setTo(x,y);
		this._controlPoints.push(tPoint);
	}

	/**
	*计算二次贝塞尔点。
	*@param t
	*@param rst
	*
	*/
	__proto.getPoint2=function(t,rst){
		var p1=this._controlPoints[0];
		var p2=this._controlPoints[1];
		var p3=this._controlPoints[2];
		var lineX=Math.pow((1-t),2)*p1.x+2 *t *(1-t)*p2.x+Math.pow(t,2)*p3.x;
		var lineY=Math.pow((1-t),2)*p1.y+2 *t *(1-t)*p2.y+Math.pow(t,2)*p3.y;
		rst.push(lineX,lineY);
	}

	/**
	*计算三次贝塞尔点
	*@param t
	*@param rst
	*
	*/
	__proto.getPoint3=function(t,rst){
		var p1=this._controlPoints[0];
		var p2=this._controlPoints[1];
		var p3=this._controlPoints[2];
		var p4=this._controlPoints[3];
		var lineX=Math.pow((1-t),3)*p1.x+3 *p2.x *t *(1-t)*(1-t)+3 *p3.x *t *t *(1-t)+p4.x *Math.pow(t,3);
		var lineY=Math.pow((1-t),3)*p1.y+3 *p2.y *t *(1-t)*(1-t)+3 *p3.y *t *t *(1-t)+p4.y *Math.pow(t,3);
		rst.push(lineX,lineY);
	}

	/**
	*计算贝塞尔点序列
	*@param count
	*@param rst
	*
	*/
	__proto.insertPoints=function(count,rst){
		var i=NaN;
		count=count > 0 ? count :5;
		var dLen=NaN;
		dLen=1 / count;
		for (i=0;i <=1;i+=dLen){
			this._calFun(i,rst);
		}
	}

	/**
	*获取贝塞尔曲线上的点。
	*@param pList 控制点[x0,y0,x1,y1...]
	*@param inSertCount 每次曲线的插值数量
	*@return
	*
	*/
	__proto.getBezierPoints=function(pList,inSertCount,count){
		(inSertCount===void 0)&& (inSertCount=5);
		(count===void 0)&& (count=2);
		var i=0,len=0;
		len=pList.length;
		if (len < (count+1)*2)return [];
		var rst;
		rst=[];
		switch (count){
			case 2:
				this._calFun=this.getPoint2;
				break ;
			case 3:
				this._calFun=this.getPoint3;
				break ;
			default :
				return [];
			}
		while (this._controlPoints.length <=count){
			this._controlPoints.push(new Point());
		}
		for (i=0;i < count *2;i+=2){
			this._switchPoint(pList[i],pList[i+1]);
		}
		for (i=count *2;i < len;i+=2){
			this._switchPoint(pList[i],pList[i+1]);
			if ((i / 2)% count==0)
				this.insertPoints(inSertCount,rst);
		}
		return rst;
	}

	__static(Bezier,
	['I',function(){return this.I=new Bezier();}
	]);
	return Bezier;
})()


/**
*@private
*凸包算法。
*/
//class laya.maths.GrahamScan
var GrahamScan=(function(){
	function GrahamScan(){}
	__class(GrahamScan,'laya.maths.GrahamScan');
	GrahamScan.multiply=function(p1,p2,p0){
		return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
	}

	GrahamScan.dis=function(p1,p2){
		return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
	}

	GrahamScan._getPoints=function(count,tempUse,rst){
		(tempUse===void 0)&& (tempUse=false);
		if (!GrahamScan._mPointList)GrahamScan._mPointList=[];
		while (GrahamScan._mPointList.length < count)GrahamScan._mPointList.push(new Point());
		if (!rst)rst=[];
		rst.length=0;
		if (tempUse){
			GrahamScan.getFrom(rst,GrahamScan._mPointList,count);
			}else {
			GrahamScan.getFromR(rst,GrahamScan._mPointList,count);
		}
		return rst;
	}

	GrahamScan.getFrom=function(rst,src,count){
		var i=0;
		for (i=0;i < count;i++){
			rst.push(src[i]);
		}
		return rst;
	}

	GrahamScan.getFromR=function(rst,src,count){
		var i=0;
		for (i=0;i < count;i++){
			rst.push(src.pop());
		}
		return rst;
	}

	GrahamScan.pListToPointList=function(pList,tempUse){
		(tempUse===void 0)&& (tempUse=false);
		var i=0,len=pList.length / 2,rst=GrahamScan._getPoints(len,tempUse,GrahamScan._tempPointList);
		for (i=0;i < len;i++){
			rst[i].setTo(pList[i+i],pList[i+i+1]);
		}
		return rst;
	}

	GrahamScan.pointListToPlist=function(pointList){
		var i=0,len=pointList.length,rst=GrahamScan._temPList,tPoint;
		rst.length=0;
		for (i=0;i < len;i++){
			tPoint=pointList[i];
			rst.push(tPoint.x,tPoint.y);
		}
		return rst;
	}

	GrahamScan.scanPList=function(pList){
		return Utils.copyArray(pList,GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList,true))));
	}

	GrahamScan.scan=function(PointSet){
		var i=0,j=0,k=0,top=2,tmp,n=PointSet.length,ch;
		var _tmpDic={};
		var key;
		ch=GrahamScan._temArr;
		ch.length=0;
		n=PointSet.length;
		for (i=n-1;i >=0;i--){
			tmp=PointSet[i];
			key=tmp.x+"_"+tmp.y;
			if (!_tmpDic.hasOwnProperty(key)){
				_tmpDic[key]=true;
				ch.push(tmp);
			}
		}
		n=ch.length;
		Utils.copyArray(PointSet,ch);
		for (i=1;i < n;i++)
		if ((PointSet[i].y < PointSet[k].y)|| ((PointSet[i].y==PointSet[k].y)&& (PointSet[i].x < PointSet[k].x)))
			k=i;
		tmp=PointSet[0];
		PointSet[0]=PointSet[k];
		PointSet[k]=tmp;
		for (i=1;i < n-1;i++){
			k=i;
			for (j=i+1;j < n;j++)
			if ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])> 0)|| ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])==0)&& (GrahamScan.dis(PointSet[0],PointSet[j])< GrahamScan.dis(PointSet[0],PointSet[k]))))
				k=j;
			tmp=PointSet[i];
			PointSet[i]=PointSet[k];
			PointSet[k]=tmp;
		}
		ch=GrahamScan._temArr;
		ch.length=0;
		if (PointSet.length < 3){
			return Utils.copyArray(ch,PointSet);
		}
		ch.push(PointSet[0],PointSet[1],PointSet[2]);
		for (i=3;i < n;i++){
			while (ch.length >=2 && GrahamScan.multiply(PointSet[i],ch[ch.length-1],ch[ch.length-2])>=0)ch.pop();
			PointSet[i] && ch.push(PointSet[i]);
		}
		return ch;
	}

	GrahamScan._mPointList=null;
	GrahamScan._tempPointList=[];
	GrahamScan._temPList=[];
	GrahamScan._temArr=[];
	return GrahamScan;
})()


/**
*@private
*<code>MathUtil</code> 是一个数据处理工具类。
*/
//class laya.maths.MathUtil
var MathUtil=(function(){
	function MathUtil(){}
	__class(MathUtil,'laya.maths.MathUtil');
	MathUtil.subtractVector3=function(l,r,o){
		o[0]=l[0]-r[0];
		o[1]=l[1]-r[1];
		o[2]=l[2]-r[2];
	}

	MathUtil.lerp=function(left,right,amount){
		return left *(1-amount)+right *amount;
	}

	MathUtil.scaleVector3=function(f,b,e){
		e[0]=f[0] *b;
		e[1]=f[1] *b;
		e[2]=f[2] *b;
	}

	MathUtil.lerpVector3=function(l,r,t,o){
		var ax=l[0],ay=l[1],az=l[2];
		o[0]=ax+t *(r[0]-ax);
		o[1]=ay+t *(r[1]-ay);
		o[2]=az+t *(r[2]-az);
	}

	MathUtil.lerpVector4=function(l,r,t,o){
		var ax=l[0],ay=l[1],az=l[2],aw=l[3];
		o[0]=ax+t *(r[0]-ax);
		o[1]=ay+t *(r[1]-ay);
		o[2]=az+t *(r[2]-az);
		o[3]=aw+t *(r[3]-aw);
	}

	MathUtil.slerpQuaternionArray=function(a,Offset1,b,Offset2,t,out,Offset3){
		var ax=a[Offset1+0],ay=a[Offset1+1],az=a[Offset1+2],aw=a[Offset1+3],bx=b[Offset2+0],by=b[Offset2+1],bz=b[Offset2+2],bw=b[Offset2+3];
		var omega,cosom,sinom,scale0,scale1;
		cosom=ax *bx+ay *by+az *bz+aw *bw;
		if (cosom < 0.0){
			cosom=-cosom;
			bx=-bx;
			by=-by;
			bz=-bz;
			bw=-bw;
		}
		if ((1.0-cosom)> 0.000001){
			omega=Math.acos(cosom);
			sinom=Math.sin(omega);
			scale0=Math.sin((1.0-t)*omega)/ sinom;
			scale1=Math.sin(t *omega)/ sinom;
			}else {
			scale0=1.0-t;
			scale1=t;
		}
		out[Offset3+0]=scale0 *ax+scale1 *bx;
		out[Offset3+1]=scale0 *ay+scale1 *by;
		out[Offset3+2]=scale0 *az+scale1 *bz;
		out[Offset3+3]=scale0 *aw+scale1 *bw;
		return out;
	}

	MathUtil.getRotation=function(x0,y0,x1,y1){
		return Math.atan2(y1-y0,x1-x0)/ Math.PI *180;
	}

	MathUtil.sortBigFirst=function(a,b){
		if (a==b)
			return 0;
		return b > a ? 1 :-1;
	}

	MathUtil.sortSmallFirst=function(a,b){
		if (a==b)
			return 0;
		return b > a ?-1 :1;
	}

	MathUtil.sortNumBigFirst=function(a,b){
		return parseFloat(b)-parseFloat(a);
	}

	MathUtil.sortNumSmallFirst=function(a,b){
		return parseFloat(a)-parseFloat(b);
	}

	MathUtil.sortByKey=function(key,bigFirst,forceNum){
		(bigFirst===void 0)&& (bigFirst=false);
		(forceNum===void 0)&& (forceNum=true);
		var _sortFun;
		if (bigFirst){
			_sortFun=forceNum ? MathUtil.sortNumBigFirst :MathUtil.sortBigFirst;
			}else {
			_sortFun=forceNum ? MathUtil.sortNumSmallFirst :MathUtil.sortSmallFirst;
		}
		return function (a,b){
			return _sortFun(a[key],b[key]);
		}
	}

	return MathUtil;
})()


/**
*<p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>
*<p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>
*/
//class laya.maths.Matrix
var Matrix=(function(){
	function Matrix(a,b,c,d,tx,ty){
		/**缩放或旋转图像时影响像素沿 x 轴定位的值。*/
		//this.a=NaN;
		/**旋转或倾斜图像时影响像素沿 y 轴定位的值。*/
		//this.b=NaN;
		/**旋转或倾斜图像时影响像素沿 x 轴定位的值。*/
		//this.c=NaN;
		/**缩放或旋转图像时影响像素沿 y 轴定位的值。*/
		//this.d=NaN;
		/**沿 x 轴平移每个点的距离。*/
		//this.tx=NaN;
		/**沿 y 轴平移每个点的距离。*/
		//this.ty=NaN;
		/**@private 表示此对象是否在对象池中。*/
		this.inPool=false;
		/**@private 是否有改变矩阵的值。*/
		this.bTransform=false;
		(a===void 0)&& (a=1);
		(b===void 0)&& (b=0);
		(c===void 0)&& (c=0);
		(d===void 0)&& (d=1);
		(tx===void 0)&& (tx=0);
		(ty===void 0)&& (ty=0);
		this.a=a;
		this.b=b;
		this.c=c;
		this.d=d;
		this.tx=tx;
		this.ty=ty;
		this._checkTransform();
	}

	__class(Matrix,'laya.maths.Matrix');
	var __proto=Matrix.prototype;
	/**
	*将本矩阵设置为单位矩阵。
	*@return 返回当前矩形。
	*/
	__proto.identity=function(){
		this.a=this.d=1;
		this.b=this.tx=this.ty=this.c=0;
		this.bTransform=false;
		return this;
	}

	/**@private */
	__proto._checkTransform=function(){
		return this.bTransform=(this.a!==1 || this.b!==0 || this.c!==0 || this.d!==1);
	}

	/**
	*设置沿 x 、y 轴平移每个点的距离。
	*@param x 沿 x 轴平移每个点的距离。
	*@param y 沿 y 轴平移每个点的距离。
	*@return 返回对象本身
	*/
	__proto.setTranslate=function(x,y){
		this.tx=x;
		this.ty=y;
		return this;
	}

	/**
	*沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。
	*@param x 沿 x 轴向右移动的量（以像素为单位）。
	*@param y 沿 y 轴向下移动的量（以像素为单位）。
	*@return 返回此矩形对象。
	*/
	__proto.translate=function(x,y){
		this.tx+=x;
		this.ty+=y;
		return this;
	}

	/**
	*对矩阵应用缩放转换。
	*@param x 用于沿 x 轴缩放对象的乘数。
	*@param y 用于沿 y 轴缩放对象的乘数。
	*/
	__proto.scale=function(x,y){
		this.a *=x;
		this.d *=y;
		this.c *=x;
		this.b *=y;
		this.tx *=x;
		this.ty *=y;
		this.bTransform=true;
	}

	/**
	*对 Matrix 对象应用旋转转换。
	*@param angle 以弧度为单位的旋转角度。
	*/
	__proto.rotate=function(angle){
		var cos=Math.cos(angle);
		var sin=Math.sin(angle);
		var a1=this.a;
		var c1=this.c;
		var tx1=this.tx;
		this.a=a1 *cos-this.b *sin;
		this.b=a1 *sin+this.b *cos;
		this.c=c1 *cos-this.d *sin;
		this.d=c1 *sin+this.d *cos;
		this.tx=tx1 *cos-this.ty *sin;
		this.ty=tx1 *sin+this.ty *cos;
		this.bTransform=true;
	}

	/**
	*对 Matrix 对象应用倾斜转换。
	*@param x 沿着 X 轴的 2D 倾斜弧度。
	*@param y 沿着 Y 轴的 2D 倾斜弧度。
	*@return 当前 Matrix 对象。
	*/
	__proto.skew=function(x,y){
		var tanX=Math.tan(x);
		var tanY=Math.tan(y);
		var a1=this.a;
		var b1=this.b;
		this.a+=tanY *this.c;
		this.b+=tanY *this.d;
		this.c+=tanX *a1;
		this.d+=tanX *b1;
		return this;
	}

	/**
	*对指定的点应用当前矩阵的逆转化并返回此点。
	*@param out 待转化的点 Point 对象。
	*@return 返回out
	*/
	__proto.invertTransformPoint=function(out){
		var a1=this.a;
		var b1=this.b;
		var c1=this.c;
		var d1=this.d;
		var tx1=this.tx;
		var n=a1 *d1-b1 *c1;
		var a2=d1 / n;
		var b2=-b1 / n;
		var c2=-c1 / n;
		var d2=a1 / n;
		var tx2=(c1 *this.ty-d1 *tx1)/ n;
		var ty2=-(a1 *this.ty-b1 *tx1)/ n;
		return out.setTo(a2 *out.x+c2 *out.y+tx2,b2 *out.x+d2 *out.y+ty2);
	}

	/**
	*将 Matrix 对象表示的几何转换应用于指定点。
	*@param out 用来设定输出结果的点。
	*@return 返回out
	*/
	__proto.transformPoint=function(out){
		return out.setTo(this.a *out.x+this.c *out.y+this.tx,this.b *out.x+this.d *out.y+this.ty);
	}

	/**
	*将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。
	*@param out 用来设定输出结果的点。
	*@return 返回out
	*/
	__proto.transformPointN=function(out){
		return out.setTo(this.a *out.x+this.c *out.y ,this.b *out.x+this.d *out.y);
	}

	/**
	*@private
	*将 Matrix 对象表示的几何转换应用于指定点。
	*@param data 点集合。
	*@param out 存储应用转化的点的列表。
	*@return 返回out数组
	*/
	__proto.transformPointArray=function(data,out){
		var len=data.length;
		for (var i=0;i < len;i+=2){
			var x=data[i],y=data[i+1];
			out[i]=this.a *x+this.c *y+this.tx;
			out[i+1]=this.b *x+this.d *y+this.ty;
		}
		return out;
	}

	/**
	*@private
	*将 Matrix 对象表示的几何缩放转换应用于指定点。
	*@param data 点集合。
	*@param out 存储应用转化的点的列表。
	*@return 返回out数组
	*/
	__proto.transformPointArrayScale=function(data,out){
		var len=data.length;
		for (var i=0;i < len;i+=2){
			var x=data[i],y=data[i+1];
			out[i]=this.a *x+this.c *y;
			out[i+1]=this.b *x+this.d *y;
		}
		return out;
	}

	/**
	*获取 X 轴缩放值。
	*@return X 轴缩放值。
	*/
	__proto.getScaleX=function(){
		return this.b===0 ? this.a :Math.sqrt(this.a *this.a+this.b *this.b);
	}

	/**
	*获取 Y 轴缩放值。
	*@return Y 轴缩放值。
	*/
	__proto.getScaleY=function(){
		return this.c===0 ? this.d :Math.sqrt(this.c *this.c+this.d *this.d);
	}

	/**
	*执行原始矩阵的逆转换。
	*@return 当前矩阵对象。
	*/
	__proto.invert=function(){
		var a1=this.a;
		var b1=this.b;
		var c1=this.c;
		var d1=this.d;
		var tx1=this.tx;
		var n=a1 *d1-b1 *c1;
		this.a=d1 / n;
		this.b=-b1 / n;
		this.c=-c1 / n;
		this.d=a1 / n;
		this.tx=(c1 *this.ty-d1 *tx1)/ n;
		this.ty=-(a1 *this.ty-b1 *tx1)/ n;
		return this;
	}

	/**
	*将 Matrix 的成员设置为指定值。
	*@param a 缩放或旋转图像时影响像素沿 x 轴定位的值。
	*@param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。
	*@param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。
	*@param d 缩放或旋转图像时影响像素沿 y 轴定位的值。
	*@param tx 沿 x 轴平移每个点的距离。
	*@param ty 沿 y 轴平移每个点的距离。
	*@return 当前矩阵对象。
	*/
	__proto.setTo=function(a,b,c,d,tx,ty){
		this.a=a,this.b=b,this.c=c,this.d=d,this.tx=tx,this.ty=ty;
		return this;
	}

	/**
	*将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。
	*@param matrix 要连接到源矩阵的矩阵。
	*@return 当前矩阵。
	*/
	__proto.concat=function(matrix){
		var a=this.a;
		var c=this.c;
		var tx=this.tx;
		this.a=a *matrix.a+this.b *matrix.c;
		this.b=a *matrix.b+this.b *matrix.d;
		this.c=c *matrix.a+this.d *matrix.c;
		this.d=c *matrix.b+this.d *matrix.d;
		this.tx=tx *matrix.a+this.ty *matrix.c+matrix.tx;
		this.ty=tx *matrix.b+this.ty *matrix.d+matrix.ty;
		return this;
	}

	/**
	*@private
	*对矩阵应用缩放转换。反向相乘
	*@param x 用于沿 x 轴缩放对象的乘数。
	*@param y 用于沿 y 轴缩放对象的乘数。
	*/
	__proto.scaleEx=function(x,y){
		var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
		if (bb!==0 || bc!==0){
			this.a=x *ba;
			this.b=x *bb;
			this.c=y *bc;
			this.d=y *bd;
			}else {
			this.a=x *ba;
			this.b=0 *bd;
			this.c=0 *ba;
			this.d=y *bd;
		}
		this.bTransform=true;
	}

	/**
	*@private
	*对 Matrix 对象应用旋转转换。反向相乘
	*@param angle 以弧度为单位的旋转角度。
	*/
	__proto.rotateEx=function(angle){
		var cos=Math.cos(angle);
		var sin=Math.sin(angle);
		var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
		if (bb!==0 || bc!==0){
			this.a=cos *ba+sin *bc;
			this.b=cos *bb+sin *bd;
			this.c=-sin *ba+cos *bc;
			this.d=-sin *bb+cos *bd;
			}else {
			this.a=cos *ba;
			this.b=sin *bd;
			this.c=-sin *ba;
			this.d=cos *bd;
		}
		this.bTransform=true;
	}

	/**
	*返回此 Matrix 对象的副本。
	*@return 与原始实例具有完全相同的属性的新 Matrix 实例。
	*/
	__proto.clone=function(){
		var dec=Matrix.create();
		dec.a=this.a;
		dec.b=this.b;
		dec.c=this.c;
		dec.d=this.d;
		dec.tx=this.tx;
		dec.ty=this.ty;
		dec.bTransform=this.bTransform;
		return dec;
	}

	/**
	*将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。
	*@param dec 要复制当前矩阵数据的 Matrix 对象。
	*@return 已复制当前矩阵数据的 Matrix 对象。
	*/
	__proto.copyTo=function(dec){
		dec.a=this.a;
		dec.b=this.b;
		dec.c=this.c;
		dec.d=this.d;
		dec.tx=this.tx;
		dec.ty=this.ty;
		dec.bTransform=this.bTransform;
		return dec;
	}

	/**
	*返回列出该 Matrix 对象属性的文本值。
	*@return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。
	*/
	__proto.toString=function(){
		return this.a+","+this.b+","+this.c+","+this.d+","+this.tx+","+this.ty;
	}

	/**
	*销毁此对象。
	*/
	__proto.destroy=function(){
		if (this.inPool)return;
		var cache=Matrix._cache;
		this.inPool=true;
		cache._length || (cache._length=0);
		cache[cache._length++]=this;
		this.a=this.d=1;
		this.b=this.c=this.tx=this.ty=0;
		this.bTransform=false;
	}

	Matrix.mul=function(m1,m2,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.mul16=function(m1,m2,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
		if (bb!==0 || bc!==0){
			out[0]=aa *ba+ab *bc;
			out[1]=aa *bb+ab *bd;
			out[4]=ac *ba+ad *bc;
			out[5]=ac *bb+ad *bd;
			out[12]=ba *atx+bc *aty+btx;
			out[13]=bb *atx+bd *aty+bty;
			}else {
			out[0]=aa *ba;
			out[1]=ab *bd;
			out[4]=ac *ba;
			out[5]=ad *bd;
			out[12]=ba *atx+btx;
			out[13]=bd *aty+bty;
		}
		return out;
	}

	Matrix.mulPre=function(m1,ba,bb,bc,bd,btx,bty,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.mulPos=function(m1,aa,ab,ac,ad,atx,aty,out){
		var ba=m1.a,bb=m1.b,bc=m1.c,bd=m1.d,btx=m1.tx,bty=m1.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.preMul=function(parent,self,out){
		var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
		var na=self.a,nb=self.b,nc=self.c,nd=self.d,ntx=self.tx,nty=self.ty;
		out.a=na *pa;
		out.b=out.c=0;
		out.d=nd *pd;
		out.tx=ntx *pa+parent.tx;
		out.ty=nty *pd+parent.ty;
		if (nb!==0 || nc!==0 || pb!==0 || pc!==0){
			out.a+=nb *pc;
			out.d+=nc *pb;
			out.b+=na *pb+nb *pd;
			out.c+=nc *pa+nd *pc;
			out.tx+=nty *pc;
			out.ty+=ntx *pb;
		}
		return out;
	}

	Matrix.preMulXY=function(parent,x,y,out){
		var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
		out.a=pa;
		out.b=pb;
		out.c=pc;
		out.d=pd;
		out.tx=x *pa+parent.tx+y *pc;
		out.ty=y *pd+parent.ty+x *pb;
		return out;
	}

	Matrix.create=function(){
		var cache=Matrix._cache;
		var mat=!cache._length ? (new Matrix()):cache[--cache._length];
		mat.inPool=false;
		return mat;
	}

	Matrix._cache=[];
	__static(Matrix,
	['EMPTY',function(){return this.EMPTY=new Matrix();},'TEMP',function(){return this.TEMP=new Matrix();}
	]);
	return Matrix;
})()


/**
*<code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。
*/
//class laya.maths.Point
var Point=(function(){
	function Point(x,y){
		/**该点的水平坐标。*/
		//this.x=NaN;
		/**该点的垂直坐标。*/
		//this.y=NaN;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		this.x=x;
		this.y=y;
	}

	__class(Point,'laya.maths.Point');
	var __proto=Point.prototype;
	/**
	*将 <code>Point</code> 的成员设置为指定值。
	*@param x 水平坐标。
	*@param y 垂直坐标。
	*@return 当前 Point 对象。
	*/
	__proto.setTo=function(x,y){
		this.x=x;
		this.y=y;
		return this;
	}

	/**
	*计算当前点和目标点(x，y)的距离。
	*@param x 水平坐标。
	*@param y 垂直坐标。
	*@return 返回当前点和目标点之间的距离。
	*/
	__proto.distance=function(x,y){
		return Math.sqrt((this.x-x)*(this.x-x)+(this.y-y)*(this.y-y));
	}

	/**返回包含 x 和 y 坐标的值的字符串。*/
	__proto.toString=function(){
		return this.x+","+this.y;
	}

	/**
	*标准化向量。
	*/
	__proto.normalize=function(){
		var d=Math.sqrt(this.x *this.x+this.y *this.y);
		if (d > 0){
			var id=1.0 / d;
			this.x *=id;
			this.y *=id;
		}
	}

	__static(Point,
	['TEMP',function(){return this.TEMP=new Point();},'EMPTY',function(){return this.EMPTY=new Point();}
	]);
	return Point;
})()


/**
*<p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x,y)确定）以及宽度和高度定义的区域。</p>
*<p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>
*/
//class laya.maths.Rectangle
var Rectangle=(function(){
	function Rectangle(x,y,width,height){
		/**矩形左上角的 X 轴坐标。*/
		//this.x=NaN;
		/**矩形左上角的 Y 轴坐标。*/
		//this.y=NaN;
		/**矩形的宽度。*/
		//this.width=NaN;
		/**矩形的高度。*/
		//this.height=NaN;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
	}

	__class(Rectangle,'laya.maths.Rectangle');
	var __proto=Rectangle.prototype;
	/**
	*将 Rectangle 的属性设置为指定值。
	*@param x x 矩形左上角的 X 轴坐标。
	*@param y x 矩形左上角的 Y 轴坐标。
	*@param width 矩形的宽度。
	*@param height 矩形的高。
	*@return 返回属性值修改后的矩形对象本身。
	*/
	__proto.setTo=function(x,y,width,height){
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
		return this;
	}

	/**
	*复制 source 对象的属性值到此矩形对象中。
	*@param sourceRect 源 Rectangle 对象。
	*@return 返回属性值修改后的矩形对象本身。
	*/
	__proto.copyFrom=function(source){
		this.x=source.x;
		this.y=source.y;
		this.width=source.width;
		this.height=source.height;
		return this;
	}

	/**
	*确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
	*@param x 点的 X 轴坐标值（水平位置）。
	*@param y 点的 Y 轴坐标值（垂直位置）。
	*@return 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
	*/
	__proto.contains=function(x,y){
		if (this.width <=0 || this.height <=0)return false;
		if (x >=this.x && x < this.right){
			if (y >=this.y && y < this.bottom){
				return true;
			}
		}
		return false;
	}

	/**
	*确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
	*@param rect Rectangle 对象。
	*@return 如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
	*/
	__proto.intersects=function(rect){
		return !(rect.x > (this.x+this.width)|| (rect.x+rect.width)< this.x || rect.y > (this.y+this.height)|| (rect.y+rect.height)< this.y);
	}

	/**
	*如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
	*@param rect 待比较的矩形区域。
	*@param out （可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
	*@return 返回相交的矩形区域对象。
	*/
	__proto.intersection=function(rect,out){
		if (!this.intersects(rect))return null;
		out || (out=new Rectangle());
		out.x=Math.max(this.x,rect.x);
		out.y=Math.max(this.y,rect.y);
		out.width=Math.min(this.right,rect.right)-out.x;
		out.height=Math.min(this.bottom,rect.bottom)-out.y;
		return out;
	}

	/**
	*<p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
	*<p>注意：union()方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle=new Rectangle(300,300,50,0);</p>
	*@param 要添加到此 Rectangle 对象的 Rectangle 对象。
	*@param out 用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
	*@return 充当两个矩形的联合的新 Rectangle 对象。
	*/
	__proto.union=function(source,out){
		out || (out=new Rectangle());
		this.clone(out);
		if (source.width <=0 || source.height <=0)return out;
		out.addPoint(source.x,source.y);
		out.addPoint(source.right,source.bottom);
		return this;
	}

	/**
	*返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
	*@param out （可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
	*@return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
	*/
	__proto.clone=function(out){
		out || (out=new Rectangle());
		out.x=this.x;
		out.y=this.y;
		out.width=this.width;
		out.height=this.height;
		return out;
	}

	/**
	*当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
	*/
	__proto.toString=function(){
		return this.x+","+this.y+","+this.width+","+this.height;
	}

	/**
	*检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
	*@param rect 待比较的 Rectangle 对象。
	*@return 如果判断的属性都相等，则返回 true ,否则返回 false。
	*/
	__proto.equals=function(rect){
		if (!rect || rect.x!==this.x || rect.y!==this.y || rect.width!==this.width || rect.height!==this.height)return false;
		return true;
	}

	/**
	*<p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
	*<p>此方法会修改本对象。</p>
	*@param x 点的 X 坐标。
	*@param y 点的 Y 坐标。
	*@return 返回此 Rectangle 对象。
	*/
	__proto.addPoint=function(x,y){
		this.x > x && (this.width+=this.x-x,this.x=x);
		this.y > y && (this.height+=this.y-y,this.y=y);
		if (this.width < x-this.x)this.width=x-this.x;
		if (this.height < y-this.y)this.height=y-this.y;
		return this;
	}

	/**
	*@private
	*返回代表当前矩形的顶点数据。
	*@return 顶点数据。
	*/
	__proto._getBoundPoints=function(){
		var rst=Rectangle._temB;
		rst.length=0;
		if (this.width==0 || this.height==0)return rst;
		rst.push(this.x,this.y,this.x+this.width,this.y,this.x,this.y+this.height,this.x+this.width,this.y+this.height);
		return rst;
	}

	/**
	*确定此 Rectangle 对象是否为空。
	*@return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
	*/
	__proto.isEmpty=function(){
		if (this.width <=0 || this.height <=0)return true;
		return false;
	}

	/**此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/
	__getset(0,__proto,'right',function(){
		return this.x+this.width;
	});

	/**此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/
	__getset(0,__proto,'bottom',function(){
		return this.y+this.height;
	});

	Rectangle._getBoundPointS=function(x,y,width,height){
		var rst=Rectangle._temA;
		rst.length=0;
		if (width==0 || height==0)return rst;
		rst.push(x,y,x+width,y,x,y+height,x+width,y+height);
		return rst;
	}

	Rectangle._getWrapRec=function(pointList,rst){
		if (!pointList || pointList.length < 1)return rst ? rst.setTo(0,0,0,0):Rectangle.TEMP.setTo(0,0,0,0);
		rst=rst ? rst :new Rectangle();
		var i,len=pointList.length,minX,maxX,minY,maxY,tPoint=Point.TEMP;
		minX=minY=99999;
		maxX=maxY=-minX;
		for (i=0;i < len;i+=2){
			tPoint.x=pointList[i];
			tPoint.y=pointList[i+1];
			minX=minX < tPoint.x ? minX :tPoint.x;
			minY=minY < tPoint.y ? minY :tPoint.y;
			maxX=maxX > tPoint.x ? maxX :tPoint.x;
			maxY=maxY > tPoint.y ? maxY :tPoint.y;
		}
		return rst.setTo(minX,minY,maxX-minX,maxY-minY);
	}

	Rectangle._temB=[];
	Rectangle._temA=[];
	__static(Rectangle,
	['EMPTY',function(){return this.EMPTY=new Rectangle();},'TEMP',function(){return this.TEMP=new Rectangle();}
	]);
	return Rectangle;
})()


/**
*<code>SoundManager</code> 是一个声音管理类。提供了对背景音乐、音效的播放控制方法。
*引擎默认有两套声音方案：WebAudio和H5Audio
*播放音效，优先使用WebAudio播放声音，如果WebAudio不可用，则用H5Audio播放，H5Audio在部分机器上有兼容问题（比如不能混音，播放有延迟等）。
*播放背景音乐，则使用H5Audio播放（使用WebAudio会增加特别大的内存，并且要等加载完毕后才能播放，有延迟）
*建议背景音乐用mp3类型，音效用wav或者mp3类型（如果打包为app，音效只能用wav格式）。
*详细教程及声音格式请参考：http://ldc.layabox.com/doc/?nav=ch-as-1-7-0
*/
//class laya.media.SoundManager
var SoundManager=(function(){
	function SoundManager(){}
	__class(SoundManager,'laya.media.SoundManager');
	__getset(1,SoundManager,'useAudioMusic',function(){
		return SoundManager._useAudioMusic;
		},function(value){
		SoundManager._useAudioMusic=value;
		if (value)SoundManager._musicClass=AudioSound;
	});

	/**
	*失去焦点后是否自动停止背景音乐。
	*@param v Boolean 失去焦点后是否自动停止背景音乐。
	*
	*/
	/**
	*失去焦点后是否自动停止背景音乐。
	*/
	__getset(1,SoundManager,'autoStopMusic',function(){
		return SoundManager._autoStopMusic;
		},function(v){
		Laya.stage.off(/*laya.events.Event.BLUR*/"blur",null,SoundManager._stageOnBlur);
		Laya.stage.off(/*laya.events.Event.FOCUS*/"focus",null,SoundManager._stageOnFocus);
		Laya.stage.off(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange",null,SoundManager._visibilityChange);
		SoundManager._autoStopMusic=v;
		if (v){
			Laya.stage.on(/*laya.events.Event.BLUR*/"blur",null,SoundManager._stageOnBlur);
			Laya.stage.on(/*laya.events.Event.FOCUS*/"focus",null,SoundManager._stageOnFocus);
			Laya.stage.on(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange",null,SoundManager._visibilityChange);
		}
	});

	/**
	*背景音乐和所有音效是否静音。
	*/
	__getset(1,SoundManager,'muted',function(){
		return SoundManager._muted;
		},function(value){
		if (value){
			SoundManager.stopAllSound();
		}
		SoundManager.musicMuted=value;
		SoundManager._muted=value;
	});

	/**
	*背景音乐（不包括音效）是否静音。
	*/
	__getset(1,SoundManager,'musicMuted',function(){
		return SoundManager._musicMuted;
		},function(value){
		if (value){
			if (SoundManager._tMusic)
				SoundManager.stopSound(SoundManager._tMusic);
			SoundManager._musicMuted=value;
			}else {
			SoundManager._musicMuted=value;
			if (SoundManager._tMusic){
				SoundManager.playMusic(SoundManager._tMusic);
			}
		}
	});

	/**
	*所有音效（不包括背景音乐）是否静音。
	*/
	__getset(1,SoundManager,'soundMuted',function(){
		return SoundManager._soundMuted;
		},function(value){
		SoundManager._soundMuted=value;
	});

	SoundManager.addChannel=function(channel){
		if (SoundManager._channels.indexOf(channel)>=0)return;
		SoundManager._channels.push(channel);
	}

	SoundManager.removeChannel=function(channel){
		var i=0;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			if (SoundManager._channels[i]==channel){
				SoundManager._channels.splice(i,1);
			}
		}
	}

	SoundManager.disposeSoundIfNotUsed=function(url){
		var i=0;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			if (SoundManager._channels[i].url==url){
				return;
			}
		}
		SoundManager.destroySound(url);
	}

	SoundManager._visibilityChange=function(){
		if (Laya.stage.isVisibility){
			SoundManager._stageOnFocus();
			}else {
			SoundManager._stageOnBlur();
		}
	}

	SoundManager._stageOnBlur=function(){
		SoundManager._isActive=false;
		if (SoundManager._musicChannel){
			if (!SoundManager._musicChannel.isStopped){
				SoundManager._blurPaused=true;
				SoundManager._musicLoops=SoundManager._musicChannel.loops;
				SoundManager._musicCompleteHandler=SoundManager._musicChannel.completeHandler;
				SoundManager._musicPosition=SoundManager._musicChannel.position;
				SoundManager._musicChannel.stop();
				Laya.stage.once(/*laya.events.Event.MOUSE_DOWN*/"mousedown",null,SoundManager._stageOnFocus);
			}
		}
		SoundManager.stopAllSound();
	}

	SoundManager._stageOnFocus=function(){
		SoundManager._isActive=true;
		Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",null,SoundManager._stageOnFocus);
		if (SoundManager._blurPaused){
			if (SoundManager._tMusic){
				SoundManager.playMusic(SoundManager._tMusic,SoundManager._musicLoops,SoundManager._musicCompleteHandler,SoundManager._musicPosition);
			}
			SoundManager._blurPaused=false;
		}
	}

	SoundManager.playSound=function(url,loops,complete,soundClass,startTime){
		(loops===void 0)&& (loops=1);
		(startTime===void 0)&& (startTime=0);
		if (!SoundManager._isActive || !url)return null;
		if (SoundManager._muted)return null;
		url=URL.formatURL(url);
		if (url==SoundManager._tMusic){
			if (SoundManager._musicMuted)return null;
			}else {
			if (Render.isConchApp){
				var ext=Utils.getFileExtension(url);
				if (ext !="wav" && ext !="ogg"){
					alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.");
					return null;
				}
			}
			if (SoundManager._soundMuted)return null;
		};
		var tSound=Laya.loader.getRes(url);
		if (!soundClass)soundClass=SoundManager._soundClass;
		if (!tSound){
			tSound=new soundClass();
			tSound.load(url);
			Loader.cacheRes(url,tSound);
		};
		var channel;
		channel=tSound.play(startTime,loops);
		if (!channel)return null;
		channel.url=url;
		channel.volume=(url==SoundManager._tMusic)? SoundManager.musicVolume :SoundManager.soundVolume;
		channel.completeHandler=complete;
		return channel;
	}

	SoundManager.destroySound=function(url){
		var tSound=Laya.loader.getRes(url);
		if (tSound){
			Loader.clearRes(url);
			tSound.dispose();
		}
	}

	SoundManager.playMusic=function(url,loops,complete,startTime){
		(loops===void 0)&& (loops=0);
		(startTime===void 0)&& (startTime=0);
		url=URL.formatURL(url);
		SoundManager._tMusic=url;
		if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
		return SoundManager._musicChannel=SoundManager.playSound(url,loops,complete,SoundManager._musicClass,startTime);
	}

	SoundManager.stopSound=function(url){
		url=URL.formatURL(url);
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url==url){
				channel.stop();
			}
		}
	}

	SoundManager.stopAll=function(){
		SoundManager._tMusic=null;
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			channel.stop();
		}
	}

	SoundManager.stopAllSound=function(){
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url !=SoundManager._tMusic){
				channel.stop();
			}
		}
	}

	SoundManager.stopMusic=function(){
		if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
		SoundManager._tMusic=null;
	}

	SoundManager.setSoundVolume=function(volume,url){
		if (url){
			url=URL.formatURL(url);
			SoundManager._setVolume(url,volume);
			}else {
			SoundManager.soundVolume=volume;
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url !=SoundManager._tMusic){
					channel.volume=volume;
				}
			}
		}
	}

	SoundManager.setMusicVolume=function(volume){
		SoundManager.musicVolume=volume;
		SoundManager._setVolume(SoundManager._tMusic,volume);
	}

	SoundManager._setVolume=function(url,volume){
		url=URL.formatURL(url);
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url==url){
				channel.volume=volume;
			}
		}
	}

	SoundManager.musicVolume=1;
	SoundManager.soundVolume=1;
	SoundManager.playbackRate=1;
	SoundManager._useAudioMusic=true;
	SoundManager._muted=false;
	SoundManager._soundMuted=false;
	SoundManager._musicMuted=false;
	SoundManager._tMusic=null;
	SoundManager._musicChannel=null;
	SoundManager._channels=[];
	SoundManager._autoStopMusic=false;
	SoundManager._blurPaused=false;
	SoundManager._isActive=true;
	SoundManager._musicLoops=0;
	SoundManager._musicPosition=0;
	SoundManager._musicCompleteHandler=null;
	SoundManager._soundClass=null;
	SoundManager._musicClass=null;
	SoundManager.autoReleaseSound=true;
	return SoundManager;
})()


/**
*<p> <code>LocalStorage</code> 类用于没有时间限制的数据存储。</p>
*/
//class laya.net.LocalStorage
var LocalStorage=(function(){
	var Storage;
	function LocalStorage(){}
	__class(LocalStorage,'laya.net.LocalStorage');
	LocalStorage.__init__=function(){
		if (!LocalStorage._baseClass){
			LocalStorage._baseClass=Storage;
			Storage.init();
		}
		LocalStorage.items=LocalStorage._baseClass.items;
		LocalStorage.support=LocalStorage._baseClass.support;
	}

	LocalStorage.setItem=function(key,value){
		LocalStorage._baseClass.setItem(key,value);
	}

	LocalStorage.getItem=function(key){
		return LocalStorage._baseClass.getItem(key);
	}

	LocalStorage.setJSON=function(key,value){
		LocalStorage._baseClass.setJSON(key,value);
	}

	LocalStorage.getJSON=function(key){
		return LocalStorage._baseClass.getJSON(key);
	}

	LocalStorage.removeItem=function(key){
		LocalStorage._baseClass.removeItem(key);
	}

	LocalStorage.clear=function(){
		LocalStorage._baseClass.clear();
	}

	LocalStorage._baseClass=null;
	LocalStorage.items=null;
	LocalStorage.support=false;
	LocalStorage.__init$=function(){
		//class Storage
		Storage=(function(){
			function Storage(){}
			__class(Storage,'');
			Storage.init=function(){
				/*__JS__ */try{Storage.items=window.localStorage;Storage.setItem('laya','1');Storage.removeItem('laya');Storage.support=true;}catch(e){}if(!Storage.support)console.log('LocalStorage is not supprot or browser is private mode.');
			}
			Storage.setItem=function(key,value){
				try {
					Storage.support && Storage.items.setItem(key,value);
					}catch (e){
					console.warn("set localStorage failed",e);
				}
			}
			Storage.getItem=function(key){
				return Storage.support ? Storage.items.getItem(key):null;
			}
			Storage.setJSON=function(key,value){
				try {
					Storage.support && Storage.items.setItem(key,JSON.stringify(value));
					}catch (e){
					console.warn("set localStorage failed",e);
				}
			}
			Storage.getJSON=function(key){
				return JSON.parse(Storage.support ? Storage.items.getItem(key):null);
			}
			Storage.removeItem=function(key){
				Storage.support && Storage.items.removeItem(key);
			}
			Storage.clear=function(){
				Storage.support && Storage.items.clear();
			}
			Storage.items=null;
			Storage.support=false;
			return Storage;
		})()
	}

	return LocalStorage;
})()


/**
*<p>资源版本的生成由layacmd或IDE完成，使用 <code>ResourceVersion</code> 简化使用过程。</p>
*<p>调用 <code>enable</code> 启用资源版本管理。</p>
*/
//class laya.net.ResourceVersion
var ResourceVersion=(function(){
	function ResourceVersion(){}
	__class(ResourceVersion,'laya.net.ResourceVersion');
	ResourceVersion.enable=function(manifestFile,callback,type){
		(type===void 0)&& (type=2);
		laya.net.ResourceVersion.type=type;
		Laya.loader.load(manifestFile,Handler.create(null,ResourceVersion.onManifestLoaded,[callback]),null,/*laya.net.Loader.JSON*/"json");
		URL.customFormat=ResourceVersion.addVersionPrefix;
	}

	ResourceVersion.onManifestLoaded=function(callback,data){
		ResourceVersion.manifest=data;
		callback.run();
		if (!data){
			console.warn("资源版本清单文件不存在，不使用资源版本管理。忽略ERR_FILE_NOT_FOUND错误。");
		}
	}

	ResourceVersion.addVersionPrefix=function(originURL){
		if (ResourceVersion.manifest && ResourceVersion.manifest[originURL]){
			if (ResourceVersion.type==2)return ResourceVersion.manifest[originURL];
			return ResourceVersion.manifest[originURL]+"/"+originURL;
		}
		return originURL;
	}

	ResourceVersion.FOLDER_VERSION=1;
	ResourceVersion.FILENAME_VERSION=2;
	ResourceVersion.manifest=null;
	ResourceVersion.type=1;
	return ResourceVersion;
})()


/**
*@private
*/
//class laya.net.TTFLoader
var TTFLoader=(function(){
	function TTFLoader(){
		this.fontName=null;
		this.complete=null;
		this._fontTxt=null;
		this._url=null;
		this._div=null;
		this._txtWidth=NaN;
	}

	__class(TTFLoader,'laya.net.TTFLoader');
	var __proto=TTFLoader.prototype;
	__proto.load=function(fontPath){
		this._url=fontPath;
		var tArr=fontPath.split(".ttf")[0].split("/");
		this.fontName=tArr[tArr.length-1];
		if (Browser.window.FontFace){
			this._loadWithFontFace()
		}
		else {
			this._loadWithCSS();
		}
	}

	__proto._complete=function(){
		Laya.timer.clear(this,this._complete);
		Laya.timer.clear(this,this._checkComplete);
		if (this._div && this._div.parentNode){
			this._div.parentNode.removeChild(this._div);
			this._div=null;
		}
		if (this.complete){
			this.complete.runWith(this);
			this.complete=null;
		}
	}

	__proto._checkComplete=function(){
		if (RunDriver.measureText("LayaTTFFont",this._fontTxt).width !=this._txtWidth){
			this._complete();
		}
	}

	__proto._loadWithFontFace=function(){
		var fontFace=new Browser.window.FontFace(this.fontName,"url('"+this._url+"')");
		Browser.window.document.fonts.add(fontFace);
		var self=this;
		fontFace.loaded.then((function(){
			self._complete()
		}));
		fontFace.load();
	}

	__proto._createDiv=function(){
		this._div=Browser.createElement("div");
		this._div.innerHTML="laya";
		var _style=this._div.style;
		_style.fontFamily=this.fontName;
		_style.position="absolute";
		_style.left="-100px";
		_style.top="-100px";
		Browser.document.body.appendChild(this._div);
	}

	__proto._loadWithCSS=function(){
		var _$this=this;
		var fontStyle=Browser.createElement("style");
		fontStyle.type="text/css";
		Browser.document.body.appendChild(fontStyle);
		fontStyle.textContent="@font-face { font-family:'"+this.fontName+"'; src:url('"+this._url+"');}";
		this._fontTxt="40px "+this.fontName;
		this._txtWidth=RunDriver.measureText("LayaTTFFont",this._fontTxt).width;
		var self=this;
		fontStyle.onload=function (){
			Laya.timer.once(10000,self,_$this._complete);
		};
		Laya.timer.loop(20,this,this._checkComplete);
		this._createDiv();
	}

	TTFLoader._testString="LayaTTFFont";
	return TTFLoader;
})()


/**
*<p> <code>URL</code> 类用于定义地址信息。</p>
*/
//class laya.net.URL
var URL=(function(){
	function URL(url){
		/**@private */
		this._url=null;
		/**@private */
		this._path=null;
		this._url=URL.formatURL(url);
		this._path=URL.getPath(url);
	}

	__class(URL,'laya.net.URL');
	var __proto=URL.prototype;
	/**地址的路径。*/
	__getset(0,__proto,'path',function(){
		return this._path;
	});

	/**格式化后的地址。*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	URL.formatURL=function(url,base){
		if (!url)return "null path";
		if (url.indexOf(":")> 0)return url;
		if (URL.customFormat !=null)url=URL.customFormat(url,base);
		var char1=url.charAt(0);
		if (char1==="."){
			return URL.formatRelativePath((base || URL.basePath)+url);
			}else if (char1==='~'){
			return URL.rootPath+url.substring(1);
			}else if (char1==="d"){
			if (url.indexOf("data:image")===0)return url;
			}else if (char1==="/"){
			return url;
		}
		return (base || URL.basePath)+url;
	}

	URL.formatRelativePath=function(value){
		var parts=value.split("/");
		for (var i=0,len=parts.length;i < len;i++){
			if (parts[i]=='..'){
				parts.splice(i-1,2);
				i-=2;
			}
		}
		return parts.join('/');
	}

	URL.isAbsolute=function(url){
		return url.indexOf(":")> 0 || url.charAt(0)=='/';
	}

	URL.getPath=function(url){
		var ofs=url.lastIndexOf('/');
		return ofs > 0 ? url.substr(0,ofs+1):"";
	}

	URL.getFileName=function(url){
		var ofs=url.lastIndexOf('/');
		return ofs > 0 ? url.substr(ofs+1):url;
	}

	URL.version={};
	URL.basePath="";
	URL.rootPath="";
	URL.customFormat=function(url){
		var newUrl=URL.version[url];
		if (!Render.isConchApp && newUrl)url+="?v="+newUrl;
		return url;
	}

	return URL;
})()


/**
*@private
*<code>Render</code> 是渲染管理类。它是一个单例，可以使用 Laya.render 访问。
*/
//class laya.renders.Render
var Render=(function(){
	function Render(width,height){
		/**@private */
		this._timeId=0;
		var style=Render._mainCanvas.source.style;
		style.position='absolute';
		style.top=style.left="0px";
		style.background="#000000";
		Render._mainCanvas.source.id="layaCanvas";
		var isWebGl=laya.renders.Render.isWebGL;
		Render._mainCanvas.source.width=width;
		Render._mainCanvas.source.height=height;
		isWebGl && Render.WebGL.init(Render._mainCanvas,width,height);
		Browser.container.appendChild(Render._mainCanvas.source);
		Render._context=new RenderContext(width,height,isWebGl ? null :Render._mainCanvas);
		Render._context.ctx.setIsMainContext();
		Browser.window.requestAnimationFrame(loop);
		function loop (){
			Laya.stage._loop();
			Browser.window.requestAnimationFrame(loop);
		}
		Laya.stage.on("visibilitychange",this,this._onVisibilitychange);
	}

	__class(Render,'laya.renders.Render');
	var __proto=Render.prototype;
	/**@private */
	__proto._onVisibilitychange=function(){
		if (!Laya.stage.isVisibility){
			this._timeId=Browser.window.setInterval(this._enterFrame,1000);
			}else if (this._timeId !=0){
			Browser.window.clearInterval(this._timeId);
		}
	}

	/**@private */
	__proto._enterFrame=function(e){
		Laya.stage._loop();
	}

	/**目前使用的渲染器。*/
	__getset(1,Render,'context',function(){
		return Render._context;
	});

	/**渲染使用的原生画布引用。 */
	__getset(1,Render,'canvas',function(){
		return Render._mainCanvas.source;
	});

	Render._context=null;
	Render._mainCanvas=null;
	Render.WebGL=null;
	Render.isConchNode=false;
	Render.isConchApp=false;
	Render.isConchWebGL=false;
	Render.isWebGL=false;
	Render.is3DMode=false;
	Render.optimizeTextureMemory=function(url,texture){
		return true;
	}

	Render.__init$=function(){
		/*__JS__ */window.ConchRenderType=window.ConchRenderType||1;
		/*__JS__ */window.ConchRenderType|=(!window.conch?0:0x04);;{
			Render.isConchNode=/*__JS__ */(window.ConchRenderType & 5)==5;
			Render.isConchApp=/*__JS__ */(window.ConchRenderType & 0x04)==0x04;
			Render.isConchWebGL=/*__JS__ */window.ConchRenderType==6;
		};;
	}

	return Render;
})()


/**
*@private
*渲染环境
*/
//class laya.renders.RenderContext
var RenderContext=(function(){
	function RenderContext(width,height,canvas){
		/**全局x坐标 */
		this.x=0;
		/**全局y坐标 */
		this.y=0;
		/**当前使用的画布 */
		//this.canvas=null;
		/**当前使用的画布上下文 */
		//this.ctx=null;
		this._drawTexture=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTexture(args[0],args[1],args[2],args[3],args[4],x,y);
		}
		this._fillTexture=function(x,y,args){
			if (args[0].loaded)this.ctx.fillTexture(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}
		this._drawTextureWithTransform=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTextureWithTransform(args[0],args[1],args[2],args[3],args[4],args[5],x,y,args[6]);
		}
		this._fillQuadrangle=function(x,y,args){
			this.ctx.fillQuadrangle(args[0],args[1],args[2],args[3],args[4]);
		}
		this._drawRect=function(x,y,args){
			var ctx=this.ctx;
			if (args[4] !=null){
				ctx.fillStyle=args[4];
				ctx.fillRect(x+args[0],y+args[1],args[2],args[3],null);
			}
			if (args[5] !=null){
				ctx.strokeStyle=args[5];
				ctx.lineWidth=args[6];
				ctx.strokeRect(x+args[0],y+args[1],args[2],args[3],args[6]);
			}
		}
		//矢量方法
		this._drawPie=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[8]);
			ctx.beginPath();
			if (Render.isWebGL){
				ctx.movePath(args[0]+x,args[1]+y);
				ctx.moveTo(0,0);
				}else {
				ctx.moveTo(x+args[0],y+args[1]);
			}
			ctx.arc(x+args[0],y+args[1],args[2],args[3],args[4]);
			ctx.closePath();
			this._fillAndStroke(args[5],args[6],args[7],true);
		}
		this._clipRect=function(x,y,args){
			this.ctx.clipRect(x+args[0],y+args[1],args[2],args[3]);
		}
		this._fillRect=function(x,y,args){
			this.ctx.fillRect(x+args[0],y+args[1],args[2],args[3],args[4]);
		}
		this._drawCircle=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[6]);
			Stat.drawCall++;
			ctx.beginPath();
			Render.isWebGL && ctx.movePath(args[0]+x,args[1]+y);
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.closePath();
			this._fillAndStroke(args[3],args[4],args[5],true);
		}
		this._fillCircle=function(x,y,args){
			Stat.drawCall++;
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.fillStyle=args[3];
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.fill();
		}
		this._setShader=function(x,y,args){
			this.ctx.setShader(args[0]);
		}
		this._drawLine=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[6]);
			ctx.beginPath();
			ctx.strokeStyle=args[4];
			ctx.lineWidth=args[5];
			if (Render.isWebGL){
				ctx.movePath(x,y);
				ctx.moveTo(args[0],args[1]);
				ctx.lineTo(args[2],args[3]);
				}else {
				ctx.moveTo(x+args[0],y+args[1]);
				ctx.lineTo(x+args[2],y+args[3]);
			}
			ctx.stroke();
		}
		this._drawLines=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[5]);
			ctx.beginPath();
			x+=args[0],y+=args[1];
			Render.isWebGL && ctx.movePath(x,y);
			ctx.strokeStyle=args[3];
			ctx.lineWidth=args[4];
			var points=args[2];
			var i=2,n=points.length;
			if (Render.isWebGL){
				ctx.moveTo(points[0],points[1]);
				while (i < n){
					ctx.lineTo(points[i++],points[i++]);
				}
				}else {
				ctx.moveTo(x+points[0],y+points[1]);
				while (i < n){
					ctx.lineTo(x+points[i++],y+points[i++]);
				}
			}
			ctx.stroke();
		}
		this._drawLinesWebGL=function(x,y,args){
			this.ctx.drawLines(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4]);
		}
		//x:Number,y:Number,points:Array,lineColor:String,lineWidth:Number=1
		this._drawCurves=function(x,y,args){
			this.ctx.drawCurves(x,y,args);
		}
		this._draw=function(x,y,args){
			args[0].call(null,this,x,y);
		}
		this._transformByMatrix=function(x,y,args){
			this.ctx.transformByMatrix(args[0]);
		}
		this._setTransform=function(x,y,args){
			this.ctx.setTransform(args[0],args[1],args[2],args[3],args[4],args[5]);
		}
		this._setTransformByMatrix=function(x,y,args){
			this.ctx.setTransformByMatrix(args[0]);
		}
		this._save=function(x,y,args){
			this.ctx.save();
		}
		this._restore=function(x,y,args){
			this.ctx.restore();
		}
		this._translate=function(x,y,args){
			this.ctx.translate(args[0],args[1]);
		}
		this._transform=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			var mat=args[0];
			this.ctx.transform(mat.a,mat.b,mat.c,mat.d,mat.tx,mat.ty);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}
		this._rotate=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			this.ctx.rotate(args[0]);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}
		this._scale=function(x,y,args){
			this.ctx.translate(args[2]+x,args[3]+y);
			this.ctx.scale(args[0],args[1]);
			this.ctx.translate(-x-args[2],-y-args[3]);
		}
		this._alpha=function(x,y,args){
			this.ctx.globalAlpha *=args[0];
		}
		this._setAlpha=function(x,y,args){
			this.ctx.globalAlpha=args[0];
		}
		this._fillText=function(x,y,args){
			this.ctx.fillText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5]);
		}
		this._strokeText=function(x,y,args){
			this.ctx.strokeText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6]);
		}
		this._fillBorderText=function(x,y,args){
			this.ctx.fillBorderText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}
		this._blendMode=function(x,y,args){
			this.ctx.globalCompositeOperation=args[0];
		}
		this._beginClip=function(x,y,args){
			this.ctx.beginClip && this.ctx.beginClip(x+args[0],y+args[1],args[2],args[3]);
		}
		this._setIBVB=function(x,y,args){
			this.ctx.setIBVB(args[0]+x,args[1]+y,args[2],args[3],args[4],args[5],args[6],args[7]);
		}
		this._fillTrangles=function(x,y,args){
			this.ctx.fillTrangles(args[0],args[1]+x,args[2]+y,args[3],args[4]);
		}
		//x:Number,y:Number,paths:Array,brush:Object=null,pen:Object=null
		this._drawPath=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(-1);
			ctx.beginPath();
			x+=args[0],y+=args[1];
			Render.isWebGL && ctx.movePath(x,y);
			var paths=args[2];
			for (var i=0,n=paths.length;i < n;i++){
				var path=paths[i];
				switch (path[0]){
					case "moveTo":
						Render.isWebGL ? ctx.moveTo(path[1],path[2]):ctx.moveTo(x+path[1],y+path[2]);
						break ;
					case "lineTo":
						Render.isWebGL ? ctx.lineTo(path[1],path[2]):ctx.lineTo(x+path[1],y+path[2]);
						break ;
					case "arcTo":
						Render.isWebGL ? ctx.arcTo(path[1],path[2],path[3],path[4],path[5]):ctx.arcTo(x+path[1],y+path[2],x+path[3],y+path[4],path[5]);
						break ;
					case "closePath":
						ctx.closePath();
						break ;
					}
			};
			var brush=args[3];
			if (brush !=null){
				ctx.fillStyle=brush.fillStyle;
				ctx.fill();
			};
			var pen=args[4];
			if (pen !=null){
				ctx.strokeStyle=pen.strokeStyle;
				ctx.lineWidth=pen.lineWidth || 1;
				ctx.lineJoin=pen.lineJoin;
				ctx.lineCap=pen.lineCap;
				ctx.miterLimit=pen.miterLimit;
				ctx.stroke();
			}
		}
		// polygon(x:Number,y:Number,r:Number,edges:Number,color:uint,borderWidth:int=2,borderColor:uint=0)
		this.drawPoly=function(x,y,args){
			this.ctx.drawPoly(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4],args[5],args[6]);
		}
		//x:Number,y:Number,points:Array,fillColor:String,lineColor:String=null,lineWidth:Number=1
		this._drawPoly=function(x,y,args){
			var ctx=this.ctx;
			var points=args[2];
			var i=2,n=points.length;
			if (Render.isWebGL){
				ctx.setPathId(args[6]);
				ctx.beginPath();
				x+=args[0],y+=args[1];
				ctx.movePath(x,y);
				ctx.moveTo(points[0],points[1]);
				while (i < n){
					ctx.lineTo(points[i++],points[i++]);
				}
				}else {
				ctx.beginPath();
				x+=args[0],y+=args[1];
				ctx.moveTo(x+points[0],y+points[1]);
				while (i < n){
					ctx.lineTo(x+points[i++],y+points[i++]);
				}
			}
			ctx.closePath();
			this._fillAndStroke(args[3],args[4],args[5],args[7]);
		}
		this._drawSkin=function(x,y,args){
			var tSprite=args[0];
			if (tSprite){
				var ctx=this.ctx;
				tSprite.render(ctx,x,y);
			}
		}
		this._drawParticle=function(x,y,args){
			this.ctx.drawParticle(x+this.x,y+this.y,args[0]);
		}
		this._setFilters=function(x,y,args){
			this.ctx.setFilters(args);
		}
		if (canvas){
			this.ctx=canvas.getContext('2d');
			}else {
			canvas=HTMLCanvas.create("3D");
			this.ctx=RunDriver.createWebGLContext2D(canvas);
			canvas._setContext(this.ctx);
		}
		canvas.size(width,height);
		this.canvas=canvas;
	}

	__class(RenderContext,'laya.renders.RenderContext');
	var __proto=RenderContext.prototype;
	/**销毁当前渲染环境*/
	__proto.destroy=function(){
		if (this.canvas){
			this.canvas.destroy();
			this.canvas=null;
			this.ctx=null;
		}
		if (this.ctx){
			this.ctx.destroy();
			this.ctx=null;
		}
	}

	__proto.drawTexture=function(tex,x,y,width,height){
		if (tex.loaded)this.ctx.drawTexture(tex,x,y,width,height,this.x,this.y);
	}

	__proto._drawTextures=function(x,y,args){
		if (args[0].loaded)this.ctx.drawTextures(args[0],args[1],x+this.x,y+this.y);
	}

	__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,alpha){
		if (tex.loaded)this.ctx.drawTextureWithTransform(tex,x,y,width,height,m,this.x,this.y,alpha);
	}

	__proto.fillQuadrangle=function(tex,x,y,point4,m){
		this.ctx.fillQuadrangle(tex,x,y,point4,m);
	}

	__proto.drawCanvas=function(canvas,x,y,width,height){
		this.ctx.drawCanvas(canvas,x+this.x,y+this.y,width,height);
	}

	__proto.drawRect=function(x,y,width,height,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var ctx=this.ctx;
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.strokeRect(x+this.x,y+this.y,width,height,lineWidth);
	}

	__proto._fillAndStroke=function(fillColor,strokeColor,lineWidth,isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		var ctx=this.ctx;
		if (fillColor !=null){
			ctx.fillStyle=fillColor;
			if (Render.isWebGL){
				ctx.fill(isConvexPolygon);
				}else {
				ctx.fill();
			}
		}
		if (strokeColor !=null && lineWidth > 0){
			ctx.strokeStyle=strokeColor;
			ctx.lineWidth=lineWidth;
			ctx.stroke();
		}
	}

	//ctx.translate(-x-args[0],-y-args[1]);
	__proto.clipRect=function(x,y,width,height){
		this.ctx.clipRect(x+this.x,y+this.y,width,height);
	}

	__proto.fillRect=function(x,y,width,height,fillStyle){
		this.ctx.fillRect(x+this.x,y+this.y,width,height,fillStyle);
	}

	__proto.drawCircle=function(x,y,radius,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		Stat.drawCall++;
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
		ctx.stroke();
	}

	__proto.fillCircle=function(x,y,radius,color){
		Stat.drawCall++;
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.fillStyle=color;
		ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
		ctx.fill();
	}

	__proto.setShader=function(shader){
		this.ctx.setShader(shader);
	}

	__proto.drawLine=function(fromX,fromY,toX,toY,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.moveTo(this.x+fromX,this.y+fromY);
		ctx.lineTo(this.x+toX,this.y+toY);
		ctx.stroke();
	}

	__proto.clear=function(){
		this.ctx.clear();
	}

	__proto.transformByMatrix=function(value){
		this.ctx.transformByMatrix(value);
	}

	__proto.setTransform=function(a,b,c,d,tx,ty){
		this.ctx.setTransform(a,b,c,d,tx,ty);
	}

	__proto.setTransformByMatrix=function(value){
		this.ctx.setTransformByMatrix(value);
	}

	__proto.save=function(){
		this.ctx.save();
	}

	__proto.restore=function(){
		this.ctx.restore();
	}

	__proto.translate=function(x,y){
		this.ctx.translate(x,y);
	}

	__proto.transform=function(a,b,c,d,tx,ty){
		this.ctx.transform(a,b,c,d,tx,ty);
	}

	__proto.rotate=function(angle){
		this.ctx.rotate(angle);
	}

	__proto.scale=function(scaleX,scaleY){
		this.ctx.scale(scaleX,scaleY);
	}

	__proto.alpha=function(value){
		this.ctx.globalAlpha *=value;
	}

	__proto.setAlpha=function(value){
		this.ctx.globalAlpha=value;
	}

	__proto.fillWords=function(words,x,y,font,color,underLine){
		(underLine===void 0)&& (underLine=0);
		this.ctx.fillWords(words,x,y,font,color,underLine);
	}

	/***@private */
	__proto.fillBorderWords=function(words,x,y,font,fillColor,borderColor,lineWidth){
		this.ctx.fillBorderWords(words,x,y,font,fillColor,borderColor,lineWidth);
	}

	__proto.fillText=function(text,x,y,font,color,textAlign){
		this.ctx.fillText(text,x+this.x,y+this.y,font,color,textAlign);
	}

	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		this.ctx.strokeText(text,x+this.x,y+this.y,font,color,lineWidth,textAlign);
	}

	__proto.blendMode=function(type){
		this.ctx.globalCompositeOperation=type;
	}

	__proto.flush=function(){
		this.ctx.flush && this.ctx.flush();
	}

	__proto.addRenderObject=function(o){
		this.ctx.addRenderObject(o);
	}

	__proto.beginClip=function(x,y,w,h){
		this.ctx.beginClip && this.ctx.beginClip(x,y,w,h);
	}

	__proto.endClip=function(){
		this.ctx.endClip && this.ctx.endClip();
	}

	__proto.fillTrangles=function(x,y,args){
		this.ctx.fillTrangles(args[0],args[1],args[2],args[3],args.length > 4 ? args[4] :null);
	}

	__static(RenderContext,
	['PI2',function(){return this.PI2=2 *Math.PI;}
	]);
	return RenderContext;
})()


/**
*@private
*精灵渲染器
*/
//class laya.renders.RenderSprite
var RenderSprite=(function(){
	function RenderSprite(type,next){
		/**@private */
		//this._next=null;
		/**@private */
		//this._fun=null;
		this._next=next || RenderSprite.NORENDER;
		switch (type){
			case 0:
				this._fun=this._no;
				return;
			case 0x01:
				this._fun=this._image;
				return;
			case 0x02:
				this._fun=this._alpha;
				return;
			case 0x04:
				this._fun=this._transform;
				return;
			case 0x08:
				this._fun=this._blend;
				return;
			case 0x10:
				this._fun=this._canvas;
				return;
			case 0x40:
				this._fun=this._mask;
				return;
			case 0x80:
				this._fun=this._clip;
				return;
			case 0x100:
				this._fun=this._style;
				return;
			case 0x200:
				this._fun=this._graphics;
				return;
			case 0x800:
				this._fun=this._childs;
				return;
			case 0x400:
				this._fun=this._custom;
				return;
			case 0x01 | 0x200:
				this._fun=this._image2;
				return;
			case 0x01 | 0x04 | 0x200:
				this._fun=this._image2;
				return;
			case 0x20:
				this._fun=Filter._filter;
				return;
			case 0x11111:
				this._fun=RenderSprite._initRenderFun;
				return;
			}
		this.onCreate(type);
	}

	__class(RenderSprite,'laya.renders.RenderSprite');
	var __proto=RenderSprite.prototype;
	__proto.onCreate=function(type){}
	__proto._style=function(sprite,context,x,y){
		sprite._style.render(sprite,context,x,y);
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
	}

	__proto._no=function(sprite,context,x,y){}
	__proto._custom=function(sprite,context,x,y){
		sprite.customRender(context,x,y);
		var tf=sprite._style._tf;
		this._next._fun.call(this._next,sprite,context,x-tf.translateX,y-tf.translateY);
	}

	__proto._clip=function(sprite,context,x,y){
		var next=this._next;
		if (next==RenderSprite.NORENDER)return;
		var r=sprite._style.scrollRect;
		context.ctx.save();
		context.ctx.clipRect(x,y,r.width,r.height);
		next._fun.call(next,sprite,context,x-r.x,y-r.y);
		context.ctx.restore();
	}

	__proto._blend=function(sprite,context,x,y){
		var style=sprite._style;
		if (style.blendMode){
			context.ctx.globalCompositeOperation=style.blendMode;
		};
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
		context.ctx.globalCompositeOperation="source-over";
	}

	__proto._mask=function(sprite,context,x,y){
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
		var mask=sprite.mask;
		if (mask){
			context.ctx.globalCompositeOperation="destination-in";
			if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()){
				mask.cacheAsBitmap=true;
			}
			mask.render(context,x-sprite.pivotX,y-sprite.pivotY);
		}
		context.ctx.globalCompositeOperation="source-over";
	}

	__proto._graphics=function(sprite,context,x,y){
		var tf=sprite._style._tf;
		sprite._graphics && sprite._graphics._render(sprite,context,x-tf.translateX,y-tf.translateY);
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
	}

	__proto._image=function(sprite,context,x,y){
		var style=sprite._style;
		context.ctx.drawTexture2(x,y,style._tf.translateX,style._tf.translateY,sprite.transform,style.alpha,style.blendMode,sprite._graphics._one);
	}

	__proto._image2=function(sprite,context,x,y){
		var tf=sprite._style._tf;
		context.ctx.drawTexture2(x,y,tf.translateX,tf.translateY,sprite.transform,1,null,sprite._graphics._one);
	}

	__proto._alpha=function(sprite,context,x,y){
		var style=sprite._style;
		var alpha;
		if ((alpha=style.alpha)> 0.01 || sprite._needRepaint()){
			var temp=context.ctx.globalAlpha;
			context.ctx.globalAlpha *=alpha;
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.globalAlpha=temp;
		}
	}

	__proto._transform=function(sprite,context,x,y){
		var transform=sprite.transform,_next=this._next;
		if (transform && _next !=RenderSprite.NORENDER){
			context.save();
			context.transform(transform.a,transform.b,transform.c,transform.d,transform.tx+x,transform.ty+y);
			_next._fun.call(_next,sprite,context,0,0);
			context.restore();
		}else
		_next._fun.call(_next,sprite,context,x,y);
	}

	__proto._childs=function(sprite,context,x,y){
		var style=sprite._style;
		var tf=style._tf;
		x=x-tf.translateX+style.paddingLeft;
		y=y-tf.translateY+style.paddingTop;
		if (style._calculation){
			var words=sprite._getWords();
			if (words){
				var tStyle=style;
				if (tStyle){
					if (tStyle.stroke){
						context.fillBorderWords(words,x,y,tStyle.font,tStyle.color,tStyle.strokeColor,tStyle.stroke);
						}else{
						context.fillWords(words,x,y,tStyle.font,tStyle.color,tStyle.underLine);
					}
				}
			}
		};
		var childs=sprite._childs,n=childs.length,ele;
		if (sprite.viewport || (sprite.optimizeScrollRect && sprite._style.scrollRect)){
			var rect=sprite.viewport || sprite._style.scrollRect;
			var left=rect.x;
			var top=rect.y;
			var right=rect.right;
			var bottom=rect.bottom;
			var _x=NaN,_y=NaN;
			for (i=0;i < n;++i){
				if ((ele=childs [i]).visible && ((_x=ele._x)< right && (_x+ele.width)> left && (_y=ele._y)< bottom && (_y+ele.height)> top)){
					ele.render(context,x,y);
				}
			}
			}else {
			for (var i=0;i < n;++i)
			(ele=(childs [i]))._style.visible && ele.render(context,x,y);
		}
	}

	//}
	__proto._canvas=function(sprite,context,x,y){
		var _cacheCanvas=sprite._$P.cacheCanvas;
		if (!_cacheCanvas){
			this._next._fun.call(this._next,sprite,context,x,y);
			return;
		}
		_cacheCanvas.type==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
		var tx=_cacheCanvas.ctx;
		if (sprite._needRepaint()|| !tx){
			this._canvas_repaint(sprite,context,x,y);
		}
		else{
			var tRec=_cacheCanvas._cacheRec;
			context.drawCanvas(tx.canvas,x+tRec.x,y+tRec.y,tRec.width,tRec.height);
		}
	}

	__proto._canvas_repaint=function(sprite,context,x,y){
		var _cacheCanvas=sprite._$P.cacheCanvas;
		var _next=this._next;
		if (!_cacheCanvas){
			_next._fun.call(_next,sprite,tx,x,y);
			return;
		};
		var tx=_cacheCanvas.ctx;
		var _repaint=sprite._needRepaint()|| (!tx);
		var canvas;
		var left;
		var top;
		var tRec;
		var tCacheType=_cacheCanvas.type;
		tCacheType==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
		if (_repaint){
			if (!_cacheCanvas._cacheRec)
				_cacheCanvas._cacheRec=new Rectangle();
			var w,h;
			if (!Render.isWebGL || tCacheType==="bitmap"){
				tRec=sprite.getSelfBounds();
				tRec.x=tRec.x-sprite.pivotX;
				tRec.y=tRec.y-sprite.pivotY;
				tRec.x=tRec.x-16;
				tRec.y=tRec.y-16;
				tRec.width=tRec.width+32;
				tRec.height=tRec.height+32;
				tRec.x=Math.floor(tRec.x+x)-x;
				tRec.y=Math.floor(tRec.y+y)-y;
				tRec.width=Math.floor(tRec.width);
				tRec.height=Math.floor(tRec.height);
				_cacheCanvas._cacheRec.copyFrom(tRec);
				}else{
				_cacheCanvas._cacheRec.setTo(-sprite.pivotX,-sprite.pivotY,1,1);
			}
			tRec=_cacheCanvas._cacheRec;
			var scaleX=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleX;
			var scaleY=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleY;
			if (!Render.isWebGL){
				var chainScaleX=1;
				var chainScaleY=1;
				var tar;
				tar=sprite;
				while (tar && tar !=Laya.stage){
					chainScaleX *=tar.scaleX;
					chainScaleY *=tar.scaleY;
					tar=tar.parent;
				}
				if (Render.isWebGL){
					if (chainScaleX < 1)scaleX *=chainScaleX;
					if (chainScaleY < 1)scaleY *=chainScaleY;
					}else {
					if (chainScaleX > 1)scaleX *=chainScaleX;
					if (chainScaleY > 1)scaleY *=chainScaleY;
				}
			}
			if (sprite.scrollRect){
				var scrollRect=sprite.scrollRect;
				tRec.x-=scrollRect.x;
				tRec.y-=scrollRect.y;
			}
			w=tRec.width *scaleX;
			h=tRec.height *scaleY;
			left=tRec.x;
			top=tRec.y;
			if (Render.isWebGL && tCacheType==='bitmap' && (w > 2048 || h > 2048)){
				console.warn("cache bitmap size larger than 2048,cache ignored");
				if (_cacheCanvas.ctx){
					Pool.recover("RenderContext",_cacheCanvas.ctx);
					_cacheCanvas.ctx.canvas.size(0,0);
					_cacheCanvas.ctx=null;
				}
				_next._fun.call(_next,sprite,context,x,y);
				return;
			}
			if (!tx){
				tx=_cacheCanvas.ctx=Pool.getItem("RenderContext")|| new RenderContext(w,h,HTMLCanvas.create(/*laya.resource.HTMLCanvas.TYPEAUTO*/"AUTO"));
			}
			tx.ctx.sprite=sprite;
			canvas=tx.canvas;
			canvas.clear();
			(canvas.width !=w || canvas.height !=h)&& canvas.size(w,h);
			if (tCacheType==='bitmap')canvas.context.asBitmap=true;
			else if(tCacheType==='normal')canvas.context.asBitmap=false;
			var t;
			if (scaleX !=1 || scaleY !=1){
				var ctx=(tx).ctx;
				ctx.save();
				ctx.scale(scaleX,scaleY);
				if (!Render.isConchWebGL && Render.isConchApp){
					t=sprite._$P.cf;
					t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
				}
				_next._fun.call(_next,sprite,tx,-left,-top);
				ctx.restore();
				if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
				}else {
				ctx=(tx).ctx;
				if (!Render.isConchWebGL && Render.isConchApp){
					t=sprite._$P.cf;
					t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
				}
				_next._fun.call(_next,sprite,tx,-left,-top);
				if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
			}
			if (sprite._$P.staticCache)_cacheCanvas.reCache=false;
			Stat.canvasReCache++;
			}else {
			tRec=_cacheCanvas._cacheRec;
			left=tRec.x;
			top=tRec.y;
			canvas=tx.canvas;
		}
		context.drawCanvas(canvas,x+left,y+top,tRec.width,tRec.height);
	}

	RenderSprite.__init__=function(){
		var i=0,len=0;
		var initRender;
		initRender=RunDriver.createRenderSprite(0x11111,null);
		len=RenderSprite.renders.length=0x800 *2;
		for (i=0;i < len;i++)
		RenderSprite.renders[i]=initRender;
		RenderSprite.renders[0]=RunDriver.createRenderSprite(0,null);
		function _initSame (value,o){
			var n=0;
			for (var i=0;i < value.length;i++){
				n |=value[i];
				RenderSprite.renders[n]=o;
			}
		}
		_initSame([0x01,0x200,0x04,0x02],new RenderSprite(0x01,null));
		RenderSprite.renders[0x01 | 0x200]=RunDriver.createRenderSprite(0x01 | 0x200,null);
		RenderSprite.renders[0x01 | 0x04 | 0x200]=new RenderSprite(0x01 | 0x04 | 0x200,null);
	}

	RenderSprite._initRenderFun=function(sprite,context,x,y){
		var type=sprite._renderType;
		var r=RenderSprite.renders[type]=RenderSprite._getTypeRender(type);
		r._fun(sprite,context,x,y);
	}

	RenderSprite._getTypeRender=function(type){
		var rst=null;
		var tType=0x800;
		while (tType > 1){
			if (tType & type)
				rst=RunDriver.createRenderSprite(tType,rst);
			tType=tType >> 1;
		}
		return rst;
	}

	RenderSprite.IMAGE=0x01;
	RenderSprite.ALPHA=0x02;
	RenderSprite.TRANSFORM=0x04;
	RenderSprite.BLEND=0x08;
	RenderSprite.CANVAS=0x10;
	RenderSprite.FILTERS=0x20;
	RenderSprite.MASK=0x40;
	RenderSprite.CLIP=0x80;
	RenderSprite.STYLE=0x100;
	RenderSprite.GRAPHICS=0x200;
	RenderSprite.CUSTOM=0x400;
	RenderSprite.CHILDS=0x800;
	RenderSprite.INIT=0x11111;
	RenderSprite.renders=[];
	__static(RenderSprite,
	['NORENDER',function(){return this.NORENDER=new RenderSprite(0,null);}
	]);
	return RenderSprite;
})()


/**
*@private
*Context扩展类
*/
//class laya.resource.Context
var Context=(function(){
	function Context(){
		/***@private */
		//this._canvas=null;
		this._repaint=false;
	}

	__class(Context,'laya.resource.Context');
	var __proto=Context.prototype;
	__proto.replaceReset=function(){
		var i=0,len=0;
		len=Context.replaceKeys.length;
		var key;
		for (i=0;i < len;i++){
			key=Context.replaceKeys[i];
			this[Context.newKeys[i]]=this[key];
		}
	}

	__proto.replaceResotre=function(){
		/*__JS__ */this.__restore();
		/*__JS__ */this.__reset();
	}

	__proto.setIsMainContext=function(){}
	__proto.drawTextures=function(tex,pos,tx,ty){
		Stat.drawCall+=pos.length / 2;
		var w=tex.width;
		var h=tex.height;
		for (var i=0,sz=pos.length;i < sz;i+=2){
			this.drawTexture(tex,pos[i],pos[i+1],w,h,tx,ty);
		}
	}

	/***@private */
	__proto.drawCanvas=function(canvas,x,y,width,height){
		Stat.drawCall++;
		this.drawImage(canvas.source,x,y,width,height);
	}

	/***@private */
	__proto.fillRect=function(x,y,width,height,style){
		Stat.drawCall++;
		style && (this.fillStyle=style);
		/*__JS__ */this.__fillRect(x,y,width,height);
	}

	/***@private */
	__proto.fillText=function(text,x,y,font,color,textAlign){
		Stat.drawCall++;
		if (arguments.length > 3 && font !=null){
			this.font=font;
			this.fillStyle=color;
			/*__JS__ */this.textAlign=textAlign;
			this.textBaseline="top";
		}
		/*__JS__ */this.__fillText(text,x,y);
	}

	/***@private */
	__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
		Stat.drawCall++;
		this.font=font;
		this.fillStyle=fillColor;
		this.textBaseline="top";
		/*__JS__ */this.strokeStyle=borderColor;
		/*__JS__ */this.lineWidth=lineWidth;
		/*__JS__ */this.textAlign=textAlign;
		/*__JS__ */this.__strokeText(text,x,y);
		/*__JS__ */this.__fillText(text,x,y);
	}

	/***@private */
	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		Stat.drawCall++;
		if (arguments.length > 3 && font !=null){
			this.font=font;
			/*__JS__ */this.strokeStyle=color;
			/*__JS__ */this.lineWidth=lineWidth;
			/*__JS__ */this.textAlign=textAlign;
			this.textBaseline="top";
		}
		/*__JS__ */this.__strokeText(text,x,y);
	}

	/***@private */
	__proto.transformByMatrix=function(value){
		this.transform(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}

	/***@private */
	__proto.setTransformByMatrix=function(value){
		this.setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}

	/***@private */
	__proto.clipRect=function(x,y,width,height){
		Stat.drawCall++;
		this.beginPath();
		this.rect(x,y,width,height);
		this.clip();
	}

	/***@private */
	__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
		Stat.drawCall++;
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx,y+ty,width,height);
	}

	/***@private */
	__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,tx,ty,alpha){
		Stat.drawCall++;
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		this.save();
		alpha !=1 && (this.globalAlpha *=alpha);
		if (m){
			this.transform(m.a,m.b,m.c,m.d,m.tx+tx,m.ty+ty);
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x ,y,width,height);
			}else {
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx ,y+ty,width,height);
		}
		this.restore();
	}

	/***@private */
	__proto.drawTexture2=function(x,y,pivotX,pivotY,m,alpha,blendMode,args2){
		'use strict';
		var tex=args2[0];
		if (!(tex.loaded && tex.bitmap && tex.source)){
			return;
		}
		Stat.drawCall++;
		var alphaChanged=alpha!==1;
		if (alphaChanged){
			var temp=this.globalAlpha;
			this.globalAlpha *=alpha;
		};
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		if (m){
			this.save();
			this.transform(m.a,m.b,m.c,m.d,m.tx+x,m.ty+y);
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX ,args2[2]-pivotY,args2[3],args2[4]);
			this.restore();
			}else {
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX+x ,args2[2]-pivotY+y,args2[3],args2[4]);
		}
		if (alphaChanged)this.globalAlpha=temp;
	}

	__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
		if (!other.pat){
			if (texture.uv !=Texture.DEF_UV){
				var canvas=new HTMLCanvas("2D");
				canvas.getContext('2d');
				canvas.size(texture.width,texture.height);
				canvas.context.drawTexture(texture,0,0,texture.width,texture.height,0,0);
				texture=new Texture(canvas);
			}
			other.pat=this.createPattern(texture.bitmap.source,type);
		};
		var oX=x,oY=y;
		var sX=0,sY=0;
		if (offset){
			oX+=offset.x % texture.width;
			oY+=offset.y % texture.height;
			sX-=offset.x % texture.width;
			sY-=offset.y % texture.height;
		}
		this.translate(oX,oY);
		this.fillRect(sX,sY,width,height,other.pat);
		this.translate(-oX,-oY);
	}

	/***@private */
	__proto.flush=function(){
		return 0;
	}

	/***@private */
	__proto.fillWords=function(words,x,y,font,color,underLine){
		font && (this.font=font);
		color && (this.fillStyle=color);
		var _this=this;
		this.textBaseline="top";
		/*__JS__ */this.textAlign='left';
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			/*__JS__ */this.__fillText(a.char,a.x+x,a.y+y);
			if (underLine===1){
				var tHeight=a.height;
				var dX=a.style.letterSpacing*0.5;
				if (!dX)dX=0;
				this.beginPath();
				this.strokeStyle=color;
				this.lineWidth=1;
				this.moveTo(x+a.x-dX+0.5,y+a.y+tHeight+0.5);
				this.lineTo(x+a.x+a.width+dX+0.5,y+a.y+tHeight+0.5);
				this.stroke();
			}
		}
	}

	/***@private */
	__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
		font && (this.font=font);
		color && (this.fillStyle=color);
		this.textBaseline="top";
		/*__JS__ */this.lineWidth=lineWidth;
		/*__JS__ */this.textAlign='left';
		/*__JS__ */this.strokeStyle=borderColor;
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			/*__JS__ */this.__strokeText(a.char,a.x+x,a.y+y);
			/*__JS__ */this.__fillText(a.char,a.x+x,a.y+y);
		}
	}

	/***@private */
	__proto.destroy=function(){
		/*__JS__ */this.canvas.width=this.canvas.height=0;
	}

	/***@private */
	__proto.clear=function(){
		this.clearRect(0,0,this._canvas.width,this._canvas.height);
		this._repaint=false;
	}

	__proto.drawCurves=function(x,y,args){
		this.beginPath();
		this.strokeStyle=args[3];
		this.lineWidth=args[4];
		var points=args[2];
		x+=args[0],y+=args[1];
		this.moveTo(x+points[0],y+points[1]);
		var i=2,n=points.length;
		while (i < n){
			this.quadraticCurveTo(x+points[i++],y+points[i++],x+points[i++],y+points[i++]);
		}
		this.stroke();
	}

	Context.__init__=function(to){
		var from=laya.resource.Context.prototype;
		to=to || /*__JS__ */CanvasRenderingContext2D.prototype;
		to.__fillText=to.fillText;
		to.__fillRect=to.fillRect;
		to.__strokeText=to.strokeText;
		var funs=['drawTextures','fillWords','fillBorderWords','setIsMainContext','fillRect','strokeText','fillTexture','fillText','transformByMatrix','setTransformByMatrix','clipRect','drawTexture','drawTexture2','drawTextureWithTransform','flush','clear','destroy','drawCanvas','fillBorderText','drawCurves'];
		funs.forEach(function(i){
			to[i]=from[i];
		});
	}

	Context.replaceCanvasGetSet=function(tar,key){
		var oldO=/*__JS__ */Object.getOwnPropertyDescriptor(tar,key);
		if (!oldO||!oldO.configurable)return false;
		var newO={};
		var tkey;
		for (tkey in oldO){
			if (tkey !="set"){
				newO[tkey]=oldO[tkey];
			}
		};
		var preFun=oldO["set"];
		newO["set"]=function (v){
			var _self=/*__JS__ */this;
			preFun.call(_self,v);
			var _ct=_self.getContext("2d");
			if (_ct && "__reset" in _ct){
				_ct.__reset();
			}
		}
		/*__JS__ */Object.defineProperty(tar,key,newO);
		return true;
	}

	Context.replaceGetSet=function(tar,key){
		var oldO=/*__JS__ */Object.getOwnPropertyDescriptor(tar,key);
		if (!oldO||!oldO.configurable)return false;
		var newO={};
		var tkey;
		for (tkey in oldO){
			if (tkey !="set"){
				newO[tkey]=oldO[tkey];
			}
		};
		var preFun=oldO["set"];
		var dataKey="___"+key+"__";
		Context.newKeys.push(dataKey);
		newO["set"]=function (v){
			var _self=/*__JS__ */this;
			if (v !=_self[dataKey]){
				_self[dataKey]=v;
				preFun.call(_self,v);
			}
		}
		/*__JS__ */Object.defineProperty(tar,key,newO);
		return true;
	}

	Context.newKeys=[];
	__static(Context,
	['_default',function(){return this._default=new Context();},'replaceKeys',function(){return this.replaceKeys=["font","fillStyle","textBaseline"];}
	]);
	return Context;
})()


/**
*@private
*<code>ResourceManager</code> 是资源管理类。它用于资源的载入、获取、销毁。
*/
//class laya.resource.ResourceManager
var ResourceManager=(function(){
	function ResourceManager(name){
		/**唯一标识ID。*/
		this._id=0;
		/**名字。*/
		this._name=null;
		/**所管理资源。*/
		this._resources=null;
		/**所管理资源的累计内存,以字节为单位。*/
		this._memorySize=0;
		/**垃圾回收比例，范围是0到1。*/
		this._garbageCollectionRate=NaN;
		/**自动释放机制中内存是否溢出。*/
		this._isOverflow=false;
		/**是否启用自动释放机制。*/
		this.autoRelease=false;
		/**自动释放机制的内存触发上限,以字节为单位。*/
		this.autoReleaseMaxSize=0;
		this._id=++ResourceManager._uniqueIDCounter;
		this._name=name ? name :"Content Manager";
		ResourceManager._isResourceManagersSorted=false;
		this._memorySize=0;
		this._isOverflow=false;
		this.autoRelease=false;
		this.autoReleaseMaxSize=1024 *1024 *512;
		this._garbageCollectionRate=0.2;
		ResourceManager._resourceManagers.push(this);
		this._resources=[];
	}

	__class(ResourceManager,'laya.resource.ResourceManager');
	var __proto=ResourceManager.prototype;
	Laya.imps(__proto,{"laya.resource.IDispose":true})
	/**
	*获取指定索引的资源 Resource 对象。
	*@param 索引。
	*@return 资源 Resource 对象。
	*/
	__proto.getResourceByIndex=function(index){
		return this._resources[index];
	}

	/**
	*获取此管理器所管理的资源个数。
	*@return 资源个数。
	*/
	__proto.getResourcesLength=function(){
		return this._resources.length;
	}

	/**
	*添加指定资源。
	*@param resource 需要添加的资源 Resource 对象。
	*@return 是否添加成功。
	*/
	__proto.addResource=function(resource){
		if (resource.resourceManager)
			resource.resourceManager.removeResource(resource);
		var index=this._resources.indexOf(resource);
		if (index===-1){
			resource._resourceManager=this;
			this._resources.push(resource);
			this.addSize(resource.memorySize);
			return true;
		}
		return false;
	}

	/**
	*移除指定资源。
	*@param resource 需要移除的资源 Resource 对象
	*@return 是否移除成功。
	*/
	__proto.removeResource=function(resource){
		var index=this._resources.indexOf(resource);
		if (index!==-1){
			this._resources.splice(index,1);
			resource._resourceManager=null;
			this._memorySize-=resource.memorySize;
			return true;
		}
		return false;
	}

	/**
	*卸载此资源管理器载入的资源。
	*/
	__proto.unload=function(){
		var tempResources=this._resources.slice(0,this._resources.length);
		for (var i=0;i < tempResources.length;i++){
			var resource=tempResources[i];
			resource.destroy();
		}
		tempResources.length=0;
	}

	/**释放资源。*/
	__proto.dispose=function(){
		if (this===ResourceManager._systemResourceManager)
			throw new Error("systemResourceManager不能被释放！");
		ResourceManager._resourceManagers.splice(ResourceManager._resourceManagers.indexOf(this),1);
		ResourceManager._isResourceManagersSorted=false;
		var tempResources=this._resources.slice(0,this._resources.length);
		for (var i=0;i < tempResources.length;i++){
			var resource=tempResources[i];
			resource.resourceManager.removeResource(resource);
			resource.destroy();
		}
		tempResources.length=0;
	}

	/**
	*增加内存。
	*@param add 需要增加的内存大小。
	*/
	__proto.addSize=function(add){
		if (add){
			if (this.autoRelease && add > 0)
				((this._memorySize+add)> this.autoReleaseMaxSize)&& (this.garbageCollection((1-this._garbageCollectionRate)*this.autoReleaseMaxSize));
			this._memorySize+=add;
		}
	}

	/**
	*垃圾回收。
	*@param reserveSize 保留尺寸。
	*/
	__proto.garbageCollection=function(reserveSize){
		var all=this._resources;
		all=all.slice();
		all.sort(function(a,b){
			if (!a || !b)
				throw new Error("a或b不能为空！");
			if (a.released && b.released)
				return 0;
			else if (a.released)
			return 1;
			else if (b.released)
			return-1;
			return a._lastUseFrameCount-b._lastUseFrameCount;
		});
		var currentFrameCount=Stat.loopCount;
		for (var i=0,n=all.length;i < n;i++){
			var resou=all[i];
			if (currentFrameCount-resou._lastUseFrameCount > 1){
				resou.releaseResource();
				}else {
				if (this._memorySize >=reserveSize)
					this._isOverflow=true;
				return;
			}
			if (this._memorySize < reserveSize){
				this._isOverflow=false;
				return;
			}
		}
	}

	/**
	*唯一标识 ID 。
	*/
	__getset(0,__proto,'id',function(){
		return this._id;
	});

	/**
	*名字。
	*/
	__getset(0,__proto,'name',function(){
		return this._name;
		},function(value){
		if ((value || value!=="")&& this._name!==value){
			this._name=value;
			ResourceManager._isResourceManagersSorted=false;
		}
	});

	/**
	*此管理器所管理资源的累计内存，以字节为单位。
	*/
	__getset(0,__proto,'memorySize',function(){
		return this._memorySize;
	});

	/**
	*系统资源管理器。
	*/
	__getset(1,ResourceManager,'systemResourceManager',function(){
		return ResourceManager._systemResourceManager;
	});

	ResourceManager.__init__=function(){
		ResourceManager.currentResourceManager=ResourceManager.systemResourceManager;
	}

	ResourceManager.getLoadedResourceManagerByIndex=function(index){
		return ResourceManager._resourceManagers[index];
	}

	ResourceManager.getLoadedResourceManagersCount=function(){
		return ResourceManager._resourceManagers.length;
	}

	ResourceManager.recreateContentManagers=function(force){
		(force===void 0)&& (force=false);
		var temp=ResourceManager.currentResourceManager;
		for (var i=0;i < ResourceManager._resourceManagers.length;i++){
			ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
			for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
				ResourceManager.currentResourceManager._resources[j].releaseResource(force);
				ResourceManager.currentResourceManager._resources[j].activeResource(force);
			}
		}
		ResourceManager.currentResourceManager=temp;
	}

	ResourceManager.releaseContentManagers=function(force){
		(force===void 0)&& (force=false);
		var temp=ResourceManager.currentResourceManager;
		for (var i=0;i < ResourceManager._resourceManagers.length;i++){
			ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
			for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
				var resource=ResourceManager.currentResourceManager._resources[j];
				(!resource.released)&& (resource.releaseResource(force));
			}
		}
		ResourceManager.currentResourceManager=temp;
	}

	ResourceManager._uniqueIDCounter=0;
	ResourceManager._isResourceManagersSorted=false;
	ResourceManager._resourceManagers=[];
	__static(ResourceManager,
	['_systemResourceManager',function(){return this._systemResourceManager=new ResourceManager("System Resource Manager");},'currentResourceManager',function(){return this.currentResourceManager=ResourceManager._systemResourceManager;}
	]);
	return ResourceManager;
})()


/**
*@private
*/
//class laya.system.System
var System=(function(){
	function System(){}
	__class(System,'laya.system.System');
	System.changeDefinition=function(name,classObj){
		Laya[name]=classObj;
		var str=name+"=classObj";
		/*__JS__ */eval(str);
	}

	System.__init__=function(){
		if (Render.isConchApp){
			/*__JS__ */conch.disableConchResManager();
			/*__JS__ */conch.disableConchAutoRestoreLostedDevice();
		}
	}

	return System;
})()


SoundManager;
/**
*<code>Browser</code> 是浏览器代理类。封装浏览器及原生 js 提供的一些功能。
*/
//class laya.utils.Browser
var Browser=(function(){
	function Browser(){}
	__class(Browser,'laya.utils.Browser');
	/**设备像素比。*/
	__getset(1,Browser,'pixelRatio',function(){
		Browser.__init__();
		if (Browser.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)")>-1)return 2;
		return RunDriver.getPixelRatio();
	});

	/**浏览器窗口物理高度，其值等于clientHeight *pixelRatio，并且浏览器发生反转之后，宽高会互换。*/
	__getset(1,Browser,'height',function(){
		Browser.__init__();
		return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientWidth :Browser.clientHeight)*Browser.pixelRatio;
	});

	/**
	*浏览器窗口可视宽度。
	*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度)> document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。
	*/
	__getset(1,Browser,'clientWidth',function(){
		Browser.__init__();
		return Browser.window.innerWidth || Browser.document.body.clientWidth;
	});

	/**浏览器原生 window 对象的引用。*/
	__getset(1,Browser,'window',function(){
		Browser.__init__();
		return Browser._window;
	});

	/**
	*浏览器窗口可视高度。
	*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度)> document.body.clientHeight(不包含滚动条高度)> document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。
	*/
	__getset(1,Browser,'clientHeight',function(){
		Browser.__init__();
		return Browser.window.innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight;
	});

	/**浏览器窗口物理宽度，其值等于clientWidth *pixelRatio，并且浏览器发生反转之后，宽高会互换。*/
	__getset(1,Browser,'width',function(){
		Browser.__init__();
		return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientHeight :Browser.clientWidth)*Browser.pixelRatio;
	});

	/**画布容器，用来盛放画布的容器。方便对画布进行控制*/
	__getset(1,Browser,'container',function(){
		Browser.__init__();
		if (!Browser._container){
			Browser._container=Browser.createElement("div");
			Browser._container.id="layaContainer";
			Browser.document.body.appendChild(Browser._container);
		}
		return Browser._container;
		},function(value){
		Browser._container=value;
	});

	/**浏览器原生 document 对象的引用。*/
	__getset(1,Browser,'document',function(){
		Browser.__init__();
		return Browser._document;
	});

	Browser.__init__=function(){
		SoundManager;
		if (Browser._window)return;
		Browser._window=RunDriver.getWindow();
		Browser._document=Browser.window.document;
		Browser._window.addEventListener('message',function(e){
			laya.utils.Browser._onMessage(e);
		},false);
		/*__JS__ */Browser.document.__createElement=Browser.document.createElement;
		/*__JS__ */window.requestAnimationFrame=window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c){return window.setTimeout(c,1000 / 60);};;
		Browser.userAgent=Browser.window.navigator.userAgent;
		Browser.u=Browser.userAgent;
		Browser.onIOS=!!Browser.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/);
		Browser.onMobile=Browser.u.indexOf("Mobile")>-1;
		Browser.onIPhone=Browser.u.indexOf("iPhone")>-1;
		Browser.onMac=Browser.u.indexOf("Mac OS X")>-1;
		Browser.onIPad=Browser.u.indexOf("iPad")>-1;
		Browser.onAndriod=Browser.u.indexOf('Android')>-1 || Browser.u.indexOf('Adr')>-1;
		Browser.onWP=Browser.u.indexOf("Windows Phone")>-1;
		Browser.onQQBrowser=Browser.u.indexOf("QQBrowser")>-1;
		Browser.onMQQBrowser=Browser.u.indexOf("MQQBrowser")>-1 || (Browser.u.indexOf("Mobile")>-1 && Browser.u.indexOf("QQ")>-1);
		Browser.onIE=!!Browser.window.ActiveXObject || "ActiveXObject" in Browser.window;
		Browser.onWeiXin=Browser.u.indexOf('MicroMessenger')>-1;
		Browser.onPC=!Browser.onMobile;
		Browser.onSafari=!!Browser.u.match(/Version\/\d+\.\d\x20Mobile\/\S+\x20Safari/);
		Browser.onFirefox=Browser.u.indexOf('Firefox')>-1;
		Browser.onEdge=Browser.u.indexOf('Edge')>-1;
		Browser.onMiniGame=Browser.u.indexOf('MiniGame')>-1;
		Browser.httpProtocol=Browser.window.location.protocol=="http:";
		if (Browser.onMiniGame && Browser.window.focus==null){
			console.error("请先初始化小游戏适配库，详细教程https://ldc.layabox.com/doc/?nav=zh-ts-5-0-0");
		}
		Browser.webAudioEnabled=Browser.window["AudioContext"] || Browser.window["webkitAudioContext"] || Browser.window["mozAudioContext"] ? true :false;
		Browser.soundType=Browser.webAudioEnabled ? "WEBAUDIOSOUND" :"AUDIOSOUND";
		/*__JS__ */Sound=Browser.webAudioEnabled?WebAudioSound:AudioSound;;
		/*__JS__ */if (Browser.webAudioEnabled)WebAudioSound.initWebAudio();;
		AudioSound._initMusicAudio();
		/*__JS__ */Browser.enableTouch=(('ontouchstart' in window)|| window.DocumentTouch && document instanceof DocumentTouch);
		/*__JS__ */window.focus();
		/*__JS__ */SoundManager._soundClass=Sound;;
		Render._mainCanvas=Render._mainCanvas || HTMLCanvas.create('2D');
		if (Browser.canvas)return;
		Browser.canvas=HTMLCanvas.create('2D');
		Browser.context=Browser.canvas.getContext('2d');
	}

	Browser._onMessage=function(e){
		if (!e.data)return;
		if (e.data.name=="size"){
			Browser.window.innerWidth=e.data.width;
			Browser.window.innerHeight=e.data.height;
			Browser.window.__innerHeight=e.data.clientHeight;
			if (!Browser.document.createEvent){
				console.warn("no document.createEvent");
				return;
			};
			var evt=Browser.document.createEvent("HTMLEvents");
			evt.initEvent("resize",false,false);
			Browser.window.dispatchEvent(evt);
			return;
		}
	}

	Browser.createElement=function(type){
		Browser.__init__();
		return Browser.document.__createElement(type);
	}

	Browser.getElementById=function(type){
		Browser.__init__();
		return Browser.document.getElementById(type);
	}

	Browser.removeElement=function(ele){
		if (ele && ele.parentNode)ele.parentNode.removeChild(ele);
	}

	Browser.now=function(){
		return RunDriver.now();
	}

	Browser._window=null;
	Browser._document=null;
	Browser._container=null;
	Browser.userAgent=null;
	Browser.u=null;
	Browser.onIOS=false;
	Browser.onMac=false;
	Browser.onMobile=false;
	Browser.onIPhone=false;
	Browser.onIPad=false;
	Browser.onAndriod=false;
	Browser.onAndroid=false;
	Browser.onWP=false;
	Browser.onQQBrowser=false;
	Browser.onMQQBrowser=false;
	Browser.onSafari=false;
	Browser.onFirefox=false;
	Browser.onEdge=false;
	Browser.onIE=false;
	Browser.onWeiXin=false;
	Browser.onMiniGame=false;
	Browser.onPC=false;
	Browser.httpProtocol=false;
	Browser.webAudioEnabled=false;
	Browser.soundType=null;
	Browser.enableTouch=false;
	Browser.canvas=null;
	Browser.context=null;
	Browser.__init$=function(){
		AudioSound;
		WebAudioSound;
	}

	return Browser;
})()


/**
*<p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>
*<p><b>注意：</b> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>
*/
//class laya.utils.Byte
var Byte=(function(){
	function Byte(data){
		/**
		*@private
		*是否为小端数据。
		*/
		this._xd_=true;
		this._allocated_=8;
		/**
		*@private
		*原始数据。
		*/
		//this._d_=null;
		/**
		*@private
		*DataView
		*/
		//this._u8d_=null;
		/**@private */
		this._pos_=0;
		/**@private */
		this._length=0;
		if (data){
			this._u8d_=new Uint8Array(data);
			this._d_=new DataView(this._u8d_.buffer);
			this._length=this._d_.byteLength;
			}else {
			this.___resizeBuffer(this._allocated_);
		}
	}

	__class(Byte,'laya.utils.Byte');
	var __proto=Byte.prototype;
	/**@private */
	__proto.___resizeBuffer=function(len){
		try {
			var newByteView=new Uint8Array(len);
			if (this._u8d_ !=null){
				if (this._u8d_.length <=len)newByteView.set(this._u8d_);
				else newByteView.set(this._u8d_.subarray(0,len));
			}
			this._u8d_=newByteView;
			this._d_=new DataView(newByteView.buffer);
			}catch (err){
			throw "___resizeBuffer err:"+len;
		}
	}

	/**
	*<p>常用于解析固定格式的字节流。</p>
	*<p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
	*@return 读取的字符串。
	*/
	__proto.getString=function(){
		return this.rUTF(this.getUint16());
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
	*@param start 开始位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Float32Array 对象。
	*/
	__proto.getFloat32Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Float32Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
	*@param start 开始位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Uint8Array 对象。
	*/
	__proto.getUint8Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Uint8Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
	*@param start 开始读取的字节偏移量位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Uint8Array 对象。
	*/
	__proto.getInt16Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Int16Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
	*@return 单精度（32 位）浮点数。
	*/
	__proto.getFloat32=function(){
		if (this._pos_+4 > this._length)throw "getFloat32 error - Out of bounds";
		var v=this._d_.getFloat32(this._pos_,this._xd_);
		this._pos_+=4;
		return v;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
	*@return 双精度（64 位）浮点数。
	*/
	__proto.getFloat64=function(){
		if (this._pos_+8 > this._length)throw "getFloat64 error - Out of bounds";
		var v=this._d_.getFloat64(this._pos_,this._xd_);
		this._pos_+=8;
		return v;
	}

	/**
	*在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
	*@param value 单精度（32 位）浮点数。
	*/
	__proto.writeFloat32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setFloat32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
	*@param value 双精度（64 位）浮点数。
	*/
	__proto.writeFloat64=function(value){
		this.ensureWrite(this._pos_+8);
		this._d_.setFloat64(this._pos_,value,this._xd_);
		this._pos_+=8;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Int32 值。
	*@return Int32 值。
	*/
	__proto.getInt32=function(){
		if (this._pos_+4 > this._length)throw "getInt32 error - Out of bounds";
		var float=this._d_.getInt32(this._pos_,this._xd_);
		this._pos_+=4;
		return float;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint32 值。
	*@return Uint32 值。
	*/
	__proto.getUint32=function(){
		if (this._pos_+4 > this._length)throw "getUint32 error - Out of bounds";
		var v=this._d_.getUint32(this._pos_,this._xd_);
		this._pos_+=4;
		return v;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Int32 值。
	*@param value 需要写入的 Int32 值。
	*/
	__proto.writeInt32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setInt32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*在字节流的当前字节偏移量位置处写入 Uint32 值。
	*@param value 需要写入的 Uint32 值。
	*/
	__proto.writeUint32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setUint32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Int16 值。
	*@return Int16 值。
	*/
	__proto.getInt16=function(){
		if (this._pos_+2 > this._length)throw "getInt16 error - Out of bounds";
		var us=this._d_.getInt16(this._pos_,this._xd_);
		this._pos_+=2;
		return us;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint16 值。
	*@return Uint16 值。
	*/
	__proto.getUint16=function(){
		if (this._pos_+2 > this._length)throw "getUint16 error - Out of bounds";
		var us=this._d_.getUint16(this._pos_,this._xd_);
		this._pos_+=2;
		return us;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
	*@param value 需要写入的Uint16 值。
	*/
	__proto.writeUint16=function(value){
		this.ensureWrite(this._pos_+2);
		this._d_.setUint16(this._pos_,value,this._xd_);
		this._pos_+=2;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Int16 值。
	*@param value 需要写入的 Int16 值。
	*/
	__proto.writeInt16=function(value){
		this.ensureWrite(this._pos_+2);
		this._d_.setInt16(this._pos_,value,this._xd_);
		this._pos_+=2;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint8 值。
	*@return Uint8 值。
	*/
	__proto.getUint8=function(){
		if (this._pos_+1 > this._length)throw "getUint8 error - Out of bounds";
		return this._d_.getUint8(this._pos_++);
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
	*@param value 需要写入的 Uint8 值。
	*/
	__proto.writeUint8=function(value){
		this.ensureWrite(this._pos_+1);
		this._d_.setUint8(this._pos_,value);
		this._pos_++;
	}

	/**
	*@private
	*从字节流的指定字节偏移量位置处读取一个 Uint8 值。
	*@param pos 字节读取位置。
	*@return Uint8 值。
	*/
	__proto._getUInt8=function(pos){
		return this._d_.getUint8(pos);
	}

	/**
	*@private
	*从字节流的指定字节偏移量位置处读取一个 Uint16 值。
	*@param pos 字节读取位置。
	*@return Uint16 值。
	*/
	__proto._getUint16=function(pos){
		return this._d_.getUint16(pos,this._xd_);
	}

	/**
	*@private
	*使用 getFloat32()读取6个值，用于创建并返回一个 Matrix 对象。
	*@return Matrix 对象。
	*/
	__proto._getMatrix=function(){
		var rst=new Matrix(this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32());
		return rst;
	}

	/**
	*@private
	*读取指定长度的 UTF 型字符串。
	*@param len 需要读取的长度。
	*@return 读取的字符串。
	*/
	__proto.rUTF=function(len){
		var v="",max=this._pos_+len,c=0,c2=0,c3=0,f=String.fromCharCode;
		var u=this._u8d_,i=0;
		while (this._pos_ < max){
			c=u[this._pos_++];
			if (c < 0x80){
				if (c !=0){
					v+=f(c);
				}
				}else if (c < 0xE0){
				v+=f(((c & 0x3F)<< 6)| (u[this._pos_++] & 0x7F));
				}else if (c < 0xF0){
				c2=u[this._pos_++];
				v+=f(((c & 0x1F)<< 12)| ((c2 & 0x7F)<< 6)| (u[this._pos_++] & 0x7F));
				}else {
				c2=u[this._pos_++];
				c3=u[this._pos_++];
				v+=f(((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 << 6)& 0x7F)| (u[this._pos_++] & 0x7F));
			}
			i++;
		}
		return v;
	}

	/**
	*@private
	*读取 <code>len</code> 参数指定的长度的字符串。
	*@param len 要读取的字符串的长度。
	*@return 指定长度的字符串。
	*/
	__proto.getCustomString=function(len){
		var v="",ulen=0,c=0,c2=0,f=String.fromCharCode;
		var u=this._u8d_,i=0;
		while (len > 0){
			c=u[this._pos_];
			if (c < 0x80){
				v+=f(c);
				this._pos_++;
				len--;
				}else {
				ulen=c-0x80;
				this._pos_++;
				len-=ulen;
				while (ulen > 0){
					c=u[this._pos_++];
					c2=u[this._pos_++];
					v+=f((c2 << 8)| c);
					ulen--;
				}
			}
		}
		return v;
	}

	/**
	*清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
	*/
	__proto.clear=function(){
		this._pos_=0;
		this.length=0;
	}

	/**
	*@private
	*获取此对象的 ArrayBuffer 引用。
	*@return
	*/
	__proto.__getBuffer=function(){
		return this._d_.buffer;
	}

	/**
	*<p>将 UTF-8 字符串写入字节流。类似于 writeUTF()方法，但 writeUTFBytes()不使用 16 位长度的字为字符串添加前缀。</p>
	*<p>对应的读取方法为： getUTFBytes 。</p>
	*@param value 要写入的字符串。
	*/
	__proto.writeUTFBytes=function(value){
		value=value+"";
		for (var i=0,sz=value.length;i < sz;i++){
			var c=value.charCodeAt(i);
			if (c <=0x7F){
				this.writeByte(c);
				}else if (c <=0x7FF){
				this.ensureWrite(this._pos_+2);
				this._u8d_.set([0xC0 | (c >> 6),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=2;
				}else if (c <=0xFFFF){
				this.ensureWrite(this._pos_+3);
				this._u8d_.set([0xE0 | (c >> 12),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=3;
				}else {
				this.ensureWrite(this._pos_+4);
				this._u8d_.set([0xF0 | (c >> 18),0x80 | ((c >> 12)& 0x3F),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=4;
			}
		}
	}

	/**
	*<p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
	*<p>对应的读取方法为： getUTFString 。</p>
	*@param value 要写入的字符串值。
	*/
	__proto.writeUTFString=function(value){
		var tPos=this.pos;
		this.writeUint16(1);
		this.writeUTFBytes(value);
		var dPos=this.pos-tPos-2;
		if (dPos >=65536){
			throw "writeUTFString byte len more than 65536";
		}
		this._d_.setUint16(tPos,dPos,this._xd_);
	}

	/**
	*@private
	*读取 UTF-8 字符串。
	*@return 读取的字符串。
	*/
	__proto.readUTFString=function(){
		return this.readUTFBytes(this.getUint16());
	}

	/**
	*<p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
	*<p>对应的写入方法为： writeUTFString 。</p>
	*@return 读取的字符串。
	*/
	__proto.getUTFString=function(){
		return this.readUTFString();
	}

	/**
	*@private
	*读字符串，必须是 writeUTFBytes 方法写入的字符串。
	*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
	*@return 读取的字符串。
	*/
	__proto.readUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		if (len==0)return "";
		var lastBytes=this.bytesAvailable;
		if (len > lastBytes)throw "readUTFBytes error - Out of bounds";
		len=len > 0 ? len :lastBytes;
		return this.rUTF(len);
	}

	/**
	*<p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
	*<p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
	*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
	*@return 读取的字符串。
	*/
	__proto.getUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		return this.readUTFBytes(len);
	}

	/**
	*<p>在字节流中写入一个字节。</p>
	*<p>使用参数的低 8 位。忽略高 24 位。</p>
	*@param value
	*/
	__proto.writeByte=function(value){
		this.ensureWrite(this._pos_+1);
		this._d_.setInt8(this._pos_,value);
		this._pos_+=1;
	}

	/**
	*@private
	*从字节流中读取带符号的字节。
	*/
	__proto.readByte=function(){
		if (this._pos_+1 > this._length)throw "readByte error - Out of bounds";
		return this._d_.getInt8(this._pos_++);
	}

	/**
	*<p>从字节流中读取带符号的字节。</p>
	*<p>返回值的范围是从-128 到 127。</p>
	*@return 介于-128 和 127 之间的整数。
	*/
	__proto.getByte=function(){
		return this.readByte();
	}

	/**
	*<p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>
	*@param lengthToEnsure 指定的长度。
	*/
	__proto.ensureWrite=function(lengthToEnsure){
		if (this._length < lengthToEnsure)this._length=lengthToEnsure;
		if (this._allocated_ < lengthToEnsure)this.length=lengthToEnsure;
	}

	/**
	*<p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
	*<p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
	*<p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
	*$NEXTBIG 由于没有判断length和arraybuffer的合法性，当开发者填写了错误的length值时，会导致写入多余的空白数据甚至内存溢出，为了避免影响开发者正在使用此方法的功能，下个重大版本会修复这些问题。
	*@param arraybuffer 需要写入的 Arraybuffer 对象。
	*@param offset Arraybuffer 对象的索引的偏移量（以字节为单位）
	*@param length 从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
	*/
	__proto.writeArrayBuffer=function(arraybuffer,offset,length){
		(offset===void 0)&& (offset=0);
		(length===void 0)&& (length=0);
		if (offset < 0 || length < 0)throw "writeArrayBuffer error - Out of bounds";
		if (length==0)length=arraybuffer.byteLength-offset;
		this.ensureWrite(this._pos_+length);
		var uint8array=new Uint8Array(arraybuffer);
		this._u8d_.set(uint8array.subarray(offset,offset+length),this._pos_);
		this._pos_+=length;
	}

	/**
	*获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。
	*/
	__getset(0,__proto,'buffer',function(){
		var rstBuffer=this._d_.buffer;
		if (rstBuffer.byteLength==this.length)return rstBuffer;
		return rstBuffer.slice(0,this.length);
	});

	/**
	*<p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>
	*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
	*<p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
	*<code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
	*/
	__getset(0,__proto,'endian',function(){
		return this._xd_ ? "littleEndian" :"bigEndian";
		},function(endianStr){
		this._xd_=(endianStr=="littleEndian");
	});

	/**
	*<p> <code>Byte</code> 对象的长度（以字节为单位）。</p>
	*<p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>
	*<p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>
	*/
	__getset(0,__proto,'length',function(){
		return this._length;
		},function(value){
		if (this._allocated_ < value)
			this.___resizeBuffer(this._allocated_=Math.floor(Math.max(value,this._allocated_ *2)));
		else if (this._allocated_ > value)
		this.___resizeBuffer(this._allocated_=value);
		this._length=value;
	});

	/**
	*移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
	*/
	__getset(0,__proto,'pos',function(){
		return this._pos_;
		},function(value){
		this._pos_=value;
	});

	/**
	*可从字节流的当前位置到末尾读取的数据的字节数。
	*/
	__getset(0,__proto,'bytesAvailable',function(){
		return this._length-this._pos_;
	});

	Byte.getSystemEndian=function(){
		if (!Byte._sysEndian){
			var buffer=new ArrayBuffer(2);
			new DataView(buffer).setInt16(0,256,true);
			Byte._sysEndian=(new Int16Array(buffer))[0]===256 ? /*CLASS CONST:laya.utils.Byte.LITTLE_ENDIAN*/"littleEndian" :/*CLASS CONST:laya.utils.Byte.BIG_ENDIAN*/"bigEndian";
		}
		return Byte._sysEndian;
	}

	Byte.BIG_ENDIAN="bigEndian";
	Byte.LITTLE_ENDIAN="littleEndian";
	Byte._sysEndian=null;
	return Byte;
})()


/**
*@private
*对象缓存统一管理类
*/
//class laya.utils.CacheManager
var CacheManager=(function(){
	function CacheManager(){}
	__class(CacheManager,'laya.utils.CacheManager');
	CacheManager.regCacheByFunction=function(disposeFunction,getCacheListFunction){
		CacheManager.unRegCacheByFunction(disposeFunction,getCacheListFunction);
		var cache;
		cache={tryDispose:disposeFunction,getCacheList:getCacheListFunction};
		CacheManager._cacheList.push(cache);
	}

	CacheManager.unRegCacheByFunction=function(disposeFunction,getCacheListFunction){
		var i=0,len=0;
		len=CacheManager._cacheList.length;
		for (i=0;i < len;i++){
			if (CacheManager._cacheList[i].tryDispose==disposeFunction && CacheManager._cacheList[i].getCacheList==getCacheListFunction){
				CacheManager._cacheList.splice(i,1);
				return;
			}
		}
	}

	CacheManager.forceDispose=function(){
		var i=0,len=CacheManager._cacheList.length;
		for (i=0;i < len;i++){
			CacheManager._cacheList[i].tryDispose(true);
		}
	}

	CacheManager.beginCheck=function(waitTime){
		(waitTime===void 0)&& (waitTime=15000);
		Laya.timer.loop(waitTime,null,CacheManager._checkLoop);
	}

	CacheManager.stopCheck=function(){
		Laya.timer.clear(null,CacheManager._checkLoop);
	}

	CacheManager._checkLoop=function(){
		var cacheList=CacheManager._cacheList;
		if (cacheList.length < 1)return;
		var tTime=Browser.now();
		var count=0;
		var len=0;
		len=count=cacheList.length;
		while (count > 0){
			CacheManager._index++;
			CacheManager._index=CacheManager._index % len;
			cacheList[CacheManager._index].tryDispose(false);
			if (Browser.now()-tTime > CacheManager.loopTimeLimit)break ;
			count--;
		}
	}

	CacheManager.loopTimeLimit=2;
	CacheManager._cacheList=[];
	CacheManager._index=0;
	return CacheManager;
})()


/**
*<code>ClassUtils</code> 是一个类工具类。
*/
//class laya.utils.ClassUtils
var ClassUtils=(function(){
	function ClassUtils(){}
	__class(ClassUtils,'laya.utils.ClassUtils');
	ClassUtils.regClass=function(className,classDef){
		ClassUtils._classMap[className]=classDef;
	}

	ClassUtils.getRegClass=function(className){
		return ClassUtils._classMap[className];
	}

	ClassUtils.getInstance=function(className){
		var compClass=ClassUtils.getClass(className);
		if (compClass)
			return new compClass();
		else
		console.warn("[error] Undefined class:",className);
		return null;
	}

	ClassUtils.createByJson=function(json,node,root,customHandler,instanceHandler){
		if ((typeof json=='string'))
			json=JSON.parse(json);
		var props=json.props;
		if (!node){
			node=instanceHandler ? instanceHandler.runWith(json):ClassUtils.getInstance(props.runtime || json.type);
			if (!node)
				return null;
		};
		var child=json.child;
		if (child){
			for (var i=0,n=child.length;i < n;i++){
				var data=child[i];
				if ((data.props.name==="render" || data.props.renderType==="render")&& node["_$set_itemRender"])
					node.itemRender=data;
				else {
					if (data.type=="Graphic"){
						ClassUtils.addGraphicsToSprite(data,node);
						}else if (ClassUtils.isDrawType(data.type)){
						ClassUtils.addGraphicToSprite(data,node,true);
						}else {
						var tChild=ClassUtils.createByJson(data,null,root,customHandler,instanceHandler)
						if (data.type=="Script"){
							if (tChild.hasOwnProperty("owner")){
								tChild["owner"]=node;
								}else if (tChild.hasOwnProperty("target")){
								tChild["target"]=node;
							}
							}else if (data.props.renderType=="mask"){
							node.mask=tChild;
							}else {
							node.addChild(tChild);
						}
					}
				}
			}
		}
		if (props){
			for (var prop in props){
				var value=props[prop];
				if (prop==="var" && root){
					root[value]=node;
					}else if ((value instanceof Array)&& (typeof (node[prop])=='function')){
					node[prop].apply(node,value);
					}else {
					node[prop]=value;
				}
			}
		}
		if (customHandler && json.customProps){
			customHandler.runWith([node,json]);
		}
		if (node["created"])
			node.created();
		return node;
	}

	ClassUtils.addGraphicsToSprite=function(graphicO,sprite){
		var graphics;
		graphics=graphicO.child;
		if (!graphics || graphics.length < 1)
			return;
		var g;
		g=ClassUtils._getGraphicsFromSprite(graphicO,sprite);
		var ox=0;
		var oy=0;
		if (graphicO.props){
			ox=ClassUtils._getObjVar(graphicO.props,"x",0);
			oy=ClassUtils._getObjVar(graphicO.props,"y",0);
		}
		if (ox !=0 && oy !=0){
			g.translate(ox,oy);
		};
		var i=0,len=0;
		len=graphics.length;
		for (i=0;i < len;i++){
			ClassUtils._addGraphicToGraphics(graphics[i],g);
		}
		if (ox !=0 && oy !=0){
			g.translate(-ox,-oy);
		}
	}

	ClassUtils.addGraphicToSprite=function(graphicO,sprite,isChild){
		(isChild===void 0)&& (isChild=false);
		var g;
		g=isChild ? ClassUtils._getGraphicsFromSprite(graphicO,sprite):sprite.graphics;
		ClassUtils._addGraphicToGraphics(graphicO,g);
	}

	ClassUtils._getGraphicsFromSprite=function(dataO,sprite){
		var g;
		if (!dataO || !dataO.props)
			return sprite.graphics;
		var propsName;
		propsName=dataO.props.renderType;
		switch (propsName){
			case "hit":
			case "unHit":;
				var hitArea;
				if (!sprite.hitArea){
					sprite.hitArea=new HitArea();
				}
				hitArea=sprite.hitArea;
				if (!hitArea[propsName]){
					hitArea[propsName]=new Graphics();
				}
				g=hitArea[propsName];
				break ;
			default :
			}
		if (!g)
			g=sprite.graphics;
		return g;
	}

	ClassUtils._getTransformData=function(propsO){
		var m;
		if (propsO.hasOwnProperty("pivotX")|| propsO.hasOwnProperty("pivotY")){
			m=m || new Matrix();
			m.translate(-ClassUtils._getObjVar(propsO,"pivotX",0),-ClassUtils._getObjVar(propsO,"pivotY",0));
		};
		var sx=ClassUtils._getObjVar(propsO,"scaleX",1),sy=ClassUtils._getObjVar(propsO,"scaleY",1);
		var rotate=ClassUtils._getObjVar(propsO,"rotation",0);
		var skewX=ClassUtils._getObjVar(propsO,"skewX",0);
		var skewY=ClassUtils._getObjVar(propsO,"skewY",0);
		if (sx !=1 || sy !=1 || rotate !=0){
			m=m || new Matrix();
			m.scale(sx,sy);
			m.rotate(rotate *0.0174532922222222);
		}
		return m;
	}

	ClassUtils._addGraphicToGraphics=function(graphicO,graphic){
		var propsO;
		propsO=graphicO.props;
		if (!propsO)
			return;
		var drawConfig;
		drawConfig=ClassUtils.DrawTypeDic[graphicO.type];
		if (!drawConfig)
			return;
		var g;
		g=graphic;
		var m;
		var params=ClassUtils._getParams(propsO,drawConfig[1],drawConfig[2],drawConfig[3]);
		m=ClassUtils._tM;
		if (m || ClassUtils._alpha !=1){
			g.save();
			if (m)
				g.transform(m);
			if (ClassUtils._alpha !=1)
				g.alpha(ClassUtils._alpha);
		}
		g[drawConfig[0]].apply(g,params);
		if (m || ClassUtils._alpha !=1){
			g.restore();
		}
	}

	ClassUtils._adptLineData=function(params){
		params[2]=parseFloat(params[0])+parseFloat(params[2]);
		params[3]=parseFloat(params[1])+parseFloat(params[3]);
		return params;
	}

	ClassUtils._adptTextureData=function(params){
		params[0]=Loader.getRes(params[0]);
		return params;
	}

	ClassUtils._adptLinesData=function(params){
		params[2]=ClassUtils._getPointListByStr(params[2]);
		return params;
	}

	ClassUtils.isDrawType=function(type){
		if (type=="Image")
			return false;
		return ClassUtils.DrawTypeDic.hasOwnProperty(type);
	}

	ClassUtils._getParams=function(obj,params,xPos,adptFun){
		(xPos===void 0)&& (xPos=0);
		var rst;
		rst=ClassUtils._temParam;
		rst.length=params.length;
		var i=0,len=0;
		len=params.length;
		for (i=0;i < len;i++){
			rst[i]=ClassUtils._getObjVar(obj,params[i][0],params[i][1]);
		}
		ClassUtils._alpha=ClassUtils._getObjVar(obj,"alpha",1);
		var m;
		m=ClassUtils._getTransformData(obj);
		if (m){
			if (!xPos)xPos=0;
			m.translate(rst[xPos],rst[xPos+1]);
			rst[xPos]=rst[xPos+1]=0;
			ClassUtils._tM=m;
			}else {
			ClassUtils._tM=null;
		}
		if (adptFun && ClassUtils[adptFun]){
			rst=ClassUtils[adptFun](rst);
		}
		return rst;
	}

	ClassUtils._getPointListByStr=function(str){
		var pointArr;
		pointArr=str.split(",");
		var i=0,len=0;
		len=pointArr.length;
		for (i=0;i < len;i++){
			pointArr[i]=parseFloat(pointArr[i]);
		}
		return pointArr;
	}

	ClassUtils._getObjVar=function(obj,key,noValue){
		if (obj.hasOwnProperty(key)){
			return obj[key];
		}
		return noValue;
	}

	ClassUtils._temParam=[];
	ClassUtils.getClass=function(className){
		var classObject=ClassUtils._classMap[className] || className;
		if ((typeof classObject=='string'))
			return Laya["__classmap"][classObject];
		return classObject;
	}

	ClassUtils._tM=null;
	ClassUtils._alpha=NaN;
	__static(ClassUtils,
	['DrawTypeDic',function(){return this.DrawTypeDic={"Rect":["drawRect",[["x",0],["y",0],["width",0],["height",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Circle":["drawCircle",[["x",0],["y",0],["radius",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Pie":["drawPie",[["x",0],["y",0],["radius",0],["startAngle",0],["endAngle",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Image":["drawTexture",[["x",0],["y",0],["width",0],["height",0]]],"Texture":["drawTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0]],1,"_adptTextureData"],"FillTexture":["fillTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0],["repeat",null]],1,"_adptTextureData"],"FillText":["fillText",[["text",""],["x",0],["y",0],["font",null],["color",null],["textAlign",null]],1],"Line":["drawLine",[["x",0],["y",0],["toX",0],["toY",0],["lineColor",null],["lineWidth",0]],0,"_adptLineData"],"Lines":["drawLines",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Curves":["drawCurves",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Poly":["drawPoly",[["x",0],["y",0],["points",""],["fillColor",null],["lineColor",null],["lineWidth",1]],0,"_adptLinesData"]};},'_classMap',function(){return this._classMap={'Sprite':'laya.display.Sprite','Text':'laya.display.Text','Animation':'laya.display.Animation','Skeleton':'laya.ani.bone.Skeleton','Particle2D':'laya.particle.Particle2D','div':'laya.html.dom.HTMLDivElement','p':'laya.html.dom.HTMLElement','img':'laya.html.dom.HTMLImageElement','span':'laya.html.dom.HTMLElement','br':'laya.html.dom.HTMLBrElement','style':'laya.html.dom.HTMLStyleElement','font':'laya.html.dom.HTMLElement','a':'laya.html.dom.HTMLElement','#text':'laya.html.dom.HTMLElement'};}
	]);
	return ClassUtils;
})()


/**
*@private
*<code>Color</code> 是一个颜色值处理类。
*/
//class laya.utils.Color
var Color=(function(){
	function Color(str){
		/**@private */
		this._color=[];
		/**字符串型颜色值。*/
		//this.strColor=null;
		/**uint 型颜色值。*/
		//this.numColor=0;
		//this._drawStyle=null;
		if ((typeof str=='string')){
			this.strColor=str;
			if (str===null)str="#000000";
			str.charAt(0)=='#' && (str=str.substr(1));
			var len=str.length;
			if (len==3 || len==4){
				var temp="";
				for (var i=0;i < len;i++){
					temp+=(str[i]+str[i]);
				}
				str=temp;
			};
			var color=this.numColor=parseInt(str,16);
			var flag=(str.length==8);
			if (flag){
				this._color=[parseInt(str.substr(0,2),16)/ 255,((0x00FF0000 & color)>> 16)/ 255,((0x0000FF00 & color)>> 8)/ 255,(0x000000FF & color)/ 255];
				return;
			}
			}else {
			color=this.numColor=str;
			this.strColor=Utils.toHexColor(color);
		}
		this._color=[((0xFF0000 & color)>> 16)/ 255,((0xFF00 & color)>> 8)/ 255,(0xFF & color)/ 255,1];
		(this._color).__id=++Color._COLODID;
	}

	__class(Color,'laya.utils.Color');
	Color._initDefault=function(){
		Color._DEFAULT={};
		for (var i in Color._COLOR_MAP)Color._SAVE[i]=Color._DEFAULT[i]=new Color(Color._COLOR_MAP[i]);
		return Color._DEFAULT;
	}

	Color._initSaveMap=function(){
		Color._SAVE_SIZE=0;
		Color._SAVE={};
		for (var i in Color._DEFAULT)Color._SAVE[i]=Color._DEFAULT[i];
	}

	Color.create=function(str){
		var color=Color._SAVE[str+""];
		if (color !=null)return color;
		(Color._SAVE_SIZE < 1000)|| Color._initSaveMap();
		return Color._SAVE[str+""]=new Color(str);
	}

	Color._SAVE={};
	Color._SAVE_SIZE=0;
	Color._COLODID=1;
	__static(Color,
	['_COLOR_MAP',function(){return this._COLOR_MAP={"white":'#FFFFFF',"red":'#FF0000',"green":'#00FF00',"blue":'#0000FF',"black":'#000000',"yellow":'#FFFF00','gray':'#AAAAAA'};},'_DEFAULT',function(){return this._DEFAULT=Color._initDefault();}
	]);
	return Color;
})()


/**
*<code>Dictionary</code> 是一个字典型的数据存取类。
*/
//class laya.utils.Dictionary
var Dictionary=(function(){
	function Dictionary(){
		this._values=[];
		this._keys=[];
	}

	__class(Dictionary,'laya.utils.Dictionary');
	var __proto=Dictionary.prototype;
	/**
	*给指定的键名设置值。
	*@param key 键名。
	*@param value 值。
	*/
	__proto.set=function(key,value){
		var index=this.indexOf(key);
		if (index >=0){
			this._values[index]=value;
			return;
		}
		this._keys.push(key);
		this._values.push(value);
	}

	/**
	*获取指定对象的键名索引。
	*@param key 键名对象。
	*@return 键名索引。
	*/
	__proto.indexOf=function(key){
		var index=this._keys.indexOf(key);
		if (index >=0)return index;
		key=((typeof key=='string'))? Number(key):(((typeof key=='number'))? key.toString():key);
		return this._keys.indexOf(key);
	}

	/**
	*返回指定键名的值。
	*@param key 键名对象。
	*@return 指定键名的值。
	*/
	__proto.get=function(key){
		var index=this.indexOf(key);
		return index < 0 ? null :this._values[index];
	}

	/**
	*移除指定键名的值。
	*@param key 键名对象。
	*@return 是否成功移除。
	*/
	__proto.remove=function(key){
		var index=this.indexOf(key);
		if (index >=0){
			this._keys.splice(index,1);
			this._values.splice(index,1);
			return true;
		}
		return false;
	}

	/**
	*清除此对象的键名列表和键值列表。
	*/
	__proto.clear=function(){
		this._values.length=0;
		this._keys.length=0;
	}

	/**
	*获取所有的子元素列表。
	*/
	__getset(0,__proto,'values',function(){
		return this._values;
	});

	/**
	*获取所有的子元素键名列表。
	*/
	__getset(0,__proto,'keys',function(){
		return this._keys;
	});

	return Dictionary;
})()


/**
*@private
*<code>Dragging</code> 类是触摸滑动控件。
*/
//class laya.utils.Dragging
var Dragging=(function(){
	function Dragging(){
		/**被拖动的对象。*/
		//this.target=null;
		/**缓动衰减系数。*/
		this.ratio=0.92;
		/**单帧最大偏移量。*/
		this.maxOffset=60;
		/**滑动范围。*/
		//this.area=null;
		/**表示拖动是否有惯性。*/
		//this.hasInertia=false;
		/**橡皮筋最大值。*/
		//this.elasticDistance=NaN;
		/**橡皮筋回弹时间，单位为毫秒。*/
		//this.elasticBackTime=NaN;
		/**事件携带数据。*/
		//this.data=null;
		this._dragging=false;
		this._clickOnly=true;
		//this._elasticRateX=NaN;
		//this._elasticRateY=NaN;
		//this._lastX=NaN;
		//this._lastY=NaN;
		//this._offsetX=NaN;
		//this._offsetY=NaN;
		//this._offsets=null;
		//this._disableMouseEvent=false;
		//this._tween=null;
		//this._parent=null;
	}

	__class(Dragging,'laya.utils.Dragging');
	var __proto=Dragging.prototype;
	/**
	*开始拖拽。
	*@param target 待拖拽的 <code>Sprite</code> 对象。
	*@param area 滑动范围。
	*@param hasInertia 拖动是否有惯性。
	*@param elasticDistance 橡皮筋最大值。
	*@param elasticBackTime 橡皮筋回弹时间，单位为毫秒。
	*@param data 事件携带数据。
	*@param disableMouseEvent 鼠标事件是否有效。
	*@param ratio 惯性阻尼系数
	*/
	__proto.start=function(target,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
		(ratio===void 0)&& (ratio=0.92);
		this.clearTimer();
		this.target=target;
		this.area=area;
		this.hasInertia=hasInertia;
		this.elasticDistance=area ? elasticDistance :0;
		this.elasticBackTime=elasticBackTime;
		this.data=data;
		this._disableMouseEvent=disableMouseEvent;
		this.ratio=ratio;
		if (target.globalScaleX !=1 || target.globalScaleY !=1){
			this._parent=target.parent;
			}else {
			this._parent=Laya.stage;
		}
		this._clickOnly=true;
		this._dragging=true;
		this._elasticRateX=this._elasticRateY=1;
		this._lastX=this._parent.mouseX;
		this._lastY=this._parent.mouseY;
		Laya.stage.on(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
		Laya.stage.on(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp);
		Laya.timer.frameLoop(1,this,this.loop);
	}

	/**
	*清除计时器。
	*/
	__proto.clearTimer=function(){
		Laya.timer.clear(this,this.loop);
		Laya.timer.clear(this,this.tweenMove);
		if (this._tween){
			this._tween.recover();
			this._tween=null;
		}
	}

	/**
	*停止拖拽。
	*/
	__proto.stop=function(){
		if (this._dragging){
			MouseManager.instance.disableMouseEvent=false;
			Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
			Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp);
			this._dragging=false;
			this.target && this.area && this.backToArea();
			this.clear();
		}
	}

	/**
	*拖拽的循环处理函数。
	*/
	__proto.loop=function(){
		var point=this._parent.getMousePoint();
		var mouseX=point.x;
		var mouseY=point.y;
		var offsetX=mouseX-this._lastX;
		var offsetY=mouseY-this._lastY;
		if (this._clickOnly){
			if (Math.abs(offsetX *Laya.stage._canvasTransform.getScaleX())> 1 || Math.abs(offsetY *Laya.stage._canvasTransform.getScaleY())> 1){
				this._clickOnly=false;
				this._offsets || (this._offsets=[]);
				this._offsets.length=0;
				this.target.event(/*laya.events.Event.DRAG_START*/"dragstart",this.data);
				MouseManager.instance.disableMouseEvent=this._disableMouseEvent;
				this.target._set$P("$_MOUSEDOWN",false);
			}else return;
			}else {
			this._offsets.push(offsetX,offsetY);
		}
		if (offsetX===0 && offsetY===0)return;
		this._lastX=mouseX;
		this._lastY=mouseY;
		this.target.x+=offsetX *this._elasticRateX;
		this.target.y+=offsetY *this._elasticRateY;
		this.area && this.checkArea();
		this.target.event(/*laya.events.Event.DRAG_MOVE*/"dragmove",this.data);
	}

	/**
	*拖拽区域检测。
	*/
	__proto.checkArea=function(){
		if (this.elasticDistance <=0){
			this.backToArea();
			}else {
			if (this.target.x < this.area.x){
				var offsetX=this.area.x-this.target.x;
				}else if (this.target.x > this.area.x+this.area.width){
				offsetX=this.target.x-this.area.x-this.area.width;
				}else {
				offsetX=0;
			}
			this._elasticRateX=Math.max(0,1-(offsetX / this.elasticDistance));
			if (this.target.y < this.area.y){
				var offsetY=this.area.y-this.target.y;
				}else if (this.target.y > this.area.y+this.area.height){
				offsetY=this.target.y-this.area.y-this.area.height;
				}else {
				offsetY=0;
			}
			this._elasticRateY=Math.max(0,1-(offsetY / this.elasticDistance));
		}
	}

	/**
	*移动至设定的拖拽区域。
	*/
	__proto.backToArea=function(){
		this.target.x=Math.min(Math.max(this.target.x,this.area.x),this.area.x+this.area.width);
		this.target.y=Math.min(Math.max(this.target.y,this.area.y),this.area.y+this.area.height);
	}

	/**
	*舞台的抬起事件侦听函数。
	*@param e Event 对象。
	*/
	__proto.onStageMouseUp=function(e){
		MouseManager.instance.disableMouseEvent=false;
		Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
		Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp);
		Laya.timer.clear(this,this.loop);
		if (this._clickOnly || !this.target)return;
		if (this.hasInertia){
			if (this._offsets.length < 1){
				this._offsets.push(this._parent.mouseX-this._lastX,this._parent.mouseY-this._lastY);
			}
			this._offsetX=this._offsetY=0;
			var len=this._offsets.length;
			var n=Math.min(len,6);
			var m=this._offsets.length-n;
			for (var i=len-1;i > m;i--){
				this._offsetY+=this._offsets[i--];
				this._offsetX+=this._offsets[i];
			}
			this._offsetX=this._offsetX / n *2;
			this._offsetY=this._offsetY / n *2;
			if (Math.abs(this._offsetX)> this.maxOffset)this._offsetX=this._offsetX > 0 ? this.maxOffset :-this.maxOffset;
			if (Math.abs(this._offsetY)> this.maxOffset)this._offsetY=this._offsetY > 0 ? this.maxOffset :-this.maxOffset;
			Laya.timer.frameLoop(1,this,this.tweenMove);
			}else if (this.elasticDistance > 0){
			this.checkElastic();
			}else {
			this.clear();
		}
	}

	/**
	*橡皮筋效果检测。
	*/
	__proto.checkElastic=function(){
		var tx=NaN;
		var ty=NaN;
		if (this.target.x < this.area.x)tx=this.area.x;
		else if (this.target.x > this.area.x+this.area.width)tx=this.area.x+this.area.width;
		if (this.target.y < this.area.y)ty=this.area.y;
		else if (this.target.y > this.area.y+this.area.height)ty=this.area.y+this.area.height;
		if (!isNaN(tx)|| !isNaN(ty)){
			var obj={};
			if (!isNaN(tx))obj.x=tx;
			if (!isNaN(ty))obj.y=ty;
			this._tween=Tween.to(this.target,obj,this.elasticBackTime,Ease.sineOut,Handler.create(this,this.clear),0,false,false);
			}else {
			this.clear();
		}
	}

	/**
	*移动。
	*/
	__proto.tweenMove=function(){
		this._offsetX *=this.ratio *this._elasticRateX;
		this._offsetY *=this.ratio *this._elasticRateY;
		this.target.x+=this._offsetX;
		this.target.y+=this._offsetY;
		this.area && this.checkArea();
		this.target.event(/*laya.events.Event.DRAG_MOVE*/"dragmove",this.data);
		if ((Math.abs(this._offsetX)< 1 && Math.abs(this._offsetY)< 1)|| this._elasticRateX < 0.5 || this._elasticRateY < 0.5){
			Laya.timer.clear(this,this.tweenMove);
			if (this.elasticDistance > 0)this.checkElastic();
			else this.clear();
		}
	}

	/**
	*结束拖拽。
	*/
	__proto.clear=function(){
		if (this.target){
			this.clearTimer();
			var sp=this.target;
			this.target=null;
			this._parent=null;
			sp.event(/*laya.events.Event.DRAG_END*/"dragend",this.data);
		}
	}

	return Dragging;
})()


/**
*<code>Ease</code> 类定义了缓动函数，以便实现 <code>Tween</code> 动画的缓动效果。
*/
//class laya.utils.Ease
var Ease=(function(){
	function Ease(){}
	__class(Ease,'laya.utils.Ease');
	Ease.linearNone=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearIn=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearInOut=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearOut=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.bounceIn=function(t,b,c,d){
		return c-Ease.bounceOut(d-t,0,c,d)+b;
	}

	Ease.bounceInOut=function(t,b,c,d){
		if (t < d *0.5)return Ease.bounceIn(t *2,0,c,d)*.5+b;
		else return Ease.bounceOut(t *2-d,0,c,d)*.5+c *.5+b;
	}

	Ease.bounceOut=function(t,b,c,d){
		if ((t /=d)< (1 / 2.75))return c *(7.5625 *t *t)+b;
		else if (t < (2 / 2.75))return c *(7.5625 *(t-=(1.5 / 2.75))*t+.75)+b;
		else if (t < (2.5 / 2.75))return c *(7.5625 *(t-=(2.25 / 2.75))*t+.9375)+b;
		else return c *(7.5625 *(t-=(2.625 / 2.75))*t+.984375)+b;
	}

	Ease.backIn=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		return c *(t /=d)*t *((s+1)*t-s)+b;
	}

	Ease.backInOut=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		if ((t /=d *0.5)< 1)return c *0.5 *(t *t *(((s *=(1.525))+1)*t-s))+b;
		return c / 2 *((t-=2)*t *(((s *=(1.525))+1)*t+s)+2)+b;
	}

	Ease.backOut=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		return c *((t=t / d-1)*t *((s+1)*t+s)+1)+b;
	}

	Ease.elasticIn=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d)==1)return b+c;
		if (!p)p=d *.3;
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		return-(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
	}

	Ease.elasticInOut=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d *0.5)==2)return b+c;
		if (!p)p=d *(.3 *1.5);
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		if (t < 1)return-.5 *(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
		return a *Math.pow(2,-10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p)*.5+c+b;
	}

	Ease.elasticOut=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d)==1)return b+c;
		if (!p)p=d *.3;
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		return (a *Math.pow(2,-10 *t)*Math.sin((t *d-s)*Ease.PI2 / p)+c+b);
	}

	Ease.strongIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t *t+b;
	}

	Ease.strongInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
		return c *0.5 *((t-=2)*t *t *t *t+2)+b;
	}

	Ease.strongOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t *t *t+1)+b;
	}

	Ease.sineInOut=function(t,b,c,d){
		return-c *0.5 *(Math.cos(Math.PI *t / d)-1)+b;
	}

	Ease.sineIn=function(t,b,c,d){
		return-c *Math.cos(t / d *Ease.HALF_PI)+c+b;
	}

	Ease.sineOut=function(t,b,c,d){
		return c *Math.sin(t / d *Ease.HALF_PI)+b;
	}

	Ease.quintIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t *t+b;
	}

	Ease.quintInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
		return c *0.5 *((t-=2)*t *t *t *t+2)+b;
	}

	Ease.quintOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t *t *t+1)+b;
	}

	Ease.quartIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t+b;
	}

	Ease.quartInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t+b;
		return-c *0.5 *((t-=2)*t *t *t-2)+b;
	}

	Ease.quartOut=function(t,b,c,d){
		return-c *((t=t / d-1)*t *t *t-1)+b;
	}

	Ease.cubicIn=function(t,b,c,d){
		return c *(t /=d)*t *t+b;
	}

	Ease.cubicInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t+b;
		return c *0.5 *((t-=2)*t *t+2)+b;
	}

	Ease.cubicOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t+1)+b;
	}

	Ease.quadIn=function(t,b,c,d){
		return c *(t /=d)*t+b;
	}

	Ease.quadInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t+b;
		return-c *0.5 *((--t)*(t-2)-1)+b;
	}

	Ease.quadOut=function(t,b,c,d){
		return-c *(t /=d)*(t-2)+b;
	}

	Ease.expoIn=function(t,b,c,d){
		return (t==0)? b :c *Math.pow(2,10 *(t / d-1))+b-c *0.001;
	}

	Ease.expoInOut=function(t,b,c,d){
		if (t==0)return b;
		if (t==d)return b+c;
		if ((t /=d *0.5)< 1)return c *0.5 *Math.pow(2,10 *(t-1))+b;
		return c *0.5 *(-Math.pow(2,-10 *--t)+2)+b;
	}

	Ease.expoOut=function(t,b,c,d){
		return (t==d)? b+c :c *(-Math.pow(2,-10 *t / d)+1)+b;
	}

	Ease.circIn=function(t,b,c,d){
		return-c *(Math.sqrt(1-(t /=d)*t)-1)+b;
	}

	Ease.circInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return-c *0.5 *(Math.sqrt(1-t *t)-1)+b;
		return c *0.5 *(Math.sqrt(1-(t-=2)*t)+1)+b;
	}

	Ease.circOut=function(t,b,c,d){
		return c *Math.sqrt(1-(t=t / d-1)*t)+b;
	}

	__static(Ease,
	['HALF_PI',function(){return this.HALF_PI=Math.PI *0.5;},'PI2',function(){return this.PI2=Math.PI *2;}
	]);
	return Ease;
})()


/**
*鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）
*/
//class laya.utils.HitArea
var HitArea=(function(){
	function HitArea(){
		/**@private */
		this._hit=null;
		/**@private */
		this._unHit=null;
	}

	__class(HitArea,'laya.utils.HitArea');
	var __proto=HitArea.prototype;
	/**
	*是否包含某个点
	*@param x x坐标
	*@param y y坐标
	*@return 是否点击到
	*/
	__proto.isHit=function(x,y){
		if (!HitArea.isHitGraphic(x,y,this.hit))return false;
		return !HitArea.isHitGraphic(x,y,this.unHit);
	}

	/**
	*检测对象是否包含指定的点。
	*@param x 点的 X 轴坐标值（水平位置）。
	*@param y 点的 Y 轴坐标值（垂直位置）。
	*@return 如果包含指定的点，则值为 true；否则为 false。
	*/
	__proto.contains=function(x,y){
		return this.isHit(x,y);
	}

	/**
	*可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）
	*/
	__getset(0,__proto,'hit',function(){
		if (!this._hit)this._hit=new Graphics();
		return this._hit;
		},function(value){
		this._hit=value;
	});

	/**
	*不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）
	*/
	__getset(0,__proto,'unHit',function(){
		if (!this._unHit)this._unHit=new Graphics();
		return this._unHit;
		},function(value){
		this._unHit=value;
	});

	HitArea.isHitGraphic=function(x,y,graphic){
		if (!graphic)return false;
		var cmds;
		cmds=graphic.cmds;
		if (!cmds && graphic._one){
			cmds=HitArea._cmds;
			cmds.length=1;
			cmds[0]=graphic._one;
		}
		if (!cmds)return false;
		var i=0,len=0;
		len=cmds.length;
		var cmd;
		for (i=0;i < len;i++){
			cmd=cmds[i];
			if (!cmd)continue ;
			var context=Render._context;
			switch (cmd.callee){
				case context._translate:
				case 6:
					x-=cmd[0];
					y-=cmd[1];
				default :
				}
			if (HitArea.isHitCmd(x,y,cmd))return true;
		}
		return false;
	}

	HitArea.isHitCmd=function(x,y,cmd){
		if (!cmd)return false;
		var context=Render._context;
		var rst=false;
		switch (cmd["callee"]){
			case context._drawRect:
			case 13:
				HitArea._rec.setTo(cmd[0],cmd[1],cmd[2],cmd[3]);
				rst=HitArea._rec.contains(x,y);
				break ;
			case context._drawCircle:
			case context._fillCircle:
			case 14:;
				var d=NaN;
				x-=cmd[0];
				y-=cmd[1];
				d=x *x+y *y;
				rst=d < cmd[2] *cmd[2];
				break ;
			case context._drawPoly:
			case 18:
				x-=cmd[0];
				y-=cmd[1];
				rst=HitArea.ptInPolygon(x,y,cmd[2]);
				break ;
			default :
				break ;
			}
		return rst;
	}

	HitArea.ptInPolygon=function(x,y,areaPoints){
		var p;
		p=HitArea._ptPoint;
		p.setTo(x,y);
		var nCross=0;
		var p1x=NaN,p1y=NaN,p2x=NaN,p2y=NaN;
		var len=0;
		len=areaPoints.length;
		for (var i=0;i < len;i+=2){
			p1x=areaPoints[i];
			p1y=areaPoints[i+1];
			p2x=areaPoints[(i+2)% len];
			p2y=areaPoints[(i+3)% len];
			if (p1y==p2y)
				continue ;
			if (p.y < Math.min(p1y,p2y))
				continue ;
			if (p.y >=Math.max(p1y,p2y))
				continue ;
			var tx=(p.y-p1y)*(p2x-p1x)/ (p2y-p1y)+p1x;
			if (tx > p.x){
				nCross++;
			}
		}
		return (nCross % 2==1);
	}

	HitArea._cmds=[];
	__static(HitArea,
	['_rec',function(){return this._rec=new Rectangle();},'_ptPoint',function(){return this._ptPoint=new Point();}
	]);
	return HitArea;
})()


/**
*@private
*<code>HTMLChar</code> 是一个 HTML 字符类。
*/
//class laya.utils.HTMLChar
var HTMLChar=(function(){
	function HTMLChar(char,w,h,style){
		//this._sprite=null;
		//this._x=NaN;
		//this._y=NaN;
		//this._w=NaN;
		//this._h=NaN;
		/**表示是否是正常单词(英文|.|数字)。*/
		//this.isWord=false;
		/**字符。*/
		//this.char=null;
		/**字符数量。*/
		//this.charNum=NaN;
		/**CSS 样式。*/
		//this.style=null;
		this.char=char;
		this.charNum=char.charCodeAt(0);
		this._x=this._y=0;
		this.width=w;
		this.height=h;
		this.style=style;
		this.isWord=!HTMLChar._isWordRegExp.test(char);
	}

	__class(HTMLChar,'laya.utils.HTMLChar');
	var __proto=HTMLChar.prototype;
	Laya.imps(__proto,{"laya.display.ILayout":true})
	/**
	*设置与此对象绑定的显示对象 <code>Sprite</code> 。
	*@param sprite 显示对象 <code>Sprite</code> 。
	*/
	__proto.setSprite=function(sprite){
		this._sprite=sprite;
	}

	/**
	*获取与此对象绑定的显示对象 <code>Sprite</code>。
	*@return
	*/
	__proto.getSprite=function(){
		return this._sprite;
	}

	/**@private */
	__proto._isChar=function(){
		return true;
	}

	/**@private */
	__proto._getCSSStyle=function(){
		return this.style;
	}

	/**
	*宽度。
	*/
	__getset(0,__proto,'width',function(){
		return this._w;
		},function(value){
		this._w=value;
	});

	/**
	*此对象存储的 X 轴坐标值。
	*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 x 的值。
	*/
	__getset(0,__proto,'x',function(){
		return this._x;
		},function(value){
		if (this._sprite){
			this._sprite.x=value;
		}
		this._x=value;
	});

	/**
	*此对象存储的 Y 轴坐标值。
	*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 y 的值。
	*/
	__getset(0,__proto,'y',function(){
		return this._y;
		},function(value){
		if (this._sprite){
			this._sprite.y=value;
		}
		this._y=value;
	});

	/**
	*高度。
	*/
	__getset(0,__proto,'height',function(){
		return this._h;
		},function(value){
		this._h=value;
	});

	__static(HTMLChar,
	['_isWordRegExp',function(){return this._isWordRegExp=new RegExp("[\\w\.]","");}
	]);
	return HTMLChar;
})()


/**
*<code>Log</code> 类用于在界面内显示日志记录信息。
*/
//class laya.utils.Log
var Log=(function(){
	function Log(){}
	__class(Log,'laya.utils.Log');
	Log.enable=function(){
		if (!Log._logdiv){
			Log._logdiv=Browser.window.document.createElement('div');
			Browser.window.document.body.appendChild(Log._logdiv);
			Log._logdiv.style.cssText="pointer-events:none;border:white;overflow:hidden;z-index:1000000;background:rgba(100,100,100,0.6);color:white;position: absolute;left:0px;top:0px;width:50%;height:50%;";
		}
	}

	Log.toggle=function(){
		var style=Log._logdiv.style;
		if (style.width=="1px"){
			style.width=style.height="50%";
			}else {
			style.width=style.height="1px";
		}
	}

	Log.print=function(value){
		if (Log._logdiv){
			if (Log._count >=Log.maxCount)Log.clear();
			Log._count++;
			Log._logdiv.innerText+=value+"\n";
			Log._logdiv.scrollTop=Log._logdiv.scrollHeight;
		}
	}

	Log.clear=function(){
		Log._logdiv.innerText="";
		Log._count=0;
	}

	Log._logdiv=null;
	Log._count=0;
	Log.maxCount=20;
	return Log;
})()


/**
*<code>Mouse</code> 类用于控制鼠标光标。
*/
//class laya.utils.Mouse
var Mouse=(function(){
	function Mouse(){}
	__class(Mouse,'laya.utils.Mouse');
	/**
	*设置鼠标样式
	*@param cursorStr
	*例如auto move no-drop col-resize
	*all-scroll pointer not-allowed row-resize
	*crosshair progress e-resize ne-resize
	*default text n-resize nw-resize
	*help vertical-text s-resize se-resize
	*inherit wait w-resize sw-resize
	*
	*/
	__getset(1,Mouse,'cursor',function(){
		return Mouse._style.cursor;
		},function(cursorStr){
		Mouse._style.cursor=cursorStr;
	});

	Mouse.hide=function(){
		if (Mouse.cursor !="none"){
			Mouse._preCursor=Mouse.cursor;
			Mouse.cursor="none";
		}
	}

	Mouse.show=function(){
		if (Mouse.cursor=="none"){
			if (Mouse._preCursor){
				Mouse.cursor=Mouse._preCursor;
				}else {
				Mouse.cursor="auto";
			}
		}
	}

	Mouse._preCursor=null;
	__static(Mouse,
	['_style',function(){return this._style=Browser.document.body.style;}
	]);
	return Mouse;
})()


/**
*<p> <code>Pool</code> 是对象池类，用于对象的存贮、重复使用。</p>
*<p>合理使用对象池，可以有效减少对象创建的开销，避免频繁的垃圾回收，从而优化游戏流畅度。</p>
*/
//class laya.utils.Pool
var Pool=(function(){
	function Pool(){}
	__class(Pool,'laya.utils.Pool');
	Pool.getPoolBySign=function(sign){
		return Pool._poolDic[sign] || (Pool._poolDic[sign]=[]);
	}

	Pool.clearBySign=function(sign){
		if (Pool._poolDic[sign])Pool._poolDic[sign].length=0;
	}

	Pool.recover=function(sign,item){
		if (item["__InPool"])return;
		item["__InPool"]=true;
		Pool.getPoolBySign(sign).push(item);
	}

	Pool.getItemByClass=function(sign,cls){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():new cls();
		rst["__InPool"]=false;
		return rst;
	}

	Pool.getItemByCreateFun=function(sign,createFun){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():createFun();
		rst["__InPool"]=false;
		return rst;
	}

	Pool.getItem=function(sign){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():null;
		if (rst){
			rst["__InPool"]=false;
		}
		return rst;
	}

	Pool._poolDic={};
	Pool.InPoolSign="__InPool";
	return Pool;
})()


/**
*@private
*基于个数的对象缓存管理器
*/
//class laya.utils.PoolCache
var PoolCache=(function(){
	function PoolCache(){
		/**
		*对象在Pool中的标识
		*/
		this.sign=null;
		/**
		*允许缓存的最大数量
		*/
		this.maxCount=1000;
	}

	__class(PoolCache,'laya.utils.PoolCache');
	var __proto=PoolCache.prototype;
	/**
	*获取缓存的对象列表
	*@return
	*
	*/
	__proto.getCacheList=function(){
		return Pool.getPoolBySign(this.sign);
	}

	/**
	*尝试清理缓存
	*@param force 是否强制清理
	*
	*/
	__proto.tryDispose=function(force){
		var list;
		list=Pool.getPoolBySign(this.sign);
		if (list.length > this.maxCount){
			list.splice(this.maxCount,list.length-this.maxCount);
		}
	}

	PoolCache.addPoolCacheManager=function(sign,maxCount){
		(maxCount===void 0)&& (maxCount=100);
		var cache;
		cache=new PoolCache();
		cache.sign=sign;
		cache.maxCount=maxCount;
		CacheManager.regCacheByFunction(Utils.bind(cache.tryDispose,cache),Utils.bind(cache.getCacheList,cache));
	}

	return PoolCache;
})()


/**
*<p> <code>Stat</code> 是一个性能统计面板，可以实时更新相关的性能参数。</p>
*<p>参与统计的性能参数如下（所有参数都是每大约1秒进行更新）：<br/>
*FPS(Canvas)/FPS(WebGL)：Canvas 模式或者 WebGL 模式下的帧频，也就是每秒显示的帧数，值越高、越稳定，感觉越流畅；<br/>
*Sprite：统计所有渲染节点（包括容器）数量，它的大小会影响引擎进行节点遍历、数据组织和渲染的效率。其值越小，游戏运行效率越高；<br/>
*DrawCall：此值是决定性能的重要指标，其值越小，游戏运行效率越高。Canvas模式下表示每大约1秒的图像绘制次数；WebGL模式下表示每大约1秒的渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作；<br/>
*CurMem：Canvas模式下，表示内存占用大小，值越小越好，过高会导致游戏闪退；WebGL模式下，表示内存与显存的占用，值越小越好；<br/>
*Shader：是 WebGL 模式独有的性能指标，表示每大约1秒 Shader 提交次数，值越小越好；<br/>
*Canvas：由三个数值组成，只有设置 CacheAs 后才会有值，默认为0/0/0。从左到右数值的意义分别为：每帧重绘的画布数量 / 缓存类型为"normal"类型的画布数量 / 缓存类型为"bitmap"类型的画布数量。</p>
*/
//class laya.utils.Stat
var Stat=(function(){
	function Stat(){}
	__class(Stat,'laya.utils.Stat');
	/**
	*点击性能统计显示区域的处理函数。
	*/
	__getset(1,Stat,'onclick',null,function(fn){
		if (Stat._sp){
			Stat._sp.on("click",Stat._sp,fn);
		}
		if (Stat._canvas){
			Stat._canvas.source.onclick=fn;
			Stat._canvas.source.style.pointerEvents='';
		}
	});

	Stat.show=function(x,y){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		if (Render.isConchApp){
			Browser.window.conch.showFPS && Browser.window.conch.showFPS(x,y);
			return;
		}
		if (!Browser.onMiniGame)Stat._useCanvas=true;
		Stat._show=true;
		Stat._fpsData.length=60;
		Stat._view[0]={title:"FPS(Canvas)",value:"_fpsStr",color:"yellow",units:"int"};
		Stat._view[1]={title:"Sprite",value:"_spriteStr",color:"white",units:"int"};
		Stat._view[2]={title:"DrawCall",value:"drawCall",color:"white",units:"int"};
		Stat._view[3]={title:"CurMem",value:"currentMemorySize",color:"yellow",units:"M"};
		if (Render.isWebGL){
			Stat._view[4]={title:"Shader",value:"shaderCall",color:"white",units:"int"};
			if (!Render.is3DMode){
				Stat._view[0].title="FPS(WebGL)";
				Stat._view[5]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
				}else {
				Stat._view[0].title="FPS(3D)";
				Stat._view[5]={title:"TriFaces",value:"trianglesFaces",color:"white",units:"int"};
				Stat._view[6]={title:"treeNodeColl",value:"treeNodeCollision",color:"white",units:"int"};
				Stat._view[7]={title:"treeSpriteColl",value:"treeSpriteCollision",color:"white",units:"int"};
			}
			}else {
			Stat._view[4]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
		}
		if (Stat._useCanvas){
			Stat.createUIPre(x,y);
		}else
		Stat.createUI(x,y);
		Stat.enable();
	}

	Stat.createUIPre=function(x,y){
		var pixel=Browser.pixelRatio;
		Stat._width=pixel *130;
		Stat._vx=pixel *75;
		Stat._height=pixel *(Stat._view.length *12+3 *pixel)+4;
		Stat._fontSize=12 *pixel;
		for (var i=0;i < Stat._view.length;i++){
			Stat._view[i].x=4;
			Stat._view[i].y=i *Stat._fontSize+2 *pixel;
		}
		if (!Stat._canvas){
			Stat._canvas=new HTMLCanvas('2D');
			Stat._canvas.size(Stat._width,Stat._height);
			Stat._ctx=Stat._canvas.getContext('2d');
			Stat._ctx.textBaseline="top";
			Stat._ctx.font=Stat._fontSize+"px Sans-serif";
			Stat._canvas.source.style.cssText="pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;direction:ltr;left:"+x+"px;top:"+y+"px;width:"+(Stat._width / pixel)+"px;height:"+(Stat._height / pixel)+"px;";
		}
		Stat._first=true;
		Stat.loop();
		Stat._first=false;
		Browser.container.appendChild(Stat._canvas.source);
	}

	Stat.createUI=function(x,y){
		var stat=Stat._sp;
		var pixel=Browser.pixelRatio;
		if (!stat){
			stat=new Sprite();
			Stat._leftText=new Text();
			Stat._leftText.pos(5,5);
			Stat._leftText.color="#ffffff";
			stat.addChild(Stat._leftText);
			Stat._txt=new Text();
			Stat._txt.pos(80*pixel,5);
			Stat._txt.color="#ffffff";
			stat.addChild(Stat._txt);
			Stat._sp=stat;
		}
		stat.pos(x,y);
		var text="";
		for (var i=0;i < Stat._view.length;i++){
			var one=Stat._view[i];
			text+=one.title+"\n";
		}
		Stat._leftText.text=text;
		var width=pixel *138;
		var height=pixel *(Stat._view.length *12+3 *pixel)+4;
		Stat._txt.fontSize=Stat._fontSize *pixel;
		Stat._leftText.fontSize=Stat._fontSize *pixel;
		stat.size(width,height);
		stat.graphics.clear();
		stat.graphics.setAlpha(0.5);
		stat.graphics.drawRect(0,0,width,height,"#999999");
		stat.graphics.setAlpha(1);
		Stat.loop();
	}

	Stat.enable=function(){
		Laya.timer.frameLoop(1,Stat,Stat.loop);
	}

	Stat.hide=function(){
		Stat._show=false;
		Laya.timer.clear(Stat,Stat.loop);
		if (Stat._canvas){
			Browser.removeElement(Stat._canvas.source);
		}
	}

	Stat.clear=function(){
		Stat.trianglesFaces=Stat.drawCall=Stat.shaderCall=Stat.spriteCount=Stat.spriteRenderUseCacheCount=Stat.treeNodeCollision=Stat.treeSpriteCollision=Stat.canvasNormal=Stat.canvasBitmap=Stat.canvasReCache=0;
	}

	Stat.loop=function(){
		Stat._count++;
		var timer=Browser.now();
		if (timer-Stat._timer < 1000)return;
		var count=Stat._count;
		Stat.FPS=Math.round((count *1000)/ (timer-Stat._timer));
		if (Stat._show){
			Stat.trianglesFaces=Math.round(Stat.trianglesFaces / count);
			if (!Stat._useCanvas){
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count)-4;
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-4;
				}else{
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count);
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-1;
			}
			Stat.spriteRenderUseCacheCount=Math.round(Stat.spriteRenderUseCacheCount / count);
			Stat.canvasNormal=Math.round(Stat.canvasNormal / count);
			Stat.canvasBitmap=Math.round(Stat.canvasBitmap / count);
			Stat.canvasReCache=Math.ceil(Stat.canvasReCache / count);
			Stat.treeNodeCollision=Math.round(Stat.treeNodeCollision / count);
			Stat.treeSpriteCollision=Math.round(Stat.treeSpriteCollision / count);
			var delay=Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString():" ";
			Stat._fpsStr=Stat.FPS+(Stat.renderSlow ? " slow" :"")+" "+delay;
			Stat._spriteStr=Stat.spriteCount+(Stat.spriteRenderUseCacheCount ? ("/"+Stat.spriteRenderUseCacheCount):'');
			Stat._canvasStr=Stat.canvasReCache+"/"+Stat.canvasNormal+"/"+Stat.canvasBitmap;
			Stat.currentMemorySize=ResourceManager.systemResourceManager.memorySize;
			if (Stat._useCanvas){
				Stat.renderInfoPre();
			}else
			Stat.renderInfo();
			Stat.clear();
		}
		Stat._count=0;
		Stat._timer=timer;
	}

	Stat.renderInfoPre=function(){
		if (Stat._canvas){
			var ctx=Stat._ctx;
			ctx.clearRect(Stat._first ? 0 :Stat._vx,0,Stat._width,Stat._height);
			for (var i=0;i < Stat._view.length;i++){
				var one=Stat._view[i];
				if (Stat._first){
					ctx.fillStyle="white";
					ctx.fillText(one.title,one.x,one.y,null,null,null);
				}
				ctx.fillStyle=one.color;
				var value=Stat[one.value];
				(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
				ctx.fillText(value+"",one.x+Stat._vx,one.y,null,null,null);
			}
		}
	}

	Stat.renderInfo=function(){
		var text="";
		for (var i=0;i < Stat._view.length;i++){
			var one=Stat._view[i];
			var value=Stat[one.value];
			(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
			(one.units=="K")&& (value=Math.floor(value / (1024)*100)/ 100+" K");
			text+=value+"\n";
		}
		Stat._txt.text=text;
	}

	Stat.FPS=0;
	Stat.loopCount=0;
	Stat.shaderCall=0;
	Stat.drawCall=0;
	Stat.trianglesFaces=0;
	Stat.spriteCount=0;
	Stat.spriteRenderUseCacheCount=0;
	Stat.treeNodeCollision=0;
	Stat.treeSpriteCollision=0;
	Stat.canvasNormal=0;
	Stat.canvasBitmap=0;
	Stat.canvasReCache=0;
	Stat.renderSlow=false;
	Stat.currentMemorySize=0;
	Stat._fpsStr=null;
	Stat._canvasStr=null;
	Stat._spriteStr=null;
	Stat._fpsData=[];
	Stat._timer=0;
	Stat._count=0;
	Stat._view=[];
	Stat._fontSize=12;
	Stat._txt=null;
	Stat._leftText=null;
	Stat._sp=null;
	Stat._show=false;
	Stat._useCanvas=false;
	Stat._canvas=null;
	Stat._ctx=null;
	Stat._first=false;
	Stat._vx=NaN;
	Stat._width=0;
	Stat._height=100;
	return Stat;
})()


/**
*@private
*<code>StringKey</code> 类用于存取字符串对应的数字。
*/
//class laya.utils.StringKey
var StringKey=(function(){
	function StringKey(){
		this._strsToID={};
		this._idToStrs=[];
		this._length=0;
	}

	__class(StringKey,'laya.utils.StringKey');
	var __proto=StringKey.prototype;
	/**
	*添加一个字符。
	*@param str 字符，将作为key 存储相应生成的数字。
	*@return 此字符对应的数字。
	*/
	__proto.add=function(str){
		var index=this._strsToID[str];
		if (index !=null)return index;
		this._idToStrs[this._length]=str;
		return this._strsToID[str]=this._length++;
	}

	/**
	*获取指定字符对应的ID。
	*@param str 字符。
	*@return 此字符对应的ID。
	*/
	__proto.getID=function(str){
		var index=this._strsToID[str];
		return index==null ?-1 :index;
	}

	/**
	*根据指定ID获取对应字符。
	*@param id ID。
	*@return 此id对应的字符。
	*/
	__proto.getName=function(id){
		var str=this._idToStrs[id];
		return str==null ? undefined :str;
	}

	return StringKey;
})()


/**
*<code>Timer</code> 是时钟管理类。它是一个单例，不要手动实例化此类，应该通过 Laya.timer 访问。
*/
//class laya.utils.Timer
var Timer=(function(){
	var TimerHandler;
	function Timer(){
		/**两帧之间的时间间隔,单位毫秒。*/
		this._delta=0;
		/**时针缩放。*/
		this.scale=1;
		/**当前的帧数。*/
		this.currFrame=0;
		/**@private */
		this._mid=1;
		/**@private */
		this._map=[];
		/**@private */
		this._laters=[];
		/**@private */
		this._handlers=[];
		/**@private */
		this._temp=[];
		/**@private */
		this._count=0;
		this.currTimer=this._now();
		this._lastTimer=this._now();
		this._init();
	}

	__class(Timer,'laya.utils.Timer');
	var __proto=Timer.prototype;
	/**@private */
	__proto._init=function(){
		Laya.timer && Laya.timer.frameLoop(1,this,this._update);
	}

	/**@private */
	__proto._now=function(){
		return /*__JS__ */Date.now();
	}

	/**
	*@private
	*帧循环处理函数。
	*/
	__proto._update=function(){
		if (this.scale <=0){
			this._lastTimer=this._now();
			return;
		};
		var frame=this.currFrame=this.currFrame+this.scale;
		var now=this._now();
		this._delta=(now-this._lastTimer)*this.scale;
		var timer=this.currTimer=this.currTimer+this._delta;
		this._lastTimer=now;
		var handlers=this._handlers;
		this._count=0;
		for (i=0,n=handlers.length;i < n;i++){
			handler=handlers[i];
			if (handler.method!==null){
				var t=handler.userFrame ? frame :timer;
				if (t >=handler.exeTime){
					if (handler.repeat){
						if (!handler.jumpFrame){
							handler.exeTime+=handler.delay;
							handler.run(false);
							if (t > handler.exeTime){
								handler.exeTime+=Math.ceil((t-handler.exeTime)/ handler.delay)*handler.delay;
							}
							}else {
							while (t >=handler.exeTime){
								handler.exeTime+=handler.delay;
								handler.run(false);
							}
						}
						}else {
						handler.run(true);
					}
				}
				}else {
				this._count++;
			}
		}
		if (this._count > 30 || frame % 200===0)this._clearHandlers();
		var laters=this._laters;
		for (var i=0,n=laters.length-1;i <=n;i++){
			var handler=laters[i];
			if (handler.method!==null){
				this._map[handler.key]=null;
				handler.run(false);
			}
			this._recoverHandler(handler);
			i===n && (n=laters.length-1);
		}
		laters.length=0;
	}

	/**@private */
	__proto._clearHandlers=function(){
		var handlers=this._handlers;
		for (var i=0,n=handlers.length;i < n;i++){
			var handler=handlers[i];
			if (handler.method!==null)this._temp.push(handler);
			else this._recoverHandler(handler);
		}
		this._handlers=this._temp;
		this._temp=handlers;
		this._temp.length=0;
	}

	/**@private */
	__proto._recoverHandler=function(handler){
		if(this._map[handler.key]==handler)this._map[handler.key]=null;
		handler.clear();
		Timer._pool.push(handler);
	}

	/**@private */
	__proto._create=function(useFrame,repeat,delay,caller,method,args,coverBefore){
		if (!delay){
			method.apply(caller,args);
			return null;
		}
		if (coverBefore){
			var handler=this._getHandler(caller,method);
			if (handler){
				handler.repeat=repeat;
				handler.userFrame=useFrame;
				handler.delay=delay;
				handler.caller=caller;
				handler.method=method;
				handler.args=args;
				handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+this._now()-this._lastTimer);
				return handler;
			}
		}
		handler=Timer._pool.length > 0 ? Timer._pool.pop():new TimerHandler();
		handler.repeat=repeat;
		handler.userFrame=useFrame;
		handler.delay=delay;
		handler.caller=caller;
		handler.method=method;
		handler.args=args;
		handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+this._now()-this._lastTimer)+1;
		this._indexHandler(handler);
		this._handlers.push(handler);
		return handler;
	}

	/**@private */
	__proto._indexHandler=function(handler){
		var caller=handler.caller;
		var method=handler.method;
		var cid=caller ? caller.$_GID || (caller.$_GID=Utils.getGID()):0;
		var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
		handler.key=cid+mid;
		this._map[handler.key]=handler;
	}

	/**
	*定时执行一次。
	*@param delay 延迟时间(单位为毫秒)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.once=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(false,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行。
	*@param delay 间隔时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
	*/
	__proto.loop=function(delay,caller,method,args,coverBefore,jumpFrame){
		(coverBefore===void 0)&& (coverBefore=true);
		(jumpFrame===void 0)&& (jumpFrame=false);
		var handler=this._create(false,true,delay,caller,method,args,coverBefore);
		if (handler)handler.jumpFrame=jumpFrame;
	}

	/**
	*定时执行一次(基于帧率)。
	*@param delay 延迟几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.frameOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(true,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行(基于帧率)。
	*@param delay 间隔几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.frameLoop=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(true,true,delay,caller,method,args,coverBefore);
	}

	/**返回统计信息。*/
	__proto.toString=function(){
		return "callLater:"+this._laters.length+" handlers:"+this._handlers.length+" pool:"+Timer._pool.length;
	}

	/**
	*清理定时器。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.clear=function(caller,method){
		var handler=this._getHandler(caller,method);
		if (handler){
			this._map[handler.key]=null;handler.key=0;
			handler.clear();
		}
	}

	/**
	*清理对象身上的所有定时器。
	*@param caller 执行域(this)。
	*/
	__proto.clearAll=function(caller){
		if (!caller)return;
		for (var i=0,n=this._handlers.length;i < n;i++){
			var handler=this._handlers[i];
			if (handler.caller===caller){
				this._map[handler.key]=null;handler.key=0;
				handler.clear();
			}
		}
	}

	/**@private */
	__proto._getHandler=function(caller,method){
		var cid=caller ? caller.$_GID || (caller.$_GID=Utils.getGID()):0;
		var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
		return this._map[cid+mid];
	}

	/**
	*延迟执行。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*/
	__proto.callLater=function(caller,method,args){
		if (this._getHandler(caller,method)==null){
			if (Timer._pool.length)
				var handler=Timer._pool.pop();
			else handler=new TimerHandler();
			handler.caller=caller;
			handler.method=method;
			handler.args=args;
			this._indexHandler(handler);
			this._laters.push(handler);
		}
	}

	/**
	*立即执行 callLater 。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.runCallLater=function(caller,method){
		var handler=this._getHandler(caller,method);
		if (handler && handler.method !=null){
			this._map[handler.key]=null;
			handler.run(true);
		}
	}

	/**
	*立即提前执行定时器，执行之后从队列中删除
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.runTimer=function(caller,method){
		this.runCallLater(caller,method);
	}

	/**
	*两帧之间的时间间隔,单位毫秒。
	*/
	__getset(0,__proto,'delta',function(){
		return this._delta;
	});

	Timer._pool=[];
	Timer.__init$=function(){
		/**@private */
		//class TimerHandler
		TimerHandler=(function(){
			function TimerHandler(){
				this.key=0;
				this.repeat=false;
				this.delay=0;
				this.userFrame=false;
				this.exeTime=0;
				this.caller=null;
				this.method=null;
				this.args=null;
				this.jumpFrame=false;
			}
			__class(TimerHandler,'');
			var __proto=TimerHandler.prototype;
			__proto.clear=function(){
				this.caller=null;
				this.method=null;
				this.args=null;
			}
			__proto.run=function(withClear){
				var caller=this.caller;
				if (caller && caller.destroyed)return this.clear();
				var method=this.method;
				var args=this.args;
				withClear && this.clear();
				if (method==null)return;
				args ? method.apply(caller,args):method.call(caller);
			}
			return TimerHandler;
		})()
	}

	return Timer;
})()


/**
*<code>Tween</code> 是一个缓动类。使用此类能够实现对目标对象属性的渐变。
*/
//class laya.utils.Tween
var Tween=(function(){
	function Tween(){
		/**@private */
		//this._complete=null;
		/**@private */
		//this._target=null;
		/**@private */
		//this._ease=null;
		/**@private */
		//this._props=null;
		/**@private */
		//this._duration=0;
		/**@private */
		//this._delay=0;
		/**@private */
		//this._startTimer=0;
		/**@private */
		//this._usedTimer=0;
		/**@private */
		//this._usedPool=false;
		/**@private 唯一标识，TimeLintLite用到*/
		this.gid=0;
		/**更新回调，缓动数值发生变化时，回调变化的值*/
		//this.update=null;
	}

	__class(Tween,'laya.utils.Tween');
	var __proto=Tween.prototype;
	/**
	*缓动对象的props属性到目标值。
	*@param target 目标对象(即将更改属性值的对象)。
	*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
	*@param duration 花费的时间，单位毫秒。
	*@param ease 缓动类型，默认为匀速运动。
	*@param complete 结束回调函数。
	*@param delay 延迟执行时间。
	*@param coverBefore 是否覆盖之前的缓动。
	*@return 返回Tween对象。
	*/
	__proto.to=function(target,props,duration,ease,complete,delay,coverBefore){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		return this._create(target,props,duration,ease,complete,delay,coverBefore,true,false,true);
	}

	/**
	*从props属性，缓动到当前状态。
	*@param target 目标对象(即将更改属性值的对象)。
	*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
	*@param duration 花费的时间，单位毫秒。
	*@param ease 缓动类型，默认为匀速运动。
	*@param complete 结束回调函数。
	*@param delay 延迟执行时间。
	*@param coverBefore 是否覆盖之前的缓动。
	*@return 返回Tween对象。
	*/
	__proto.from=function(target,props,duration,ease,complete,delay,coverBefore){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		return this._create(target,props,duration,ease,complete,delay,coverBefore,false,false,true);
	}

	/**@private */
	__proto._create=function(target,props,duration,ease,complete,delay,coverBefore,isTo,usePool,runNow){
		if (!target)throw new Error("Tween:target is null");
		this._target=target;
		this._duration=duration;
		this._ease=ease || props.ease || Tween.easeNone;
		this._complete=complete || props.complete;
		this._delay=delay;
		this._props=[];
		this._usedTimer=0;
		this._startTimer=Browser.now();
		this._usedPool=usePool;
		this.update=props.update;
		var gid=(target.$_GID || (target.$_GID=Utils.getGID()));
		if (!Tween.tweenMap[gid]){
			Tween.tweenMap[gid]=[this];
			}else {
			if (coverBefore)Tween.clearTween(target);
			Tween.tweenMap[gid].push(this);
		}
		if (runNow){
			if (delay <=0)this.firstStart(target,props,isTo);
			else Laya.scaleTimer.once(delay,this,this.firstStart,[target,props,isTo]);
			}else {
			this._initProps(target,props,isTo);
		}
		return this;
	}

	__proto.firstStart=function(target,props,isTo){
		if (target.destroyed){
			this.clear();
			return;
		}
		this._initProps(target,props,isTo);
		this._beginLoop();
	}

	__proto._initProps=function(target,props,isTo){
		for (var p in props){
			if ((typeof (target[p])=='number')){
				var start=isTo ? target[p] :props[p];
				var end=isTo ? props[p] :target[p];
				this._props.push([p,start,end-start]);
				if (!isTo)target[p]=start;
			}
		}
	}

	__proto._beginLoop=function(){
		Laya.scaleTimer.frameLoop(1,this,this._doEase);
	}

	/**执行缓动**/
	__proto._doEase=function(){
		this._updateEase(Browser.now());
	}

	/**@private */
	__proto._updateEase=function(time){
		var target=this._target;
		if (!target)return;
		if (target.destroyed)return Tween.clearTween(target);
		var usedTimer=this._usedTimer=time-this._startTimer-this._delay;
		if (usedTimer < 0)return;
		if (usedTimer >=this._duration)return this.complete();
		var ratio=usedTimer > 0 ? this._ease(usedTimer,0,1,this._duration):0;
		var props=this._props;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			target[prop[0]]=prop[1]+(ratio *prop[2]);
		}
		if (this.update)this.update.run();
	}

	/**
	*立即结束缓动并到终点。
	*/
	__proto.complete=function(){
		if (!this._target)return;
		Laya.scaleTimer.runTimer(this,this.firstStart);
		var target=this._target;
		var props=this._props;
		var handler=this._complete;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			target[prop[0]]=prop[1]+prop[2];
		}
		if (this.update)this.update.run();
		this.clear();
		handler && handler.run();
	}

	/**
	*暂停缓动，可以通过resume或restart重新开始。
	*/
	__proto.pause=function(){
		Laya.scaleTimer.clear(this,this._beginLoop);
		Laya.scaleTimer.clear(this,this._doEase);
	}

	/**
	*设置开始时间。
	*@param startTime 开始时间。
	*/
	__proto.setStartTime=function(startTime){
		this._startTimer=startTime;
	}

	/**
	*停止并清理当前缓动。
	*/
	__proto.clear=function(){
		if (this._target){
			this._remove();
			this._clear();
		}
	}

	/**
	*@private
	*/
	__proto._clear=function(){
		this.pause();
		Laya.scaleTimer.clear(this,this.firstStart);
		this._complete=null;
		this._target=null;
		this._ease=null;
		this._props=null;
		if (this._usedPool){
			this.update=null;
			Pool.recover("tween",this);
		}
	}

	/**回收到对象池。*/
	__proto.recover=function(){
		this._usedPool=true;
		this._clear();
	}

	__proto._remove=function(){
		var tweens=Tween.tweenMap[this._target.$_GID];
		if (tweens){
			for (var i=0,n=tweens.length;i < n;i++){
				if (tweens[i]===this){
					tweens.splice(i,1);
					break ;
				}
			}
		}
	}

	/**
	*重新开始暂停的缓动。
	*/
	__proto.restart=function(){
		this.pause();
		this._usedTimer=0;
		this._startTimer=Browser.now();
		var props=this._props;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			this._target[prop[0]]=prop[1];
		}
		Laya.scaleTimer.once(this._delay,this,this._beginLoop);
	}

	/**
	*恢复暂停的缓动。
	*/
	__proto.resume=function(){
		if (this._usedTimer >=this._duration)return;
		this._startTimer=Browser.now()-this._usedTimer-this._delay;
		this._beginLoop();
	}

	/**设置当前执行比例**/
	__getset(0,__proto,'progress',null,function(v){
		var uTime=v *this._duration;
		this._startTimer=Browser.now()-this._delay-uTime;
	});

	Tween.to=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		(autoRecover===void 0)&& (autoRecover=true);
		return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,true,autoRecover,true);
	}

	Tween.from=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		(autoRecover===void 0)&& (autoRecover=true);
		return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,false,autoRecover,true);
	}

	Tween.clearAll=function(target){
		if (!target || !target.$_GID)return;
		var tweens=Tween.tweenMap[target.$_GID];
		if (tweens){
			for (var i=0,n=tweens.length;i < n;i++){
				tweens[i]._clear();
			}
			tweens.length=0;
		}
	}

	Tween.clear=function(tween){
		tween.clear();
	}

	Tween.clearTween=function(target){
		Tween.clearAll(target);
	}

	Tween.easeNone=function(t,b,c,d){
		return c *t / d+b;
	}

	Tween.tweenMap={};
	return Tween;
})()


/**
*<code>Utils</code> 是工具类。
*/
//class laya.utils.Utils
var Utils=(function(){
	function Utils(){}
	__class(Utils,'laya.utils.Utils');
	Utils.toRadian=function(angle){
		return angle *Utils._pi2;
	}

	Utils.toAngle=function(radian){
		return radian *Utils._pi;
	}

	Utils.toHexColor=function(color){
		if (color < 0 || isNaN(color))return null;
		var str=color.toString(16);
		while (str.length < 6)str="0"+str;
		return "#"+str;
	}

	Utils.getGID=function(){
		return Utils._gid++;
	}

	Utils.concatArray=function(source,array){
		if (!array)return source;
		if (!source)return array;
		var i=0,len=array.length;
		for (i=0;i < len;i++){
			source.push(array[i]);
		}
		return source;
	}

	Utils.clearArray=function(array){
		if (!array)return array;
		array.length=0;
		return array;
	}

	Utils.copyArray=function(source,array){
		source || (source=[]);
		if (!array)return source;
		source.length=array.length;
		var i=0,len=array.length;
		for (i=0;i < len;i++){
			source[i]=array[i];
		}
		return source;
	}

	Utils.getGlobalRecByPoints=function(sprite,x0,y0,x1,y1){
		var newLTPoint;
		newLTPoint=new Point(x0,y0);
		newLTPoint=sprite.localToGlobal(newLTPoint);
		var newRBPoint;
		newRBPoint=new Point(x1,y1);
		newRBPoint=sprite.localToGlobal(newRBPoint);
		return Rectangle._getWrapRec([newLTPoint.x,newLTPoint.y,newRBPoint.x,newRBPoint.y]);
	}

	Utils.getGlobalPosAndScale=function(sprite){
		return Utils.getGlobalRecByPoints(sprite,0,0,1,1);
	}

	Utils.bind=function(fun,scope){
		var rst=fun;
		/*__JS__ */rst=fun.bind(scope);;
		return rst;
	}

	Utils.measureText=function(txt,font){
		return RunDriver.measureText(txt,font);
	}

	Utils.updateOrder=function(array){
		if (!array || array.length < 2)return false;
		var i=1,j=0,len=array.length,key=NaN,c;
		while (i < len){
			j=i;
			c=array[j];
			key=array[j]._zOrder;
			while (--j >-1){
				if (array[j]._zOrder > key)array[j+1]=array[j];
				else break ;
			}
			array[j+1]=c;
			i++;
		};
		var model=c.parent.conchModel;
		if (model){
			if (model.updateZOrder !=null){
				model.updateZOrder();
				}else {
				for (i=0;i < len;i++){
					model.removeChild(array[i].conchModel);
				}
				for (i=0;i < len;i++){
					model.addChildAt(array[i].conchModel,i);
				}
			}
		}
		return true;
	}

	Utils.transPointList=function(points,x,y){
		var i=0,len=points.length;
		for (i=0;i < len;i+=2){
			points[i]+=x;
			points[i+1]+=y;
		}
	}

	Utils.parseInt=function(str,radix){
		(radix===void 0)&& (radix=0);
		var result=Browser.window.parseInt(str,radix);
		if (isNaN(result))return 0;
		return result;
	}

	Utils.getFileExtension=function(path){
		Utils._extReg.lastIndex=path.lastIndexOf(".");
		var result=Utils._extReg.exec(path);
		if (result && result.length > 1){
			return result[1].toLowerCase();
		}
		return null;
	}

	Utils.getTransformRelativeToWindow=function(coordinateSpace,x,y){
		var stage=Laya.stage;
		var globalTransform=laya.utils.Utils.getGlobalPosAndScale(coordinateSpace);
		var canvasMatrix=stage._canvasTransform.clone();
		var canvasLeft=canvasMatrix.tx;
		var canvasTop=canvasMatrix.ty;
		canvasMatrix.rotate(-Math.PI / 180 *Laya.stage.canvasDegree);
		canvasMatrix.scale(Laya.stage.clientScaleX,Laya.stage.clientScaleY);
		var perpendicular=(Laya.stage.canvasDegree % 180 !=0);
		var tx=NaN,ty=NaN;
		if (perpendicular){
			tx=y+globalTransform.y;
			ty=x+globalTransform.x;
			tx *=canvasMatrix.d;
			ty *=canvasMatrix.a;
			if (Laya.stage.canvasDegree==90){
				tx=canvasLeft-tx;
				ty+=canvasTop;
			}
			else {
				tx+=canvasLeft;
				ty=canvasTop-ty;
			}
		}
		else {
			tx=x+globalTransform.x;
			ty=y+globalTransform.y;
			tx *=canvasMatrix.a;
			ty *=canvasMatrix.d;
			tx+=canvasLeft;
			ty+=canvasTop;
		};
		var domScaleX=NaN,domScaleY=NaN;
		if (perpendicular){
			domScaleX=canvasMatrix.d *globalTransform.height;
			domScaleY=canvasMatrix.a *globalTransform.width;
			}else {
			domScaleX=canvasMatrix.a *globalTransform.width;
			domScaleY=canvasMatrix.d *globalTransform.height;
		}
		return {x:tx,y:ty,scaleX:domScaleX,scaleY:domScaleY};
	}

	Utils.fitDOMElementInArea=function(dom,coordinateSpace,x,y,width,height){
		if (!dom._fitLayaAirInitialized){
			dom._fitLayaAirInitialized=true;
			dom.style.transformOrigin=dom.style.webKittransformOrigin="left top";
			dom.style.position="absolute"
		};
		var transform=Utils.getTransformRelativeToWindow(coordinateSpace,x,y);
		dom.style.transform=dom.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
		dom.style.width=width+'px';
		dom.style.height=height+'px';
		dom.style.left=transform.x+'px';
		dom.style.top=transform.y+'px';
	}

	Utils.isOkTextureList=function(textureList){
		if (!textureList)return false;
		var i=0,len=textureList.length;
		var tTexture;
		for (i=0;i < len;i++){
			tTexture=textureList[i];
			if (!tTexture.source)return false;
		}
		return true;
	}

	Utils.isOKCmdList=function(cmds){
		if (!cmds)return false;
		var i=0,len=cmds.length;
		var context=Render._context;
		var cmd;
		var tex;
		for (i=0;i < len;i++){
			cmd=cmds[i];
			switch(cmd.callee){
				case context._drawTexture:
				case context._fillTexture:
				case context._drawTextureWithTransform:
					tex=cmd[0];
					if (!tex || !tex.source)return false;
				}
		}
		return true;
	}

	Utils._gid=1;
	Utils.parseXMLFromString=function(value){
		var rst;
		value=value.replace(/>\s+</g,'><');
		/*__JS__ */rst=(new DOMParser()).parseFromString(value,'text/xml');
		if (rst.firstChild.textContent.indexOf("This page contains the following errors")>-1){
			throw new Error(rst.firstChild.firstChild.textContent);
		}
		return rst;
	}

	__static(Utils,
	['_pi',function(){return this._pi=180 / Math.PI;},'_pi2',function(){return this._pi2=Math.PI / 180;},'_extReg',function(){return this._extReg=/\.(\w+)\??/g;}
	]);
	return Utils;
})()


/**
*@private
*/
//class laya.utils.VectorGraphManager
var VectorGraphManager=(function(){
	function VectorGraphManager(){
		this.useDic={};
		this.shapeDic={};
		this.shapeLineDic={};
		this._id=0;
		this._checkKey=false;
		this._freeIdArray=[];
		if (Render.isWebGL){
			CacheManager.regCacheByFunction(Utils.bind(this.startDispose,this),Utils.bind(this.getCacheList,this));
		}
	}

	__class(VectorGraphManager,'laya.utils.VectorGraphManager');
	var __proto=VectorGraphManager.prototype;
	/**
	*得到个空闲的ID
	*@return
	*/
	__proto.getId=function(){
		return this._id++;
	}

	/**
	*添加一个图形到列表中
	*@param id
	*@param shape
	*/
	__proto.addShape=function(id,shape){
		this.shapeDic[id]=shape;
		if (!this.useDic[id]){
			this.useDic[id]=true;
		}
	}

	/**
	*添加一个线图形到列表中
	*@param id
	*@param Line
	*/
	__proto.addLine=function(id,Line){
		this.shapeLineDic[id]=Line;
		if (!this.shapeLineDic[id]){
			this.shapeLineDic[id]=true;
		}
	}

	/**
	*检测一个对象是否在使用中
	*@param id
	*/
	__proto.getShape=function(id){
		if (this._checkKey){
			if (this.useDic[id] !=null){
				this.useDic[id]=true;
			}
		}
	}

	/**
	*删除一个图形对象
	*@param id
	*/
	__proto.deleteShape=function(id){
		if (this.shapeDic[id]){
			this.shapeDic[id]=null;
			delete this.shapeDic[id];
		}
		if (this.shapeLineDic[id]){
			this.shapeLineDic[id]=null;
			delete this.shapeLineDic[id];
		}
		if (this.useDic[id] !=null){
			delete this.useDic[id];
		}
	}

	/**
	*得到缓存列表
	*@return
	*/
	__proto.getCacheList=function(){
		var str;
		var list=[];
		for (str in this.shapeDic){
			list.push(this.shapeDic[str]);
		}
		for (str in this.shapeLineDic){
			list.push(this.shapeLineDic[str]);
		}
		return list;
	}

	/**
	*开始清理状态，准备销毁
	*/
	__proto.startDispose=function(key){
		var str;
		for (str in this.useDic){
			this.useDic[str]=false;
		}
		this._checkKey=true;
	}

	/**
	*确认销毁
	*/
	__proto.endDispose=function(){
		if (this._checkKey){
			var str;
			for (str in this.useDic){
				if (!this.useDic[str]){
					this.deleteShape(str);
				}
			}
			this._checkKey=false;
		}
	}

	VectorGraphManager.getInstance=function(){
		return VectorGraphManager.instance=VectorGraphManager.instance|| new VectorGraphManager();
	}

	VectorGraphManager.instance=null;
	return VectorGraphManager;
})()


/**
*封装弱引用WeakMap
*如果支持WeakMap，则使用WeakMap，如果不支持，则用Object代替
*注意：如果采用Object，为了防止内存泄漏，则采用定时清理缓存策略
*/
//class laya.utils.WeakObject
var WeakObject=(function(){
	function WeakObject(){
		/**@private */
		this._obj=null;
		this._obj=WeakObject.supportWeakMap ? new Browser.window.WeakMap():{};
		if (!WeakObject.supportWeakMap)WeakObject._maps.push(this);
	}

	__class(WeakObject,'laya.utils.WeakObject');
	var __proto=WeakObject.prototype;
	/**
	*设置缓存
	*@param key kye对象，可被回收
	*@param value object对象，可被回收
	*/
	__proto.set=function(key,value){
		if (key==null)return;
		if (WeakObject.supportWeakMap){
			var objKey=key;
			if ((typeof key=='string')|| (typeof key=='number')){
				objKey=WeakObject._keys[key];
				if (!objKey)objKey=WeakObject._keys[key]={k:key};
			}
			this._obj.set(objKey,value);
			}else {
			if ((typeof key=='string')|| (typeof key=='number')){
				this._obj[key]=value;
				}else {
				key.$_GID || (key.$_GID=Utils.getGID());
				this._obj[key.$_GID]=value;
			}
		}
	}

	/**
	*获取缓存
	*@param key kye对象，可被回收
	*/
	__proto.get=function(key){
		if (key==null)return null;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			if (!objKey)return null;
			return this._obj.get(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))return this._obj[key];
			return this._obj[key.$_GID];
		}
	}

	/**
	*删除缓存
	*/
	__proto.del=function(key){
		if (key==null)return;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			if (!objKey)return;
			/*__JS__ */this._obj.delete(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))delete this._obj[key];
			else delete this._obj[this._obj.$_GID];
		}
	}

	/**
	*是否有缓存
	*/
	__proto.has=function(key){
		if (key==null)return false;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			return this._obj.has(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))return this._obj[key] !=null;
			return this._obj[this._obj.$_GID] !=null;
		}
	}

	WeakObject.__init__=function(){
		WeakObject.supportWeakMap=Browser.window.WeakMap !=null;
		if (!WeakObject.supportWeakMap)Laya.timer.loop(WeakObject.delInterval,null,WeakObject.clearCache);
	}

	WeakObject.clearCache=function(){
		for (var i=0,n=WeakObject._maps.length;i < n;i++){
			var obj=WeakObject._maps[i];
			obj._obj={};
		}
	}

	WeakObject.supportWeakMap=false;
	WeakObject.delInterval=5 *60 *1000;
	WeakObject._keys={};
	WeakObject._maps=[];
	__static(WeakObject,
	['I',function(){return this.I=new WeakObject();}
	]);
	return WeakObject;
})()


/**
*@private
*/
//class laya.utils.WordText
var WordText=(function(){
	function WordText(){
		this.id=NaN;
		this.save=[];
		this.toUpperCase=null;
		this.changed=false;
		this._text=null;
	}

	__class(WordText,'laya.utils.WordText');
	var __proto=WordText.prototype;
	__proto.setText=function(txt){
		this.changed=true;
		this._text=txt;
	}

	__proto.toString=function(){
		return this._text;
	}

	__proto.charCodeAt=function(i){
		return this._text ? this._text.charCodeAt(i):NaN;
	}

	__proto.charAt=function(i){
		return this._text ? this._text.charAt(i):null;
	}

	__getset(0,__proto,'length',function(){
		return this._text ? this._text.length :0;
	});

	return WordText;
})()


/**
*<code>Node</code> 类是可放在显示列表中的所有对象的基类。该显示列表管理 Laya 运行时中显示的所有对象。使用 Node 类排列显示列表中的显示对象。Node 对象可以有子显示对象。
*/
//class laya.display.Node extends laya.events.EventDispatcher
var Node=(function(_super){
	function Node(){
		/**@private */
		this._bits=0;
		/**@private 是否在显示列表中显示*/
		this._displayedInStage=false;
		/**@private 父节点对象*/
		this._parent=null;
		/**@private */
		this.conchModel=null;
		/**节点名称。*/
		this.name="";
		/**[只读]是否已经销毁。对象销毁后不能再使用。*/
		this._destroyed=false;
		Node.__super.call(this);
		this._childs=Node.ARRAY_EMPTY;
		this._$P=Node.PROP_EMPTY;
		this.timer=Laya.scaleTimer;
		this.conchModel=Render.isConchNode ? this.createConchModel():null;
	}

	__class(Node,'laya.display.Node',_super);
	var __proto=Node.prototype;
	/**@private */
	__proto._setBit=function(type,value){
		if (type==0x1){
			var preValue=this._getBit(type);
			if (preValue !=value){
				this._updateDisplayedInstage();
			}
		}
		if (value){
			this._bits |=type;
			}else {
			this._bits &=~type;
		}
	}

	/**@private */
	__proto._getBit=function(type){
		return (this._bits & type)!=0;
	}

	/**@private */
	__proto._setUpNoticeChain=function(){
		if (this._getBit(0x1)){
			this._setUpNoticeType(0x1);
		}
	}

	/**@private */
	__proto._setUpNoticeType=function(type){
		var ele=this;
		ele._setBit(type,true);
		ele=ele.parent;
		while (ele){
			if (ele._getBit(type))return;
			ele._setBit(type,true);
			ele=ele.parent;
		}
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		if (type===/*laya.events.Event.DISPLAY*/"display" || type===/*laya.events.Event.UNDISPLAY*/"undisplay"){
			if (!this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}
		return this._createListener(type,caller,listener,args,false);
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		if (type===/*laya.events.Event.DISPLAY*/"display" || type===/*laya.events.Event.UNDISPLAY*/"undisplay"){
			if (!this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}
		return this._createListener(type,caller,listener,args,true);
	}

	/**@private */
	__proto.createConchModel=function(){
		return null;
	}

	/**
	*<p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
	*<p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
	*@param destroyChild （可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._destroyed=true;
		this._parent && this._parent.removeChild(this);
		if (this._childs){
			if (destroyChild)this.destroyChildren();
			else this.removeChildren();
		}
		this._childs=null;
		this._$P=null;
		this.offAll();
		this.timer.clearAll(this);
	}

	/**
	*销毁所有子对象，不销毁自己本身。
	*/
	__proto.destroyChildren=function(){
		if (this._childs){
			for (var i=this._childs.length-1;i >-1;i--){
				this._childs[i].destroy(true);
			}
		}
	}

	/**
	*添加子节点。
	*@param node 节点对象
	*@return 返回添加的节点
	*/
	__proto.addChild=function(node){
		if (!node || this.destroyed || node===this)return node;
		if ((node).zOrder)this._set$P("hasZorder",true);
		if (node._parent===this){
			var index=this.getChildIndex(node);
			if (index!==this._childs.length-1){
				this._childs.splice(index,1);
				this._childs.push(node);
				if (this.conchModel){
					this.conchModel.removeChild(node.conchModel);
					this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
				}
				this._childChanged();
			}
			}else {
			node.parent && node.parent.removeChild(node);
			this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
			this._childs.push(node);
			this.conchModel && this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
			node.parent=this;
			this._childChanged();
		}
		return node;
	}

	/**
	*批量增加子节点
	*@param ...args 无数子节点。
	*/
	__proto.addChildren=function(__args){
		var args=arguments;
		var i=0,n=args.length;
		while (i < n){
			this.addChild(args[i++]);
		}
	}

	/**
	*添加子节点到指定的索引位置。
	*@param node 节点对象。
	*@param index 索引位置。
	*@return 返回添加的节点。
	*/
	__proto.addChildAt=function(node,index){
		if (!node || this.destroyed || node===this)return node;
		if ((node).zOrder)this._set$P("hasZorder",true);
		if (index >=0 && index <=this._childs.length){
			if (node._parent===this){
				var oldIndex=this.getChildIndex(node);
				this._childs.splice(oldIndex,1);
				this._childs.splice(index,0,node);
				if (this.conchModel){
					this.conchModel.removeChild(node.conchModel);
					this.conchModel.addChildAt(node.conchModel,index);
				}
				this._childChanged();
				}else {
				node.parent && node.parent.removeChild(node);
				this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
				this._childs.splice(index,0,node);
				this.conchModel && this.conchModel.addChildAt(node.conchModel,index);
				node.parent=this;
			}
			return node;
			}else {
			throw new Error("appendChildAt:The index is out of bounds");
		}
	}

	/**
	*根据子节点对象，获取子节点的索引位置。
	*@param node 子节点。
	*@return 子节点所在的索引位置。
	*/
	__proto.getChildIndex=function(node){
		return this._childs.indexOf(node);
	}

	/**
	*根据子节点的名字，获取子节点对象。
	*@param name 子节点的名字。
	*@return 节点对象。
	*/
	__proto.getChildByName=function(name){
		var nodes=this._childs;
		if (nodes){
			for (var i=0,n=nodes.length;i < n;i++){
				var node=nodes[i];
				if (node.name===name)return node;
			}
		}
		return null;
	}

	/**@private */
	__proto._get$P=function(key){
		return this._$P[key];
	}

	/**@private */
	__proto._set$P=function(key,value){
		if (!this.destroyed){
			this._$P===Node.PROP_EMPTY && (this._$P={});
			this._$P[key]=value;
		}
		return value;
	}

	/**
	*根据子节点的索引位置，获取子节点对象。
	*@param index 索引位置
	*@return 子节点
	*/
	__proto.getChildAt=function(index){
		return this._childs[index];
	}

	/**
	*设置子节点的索引位置。
	*@param node 子节点。
	*@param index 新的索引。
	*@return 返回子节点本身。
	*/
	__proto.setChildIndex=function(node,index){
		var childs=this._childs;
		if (index < 0 || index >=childs.length){
			throw new Error("setChildIndex:The index is out of bounds.");
		};
		var oldIndex=this.getChildIndex(node);
		if (oldIndex < 0)throw new Error("setChildIndex:node is must child of this object.");
		childs.splice(oldIndex,1);
		childs.splice(index,0,node);
		if (this.conchModel){
			this.conchModel.removeChild(node.conchModel);
			this.conchModel.addChildAt(node.conchModel,index);
		}
		this._childChanged();
		return node;
	}

	/**
	*@private
	*子节点发生改变。
	*@param child 子节点。
	*/
	__proto._childChanged=function(child){}
	/**
	*删除子节点。
	*@param node 子节点
	*@return 被删除的节点
	*/
	__proto.removeChild=function(node){
		if (!this._childs)return node;
		var index=this._childs.indexOf(node);
		return this.removeChildAt(index);
	}

	/**
	*从父容器删除自己，如已经被删除不会抛出异常。
	*@return 当前节点（ Node ）对象。
	*/
	__proto.removeSelf=function(){
		this._parent && this._parent.removeChild(this);
		return this;
	}

	/**
	*根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。
	*@param name 对象名字。
	*@return 查找到的节点（ Node ）对象。
	*/
	__proto.removeChildByName=function(name){
		var node=this.getChildByName(name);
		node && this.removeChild(node);
		return node;
	}

	/**
	*根据子节点索引位置，删除对应的子节点对象。
	*@param index 节点索引位置。
	*@return 被删除的节点。
	*/
	__proto.removeChildAt=function(index){
		var node=this.getChildAt(index);
		if (node){
			this._childs.splice(index,1);
			this.conchModel && this.conchModel.removeChild(node.conchModel);
			node.parent=null;
		}
		return node;
	}

	/**
	*删除指定索引区间的所有子对象。
	*@param beginIndex 开始索引。
	*@param endIndex 结束索引。
	*@return 当前节点对象。
	*/
	__proto.removeChildren=function(beginIndex,endIndex){
		(beginIndex===void 0)&& (beginIndex=0);
		(endIndex===void 0)&& (endIndex=0x7fffffff);
		if (this._childs && this._childs.length > 0){
			var childs=this._childs;
			if (beginIndex===0 && endIndex >=n){
				var arr=childs;
				this._childs=Node.ARRAY_EMPTY;
				}else {
				arr=childs.splice(beginIndex,endIndex-beginIndex);
			}
			for (var i=0,n=arr.length;i < n;i++){
				arr[i].parent=null;
				this.conchModel && this.conchModel.removeChild(arr[i].conchModel);
			}
		}
		return this;
	}

	/**
	*替换子节点。
	*@internal 将传入的新节点对象替换到已有子节点索引位置处。
	*@param newNode 新节点。
	*@param oldNode 老节点。
	*@return 返回新节点。
	*/
	__proto.replaceChild=function(newNode,oldNode){
		var index=this._childs.indexOf(oldNode);
		if (index >-1){
			this._childs.splice(index,1,newNode);
			if (this.conchModel){
				this.conchModel.removeChild(oldNode.conchModel);
				this.conchModel.addChildAt(newNode.conchModel,index);
			}
			oldNode.parent=null;
			newNode.parent=this;
			return newNode;
		}
		return null;
	}

	/**@private */
	__proto._updateDisplayedInstage=function(){
		var ele;
		ele=this;
		var stage=Laya.stage;
		this._displayedInStage=false;
		while (ele){
			if (ele._getBit(0x1)){
				this._displayedInStage=ele._displayedInStage;
				break ;
			}
			if (ele==stage || ele._displayedInStage){
				this._displayedInStage=true;
				break ;
			}
			ele=ele.parent;
		}
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (this._displayedInStage!==value){
			this._displayedInStage=value;
			if (value)this.event(/*laya.events.Event.DISPLAY*/"display");
			else this.event(/*laya.events.Event.UNDISPLAY*/"undisplay");
		}
	}

	/**
	*@private
	*设置指定节点对象是否可见(是否在渲染列表中)。
	*@param node 节点。
	*@param display 是否可见。
	*/
	__proto._displayChild=function(node,display){
		var childs=node._childs;
		if (childs){
			for (var i=0,n=childs.length;i < n;i++){
				var child=childs[i];
				if (!child._getBit(0x1))continue ;
				if (child._childs.length > 0){
					this._displayChild(child,display);
					}else {
					child._setDisplay(display);
				}
			}
		}
		node._setDisplay(display);
	}

	/**
	*当前容器是否包含指定的 <code>Node</code> 节点对象 。
	*@param node 指定的 <code>Node</code> 节点对象 。
	*@return 一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。
	*/
	__proto.contains=function(node){
		if (node===this)return true;
		while (node){
			if (node.parent===this)return true;
			node=node.parent;
		}
		return false;
	}

	/**
	*定时重复执行某函数。功能同Laya.timer.timerLoop()。
	*@param delay 间隔时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
	*/
	__proto.timerLoop=function(delay,caller,method,args,coverBefore,jumpFrame){
		(coverBefore===void 0)&& (coverBefore=true);
		(jumpFrame===void 0)&& (jumpFrame=false);
		this.timer.loop(delay,caller,method,args,coverBefore,jumpFrame);
	}

	/**
	*定时执行某函数一次。功能同Laya.timer.timerOnce()。
	*@param delay 延迟时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*/
	__proto.timerOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(false,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。
	*@param delay 间隔几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*/
	__proto.frameLoop=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(true,true,delay,caller,method,args,coverBefore);
	}

	/**
	*定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。
	*@param delay 延迟几帧(单位为帧)。
	*@param caller 执行域(this)
	*@param method 结束时的回调方法
	*@param args （可选）回调参数
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true
	*/
	__proto.frameOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(true,false,delay,caller,method,args,coverBefore);
	}

	/**
	*清理定时器。功能同Laya.timer.clearTimer()。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*/
	__proto.clearTimer=function(caller,method){
		this.timer.clear(caller,method);
	}

	/**
	*子对象数量。
	*/
	__getset(0,__proto,'numChildren',function(){
		return this._childs.length;
	});

	/**
	*[只读]是否已经销毁。对象销毁后不能再使用。
	*@return
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	/**父节点。*/
	__getset(0,__proto,'parent',function(){
		return this._parent;
		},function(value){
		if (this._parent!==value){
			if (value){
				this._parent=value;
				this.event(/*laya.events.Event.ADDED*/"added");
				if (this._getBit(0x1)){
					this._setUpNoticeChain();
					value.displayedInStage && this._displayChild(this,true);
				}
				value._childChanged(this);
				}else {
				this.event(/*laya.events.Event.REMOVED*/"removed");
				this._parent._childChanged();
				if (this._getBit(0x1))this._displayChild(this,false);
				this._parent=value;
			}
		}
	});

	/**表示是否在显示列表中显示。*/
	__getset(0,__proto,'displayedInStage',function(){
		if (this._getBit(0x1))return this._displayedInStage;
		this._setUpNoticeType(0x1);
		return this._displayedInStage;
	});

	Node.ARRAY_EMPTY=[];
	Node.PROP_EMPTY={};
	Node.NOTICE_DISPLAY=0x1;
	Node.MOUSEENABLE=0x2;
	return Node;
})(EventDispatcher)


/**
*@private
*<code>CSSStyle</code> 类是元素CSS样式定义类。
*/
//class laya.display.css.CSSStyle extends laya.display.css.Style
var CSSStyle=(function(_super){
	function CSSStyle(ower){
		this._bgground=null;
		this._border=null;
		//this._ower=null;
		this._rect=null;
		/**@private */
		this.underLine=0;
		/**行高。 */
		this.lineHeight=0;
		CSSStyle.__super.call(this);
		this._padding=CSSStyle._PADDING;
		this._spacing=CSSStyle._SPACING;
		this._aligns=CSSStyle._ALIGNS;
		this._font=Font.EMPTY;
		this._ower=ower;
	}

	__class(CSSStyle,'laya.display.css.CSSStyle',_super);
	var __proto=CSSStyle.prototype;
	/**@inheritDoc */
	__proto.destroy=function(){
		this._ower=null;
		this._font=null;
		this._rect=null;
	}

	/**
	*复制传入的 CSSStyle 属性值。
	*@param src 待复制的 CSSStyle 对象。
	*/
	__proto.inherit=function(src){
		this._font=src._font;
		this._spacing=src._spacing===CSSStyle._SPACING ? CSSStyle._SPACING :src._spacing.slice();
		this.lineHeight=src.lineHeight;
	}

	/**@private */
	__proto._widthAuto=function(){
		return (this._type & 0x40000)!==0;
	}

	/**@inheritDoc */
	__proto.widthed=function(sprite){
		return (this._type & 0x8)!=0;
	}

	/**
	*@private
	*/
	__proto._calculation=function(type,value){
		if (value.indexOf('%')< 0)return false;
		var ower=this._ower;
		var parent=ower.parent;
		var rect=this._rect;
		function getValue (pw,w,nums){
			return (pw *nums[0]+w *nums[1]+nums[2]);
		}
		function onParentResize (type){
			var pw=parent.width,w=ower.width;
			rect.width && (ower.width=getValue(pw,w,rect.width));
			rect.height && (ower.height=getValue(pw,w,rect.height));
			rect.left && (ower.x=getValue(pw,w,rect.left));
			rect.top && (ower.y=getValue(pw,w,rect.top));
		}
		if (rect===null){
			parent._getCSSStyle()._type |=0x80000;
			parent.on(/*laya.events.Event.RESIZE*/"resize",this,onParentResize);
			this._rect=rect={input:{}};
		};
		var nums=value.split(' ');
		nums[0]=parseFloat(nums[0])/ 100;
		if (nums.length==1)
			nums[1]=nums[2]=0;
		else {
			nums[1]=parseFloat(nums[1])/ 100;
			nums[2]=parseFloat(nums[2]);
		}
		rect[type]=nums;
		rect.input[type]=value;
		onParentResize(type);
		return true;
	}

	/**
	*是否已设置高度。
	*@param sprite 显示对象 Sprite。
	*@return 一个Boolean 表示是否已设置高度。
	*/
	__proto.heighted=function(sprite){
		return (this._type & 0x2000)!=0;
	}

	/**
	*设置宽高。
	*@param w 宽度。
	*@param h 高度。
	*/
	__proto.size=function(w,h){
		var ower=this._ower;
		var resize=false;
		if (w!==-1 && w !=this._ower.width){
			this._type |=0x8;
			this._ower.width=w;
			resize=true;
		}
		if (h!==-1 && h !=this._ower.height){
			this._type |=0x2000;
			this._ower.height=h;
			resize=true;
		}
		if (resize){
			ower._layoutLater();
			(this._type & 0x80000)&& ower.event(/*laya.events.Event.RESIZE*/"resize",this);
		}
	}

	/**@private */
	__proto._getAlign=function(){
		return this._aligns[0];
	}

	/**@private */
	__proto._getValign=function(){
		return this._aligns[1];
	}

	/**@private */
	__proto._getCssFloat=function(){
		return (this._type & 0x8000)!=0 ? 0x8000 :0;
	}

	__proto._createFont=function(){
		return (this._type & 0x1000)? this._font :(this._type |=0x1000,this._font=new Font(this._font));
	}

	/**@inheritDoc */
	__proto.render=function(sprite,context,x,y){
		var w=sprite.width;
		var h=sprite.height;
		x-=sprite.pivotX;
		y-=sprite.pivotY;
		this._bgground && this._bgground.color !=null && context.ctx.fillRect(x,y,w,h,this._bgground.color);
		this._border && this._border.color && context.drawRect(x,y,w,h,this._border.color.strColor,this._border.size);
	}

	/**@inheritDoc */
	__proto.getCSSStyle=function(){
		return this;
	}

	/**
	*设置 CSS 样式字符串。
	*@param text CSS样式字符串。
	*/
	__proto.cssText=function(text){
		this.attrs(CSSStyle.parseOneCSS(text,';'));
	}

	/**
	*根据传入的属性名、属性值列表，设置此对象的属性值。
	*@param attrs 属性名与属性值列表。
	*/
	__proto.attrs=function(attrs){
		if (attrs){
			for (var i=0,n=attrs.length;i < n;i++){
				var attr=attrs[i];
				this[attr[0]]=attr[1];
			}
		}
	}

	/**@inheritDoc */
	__proto.setTransform=function(value){
		(value==='none')? (this._tf=Style._TF_EMPTY):this.attrs(CSSStyle.parseOneCSS(value,','));
	}

	/**
	*定义 X 轴、Y 轴移动转换。
	*@param x X 轴平移量。
	*@param y Y 轴平移量。
	*/
	__proto.translate=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateX=x;
		this._tf.translateY=y;
	}

	/**
	*定义 缩放转换。
	*@param x X 轴缩放值。
	*@param y Y 轴缩放值。
	*/
	__proto.scale=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=x;
		this._tf.scaleY=y;
	}

	/**@private */
	__proto._enableLayout=function(){
		return (this._type & 0x2)===0 && (this._type & 0x4)===0;
	}

	/**
	*是否显示为块级元素。
	*/
	__getset(0,__proto,'block',_super.prototype._$get_block,function(value){
		value ? (this._type |=0x1):(this._type &=(~0x1));
	});

	/**
	*垂直对齐方式。
	*/
	__getset(0,__proto,'valign',function(){
		return CSSStyle._valigndef[this._aligns[1]];
		},function(value){
		this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
		this._aligns[1]=CSSStyle._valigndef[value];
	});

	/**
	*高度。
	*/
	__getset(0,__proto,'height',null,function(h){
		this._type |=0x2000;
		if ((typeof h=='string')){
			if (this._calculation("height",h))return;
			h=parseInt(h);
		}
		this.size(-1,h);
	});

	/**
	*宽度。
	*/
	__getset(0,__proto,'width',null,function(w){
		this._type |=0x8;
		if ((typeof w=='string')){
			var offset=w.indexOf('auto');
			if (offset >=0){
				this._type |=0x40000;
				w=w.substr(0,offset);
			}
			if (this._calculation("width",w))return;
			w=parseInt(w);
		}
		this.size(w,-1);
	});

	/**
	*字体粗细。
	*/
	__getset(0,__proto,'fontWeight',function(){
		return this._font.weight;
		},function(value){
		this._createFont().weight=value;
	});

	/**
	*表示左边距。
	*/
	__getset(0,__proto,'left',null,function(value){
		var ower=this._ower;
		if (((typeof value=='string'))){
			if (value==="center")
				value="50% -50% 0";
			else if (value==="right")
			value="100% -100% 0";
			if (this._calculation("left",value))return;
			value=parseInt(value);
		}
		ower.x=value;
	});

	__getset(0,__proto,'_translate',null,function(value){
		this.translate(value[0],value[1]);
	});

	/**@inheritDoc */
	__getset(0,__proto,'absolute',function(){
		return (this._type & 0x4)!==0;
	});

	/**
	*表示上边距。
	*/
	__getset(0,__proto,'top',null,function(value){
		var ower=this._ower;
		if (((typeof value=='string'))){
			if (value==="middle")
				value="50% -50% 0";
			else if (value==="bottom")
			value="100% -100% 0";
			if (this._calculation("top",value))return;
			value=parseInt(value);
		}
		ower.y=value;
	});

	/**
	*水平对齐方式。
	*/
	__getset(0,__proto,'align',function(){
		return CSSStyle._aligndef[this._aligns[0]];
		},function(value){
		this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
		this._aligns[0]=CSSStyle._aligndef[value];
	});

	/**
	*表示是否加粗。
	*/
	__getset(0,__proto,'bold',function(){
		return this._font.bold;
		},function(value){
		this._createFont().bold=value;
	});

	/**
	*边距信息。
	*/
	__getset(0,__proto,'padding',function(){
		return this._padding;
		},function(value){
		this._padding=value;
	});

	/**
	*行间距。
	*/
	__getset(0,__proto,'leading',function(){
		return this._spacing[1];
		},function(d){
		((typeof d=='string'))&& (d=parseInt(d+""));
		this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
		this._spacing[1]=d;
	});

	/**
	*是否是行元素。
	*/
	__getset(0,__proto,'lineElement',function(){
		return (this._type & 0x10000)!=0;
		},function(value){
		value ? (this._type |=0x10000):(this._type &=(~0x10000));
	});

	/**
	*浮动方向。
	*/
	__getset(0,__proto,'cssFloat',function(){
		return (this._type & 0x8000)!=0 ? "right" :"left";
		},function(value){
		this.lineElement=false;
		value==="right" ? (this._type |=0x8000):(this._type &=(~0x8000));
	});

	/**
	*添加到文本的修饰。
	*/
	__getset(0,__proto,'textDecoration',function(){
		return this._font.decoration;
		},function(value){
		this._createFont().decoration=value;
	});

	/**
	*设置如何处理元素内的空白。
	*/
	__getset(0,__proto,'whiteSpace',function(){
		return (this._type & 0x20000)? "nowrap" :"";
		},function(type){
		type==="nowrap" && (this._type |=0x20000);
		type==="none" && (this._type &=~0x20000);
	});

	__getset(0,__proto,'background',null,function(value){
		if (!value){
			this._bgground=null;
			return;
		}
		this._bgground || (this._bgground={});
		this._bgground.color=value;
		this._ower.conchModel && this._ower.conchModel.bgColor(value);
		this._type |=0x4000;
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*表示是否换行。
	*/
	__getset(0,__proto,'wordWrap',function(){
		return (this._type & 0x20000)===0;
		},function(value){
		value ? (this._type &=~0x20000):(this._type |=0x20000);
	});

	/**
	*字体颜色。
	*/
	__getset(0,__proto,'color',function(){
		return this._font.color;
		},function(value){
		this._createFont().color=value;
	});

	/**
	*<p>指定文本字段是否是密码文本字段。</p>
	*如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。
	*/
	__getset(0,__proto,'password',function(){
		return this._font.password;
		},function(value){
		this._createFont().password=value;
	});

	/**
	*背景颜色。
	*/
	__getset(0,__proto,'backgroundColor',function(){
		return this._bgground ? this._bgground.color :null;
		},function(value){
		if (value==='none')this._bgground=null;
		else (this._bgground || (this._bgground={}),this._bgground.color=value);
		this._ower.conchModel && this._ower.conchModel.bgColor(value);
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*字体信息。
	*/
	__getset(0,__proto,'font',function(){
		return this._font.toString();
		},function(value){
		this._createFont().set(value);
	});

	/**
	*文本的粗细。
	*/
	__getset(0,__proto,'weight',null,function(value){
		this._createFont().weight=value;
	});

	/**
	*间距。
	*/
	__getset(0,__proto,'letterSpacing',function(){
		return this._spacing[0];
		},function(d){
		((typeof d=='string'))&& (d=parseInt(d+""));
		this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
		this._spacing[0]=d;
	});

	/**
	*字体大小。
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._font.size;
		},function(value){
		this._createFont().size=value;
	});

	/**
	*表示是否为斜体。
	*/
	__getset(0,__proto,'italic',function(){
		return this._font.italic;
		},function(value){
		this._createFont().italic=value;
	});

	/**
	*字体系列。
	*/
	__getset(0,__proto,'fontFamily',function(){
		return this._font.family;
		},function(value){
		this._createFont().family=value;
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@default 0
	*/
	__getset(0,__proto,'stroke',function(){
		return this._font.stroke[0];
		},function(value){
		if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
		this._font.stroke[0]=value;
	});

	/**
	*<p>描边颜色，以字符串表示。</p>
	*@default "#000000";
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._font.stroke[1];
		},function(value){
		if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
		this._font.stroke[1]=value;
	});

	/**
	*边框属性，比如border="5px solid red"
	*/
	__getset(0,__proto,'border',function(){
		return this._border ? this._border.value :"";
		},function(value){
		if (value=='none'){
			this._border=null;
			return;
		}
		this._border || (this._border={});
		this._border.value=value;
		var values=value.split(' ');
		this._border.color=Color.create(values[values.length-1]);
		if (values.length==1){
			this._border.size=1;
			this._border.type='solid';
			return;
		};
		var i=0;
		if (values[0].indexOf('px')> 0){
			this._border.size=parseInt(values[0]);
			i++;
		}else this._border.size=1;
		this._border.type=values[i];
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*边框的颜色。
	*/
	__getset(0,__proto,'borderColor',function(){
		return (this._border && this._border.color)? this._border.color.strColor :null;
		},function(value){
		if (!value){
			this._border=null;
			return;
		}
		this._border || (this._border={size:1,type:'solid'});
		this._border.color=(value==null)? null :Color.create(value);
		this._ower.conchModel && this._ower.conchModel.border(this._border.color.strColor);
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*元素的定位类型。
	*/
	__getset(0,__proto,'position',function(){
		return (this._type & 0x4)? "absolute" :"";
		},function(value){
		value=="absolute" ? (this._type |=0x4):(this._type &=~0x4);
	});

	/**
	*规定元素应该生成的框的类型。
	*/
	__getset(0,__proto,'display',null,function(value){
		switch (value){
			case '':
				this._type &=~0x2;
				this.visible=true;
				break ;
			case 'none':
				this._type |=0x2;
				this.visible=false;
				this._ower._layoutLater();
				break ;
			}
	});

	/**@inheritDoc */
	__getset(0,__proto,'paddingLeft',function(){
		return this.padding[3];
	});

	/**@inheritDoc */
	__getset(0,__proto,'paddingTop',function(){
		return this.padding[0];
	});

	__getset(0,__proto,'_scale',null,function(value){
		this._ower.scale(value[0],value[1]);
	});

	__getset(0,__proto,'_rotate',null,function(value){
		this._ower.rotation=value;
	});

	CSSStyle.parseOneCSS=function(text,clipWord){
		var out=[];
		var attrs=text.split(clipWord);
		var valueArray;
		for (var i=0,n=attrs.length;i < n;i++){
			var attr=attrs[i];
			var ofs=attr.indexOf(':');
			var name=attr.substr(0,ofs).replace(/^\s+|\s+$/g,'');
			if (name.length==0)
				continue ;
			var value=attr.substr(ofs+1).replace(/^\s+|\s+$/g,'');
			var one=[name,value];
			switch (name){
				case 'italic':
				case 'bold':
					one[1]=value=="true";
					break ;
				case 'line-height':
					one[0]='lineHeight';
					one[1]=parseInt(value);
					break ;
				case 'font-size':
					one[0]='fontSize';
					one[1]=parseInt(value);
					break ;
				case 'padding':
					valueArray=value.split(' ');
					valueArray.length > 1 || (valueArray[1]=valueArray[2]=valueArray[3]=valueArray[0]);
					one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1]),parseInt(valueArray[2]),parseInt(valueArray[3])];
					break ;
				case 'rotate':
					one[0]="_rotate";
					one[1]=parseFloat(value);
					break ;
				case 'scale':
					valueArray=value.split(' ');
					one[0]="_scale";
					one[1]=[parseFloat(valueArray[0]),parseFloat(valueArray[1])];
					break ;
				case 'translate':
					valueArray=value.split(' ');
					one[0]="_translate";
					one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1])];
					break ;
				default :
					(one[0]=CSSStyle._CSSTOVALUE[name])|| (one[0]=name);
				}
			out.push(one);
		}
		return out;
	}

	CSSStyle.parseCSS=function(text,uri){
		var one;
		while ((one=CSSStyle._parseCSSRegExp.exec(text))!=null){
			CSSStyle.styleSheets[one[1]]=CSSStyle.parseOneCSS(one[2],';');
		}
	}

	CSSStyle.styleSheets={};
	CSSStyle.ALIGN_CENTER=1;
	CSSStyle.ALIGN_RIGHT=2;
	CSSStyle.VALIGN_MIDDLE=1;
	CSSStyle.VALIGN_BOTTOM=2;
	CSSStyle._CSS_BLOCK=0x1;
	CSSStyle._DISPLAY_NONE=0x2;
	CSSStyle._ABSOLUTE=0x4;
	CSSStyle._WIDTH_SET=0x8;
	CSSStyle.ADDLAYOUTED=0x200;
	CSSStyle._NEWFONT=0x1000;
	CSSStyle._HEIGHT_SET=0x2000;
	CSSStyle._BACKGROUND_SET=0x4000;
	CSSStyle._FLOAT_RIGHT=0x8000;
	CSSStyle._LINE_ELEMENT=0x10000;
	CSSStyle._NOWARP=0x20000;
	CSSStyle._WIDTHAUTO=0x40000;
	CSSStyle._LISTERRESZIE=0x80000;
	__static(CSSStyle,
	['EMPTY',function(){return this.EMPTY=new CSSStyle(null);},'_CSSTOVALUE',function(){return this._CSSTOVALUE={'letter-spacing':'letterSpacing','line-spacing':'lineSpacing','white-space':'whiteSpace','line-height':'lineHeight','scale-x':'scaleX','scale-y':'scaleY','translate-x':'translateX','translate-y':'translateY','font-family':'fontFamily','font-weight':'fontWeight','vertical-align':'valign','text-decoration':'textDecoration','background-color':'backgroundColor','border-color':'borderColor','float':'cssFloat'};},'_parseCSSRegExp',function(){return this._parseCSSRegExp=new RegExp("([\.\#]\\w+)\\s*{([\\s\\S]*?)}","g");},'_aligndef',function(){return this._aligndef={'left':0,'center':1,'right':2,0:'left',1:'center',2:'right'};},'_valigndef',function(){return this._valigndef={'top':0,'middle':1,'bottom':2,0:'top',1:'middle',2:'bottom'};},'_PADDING',function(){return this._PADDING=[0,0,0,0];},'_RECT',function(){return this._RECT=[-1,-1,-1,-1];},'_SPACING',function(){return this._SPACING=[0,0];},'_ALIGNS',function(){return this._ALIGNS=[0,0,0];}
	]);
	return CSSStyle;
})(Style)


/**
*@private
*使用Audio标签播放声音
*/
//class laya.media.h5audio.AudioSound extends laya.events.EventDispatcher
var AudioSound=(function(_super){
	function AudioSound(){
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*播放用的audio标签
		*/
		this.audio=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		AudioSound.__super.call(this);
	}

	__class(AudioSound,'laya.media.h5audio.AudioSound',_super);
	var __proto=AudioSound.prototype;
	/**
	*释放声音
	*
	*/
	__proto.dispose=function(){
		var ad=AudioSound._audioCache[this.url];
		if (ad){
			ad.src="";
			delete AudioSound._audioCache[this.url];
		}
	}

	/**
	*加载声音
	*@param url
	*
	*/
	__proto.load=function(url){
		url=URL.formatURL(url);
		this.url=url;
		var ad;
		if (url==SoundManager._tMusic){
			AudioSound._initMusicAudio();
			ad=AudioSound._musicAudio;
			if (ad.src !=url){
				AudioSound._audioCache[ad.src]=null;
				ad=null;
			}
			}else{
			ad=AudioSound._audioCache[url];
		}
		if (ad && ad.readyState >=2){
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (!ad){
			if (url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				ad=AudioSound._musicAudio;
				}else{
				ad=Browser.createElement("audio");
			}
			AudioSound._audioCache[url]=ad;
			ad.src=url;
		}
		ad.addEventListener("canplaythrough",onLoaded);
		ad.addEventListener("error",onErr);
		var me=this;
		function onLoaded (){
			offs();
			me.loaded=true;
			me.event(/*laya.events.Event.COMPLETE*/"complete");
		}
		function onErr (){
			ad.load=null;
			offs();
			me.event(/*laya.events.Event.ERROR*/"error");
		}
		function offs (){
			ad.removeEventListener("canplaythrough",onLoaded);
			ad.removeEventListener("error",onErr);
		}
		this.audio=ad;
		if (ad.load){
			ad.load();
			}else {
			onErr();
		}
	}

	/**
	*播放声音
	*@param startTime 起始时间
	*@param loops 循环次数
	*@return
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		if (!this.url)return null;
		var ad;
		if (this.url==SoundManager._tMusic){
			ad=AudioSound._musicAudio;
			}else{
			ad=AudioSound._audioCache[this.url];
		}
		if (!ad)return null;
		var tAd;
		tAd=Pool.getItem("audio:"+this.url);
		if (Render.isConchApp){
			if (!tAd){
				tAd=Browser.createElement("audio");
				tAd.src=this.url;
			}
		}
		else {
			if (this.url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				tAd=AudioSound._musicAudio;
				tAd.src=this.url;
				}else{
				tAd=tAd ? tAd :ad.cloneNode(true);
			}
		};
		var channel=new AudioSoundChannel(tAd);
		channel.url=this.url;
		channel.loops=loops;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		var ad;
		ad=AudioSound._audioCache[this.url];
		if (!ad)
			return 0;
		return ad.duration;
	});

	AudioSound._initMusicAudio=function(){
		if (AudioSound._musicAudio)return;
		if (!AudioSound._musicAudio)AudioSound._musicAudio=Browser.createElement("audio");
		if (!Render.isConchApp){
			Browser.document.addEventListener("mousedown",AudioSound._makeMusicOK);
		}
	}

	AudioSound._makeMusicOK=function(){
		Browser.document.removeEventListener("mousedown",AudioSound._makeMusicOK);
		if (!AudioSound._musicAudio.src){
			AudioSound._musicAudio.src="";
			AudioSound._musicAudio.load();
			}else{
			AudioSound._musicAudio.play();
		}
	}

	AudioSound._audioCache={};
	AudioSound._musicAudio=null;
	return AudioSound;
})(EventDispatcher)


/**
*<p> <code>SoundChannel</code> 用来控制程序中的声音。每个声音均分配给一个声道，而且应用程序可以具有混合在一起的多个声道。</p>
*<p> <code>SoundChannel</code> 类包含控制声音的播放、暂停、停止、音量的方法，以及获取声音的播放状态、总时间、当前播放时间、总循环次数、播放地址等信息的方法。</p>
*/
//class laya.media.SoundChannel extends laya.events.EventDispatcher
var SoundChannel=(function(_super){
	function SoundChannel(){
		/**
		*声音地址。
		*/
		this.url=null;
		/**
		*循环次数。
		*/
		this.loops=0;
		/**
		*开始时间。
		*/
		this.startTime=NaN;
		/**
		*表示声音是否已暂停。
		*/
		this.isStopped=false;
		/**
		*播放完成处理器。
		*/
		this.completeHandler=null;
		SoundChannel.__super.call(this);
	}

	__class(SoundChannel,'laya.media.SoundChannel',_super);
	var __proto=SoundChannel.prototype;
	/**
	*播放。
	*/
	__proto.play=function(){}
	/**
	*停止。
	*/
	__proto.stop=function(){}
	/**
	*暂停。
	*/
	__proto.pause=function(){}
	/**
	*继续播放。
	*/
	__proto.resume=function(){}
	/**
	*private
	*/
	__proto.__runComplete=function(handler){
		if (handler){
			handler.run();
		}
	}

	/**
	*音量范围从 0（静音）至 1（最大音量）。
	*/
	__getset(0,__proto,'volume',function(){
		return 1;
		},function(v){
	});

	/**
	*获取当前播放时间。
	*/
	__getset(0,__proto,'position',function(){
		return 0;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return 0;
	});

	return SoundChannel;
})(EventDispatcher)


/**
*<code>Sound</code> 类是用来播放控制声音的类。
*/
//class laya.media.Sound extends laya.events.EventDispatcher
var Sound=(function(_super){
	function Sound(){
		Sound.__super.call(this);;
	}

	__class(Sound,'laya.media.Sound',_super);
	var __proto=Sound.prototype;
	/**
	*加载声音。
	*@param url 地址。
	*
	*/
	__proto.load=function(url){}
	/**
	*播放声音。
	*@param startTime 开始时间,单位秒
	*@param loops 循环次数,0表示一直循环
	*@return 声道 SoundChannel 对象。
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		return null;
	}

	/**
	*释放声音资源。
	*
	*/
	__proto.dispose=function(){}
	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return 0;
	});

	return Sound;
})(EventDispatcher)


/**
*@private
*web audio api方式播放声音
*/
//class laya.media.webaudio.WebAudioSound extends laya.events.EventDispatcher
var WebAudioSound=(function(_super){
	function WebAudioSound(){
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		/**
		*声音文件数据
		*/
		this.data=null;
		/**
		*声音原始文件数据
		*/
		this.audioBuffer=null;
		/**
		*待播放的声音列表
		*/
		this.__toPlays=null;
		WebAudioSound.__super.call(this);
	}

	__class(WebAudioSound,'laya.media.webaudio.WebAudioSound',_super);
	var __proto=WebAudioSound.prototype;
	/**
	*加载声音
	*@param url
	*
	*/
	__proto.load=function(url){
		var me=this;
		url=URL.formatURL(url);
		this.url=url;
		this.audioBuffer=WebAudioSound._dataCache[url];
		if (this.audioBuffer){
			this._loaded(this.audioBuffer);
			return;
		}
		WebAudioSound.e.on("loaded:"+url,this,this._loaded);
		WebAudioSound.e.on("err:"+url,this,this._err);
		if (WebAudioSound.__loadingSound[url]){
			return;
		}
		WebAudioSound.__loadingSound[url]=true;
		var request=new Browser.window.XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType="arraybuffer";
		request.onload=function (){
			me.data=request.response;
			WebAudioSound.buffs.push({"buffer":me.data,"url":me.url});
			WebAudioSound.decode();
		};
		request.onerror=function (e){
			me._err();
		}
		request.send();
	}

	__proto._err=function(){
		this._removeLoadEvents();
		WebAudioSound.__loadingSound[this.url]=false;
		this.event(/*laya.events.Event.ERROR*/"error");
	}

	__proto._loaded=function(audioBuffer){
		this._removeLoadEvents();
		this.audioBuffer=audioBuffer;
		WebAudioSound._dataCache[this.url]=this.audioBuffer;
		this.loaded=true;
		this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	__proto._removeLoadEvents=function(){
		WebAudioSound.e.off("loaded:"+this.url,this,this._loaded);
		WebAudioSound.e.off("err:"+this.url,this,this._err);
	}

	__proto.__playAfterLoaded=function(){
		if (!this.__toPlays)return;
		var i=0,len=0;
		var toPlays;
		toPlays=this.__toPlays;
		len=toPlays.length;
		var tParams;
		for (i=0;i < len;i++){
			tParams=toPlays[i];
			if (tParams[2] && !(tParams [2]).isStopped){
				this.play(tParams[0],tParams[1],tParams[2]);
			}
		}
		this.__toPlays.length=0;
	}

	/**
	*播放声音
	*@param startTime 起始时间
	*@param loops 循环次数
	*@return
	*
	*/
	__proto.play=function(startTime,loops,channel){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		channel=channel ? channel :new WebAudioSoundChannel();
		if (!this.audioBuffer){
			if (this.url){
				if (!this.__toPlays)this.__toPlays=[];
				this.__toPlays.push([startTime,loops,channel]);
				this.once(/*laya.events.Event.COMPLETE*/"complete",this,this.__playAfterLoaded);
				this.load(this.url);
			}
		}
		channel.url=this.url;
		channel.loops=loops;
		channel["audioBuffer"]=this.audioBuffer;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	__proto.dispose=function(){
		delete WebAudioSound._dataCache[this.url];
		delete WebAudioSound.__loadingSound[this.url];
	}

	__getset(0,__proto,'duration',function(){
		if (this.audioBuffer){
			return this.audioBuffer.duration;
		}
		return 0;
	});

	WebAudioSound.decode=function(){
		if (WebAudioSound.buffs.length <=0 || WebAudioSound.isDecoding){
			return;
		}
		WebAudioSound.isDecoding=true;
		WebAudioSound.tInfo=WebAudioSound.buffs.shift();
		WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo["buffer"],WebAudioSound._done,WebAudioSound._fail);
	}

	WebAudioSound._done=function(audioBuffer){
		WebAudioSound.e.event("loaded:"+WebAudioSound.tInfo.url,audioBuffer);
		WebAudioSound.isDecoding=false;
		WebAudioSound.decode();
	}

	WebAudioSound._fail=function(){
		WebAudioSound.e.event("err:"+WebAudioSound.tInfo.url,null);
		WebAudioSound.isDecoding=false;
		WebAudioSound.decode();
	}

	WebAudioSound._playEmptySound=function(){
		if (WebAudioSound.ctx==null){
			return;
		};
		var source=WebAudioSound.ctx.createBufferSource();
		source.buffer=WebAudioSound._miniBuffer;
		source.connect(WebAudioSound.ctx.destination);
		source.start(0,0,0);
	}

	WebAudioSound._unlock=function(){
		if (WebAudioSound._unlocked){
			return;
		}
		WebAudioSound._playEmptySound();
		if (WebAudioSound.ctx.state=="running"){
			Browser.document.removeEventListener("mousedown",WebAudioSound._unlock,true);
			Browser.document.removeEventListener("touchend",WebAudioSound._unlock,true);
			WebAudioSound._unlocked=true;
		}
	}

	WebAudioSound.initWebAudio=function(){
		if (WebAudioSound.ctx.state !="running"){
			WebAudioSound._unlock();
			Browser.document.addEventListener("mousedown",WebAudioSound._unlock,true);
			Browser.document.addEventListener("touchend",WebAudioSound._unlock,true);
		}
	}

	WebAudioSound._dataCache={};
	WebAudioSound.buffs=[];
	WebAudioSound.isDecoding=false;
	WebAudioSound._unlocked=false;
	WebAudioSound.tInfo=null;
	WebAudioSound.__loadingSound={};
	__static(WebAudioSound,
	['window',function(){return this.window=Browser.window;},'webAudioEnabled',function(){return this.webAudioEnabled=WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"];},'ctx',function(){return this.ctx=WebAudioSound.webAudioEnabled ? new (WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"])():undefined;},'_miniBuffer',function(){return this._miniBuffer=WebAudioSound.ctx.createBuffer(1,1,22050);},'e',function(){return this.e=new EventDispatcher();}
	]);
	return WebAudioSound;
})(EventDispatcher)


/**
*<p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>
*<p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。</p>
*/
//class laya.net.HttpRequest extends laya.events.EventDispatcher
var HttpRequest=(function(_super){
	function HttpRequest(){
		/**@private */
		this._responseType=null;
		/**@private */
		this._data=null;
		HttpRequest.__super.call(this);
		this._http=new Browser.window.XMLHttpRequest();
	}

	__class(HttpRequest,'laya.net.HttpRequest',_super);
	var __proto=HttpRequest.prototype;
	/**
	*发送 HTTP 请求。
	*@param url 请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
	*@param data (default=null)发送的数据。
	*@param method (default="get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。
	*@param responseType (default="text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。
	*@param headers (default=null)HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type","application/json"]。
	*/
	__proto.send=function(url,data,method,responseType,headers){
		(method===void 0)&& (method="get");
		(responseType===void 0)&& (responseType="text");
		this._responseType=responseType;
		this._data=null;
		var _this=this;
		var http=this._http;
		http.open(method,url,true);
		if (headers){
			for (var i=0;i < headers.length;i++){
				http.setRequestHeader(headers[i++],headers[i]);
			}
			}else if (!Render.isConchApp){
			if (!data || (typeof data=='string'))http.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
			else http.setRequestHeader("Content-Type","application/json");
		}
		http.responseType=responseType!=="arraybuffer" ? "text" :"arraybuffer";
		http.onerror=function (e){
			_this._onError(e);
		}
		http.onabort=function (e){
			_this._onAbort(e);
		}
		http.onprogress=function (e){
			_this._onProgress(e);
		}
		http.onload=function (e){
			_this._onLoad(e);
		}
		http.send(data);
	}

	/**
	*@private
	*请求进度的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onProgress=function(e){
		if (e && e.lengthComputable)this.event(/*laya.events.Event.PROGRESS*/"progress",e.loaded / e.total);
	}

	/**
	*@private
	*请求中断的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onAbort=function(e){
		this.error("Request was aborted by user");
	}

	/**
	*@private
	*请求出错侦的听处理函数。
	*@param e 事件对象。
	*/
	__proto._onError=function(e){
		this.error("Request failed Status:"+this._http.status+" text:"+this._http.statusText);
	}

	/**
	*@private
	*请求消息返回的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onLoad=function(e){
		var http=this._http;
		var status=http.status!==undefined ? http.status :200;
		if (status===200 || status===204 || status===0){
			this.complete();
			}else {
			this.error("["+http.status+"]"+http.statusText+":"+http.responseURL);
		}
	}

	/**
	*@private
	*请求错误的处理函数。
	*@param message 错误信息。
	*/
	__proto.error=function(message){
		this.clear();
		this.event(/*laya.events.Event.ERROR*/"error",message);
	}

	/**
	*@private
	*请求成功完成的处理函数。
	*/
	__proto.complete=function(){
		this.clear();
		var flag=true;
		try {
			if (this._responseType==="json"){
				this._data=JSON.parse(this._http.responseText);
				}else if (this._responseType==="xml"){
				this._data=Utils.parseXMLFromString(this._http.responseText);
				}else {
				this._data=this._http.response || this._http.responseText;
			}
			}catch (e){
			flag=false;
			this.error(e.message);
		}
		flag && this.event(/*laya.events.Event.COMPLETE*/"complete",(this._data instanceof Array)? [this._data] :this._data);
	}

	/**
	*@private
	*清除当前请求。
	*/
	__proto.clear=function(){
		var http=this._http;
		http.onerror=http.onabort=http.onprogress=http.onload=null;
	}

	/**请求的地址。*/
	__getset(0,__proto,'url',function(){
		return this._http.responseURL;
	});

	/**
	*本对象所封装的原生 XMLHttpRequest 引用。
	*/
	__getset(0,__proto,'http',function(){
		return this._http;
	});

	/**返回的数据。*/
	__getset(0,__proto,'data',function(){
		return this._data;
	});

	return HttpRequest;
})(EventDispatcher)


/**
*<code>Loader</code> 类可用来加载文本、JSON、XML、二进制、图像等资源。
*/
//class laya.net.Loader extends laya.events.EventDispatcher
var Loader=(function(_super){
	function Loader(){
		/**@private 加载后的数据对象，只读*/
		this._data=null;
		/**@private */
		this._class=null;
		/**@private */
		this._url=null;
		/**@private */
		this._type=null;
		/**@private */
		this._cache=false;
		/**@private */
		this._http=null;
		/**@private 自定义解析不派发complete事件，但会派发loaded事件，手动调用endLoad方法再派发complete事件*/
		this._customParse=false;
		Loader.__super.call(this);
	}

	__class(Loader,'laya.net.Loader',_super);
	var __proto=Loader.prototype;
	/**
	*加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。
	*@param url 资源地址。
	*@param type (default=null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。
	*@param cache (default=true)是否缓存数据。
	*@param group (default=null)分组名称。
	*@param ignoreCache (default=false)是否忽略缓存，强制重新加载。
	*/
	__proto.load=function(url,type,cache,group,ignoreCache){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		this._url=url;
		if (url.indexOf("data:image")===0)this._type=type="image";
		else {
			this._type=type || (type=this.getTypeFromUrl(url));
			url=URL.formatURL(url);
		}
		this._cache=cache;
		this._data=null;
		if (!ignoreCache && Loader.loadedMap[url]){
			this._data=Loader.loadedMap[url];
			this.event(/*laya.events.Event.PROGRESS*/"progress",1);
			this.event(/*laya.events.Event.COMPLETE*/"complete",this._data);
			return;
		}
		if (group)Loader.setGroup(url,group);
		if (Loader.parserMap[type] !=null){
			this._customParse=true;
			if (((Loader.parserMap[type])instanceof laya.utils.Handler ))Loader.parserMap[type].runWith(this);
			else Loader.parserMap[type].call(null,this);
			return;
		}
		if (type==="image" || type==="htmlimage" || type==="nativeimage")return this._loadImage(url);
		if (type==="sound")return this._loadSound(url);
		if (type==="ttf")return this._loadTTF(url);
		if (type=="atlas"){
			if (Loader.preLoadedAtlasConfigMap[url]){
				this.onLoaded(Loader.preLoadedAtlasConfigMap[url]);
				delete Loader.preLoadedAtlasConfigMap[url];
				return;
			}
		}
		if (!this._http){
			this._http=new HttpRequest();
			this._http.on(/*laya.events.Event.PROGRESS*/"progress",this,this.onProgress);
			this._http.on(/*laya.events.Event.ERROR*/"error",this,this.onError);
			this._http.on(/*laya.events.Event.COMPLETE*/"complete",this,this.onLoaded);
		};
		var contentType;
		switch (type){
			case "atlas":
				contentType="json";
				break ;
			case "font":
				contentType="xml";
				break ;
			case "pkm":
				contentType="arraybuffer";
				break
			default :
				contentType=type;
			}
		this._http.send(url,null,"get",contentType);
	}

	/**
	*获取指定资源地址的数据类型。
	*@param url 资源地址。
	*@return 数据类型。
	*/
	__proto.getTypeFromUrl=function(url){
		var type=Utils.getFileExtension(url);
		if (type)return Loader.typeMap[type];
		console.warn("Not recognize the resources suffix",url);
		return "text";
	}

	/**
	*@private
	*加载TTF资源。
	*@param url 资源地址。
	*/
	__proto._loadTTF=function(url){
		url=URL.formatURL(url);
		var ttfLoader=new TTFLoader();
		ttfLoader.complete=Handler.create(this,this.onLoaded);
		ttfLoader.load(url);
	}

	/**
	*@private
	*加载图片资源。
	*@param url 资源地址。
	*/
	__proto._loadImage=function(url){
		url=URL.formatURL(url);
		var _this=this;
		var image;
		function clear (){
			image.onload=null;
			image.onerror=null;
			delete Loader.imgCache[url]
		};
		var onload=function (){
			clear();
			_this.onLoaded(image);
		};
		var onerror=function (){
			clear();
			_this.event(/*laya.events.Event.ERROR*/"error","Load image failed");
		}
		if (this._type==="nativeimage"){
			image=new Browser.window.Image();
			image.crossOrigin="";
			image.onload=onload;
			image.onerror=onerror;
			image.src=url;
			Loader.imgCache[url]=image;
			}else {
			new HTMLImage.create(url,{onload:onload,onerror:onerror,onCreate:function (img){
					image=img;
					Loader.imgCache[url]=img;
			}});
		}
	}

	/**
	*@private
	*加载声音资源。
	*@param url 资源地址。
	*/
	__proto._loadSound=function(url){
		var sound=(new SoundManager._soundClass());
		var _this=this;
		sound.on(/*laya.events.Event.COMPLETE*/"complete",this,soundOnload);
		sound.on(/*laya.events.Event.ERROR*/"error",this,soundOnErr);
		sound.load(url);
		function soundOnload (){
			clear();
			_this.onLoaded(sound);
		}
		function soundOnErr (){
			clear();
			sound.dispose();
			_this.event(/*laya.events.Event.ERROR*/"error","Load sound failed");
		}
		function clear (){
			sound.offAll();
		}
	}

	/**@private */
	__proto.onProgress=function(value){
		if (this._type==="atlas")this.event(/*laya.events.Event.PROGRESS*/"progress",value *0.3);
		else this.event(/*laya.events.Event.PROGRESS*/"progress",value);
	}

	/**@private */
	__proto.onError=function(message){
		this.event(/*laya.events.Event.ERROR*/"error",message);
	}

	/**
	*资源加载完成的处理函数。
	*@param data 数据。
	*/
	__proto.onLoaded=function(data){
		var type=this._type;
		if (type==="image"){
			var tex=new Texture(data);
			tex.url=this._url;
			this.complete(tex);
			}else if (type==="sound" || type==="htmlimage" || type==="nativeimage"){
			this.complete(data);
			}else if (type==="atlas"){
			if (!data.src && !data._setContext){
				if (!this._data){
					this._data=data;
					if (data.meta && data.meta.image){
						var toloadPics=data.meta.image.split(",");
						var split=this._url.indexOf("/")>=0 ? "/" :"\\";
						var idx=this._url.lastIndexOf(split);
						var folderPath=idx >=0 ? this._url.substr(0,idx+1):"";
						for (var i=0,len=toloadPics.length;i < len;i++){
							toloadPics[i]=folderPath+toloadPics[i];
						}
						}else {
						toloadPics=[this._url.replace(".json",".png")];
					}
					toloadPics.reverse();
					data.toLoads=toloadPics;
					data.pics=[];
				}
				this.event(/*laya.events.Event.PROGRESS*/"progress",0.3+1 / toloadPics.length *0.6);
				return this._loadImage(toloadPics.pop());
				}else {
				this._data.pics.push(data);
				if (this._data.toLoads.length > 0){
					this.event(/*laya.events.Event.PROGRESS*/"progress",0.3+1 / this._data.toLoads.length *0.6);
					return this._loadImage(this._data.toLoads.pop());
				};
				var frames=this._data.frames;
				var cleanUrl=this._url.split("?")[0];
				var directory=(this._data.meta && this._data.meta.prefix)? this._data.meta.prefix :cleanUrl.substring(0,cleanUrl.lastIndexOf("."))+"/";
				var pics=this._data.pics;
				var atlasURL=URL.formatURL(this._url);
				var map=Loader.atlasMap[atlasURL] || (Loader.atlasMap[atlasURL]=[]);
				map.dir=directory;
				var scaleRate=NaN;
				scaleRate=this._data.meta.scale;
				if (scaleRate && scaleRate !=1){
					scaleRate=parseFloat(this._data.meta.scale);
					for (var name in frames){
						var obj=frames[name];
						var tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						var url=URL.formatURL(directory+name);
						tPic.scaleRate=scaleRate;
						Loader.cacheRes(url,Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h));
						Loader.loadedMap[url].url=url;
						map.push(url);
					}
					}else{
					for (name in frames){
						obj=frames[name];
						tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						url=URL.formatURL(directory+name);
						Loader.cacheRes(url,Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h));
						Loader.loadedMap[url].url=url;
						map.push(url);
					}
				}
				delete this._data.pics;
				this.complete(this._data);
			}
			}else if (type=="font"){
			if (!data.src){
				this._data=data;
				this.event(/*laya.events.Event.PROGRESS*/"progress",0.5);
				return this._loadImage(this._url.replace(".fnt",".png"));
				}else {
				var bFont=new BitmapFont();
				bFont.parseFont(this._data,data);
				var tArr=this._url.split(".fnt")[0].split("/");
				var fontName=tArr[tArr.length-1];
				Text.registerBitmapFont(fontName,bFont);
				this._data=bFont;
				this.complete(this._data);
			}
			}else if (type=="pkm"){
			var image=HTMLImage.create(data,this._url);
			var tex1=new Texture(image);
			tex1.url=this._url;
			this.complete(tex1);
			}else {
			this.complete(data);
		}
	}

	/**
	*加载完成。
	*@param data 加载的数据。
	*/
	__proto.complete=function(data){
		this._data=data;
		if (this._customParse){
			this.event(/*laya.events.Event.LOADED*/"loaded",(data instanceof Array)? [data] :data);
			}else {
			Loader._loaders.push(this);
			if (!Loader._isWorking)Loader.checkNext();
		}
	}

	/**
	*结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。
	*@param content 加载后的数据
	*/
	__proto.endLoad=function(content){
		content && (this._data=content);
		if (this._cache)Loader.cacheRes(this._url,this._data);
		this._customParse=false;
		this.event(/*laya.events.Event.PROGRESS*/"progress",1);
		this.event(/*laya.events.Event.COMPLETE*/"complete",(this.data instanceof Array)? [this.data] :this.data);
	}

	/**加载地址。*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	/**返回的数据。*/
	__getset(0,__proto,'data',function(){
		return this._data;
	});

	/**是否缓存。*/
	__getset(0,__proto,'cache',function(){
		return this._cache;
	});

	/**加载类型。*/
	__getset(0,__proto,'type',function(){
		return this._type;
	});

	Loader.checkNext=function(){
		Loader._isWorking=true;
		var startTimer=Browser.now();
		var thisTimer=startTimer;
		while (Loader._startIndex < Loader._loaders.length){
			thisTimer=Browser.now();
			Loader._loaders[Loader._startIndex].endLoad();
			Loader._startIndex++;
			if (Browser.now()-startTimer > Loader.maxTimeOut){
				console.warn("loader callback cost a long time:"+(Browser.now()-startTimer)+" url="+Loader._loaders[Loader._startIndex-1].url);
				Laya.timer.frameOnce(1,null,Loader.checkNext);
				return;
			}
		}
		Loader._loaders.length=0;
		Loader._startIndex=0;
		Loader._isWorking=false;
	}

	Loader.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		url=URL.formatURL(url);
		var arr=Loader.getAtlas(url);
		if (arr){
			for (var i=0,n=arr.length;i < n;i++){
				var resUrl=arr[i];
				var tex=Loader.getRes(resUrl);
				delete Loader.loadedMap[resUrl];
				if (tex)tex.destroy(forceDispose);
			}
			arr.length=0;
			delete Loader.atlasMap[url];
			delete Loader.loadedMap[url];
			}else {
			var res=Loader.loadedMap[url];
			if (res){
				delete Loader.loadedMap[url];
				if ((res instanceof laya.resource.Texture )&& res.bitmap)(res).destroy(forceDispose);
			}
		}
	}

	Loader.clearTextureRes=function(url){
		url=URL.formatURL(url);
		var arr=laya.net.Loader.getAtlas(url);
		var res=(arr && arr.length>0)? laya.net.Loader.getRes(arr[0]):laya.net.Loader.getRes(url);
		if (res && res.bitmap){
			if (Render.isConchApp){
				if (res.bitmap.source.releaseTexture){
					res.bitmap.source.releaseTexture();
				}
				}else if (res.bitmap._atlaser==null){
				res.bitmap.releaseResource(true);
			}
		}
	}

	Loader.setAtlasConfigs=function(url,config){
		Loader.preLoadedAtlasConfigMap[URL.formatURL(url)]=config;
	}

	Loader.getRes=function(url){
		return Loader.loadedMap[URL.formatURL(url)];
	}

	Loader.getAtlas=function(url){
		return Loader.atlasMap[URL.formatURL(url)];
	}

	Loader.cacheRes=function(url,data){
		url=URL.formatURL(url);
		if (Loader.loadedMap[url] !=null){
			console.warn("Resources already exist,is repeated loading:",url);
			}else {
			Loader.loadedMap[url]=data;
		}
	}

	Loader.setGroup=function(url,group){
		if (!Loader.groupMap[group])Loader.groupMap[group]=[];
		Loader.groupMap[group].push(url);
	}

	Loader.clearResByGroup=function(group){
		if (!Loader.groupMap[group])return;
		var arr=Loader.groupMap[group],i=0,len=arr.length;
		for (i=0;i < len;i++){
			Loader.clearRes(arr[i]);
		}
		arr.length=0;
	}

	Loader.TEXT="text";
	Loader.JSON="json";
	Loader.XML="xml";
	Loader.BUFFER="arraybuffer";
	Loader.IMAGE="image";
	Loader.SOUND="sound";
	Loader.ATLAS="atlas";
	Loader.FONT="font";
	Loader.TTF="ttf";
	Loader.PKM="pkm";
	Loader.parserMap={};
	Loader.groupMap={};
	Loader.maxTimeOut=100;
	Loader.loadedMap={};
	Loader.preLoadedAtlasConfigMap={};
	Loader.atlasMap={};
	Loader._loaders=[];
	Loader._isWorking=false;
	Loader._startIndex=0;
	Loader.imgCache={};
	__static(Loader,
	['typeMap',function(){return this.typeMap={"png":"image","jpg":"image","jpeg":"image","txt":"text","json":"json","xml":"xml","als":"atlas","atlas":"atlas","mp3":"sound","ogg":"sound","wav":"sound","part":"json","fnt":"font","pkm":"pkm","ttf":"ttf"};}
	]);
	return Loader;
})(EventDispatcher)


/**
*<p> <code>LoaderManager</code> 类用于用于批量加载资源。此类是单例，不要手动实例化此类，请通过Laya.loader访问。</p>
*<p>全部队列加载完成，会派发 Event.COMPLETE 事件；如果队列中任意一个加载失败，会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
*<p> <code>LoaderManager</code> 类提供了以下几种功能：<br/>
*多线程：默认5个加载线程，可以通过maxLoader属性修改线程数量；<br/>
*多优先级：有0-4共5个优先级，优先级高的优先加载。0最高，4最低；<br/>
*重复过滤：自动过滤重复加载（不会有多个相同地址的资源同时加载）以及复用缓存资源，防止重复加载；<br/>
*错误重试：资源加载失败后，会重试加载（以最低优先级插入加载队列），retryNum设定加载失败后重试次数，retryDelay设定加载重试的时间间隔。</p>
*@see laya.net.Loader
*/
//class laya.net.LoaderManager extends laya.events.EventDispatcher
var LoaderManager=(function(_super){
	var ResInfo;
	function LoaderManager(){
		/**加载出错后的重试次数，默认重试一次*/
		this.retryNum=1;
		/**延迟时间多久再进行错误重试，默认立即重试*/
		this.retryDelay=0;
		/**最大下载线程，默认为5个*/
		this.maxLoader=5;
		/**@private */
		this._loaders=[];
		/**@private */
		this._loaderCount=0;
		/**@private */
		this._resInfos=[];
		/**@private */
		this._infoPool=[];
		/**@private */
		this._maxPriority=5;
		/**@private */
		this._failRes={};
		LoaderManager.__super.call(this);
		for (var i=0;i < this._maxPriority;i++)this._resInfos[i]=[];
	}

	__class(LoaderManager,'laya.net.LoaderManager',_super);
	var __proto=LoaderManager.prototype;
	/**
	*<p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径"?"后的部分。</p>
	*<p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>
	*<p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>
	*@param url 资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。
	*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
	*@param progress 资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。
	*@param clas 资源类名。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：Texture。
	*@param params 资源构造参数。
	*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
	*@param cache 是否缓存加载的资源。
	*@return 如果url为数组，返回true；否则返回指定的资源类对象。
	*/
	__proto.create=function(url,complete,progress,clas,params,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		if ((url instanceof Array)){
			var items=url;
			var itemCount=items.length;
			var loadedCount=0;
			if (progress){
				var progress2=Handler.create(progress.caller,progress.method,progress.args,false);
			}
			for (var i=0;i < itemCount;i++){
				var item=items[i];
				if ((typeof item=='string'))item=items[i]={url:item};
				item.progress=0;
				var progressHandler=progress ? Handler.create(null,onProgress,[item],false):null;
				var completeHandler=(progress || complete)? Handler.create(null,onComplete,[item]):null;
				this._create(item.url,completeHandler,progressHandler,item.clas || clas,item.params || params,item.priority || priority,cache,item.group || group);
			}
			function onComplete (item,content){
				loadedCount++;
				item.progress=1;
				if (loadedCount===itemCount && complete){
					complete.run();
				}
			}
			function onProgress (item,value){
				item.progress=value;
				var num=0;
				for (var j=0;j < itemCount;j++){
					var item1=items[j];
					num+=item1.progress;
				};
				var v=num / itemCount;
				progress2.runWith(v);
			}
			return true;
		}else return this._create(url,complete,progress,clas,params,priority,cache,group);
	}

	__proto._create=function(url,complete,progress,clas,params,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		url=URL.formatURL(url);
		var item=this.getRes(url);
		if (!item){
			var extension=Utils.getFileExtension(url);
			var creatItem=LoaderManager.createMap[extension];
			if (!creatItem)
				throw new Error("LoaderManager:unknown file("+url+") extension with: "+extension+".");
			if (!clas)clas=creatItem[0];
			var type=creatItem[1];
			if (extension=="atlas"){
				this.load(url,complete,progress,type,priority,cache);
				}else {
				if (clas===Texture)type="htmlimage";
				item=clas ? new clas():null;
				if (item.hasOwnProperty("_loaded"))
					item._loaded=false;
				item._setUrl(url);
				(group)&& (item._setGroup(group));
				this._createLoad(item,url,Handler.create(null,onLoaded),progress,type,priority,false,group,true);
				function onLoaded (data){
					(item && !item.destroyed && data)&& (item.onAsynLoaded.call(item,url,data,params));
					if (complete)complete.run();
					Laya.loader.event(url);
				}
				(cache)&& (this.cacheRes(url,item));
			}
			}else {
			if (!item.hasOwnProperty("loaded")|| item.loaded){
				progress && progress.runWith(1);
				complete && complete.run();
				}else if (complete){
				Laya.loader._createListener(url,complete.caller,complete.method,complete.args,true,false);
			}
		}
		return item;
	}

	/**
	*<p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
	*<p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：Laya.loader.load(...).load(...);</p>
	*@param url 要加载的单个资源地址或资源信息数组。比如：简单数组：["a.png","b.png"]；复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]。
	*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
	*@param progress 加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。
	*@param type 资源类型。比如：Loader.IMAGE。
	*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
	*@param cache 是否缓存加载结果。
	*@param group 分组，方便对资源进行管理。
	*@param ignoreCache 是否忽略缓存，强制重新加载。
	*@return 此 LoaderManager 对象本身。
	*/
	__proto.load=function(url,complete,progress,type,priority,cache,group,ignoreCache){
		var _$this=this;
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
		var content=Loader.getRes(url);
		if (content !=null){
			Laya.timer.frameOnce(1,null,function(){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				_$this._loaderCount || _$this.event(/*laya.events.Event.COMPLETE*/"complete");
			});
			}else {
			var info=LoaderManager._resMap[url];
			if (!info){
				info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
				info.url=url;
				info.type=type;
				info.cache=cache;
				info.group=group;
				info.ignoreCache=ignoreCache;
				complete && info.on(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args);
				progress && info.on(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args);
				LoaderManager._resMap[url]=info;
				priority=priority < this._maxPriority ? priority :this._maxPriority-1;
				this._resInfos[priority].push(info);
				this._next();
				}else {
				complete && info._createListener(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args,false,false);
				progress && info._createListener(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args,false,false);
			}
		}
		return this;
	}

	/**
	*@private
	*/
	__proto._createLoad=function(item,url,complete,progress,type,priority,cache,group,ignoreCache){
		var _$this=this;
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
		var content=Loader.getRes(url);
		if (content !=null){
			Laya.timer.frameOnce(1,null,function(){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				_$this._loaderCount || _$this.event(/*laya.events.Event.COMPLETE*/"complete");
			});
			}else {
			var info=LoaderManager._resMap[url];
			if (!info){
				info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
				info.url=url;
				info.clas=item;
				info.type=type;
				info.cache=cache;
				info.group=group;
				info.ignoreCache=ignoreCache;
				complete && info.on(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args);
				progress && info.on(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args);
				LoaderManager._resMap[url]=info;
				priority=priority < this._maxPriority ? priority :this._maxPriority-1;
				this._resInfos[priority].push(info);
				this._next();
				}else {
				complete && info._createListener(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args,false,false);
				progress && info._createListener(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args,false,false);
			}
		}
		return this;
	}

	__proto._next=function(){
		if (this._loaderCount >=this.maxLoader)return;
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			while (infos.length > 0){
				var info=infos.shift();
				if (info)return this._doLoad(info);
			}
		}
		this._loaderCount || this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	__proto._doLoad=function(resInfo){
		this._loaderCount++;
		var loader=this._loaders.length ? this._loaders.pop():new Loader();
		loader.on(/*laya.events.Event.COMPLETE*/"complete",null,onLoaded);
		loader.on(/*laya.events.Event.PROGRESS*/"progress",null,function(num){
			resInfo.event(/*laya.events.Event.PROGRESS*/"progress",num);
		});
		loader.on(/*laya.events.Event.ERROR*/"error",null,function(msg){
			onLoaded(null);
		});
		var _this=this;
		function onLoaded (data){
			loader.offAll();
			loader._data=null;
			_this._loaders.push(loader);
			_this._endLoad(resInfo,(data instanceof Array)? [data] :data);
			_this._loaderCount--;
			_this._next();
		}
		loader._class=resInfo.clas;
		loader.load(resInfo.url,resInfo.type,resInfo.cache,resInfo.group,resInfo.ignoreCache);
	}

	__proto._endLoad=function(resInfo,content){
		var url=resInfo.url;
		if (content==null){
			var errorCount=this._failRes[url] || 0;
			if (errorCount < this.retryNum){
				console.warn("[warn]Retry to load:",url);
				this._failRes[url]=errorCount+1;
				Laya.timer.once(this.retryDelay,this,this._addReTry,[resInfo],false);
				return;
				}else {
				console.warn("[error]Failed to load:",url);
				this.event(/*laya.events.Event.ERROR*/"error",url);
			}
		}
		if (this._failRes[url])this._failRes[url]=0;
		delete LoaderManager._resMap[url];
		resInfo.event(/*laya.events.Event.COMPLETE*/"complete",content);
		resInfo.offAll();
		this._infoPool.push(resInfo);
	}

	__proto._addReTry=function(resInfo){
		this._resInfos[this._maxPriority-1].push(resInfo);
		this._next();
	}

	/**
	*清理指定资源地址缓存。
	*@param url 资源地址。
	*@param forceDispose 是否强制销毁，有些资源是采用引用计数方式销毁，如果forceDispose=true，则忽略引用计数，直接销毁，比如Texture，默认为false
	*/
	__proto.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		Loader.clearRes(url,forceDispose);
	}

	/**
	*获取指定资源地址的资源。
	*@param url 资源地址。
	*@return 返回资源。
	*/
	__proto.getRes=function(url){
		return Loader.getRes(url);
	}

	/**
	*缓存资源。
	*@param url 资源地址。
	*@param data 要缓存的内容。
	*/
	__proto.cacheRes=function(url,data){
		Loader.cacheRes(url,data);
	}

	/**
	*销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复
	*相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源
	*而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁
	*【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理
	*@param url 图集地址或者texture地址，比如 Loader.clearTextureRes("res/atlas/comp.atlas");Loader.clearTextureRes("hall/bg.jpg");
	*/
	__proto.clearTextureRes=function(url){
		Loader.clearTextureRes(url);
	}

	/**
	*设置资源分组。
	*@param url 资源地址。
	*@param group 分组名
	*/
	__proto.setGroup=function(url,group){
		Loader.setGroup(url,group);
	}

	/**
	*根据分组清理资源。
	*@param group 分组名
	*/
	__proto.clearResByGroup=function(group){
		Loader.clearResByGroup(group);
	}

	/**清理当前未完成的加载，所有未加载的内容全部停止加载。*/
	__proto.clearUnLoaded=function(){
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			for (var j=infos.length-1;j >-1;j--){
				var info=infos[j];
				if (info){
					info.offAll();
					this._infoPool.push(info);
				}
			}
			infos.length=0;
		}
		this._loaderCount=0;
		LoaderManager._resMap={};
	}

	/**
	*根据地址集合清理掉未加载的内容
	*@param urls 资源地址集合
	*/
	__proto.cancelLoadByUrls=function(urls){
		if (!urls)return;
		for (var i=0,n=urls.length;i < n;i++){
			this.cancelLoadByUrl(urls[i]);
		}
	}

	/**
	*根据地址清理掉未加载的内容
	*@param url 资源地址
	*/
	__proto.cancelLoadByUrl=function(url){
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			for (var j=infos.length-1;j >-1;j--){
				var info=infos[j];
				if (info && info.url===url){
					infos[j]=null;
					info.offAll();
					this._infoPool.push(info);
				}
			}
		}
		if (LoaderManager._resMap[url])delete LoaderManager._resMap[url];
	}

	/**
	*@private
	*加载数组里面的资源。
	*@param arr 简单：["a.png","b.png"]，复杂[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]*/
	__proto._loadAssets=function(arr,complete,progress,type,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		var itemCount=arr.length;
		var loadedCount=0;
		var totalSize=0;
		var items=[];
		var success=true;
		for (var i=0;i < itemCount;i++){
			var item=arr[i];
			if ((typeof item=='string'))item={url:item,type:type,size:1,priority:priority};
			if (!item.size)item.size=1;
			item.progress=0;
			totalSize+=item.size;
			items.push(item);
			var progressHandler=progress ? Handler.create(null,loadProgress,[item],false):null;
			var completeHandler=(complete || progress)? Handler.create(null,loadComplete,[item]):null;
			this.load(item.url,completeHandler,progressHandler,item.type,item.priority || 1,cache,item.group || group);
		}
		function loadComplete (item,content){
			loadedCount++;
			item.progress=1;
			if (!content)success=false;
			if (loadedCount===itemCount && complete){
				complete.runWith(success);
			}
		}
		function loadProgress (item,value){
			if (progress !=null){
				item.progress=value;
				var num=0;
				for (var j=0;j < items.length;j++){
					var item1=items[j];
					num+=item1.size *item1.progress;
				};
				var v=num / totalSize;
				progress.runWith(v);
			}
		}
		return this;
	}

	LoaderManager.cacheRes=function(url,data){
		Loader.cacheRes(url,data);
	}

	LoaderManager._resMap={};
	__static(LoaderManager,
	['createMap',function(){return this.createMap={atlas:[null,/*laya.net.Loader.ATLAS*/"atlas"]};}
	]);
	LoaderManager.__init$=function(){
		//class ResInfo extends laya.events.EventDispatcher
		ResInfo=(function(_super){
			function ResInfo(){
				this.url=null;
				this.type=null;
				this.cache=false;
				this.group=null;
				this.ignoreCache=false;
				this.clas=null;
				ResInfo.__super.call(this);
			}
			__class(ResInfo,'',_super);
			return ResInfo;
		})(EventDispatcher)
	}

	return LoaderManager;
})(EventDispatcher)


/**
*<p><code>ColorFilter</code> 是颜色滤镜。使用 ColorFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度转 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 Sprite 类继承的对象）。</p>
*<p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>
*/
//class laya.filters.ColorFilter extends laya.filters.Filter
var ColorFilter=(function(_super){
	function ColorFilter(mat){
		/**@private */
		//this._mat=null;
		/**@private */
		//this._alpha=null;
		ColorFilter.__super.call(this);
		if (!mat){
			mat=[0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0,0,0,1,0];
		}
		this._mat=new Float32Array(16);
		this._alpha=new Float32Array(4);
		var j=0;
		var z=0;
		for (var i=0;i < 20;i++){
			if (i % 5 !=4){
				this._mat[j++]=mat[i];
				}else {
				this._alpha[z++]=mat[i];
			}
		}
		this._action=RunDriver.createFilterAction(0x20);
		this._action.data=this;
	}

	__class(ColorFilter,'laya.filters.ColorFilter',_super);
	var __proto=ColorFilter.prototype;
	Laya.imps(__proto,{"laya.filters.IFilter":true})
	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		var t=sp._$P.cf=this;
		sp.conchModel && sp.conchModel.setFilterMatrix && sp.conchModel.setFilterMatrix(this._mat,this._alpha);
	}

	/**@private */
	__getset(0,__proto,'type',function(){
		return 0x20;
	});

	/**@private */
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	return ColorFilter;
})(Filter)


/**
*<p> <code>Socket</code> 封装了 HTML5 WebSocket ，允许服务器端与客户端进行全双工（full-duplex）的实时通信，并且允许跨域通信。在建立连接后，服务器和 Browser/Client Agent 都能主动的向对方发送或接收文本和二进制数据。</p>
*<p>要使用 <code>Socket</code> 类的方法，请先使用构造函数 <code>new Socket</code> 创建一个 <code>Socket</code> 对象。 <code>Socket</code> 以异步方式传输和接收数据。</p>
*/
//class laya.net.Socket extends laya.events.EventDispatcher
var Socket=(function(_super){
	function Socket(host,port,byteClass){
		/**@private */
		this._endian=null;
		/**@private */
		this._stamp=NaN;
		/**@private */
		this._socket=null;
		/**@private */
		this._connected=false;
		/**@private */
		this._addInputPosition=0;
		/**@private */
		this._input=null;
		/**@private */
		this._output=null;
		/**
		*@private
		*表示建立连接时需等待的毫秒数。
		*/
		this.timeout=0;
		/**
		*@private
		*在写入或读取对象时，控制所使用的 AMF 的版本。
		*/
		this.objectEncoding=0;
		/**
		*不再缓存服务端发来的数据。
		*/
		this.disableInput=false;
		/**
		*用来发送和接收数据的 <code>Byte</code> 类。
		*/
		this._byteClass=null;
		/**
		*<p>子协议名称。子协议名称字符串，或由多个子协议名称字符串构成的数组。必须在调用 connect 或者 connectByUrl 之前进行赋值，否则无效。</p>
		*<p>指定后，只有当服务器选择了其中的某个子协议，连接才能建立成功，否则建立失败，派发 Event.ERROR 事件。</p>
		*@see https://html.spec.whatwg.org/multipage/comms.html#dom-websocket
		*/
		this.protocols=[];
		(port===void 0)&& (port=0);
		Socket.__super.call(this);
		this._byteClass=byteClass ? byteClass :Byte;
		this.endian="bigEndian";
		this.timeout=20000;
		this._addInputPosition=0;
		if (host && port > 0 && port < 65535)
			this.connect(host,port);
	}

	__class(Socket,'laya.net.Socket',_super);
	var __proto=Socket.prototype;
	/**
	*<p>连接到指定的主机和端口。</p>
	*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
	*@param host 服务器地址。
	*@param port 服务器端口。
	*/
	__proto.connect=function(host,port){
		var url="ws://"+host+":"+port;
		if (Browser.window.location.protocol=="https:"){
			url="wss://"+host+":"+port;
			}else {
			url="ws://"+host+":"+port;
		}
		this.connectByUrl(url);
	}

	/**
	*<p>连接到指定的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。</p>
	*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
	*@param url 要连接的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。
	*/
	__proto.connectByUrl=function(url){
		var _$this=this;
		if (this._socket !=null)
			this.close();
		this._socket && this.cleanSocket();
		if (!this.protocols || this.protocols.length==0){
			this._socket=new Browser.window.WebSocket(url);
			}else {
			this._socket=new Browser.window.WebSocket(url,this.protocols);
		}
		this._socket.binaryType="arraybuffer";
		this._output=new this._byteClass();
		this._output.endian=this.endian;
		this._input=new this._byteClass();
		this._input.endian=this.endian;
		this._addInputPosition=0;
		this._socket.onopen=function (e){
			_$this._onOpen(e);
		};
		this._socket.onmessage=function (msg){
			_$this._onMessage(msg);
		};
		this._socket.onclose=function (e){
			_$this._onClose(e);
		};
		this._socket.onerror=function (e){
			_$this._onError(e);
		};
	}

	/**
	*清理socket。
	*/
	__proto.cleanSocket=function(){
		try {
			this._socket.close();
		}catch (e){}
		this._connected=false;
		this._socket.onopen=null;
		this._socket.onmessage=null;
		this._socket.onclose=null;
		this._socket.onerror=null;
		this._socket=null;
	}

	/**
	*关闭连接。
	*/
	__proto.close=function(){
		if (this._socket !=null){
			try {
				this._socket.close();
			}catch (e){}
		}
	}

	/**
	*@private
	*连接建立成功 。
	*/
	__proto._onOpen=function(e){
		this._connected=true;
		this.event(/*laya.events.Event.OPEN*/"open",e);
	}

	/**
	*@private
	*接收到数据处理方法。
	*@param msg 数据。
	*/
	__proto._onMessage=function(msg){
		if (!msg || !msg.data)return;
		var data=msg.data;
		if (this.disableInput && data){
			this.event(/*laya.events.Event.MESSAGE*/"message",data);
			return;
		}
		if (this._input.length > 0 && this._input.bytesAvailable < 1){
			this._input.clear();
			this._addInputPosition=0;
		};
		var pre=this._input.pos;
		!this._addInputPosition && (this._addInputPosition=0);
		this._input.pos=this._addInputPosition;
		if (data){
			if ((typeof data=='string')){
				this._input.writeUTFBytes(data);
				}else {
				this._input.writeArrayBuffer(data);
			}
			this._addInputPosition=this._input.pos;
			this._input.pos=pre;
		}
		this.event(/*laya.events.Event.MESSAGE*/"message",data);
	}

	/**
	*@private
	*连接被关闭处理方法。
	*/
	__proto._onClose=function(e){
		this._connected=false;
		this.event(/*laya.events.Event.CLOSE*/"close",e)
	}

	/**
	*@private
	*出现异常处理方法。
	*/
	__proto._onError=function(e){
		this.event(/*laya.events.Event.ERROR*/"error",e)
	}

	/**
	*发送数据到服务器。
	*@param data 需要发送的数据，可以是String或者ArrayBuffer。
	*/
	__proto.send=function(data){
		this._socket.send(data);
	}

	/**
	*发送缓冲区中的数据到服务器。
	*/
	__proto.flush=function(){
		if (this._output && this._output.length > 0){
			var evt;
			try {
				this._socket && this._socket.send(this._output.__getBuffer().slice(0,this._output.length));
				}catch (e){
				evt=e;
			}
			this._output.endian=this.endian;
			this._output.clear();
			if (evt)this.event(/*laya.events.Event.ERROR*/"error",evt);
		}
	}

	/**
	*缓存的服务端发来的数据。
	*/
	__getset(0,__proto,'input',function(){
		return this._input;
	});

	/**
	*表示需要发送至服务端的缓冲区中的数据。
	*/
	__getset(0,__proto,'output',function(){
		return this._output;
	});

	/**
	*表示此 Socket 对象目前是否已连接。
	*/
	__getset(0,__proto,'connected',function(){
		return this._connected;
	});

	/**
	*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>
	*<p> LITTLE_ENDIAN ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
	*<p> BIG_ENDIAN ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。</p>
	*/
	__getset(0,__proto,'endian',function(){
		return this._endian;
		},function(value){
		this._endian=value;
		if (this._input !=null)this._input.endian=value;
		if (this._output !=null)this._output.endian=value;
	});

	Socket.LITTLE_ENDIAN="littleEndian";
	Socket.BIG_ENDIAN="bigEndian";
	return Socket;
})(EventDispatcher)


/**
*@private
*Worker Image加载器
*/
//class laya.net.WorkerLoader extends laya.events.EventDispatcher
var WorkerLoader=(function(_super){
	function WorkerLoader(){
		/**
		*使用的Worker对象。
		*/
		this.worker=null;
		WorkerLoader.__super.call(this);
		var _$this=this;
		this.worker=new Browser.window.Worker(WorkerLoader.workerPath);
		this.worker.onmessage=function (evt){
			_$this.workerMessage(evt.data);
		}
	}

	__class(WorkerLoader,'laya.net.WorkerLoader',_super);
	var __proto=WorkerLoader.prototype;
	/**
	*@private
	*/
	__proto.workerMessage=function(data){
		if (data){
			switch(data.type){
				case "Image":
					this.imageLoaded(data);
					break ;
				case "Msg":
					this.event("image_msg",data.msg);
					break ;
				}
		}
	}

	/**
	*@private
	*/
	__proto.imageLoaded=function(data){
		if (data && data.buffer && data.buffer.length < 10){
			WorkerLoader._enable=false;
			this._myTrace("buffer lost when postmessage ,disable workerloader");
			this.event(data.url,null);
			this.event("image_err",data.url+"\n"+data.msg);
			return;
		}
		if (!data.dataType){
			this.event(data.url,null);
			this.event("image_err",data.url+"\n"+data.msg);
			return;
		};
		var canvas,ctx;
		var imageData;
		switch(data.dataType){
			case "buffer":
				canvas=new HTMLCanvas("2D");
				ctx=canvas.source.getContext("2d");
				imageData=ctx.createImageData(data.width,data.height);
				imageData.data.set(data.buffer);
				canvas.size(imageData.width,imageData.height);
				ctx.putImageData(imageData,0,0);
				canvas.memorySize=0;
				break ;
			case "imagedata":
				canvas=new HTMLCanvas("2D");
				ctx=canvas.source.getContext("2d");
				imageData=data.imagedata;
				canvas.size(imageData.width,imageData.height);
				ctx.putImageData(imageData,0,0);
				imageData=data.imagedata;
				canvas.memorySize=0;
				break ;
			case "imageBitmap":
				imageData=data.imageBitmap;
				if (!Render.isWebGL){
					canvas=new HTMLCanvas("2D");
					ctx=canvas.source.getContext("2d");
					canvas.size(imageData.width,imageData.height);
					ctx.drawImage(imageData,0,0);
					canvas.src=data.url;
				}else
				canvas=imageData;
				break ;
			}
		if (Render.isWebGL)
			/*__JS__ */canvas=new laya.webgl.resource.WebGLImage(canvas,data.url);;
		this.event(data.url,canvas);
	}

	/**
	*@private
	*/
	__proto._myTrace=function(__arg){
		var arg=arguments;
		var rst=[];
		var i=0,len=arg.length;
		for(i=0;i<len;i++){
			rst.push(arg[i]);
		}
		this.event("image_msg",rst.join(" "));
	}

	/**
	*加载图片
	*@param url 图片地址
	*/
	__proto.loadImage=function(url){
		var data;
		data={};
		data.type="load";
		data.url=url;
		this.worker.postMessage(data);
	}

	/**
	*@private
	*加载图片资源。
	*@param url 资源地址。
	*/
	__proto._loadImage=function(url){
		var _this=this;
		if (!WorkerLoader._enable||url.toLowerCase().indexOf(".png")< 0){
			WorkerLoader._preLoadFun.call(_this,url);
			return;
		}
		url=URL.formatURL(url);
		function clear (){
			laya.net.WorkerLoader.I.off(url,_this,onload);
		};
		var onload=function (image){
			clear();
			if (image){
				_this["onLoaded"](image);
				}else{
				WorkerLoader._preLoadFun.call(_this,url);
			}
		};
		laya.net.WorkerLoader.I.on(url,_this,onload);
		laya.net.WorkerLoader.I.loadImage(url);
	}

	/**
	*是否启用。
	*/
	__getset(1,WorkerLoader,'enable',function(){
		return WorkerLoader._enable;
		},function(v){
		if (WorkerLoader.disableJSDecode && (!Browser.window.createImageBitmap))return;
		WorkerLoader._enable=v;
		if (WorkerLoader._enable && WorkerLoader._preLoadFun==null)WorkerLoader._enable=WorkerLoader.__init__();
	});

	WorkerLoader.__init__=function(){
		if (WorkerLoader._preLoadFun !=null)return false;
		if (!Browser.window.Worker)return false;
		WorkerLoader._preLoadFun=Loader["prototype"]["_loadImage"];
		Loader["prototype"]["_loadImage"]=WorkerLoader["prototype"]["_loadImage"];
		if (!WorkerLoader.I)WorkerLoader.I=new WorkerLoader();
		return true;
	}

	WorkerLoader.workerSupported=function(){
		return Browser.window.Worker?true:false;
	}

	WorkerLoader.IMAGE_LOADED="image_loaded";
	WorkerLoader.IMAGE_ERR="image_err";
	WorkerLoader.IMAGE_MSG="image_msg";
	WorkerLoader.I=null;
	WorkerLoader._preLoadFun=null;
	WorkerLoader._enable=false;
	WorkerLoader.workerPath="libs/worker.js";
	WorkerLoader.disableJSDecode=true;
	return WorkerLoader;
})(EventDispatcher)


/**
*@private
*<code>Resource</code> 资源存取类。
*/
//class laya.resource.Resource extends laya.events.EventDispatcher
var Resource=(function(_super){
	function Resource(){
		/**@private */
		//this.__loaded=false;
		/**@private */
		//this._id=0;
		/**@private */
		//this._memorySize=0;
		/**@private */
		//this._released=false;
		/**@private */
		//this._destroyed=false;
		/**@private */
		//this._referenceCount=0;
		/**@private */
		//this._group=null;
		/**@private */
		//this._url=null;
		/**@private */
		//this._resourceManager=null;
		/**@private */
		//this._lastUseFrameCount=0;
		/**是否加锁，如果true为不能使用自动释放机制。*/
		//this.lock=false;
		/**名称。 */
		//this.name=null;
		Resource.__super.call(this);
		this._$1__id=++Resource._uniqueIDCounter;
		this.__loaded=true;
		this._destroyed=false;
		this._referenceCount=0;
		Resource._idResourcesMap[this.id]=this;
		this._released=true;
		this.lock=false;
		this._memorySize=0;
		this._lastUseFrameCount=-1;
		(ResourceManager.currentResourceManager)&& (ResourceManager.currentResourceManager.addResource(this));
	}

	__class(Resource,'laya.resource.Resource',_super);
	var __proto=Resource.prototype;
	Laya.imps(__proto,{"laya.resource.ICreateResource":true,"laya.resource.IDispose":true})
	/**
	*@private
	*/
	__proto._setUrl=function(url){
		if (this._url!==url){
			var resList;
			if (this._url){
				resList=Resource._urlResourcesMap[this._url];
				resList.splice(resList.indexOf(this),1);
				(resList.length===0)&& (delete Resource._urlResourcesMap[this._url]);
			}
			if (url){
				resList=Resource._urlResourcesMap[url];
				(resList)|| (Resource._urlResourcesMap[url]=resList=[]);
				resList.push(this);
			}
			this._url=url;
		}
	}

	/**
	*@private
	*/
	__proto._getGroup=function(){
		return this._group;
	}

	/**
	*@private
	*/
	__proto._setGroup=function(value){
		if (this._group!==value){
			var groupList;
			if (this._group){
				groupList=Resource._groupResourcesMap[this._group];
				groupList.splice(groupList.indexOf(this),1);
				(groupList.length===0)&& (delete Resource._groupResourcesMap[this._group]);
			}
			if (value){
				groupList=Resource._groupResourcesMap[value];
				(groupList)|| (Resource._groupResourcesMap[value]=groupList=[]);
				groupList.push(this);
			}
			this._group=value;
		}
	}

	/**
	*@private
	*/
	__proto._addReference=function(){
		this._referenceCount++;
	}

	/**
	*@private
	*/
	__proto._removeReference=function(){
		this._referenceCount--;
	}

	/**
	*@private
	*/
	__proto._clearReference=function(){
		this._referenceCount=0;
	}

	/**
	*@private
	*/
	__proto._endLoaded=function(){
		this.__loaded=true;
		this.event(/*laya.events.Event.LOADED*/"loaded",this);
	}

	/**
	*@private
	*/
	__proto.recreateResource=function(){
		this.completeCreate();
	}

	/**
	*@private
	*/
	__proto.disposeResource=function(){}
	/**
	*激活资源，使用资源前应先调用此函数激活。
	*@param force 是否强制创建。
	*/
	__proto.activeResource=function(force){
		(force===void 0)&& (force=false);
		this._lastUseFrameCount=Stat.loopCount;
		if (!this._destroyed&&this.__loaded&& (this._released || force))
			this.recreateResource();
	}

	/**
	*释放资源。
	*@param force 是否强制释放。
	*@return 是否成功释放。
	*/
	__proto.releaseResource=function(force){
		(force===void 0)&& (force=false);
		if (!force && this.lock)
			return false;
		if (!this._released || force){
			this.disposeResource();
			this._released=true;
			this._lastUseFrameCount=-1;
			this.event(/*laya.events.Event.RELEASED*/"released",this);
			return true;
			}else {
			return false;
		}
	}

	/**
	*@private
	*/
	__proto.onAsynLoaded=function(url,data,params){
		throw new Error("Resource: must override this function!");
	}

	/**
	*<p>彻底处理资源，处理后不能恢复。</p>
	*<p><b>注意：</b>会强制解锁清理。</p>
	*/
	__proto.destroy=function(){
		if (this._destroyed)
			return;
		if (this._resourceManager!==null)
			this._resourceManager.removeResource(this);
		this._destroyed=true;
		this.lock=false;
		this.releaseResource();
		delete Resource._idResourcesMap[this.id];
		var resList;
		if (this._url){
			resList=Resource._urlResourcesMap[this._url];
			if (resList){
				resList.splice(resList.indexOf(this),1);
				(resList.length===0)&& (delete Resource._urlResourcesMap[this.url]);
			}
			Loader.clearRes(this._url);
		}
		if (this._group){
			resList=Resource._groupResourcesMap[this._group];
			resList.splice(resList.indexOf(this),1);
			(resList.length===0)&& (delete Resource._groupResourcesMap[this.url]);
		}
	}

	/**完成资源激活。*/
	__proto.completeCreate=function(){
		this._released=false;
		this.event(/*laya.events.Event.RECOVERED*/"recovered",this);
	}

	/**
	*@private
	*/
	__proto.dispose=function(){
		this.destroy();
	}

	/**
	*@private
	*/
	/**
	*占用内存尺寸。
	*/
	__getset(0,__proto,'memorySize',function(){
		return this._memorySize;
		},function(value){
		var offsetValue=value-this._memorySize;
		this._memorySize=value;
		this.resourceManager && this.resourceManager.addSize(offsetValue);
	});

	/**
	*@private
	*/
	__getset(0,__proto,'_loaded',null,function(value){
		this.__loaded=value;
	});

	/**
	*获取是否已加载完成。
	*/
	__getset(0,__proto,'loaded',function(){
		return this.__loaded;
	});

	/**
	*获取唯一标识ID,通常用于识别。
	*/
	__getset(0,__proto,'id',function(){
		return this._$1__id;
	});

	/**
	*是否已处理。
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	/**
	*设置资源组名。
	*/
	/**
	*获取资源组名。
	*/
	__getset(0,__proto,'group',function(){
		return this._getGroup();
		},function(value){
		this._setGroup(value);
	});

	/**
	*资源管理员。
	*/
	__getset(0,__proto,'resourceManager',function(){
		return this._resourceManager;
	});

	/**
	*获取资源的URL地址。
	*@return URL地址。
	*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	/**
	*是否已释放。
	*/
	__getset(0,__proto,'released',function(){
		return this._released;
	});

	/**
	*获取资源的引用计数。
	*/
	__getset(0,__proto,'referenceCount',function(){
		return this._referenceCount;
	});

	Resource.getResourceByID=function(id){
		return Resource._idResourcesMap[id];
	}

	Resource.getResourceByURL=function(url,index){
		(index===void 0)&& (index=0);
		return Resource._urlResourcesMap[url][index];
	}

	Resource.getResourceCountByURL=function(url){
		return Resource._urlResourcesMap[url].length;
	}

	Resource.destroyUnusedResources=function(group){
		var res;
		if (group){
			var resouList=Resource._groupResourcesMap[group];
			if (resouList){
				var tempResouList=resouList.slice();
				for (var i=0,n=tempResouList.length;i < n;i++){
					res=tempResouList[i];
					if (!res.lock && res._referenceCount===0)
						res.destroy();
				}
			}
			}else {
			for (var k in Resource._idResourcesMap){
				res=Resource._idResourcesMap[k];
				if (!res.lock && res._referenceCount===0)
					res.destroy();
			}
		}
	}

	Resource._uniqueIDCounter=0;
	Resource._idResourcesMap={};
	Resource._urlResourcesMap={};
	Resource._groupResourcesMap={};
	return Resource;
})(EventDispatcher)


/**
*<code>Texture</code> 是一个纹理处理类。
*/
//class laya.resource.Texture extends laya.events.EventDispatcher
var Texture=(function(_super){
	function Texture(bitmap,uv){
		/**图片或者canvas 。*/
		//this.bitmap=null;
		/**UV信息。*/
		//this.uv=null;
		/**沿 X 轴偏移量。*/
		this.offsetX=0;
		/**沿 Y 轴偏移量。*/
		this.offsetY=0;
		/**原始宽度（包括被裁剪的透明区域）。*/
		this.sourceWidth=0;
		/**原始高度（包括被裁剪的透明区域）。*/
		this.sourceHeight=0;
		/**@private */
		//this._loaded=false;
		/**@private */
		this._w=0;
		/**@private */
		this._h=0;
		/**@private 唯一ID*/
		//this.$_GID=NaN;
		/**图片地址*/
		//this.url=null;
		/**@private */
		this._uvID=0;
		this._atlasID=-1;
		/**@private */
		this.scaleRate=1;
		Texture.__super.call(this);
		if (bitmap){
			bitmap._addReference();
		}
		this.setTo(bitmap,uv);
	}

	__class(Texture,'laya.resource.Texture',_super);
	var __proto=Texture.prototype;
	/**
	*@private
	*/
	__proto._setUrl=function(url){
		this.url=url;
	}

	/**
	*设置此对象的位图资源、UV数据信息。
	*@param bitmap 位图资源
	*@param uv UV数据信息
	*/
	__proto.setTo=function(bitmap,uv){
		this.bitmap=bitmap;
		this.uv=uv || Texture.DEF_UV;
		if (bitmap){
			this._w=bitmap.width;
			this._h=bitmap.height;
			this.sourceWidth=this.sourceWidth || this._w;
			this.sourceHeight=this.sourceHeight || this._h
			this._loaded=this._w > 0;
			var _this=this;
			if (this._loaded){
				RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				}else {
				var bm=bitmap;
				if ((bm instanceof laya.resource.HTMLImage )&& bm.image)
					bm.image.addEventListener('load',function(e){
					RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				},false);
			}
		}
	}

	/**@private 激活资源。*/
	__proto.active=function(){
		if (this.bitmap)this.bitmap.activeResource();
	}

	/**
	*销毁纹理（分直接销毁，跟计数销毁两种）。
	*@param forceDispose (default=false)true为强制销毁主纹理，false是通过计数销毁纹理。
	*/
	__proto.destroy=function(forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		if (this.bitmap && (this.bitmap).referenceCount > 0){
			var temp=this.bitmap;
			if (forceDispose){
				if (Render.isConchApp && temp.source && temp.source.conchDestroy){
					this.bitmap.source.conchDestroy();
				}
				this.bitmap=null;
				temp.dispose();
				(temp)._clearReference();
				}else {
				(temp)._removeReference();
				if ((temp).referenceCount==0){
					if (Render.isConchApp && temp.source && temp.source.conchDestroy){
						this.bitmap.source.conchDestroy();
					}
					this.bitmap=null;
					temp.dispose();
				}
			}
			if (this.url && this===Laya.loader.getRes(this.url))Laya.loader.clearRes(this.url,forceDispose);
			this._loaded=false;
		}
	}

	/**
	*加载指定地址的图片。
	*@param url 图片地址。
	*/
	__proto.load=function(url){
		var _$this=this;
		this._loaded=false;
		url=URL.customFormat(url);
		var fileBitmap=(this.bitmap || (this.bitmap=HTMLImage.create(url)));
		if (fileBitmap)fileBitmap._addReference();
		var _this=this;
		fileBitmap.onload=function (){
			fileBitmap.onload=null;
			_this._loaded=true;
			_$this.sourceWidth=_$this._w=fileBitmap.width;
			_$this.sourceHeight=_$this._h=fileBitmap.height;
			_this.event(/*laya.events.Event.LOADED*/"loaded",this);
			(RunDriver.addToAtlas)&& (RunDriver.addToAtlas(_this));
		};
	}

	/**@private */
	__proto.addTextureToAtlas=function(e){
		RunDriver.addTextureToAtlas(this);
	}

	/**
	*获取Texture上的某个区域的像素点
	*@param x
	*@param y
	*@param width
	*@param height
	*@return 返回像素点集合
	*/
	__proto.getPixels=function(x,y,width,height){
		if (Render.isConchApp){
			var temp=this.bitmap;
			if (temp.source && temp.source.getImageData){
				var arraybuffer=temp.source.getImageData(x,y,width,height);
				var tUint8Array=new Uint8Array(arraybuffer);
				return /*__JS__ */Array.from(tUint8Array);
			}
			return null;
			}else if (Render.isWebGL){
			return RunDriver.getTexturePixels(this,x,y,width,height);
			}else {
			Browser.canvas.size(width,height);
			Browser.canvas.clear();
			Browser.context.drawTexture(this,-x,-y,this.width,this.height,0,0);
			var info=Browser.context.getImageData(0,0,width,height);
		}
		return info.data;
	}

	/**@private */
	__proto.onAsynLoaded=function(url,bitmap){
		if (bitmap)bitmap._addReference();
		this.setTo(bitmap,this.uv);
	}

	/**激活并获取资源。*/
	__getset(0,__proto,'source',function(){
		if (!this.bitmap)return null;
		this.bitmap.activeResource();
		return this.bitmap.source;
	});

	/**
	*表示是否加载成功，只能表示初次载入成功（通常包含下载和载入）,并不能完全表示资源是否可立即使用（资源管理机制释放影响等）。
	*/
	__getset(0,__proto,'loaded',function(){
		return this._loaded;
	});

	/**
	*表示资源是否已释放。
	*/
	__getset(0,__proto,'released',function(){
		if (!this.bitmap)return true;
		return this.bitmap.released;
	});

	/**实际宽度。*/
	__getset(0,__proto,'width',function(){
		if (this._w)return this._w;
		return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[2]-this.uv[0])*this.bitmap.width :this.bitmap.width;
		},function(value){
		this._w=value;
		this.sourceWidth || (this.sourceWidth=value);
	});

	/**
	*通过外部设置是否启用纹理平铺(后面要改成在着色器里计算)
	*/
	/**
	*获取当前纹理是否启用了纹理平铺
	*/
	__getset(0,__proto,'repeat',function(){
		if (Render.isWebGL && this.bitmap){
			return this.bitmap.repeat;
		}
		return true;
		},function(value){
		if (value){
			if (Render.isWebGL && this.bitmap){
				this.bitmap.repeat=value;
				if (value){
					this.bitmap.enableMerageInAtlas=false;
				}
			}
		}
	});

	/**实际高度。*/
	__getset(0,__proto,'height',function(){
		if (this._h)return this._h;
		return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[5]-this.uv[1])*this.bitmap.height :this.bitmap.height;
		},function(value){
		this._h=value;
		this.sourceHeight || (this.sourceHeight=value);
	});

	/**
	*设置线性采样的状态（目前只能第一次绘制前设置false生效,来关闭线性采样）。
	*/
	/**
	*获取当前纹理是否启用了线性采样。
	*/
	__getset(0,__proto,'isLinearSampling',function(){
		return Render.isWebGL ? (this.bitmap.minFifter !=0x2600):true;
		},function(value){
		if (!value && Render.isWebGL){
			if (!value && (this.bitmap.minFifter==-1)&& (this.bitmap.magFifter==-1)){
				this.bitmap.minFifter=0x2600;
				this.bitmap.magFifter=0x2600;
				this.bitmap.enableMerageInAtlas=false;
			}
		}
	});

	Texture.moveUV=function(offsetX,offsetY,uv){
		for (var i=0;i < 8;i+=2){
			uv[i]+=offsetX;
			uv[i+1]+=offsetY;
		}
		return uv;
	}

	Texture.create=function(source,x,y,width,height,offsetX,offsetY,sourceWidth,sourceHeight){
		(offsetX===void 0)&& (offsetX=0);
		(offsetY===void 0)&& (offsetY=0);
		(sourceWidth===void 0)&& (sourceWidth=0);
		(sourceHeight===void 0)&& (sourceHeight=0);
		var btex=(source instanceof laya.resource.Texture );
		var uv=btex ? source.uv :Texture.DEF_UV;
		var bitmap=btex ? source.bitmap :source;
		var bIsAtlas=RunDriver.isAtlas(bitmap);
		if (bIsAtlas){
			var atlaser=bitmap._atlaser;
			var nAtlasID=(source)._atlasID;
			if (nAtlasID==-1){
				throw new Error("create texture error");
			}
			bitmap=atlaser._inAtlasTextureBitmapValue[nAtlasID];
			uv=atlaser._inAtlasTextureOriUVValue[nAtlasID];
		};
		var tex=new Texture(bitmap,null);
		if (bitmap.width && (x+width)> bitmap.width)width=bitmap.width-x;
		if (bitmap.height && (y+height)> bitmap.height)height=bitmap.height-y;
		tex.width=width;
		tex.height=height;
		tex.offsetX=offsetX;
		tex.offsetY=offsetY;
		tex.sourceWidth=sourceWidth || width;
		tex.sourceHeight=sourceHeight || height;
		var dwidth=1 / bitmap.width;
		var dheight=1 / bitmap.height;
		x *=dwidth;
		y *=dheight;
		width *=dwidth;
		height *=dheight;
		var u1=tex.uv[0],v1=tex.uv[1],u2=tex.uv[4],v2=tex.uv[5];
		var inAltasUVWidth=(u2-u1),inAltasUVHeight=(v2-v1);
		var oriUV=Texture.moveUV(uv[0],uv[1],[x,y,x+width,y,x+width,y+height,x,y+height]);
		tex.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
		if (bIsAtlas){
			tex.addTextureToAtlas();
		};
		var bitmapScale=bitmap.scaleRate;
		if (bitmapScale && bitmapScale !=1){
			tex.sourceWidth /=bitmapScale;
			tex.sourceHeight /=bitmapScale;
			tex.width /=bitmapScale;
			tex.height /=bitmapScale;
			tex.scaleRate=bitmapScale;
			tex.offsetX /=bitmapScale;
			tex.offsetY /=bitmapScale;
			}else{
			tex.scaleRate=1;
		}
		return tex;
	}

	Texture.createFromTexture=function(texture,x,y,width,height){
		var texScaleRate=texture.scaleRate;
		if (texScaleRate !=1){
			x *=texScaleRate;
			y *=texScaleRate;
			width *=texScaleRate;
			height *=texScaleRate;
		};
		var offset=(!Render.isWebGL && Browser.onFirefox || Browser.onEdge)? 0.5 :0;
		var rect=Rectangle.TEMP.setTo(x-texture.offsetX-offset,y-texture.offsetY-offset,width+offset *2,height+offset *2);
		var result=rect.intersection(Texture._rect1.setTo(0,0,texture.width,texture.height),Texture._rect2);
		if (result)
			var tex=Texture.create(texture,result.x,result.y,result.width,result.height,result.x-rect.x,result.y-rect.y,width,height);
		else return null;
		tex.bitmap._removeReference();
		return tex;
	}

	__static(Texture,
	['DEF_UV',function(){return this.DEF_UV=[0,0,1.0,0,1.0,1.0,0,1.0];},'INV_UV',function(){return this.INV_UV=[0,1,1.0,1,1.0,0.0,0,0.0];},'_rect1',function(){return this._rect1=new Rectangle();},'_rect2',function(){return this._rect2=new Rectangle();}
	]);
	return Texture;
})(EventDispatcher)


/**
*<code>TimeLine</code> 是一个用来创建时间轴动画的类。
*/
//class laya.utils.TimeLine extends laya.events.EventDispatcher
var TimeLine=(function(_super){
	var tweenData;
	function TimeLine(){
		this._labelDic=null;
		this._tweenDic={};
		this._tweenDataList=[];
		this._endTweenDataList=null;
		//以结束时间进行排序
		this._currTime=0;
		this._lastTime=0;
		this._startTime=0;
		/**当前动画数据播放到第几个了*/
		this._index=0;
		/**为TWEEN创建属于自己的唯一标识，方便管理*/
		this._gidIndex=0;
		/**保留所有对象第一次注册动画时的状态（根据时间跳转时，需要把对象的回复，再计算接下来的状态）*/
		this._firstTweenDic={};
		/**是否需要排序*/
		this._startTimeSort=false;
		this._endTimeSort=false;
		/**是否循环*/
		this._loopKey=false;
		/**缩放动画播放的速度。*/
		this.scale=1;
		this._frameRate=60;
		this._frameIndex=0;
		this._total=0;
		TimeLine.__super.call(this);
	}

	__class(TimeLine,'laya.utils.TimeLine',_super);
	var __proto=TimeLine.prototype;
	/**
	*控制一个对象，从当前点移动到目标点。
	*@param target 要控制的对象。
	*@param props 要控制对象的属性。
	*@param duration 对象TWEEN的时间。
	*@param ease 缓动类型
	*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）。
	*/
	__proto.to=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return this._create(target,props,duration,ease,offset,true);
	}

	/**
	*从 props 属性，缓动到当前状态。
	*@param target target 目标对象(即将更改属性值的对象)
	*@param props 要控制对象的属性
	*@param duration 对象TWEEN的时间
	*@param ease 缓动类型
	*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）
	*/
	__proto.from=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return this._create(target,props,duration,ease,offset,false);
	}

	/**@private */
	__proto._create=function(target,props,duration,ease,offset,isTo){
		var tTweenData=Pool.getItemByClass("tweenData",tweenData);
		tTweenData.isTo=isTo;
		tTweenData.type=0;
		tTweenData.target=target;
		tTweenData.duration=duration;
		tTweenData.data=props;
		tTweenData.startTime=this._startTime+offset;
		tTweenData.endTime=tTweenData.startTime+tTweenData.duration;
		tTweenData.ease=ease;
		this._startTime=Math.max(tTweenData.endTime,this._startTime);
		this._tweenDataList.push(tTweenData);
		this._startTimeSort=true;
		this._endTimeSort=true;
		return this;
	}

	/**
	*在时间队列中加入一个标签。
	*@param label 标签名称。
	*@param offset 标签相对于上个动画的偏移时间(单位：毫秒)。
	*/
	__proto.addLabel=function(label,offset){
		var tTweenData=Pool.getItemByClass("tweenData",tweenData);
		tTweenData.type=1;
		tTweenData.data=label;
		tTweenData.endTime=tTweenData.startTime=this._startTime+offset;
		this._labelDic || (this._labelDic={});
		this._labelDic[label]=tTweenData;
		this._tweenDataList.push(tTweenData);
		return this;
	}

	/**
	*移除指定的标签
	*@param label
	*/
	__proto.removeLabel=function(label){
		if (this._labelDic && this._labelDic[label]){
			var tTweenData=this._labelDic[label];
			if (tTweenData){
				var tIndex=this._tweenDataList.indexOf(tTweenData);
				if (tIndex >-1){
					this._tweenDataList.splice(tIndex,1);
				}
			}
			delete this._labelDic[label];
		}
	}

	/**
	*动画从整个动画的某一时间开始。
	*@param time(单位：毫秒)。
	*/
	__proto.gotoTime=function(time){
		if (this._tweenDataList==null || this._tweenDataList.length==0)return;
		var tTween;
		var tObject;
		for (var p in this._firstTweenDic){
			tObject=this._firstTweenDic[p];
			if (tObject){
				for (var tDataP in tObject){
					if (tObject.diyTarget.hasOwnProperty(tDataP)){
						tObject.diyTarget[tDataP]=tObject[tDataP];
					}
				}
			}
		}
		for (p in this._tweenDic){
			tTween=this._tweenDic[p];
			tTween.clear();
			delete this._tweenDic[p];
		}
		this._index=0;
		this._gidIndex=0;
		this._currTime=time;
		this._lastTime=Browser.now();
		var tTweenDataCopyList;
		if (this._endTweenDataList==null || this._endTimeSort){
			this._endTimeSort=false;
			this._endTweenDataList=tTweenDataCopyList=this._tweenDataList.concat();
			function Compare (paraA,paraB){
				if (paraA.endTime > paraB.endTime){
					return 1;
					}else if (paraA.endTime < paraB.endTime){
					return-1;
					}else {
					return 0;
				}
			}
			tTweenDataCopyList.sort(Compare);
			}else {
			tTweenDataCopyList=this._endTweenDataList
		};
		var tTweenData;
		for (var i=0,n=tTweenDataCopyList.length;i < n;i++){
			tTweenData=tTweenDataCopyList[i];
			if (tTweenData.type==0){
				if (time >=tTweenData.endTime){
					this._index=Math.max(this._index,i+1);
					var props=tTweenData.data;
					if (tTweenData.isTo){
						for (var tP in props){
							tTweenData.target[tP]=props[tP];
						}
					}
					}else {
					break ;
				}
			}
		}
		for (i=0,n=this._tweenDataList.length;i < n;i++){
			tTweenData=this._tweenDataList[i];
			if (tTweenData.type==0){
				if (time >=tTweenData.startTime && time < tTweenData.endTime){
					this._index=Math.max(this._index,i+1);
					this._gidIndex++;
					tTween=Pool.getItemByClass("tween",Tween);
					tTween._create(tTweenData.target,tTweenData.data,tTweenData.duration,tTweenData.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,false,tTweenData.isTo,true,false);
					tTween.setStartTime(this._currTime-(time-tTweenData.startTime));
					tTween._updateEase(this._currTime);
					tTween.gid=this._gidIndex;
					this._tweenDic[this._gidIndex]=tTween;
				}
			}
		}
	}

	/**
	*从指定的标签开始播。
	*@param Label 标签名。
	*/
	__proto.gotoLabel=function(Label){
		if (this._labelDic==null)return;
		var tLabelData=this._labelDic[Label];
		if (tLabelData)this.gotoTime(tLabelData.startTime);
	}

	/**
	*暂停整个动画。
	*/
	__proto.pause=function(){
		Laya.timer.clear(this,this._update);
	}

	/**
	*恢复暂停动画的播放。
	*/
	__proto.resume=function(){
		this.play(this._currTime,this._loopKey);
	}

	/**
	*播放动画。
	*@param timeOrLabel 开启播放的时间点或标签名。
	*@param loop 是否循环播放。
	*/
	__proto.play=function(timeOrLabel,loop){
		(timeOrLabel===void 0)&& (timeOrLabel=0);
		(loop===void 0)&& (loop=false);
		if (!this._tweenDataList)return;
		if (this._startTimeSort){
			this._startTimeSort=false;
			function Compare (paraA,paraB){
				if (paraA.startTime > paraB.startTime){
					return 1;
					}else if (paraA.startTime < paraB.startTime){
					return-1;
					}else {
					return 0;
				}
			}
			this._tweenDataList.sort(Compare);
			for (var i=0,n=this._tweenDataList.length;i < n;i++){
				var tTweenData=this._tweenDataList[i];
				if (tTweenData !=null && tTweenData.type==0){
					var tTarget=tTweenData.target;
					var gid=(tTarget.$_GID || (tTarget.$_GID=Utils.getGID()));
					var tSrcData=null;
					if (this._firstTweenDic[gid]==null){
						tSrcData={};
						tSrcData.diyTarget=tTarget;
						this._firstTweenDic[gid]=tSrcData;
						}else {
						tSrcData=this._firstTweenDic[gid];
					}
					for (var p in tTweenData.data){
						if (tSrcData[p]==null){
							tSrcData[p]=tTarget[p];
						}
					}
				}
			}
		}
		if ((typeof timeOrLabel=='string')){
			this.gotoLabel(timeOrLabel);
			}else {
			this.gotoTime(timeOrLabel);
		}
		this._loopKey=loop;
		this._lastTime=Browser.now();
		Laya.timer.frameLoop(1,this,this._update);
	}

	/**
	*更新当前动画。
	*/
	__proto._update=function(){
		if (this._currTime >=this._startTime){
			if (this._loopKey){
				this._complete();
				if (!this._tweenDataList)return;
				this.gotoTime(0);
				}else {
				for (var p in this._tweenDic){
					tTween=this._tweenDic[p];
					tTween.complete();
				}
				this._complete();
				this.pause();
				return;
			}
		};
		var tNow=Browser.now();
		var tFrameTime=tNow-this._lastTime;
		var tCurrTime=this._currTime+=tFrameTime *this.scale;
		this._lastTime=tNow;
		for (p in this._tweenDic){
			tTween=this._tweenDic[p];
			tTween._updateEase(tCurrTime);
		};
		var tTween;
		if (this._tweenDataList.length !=0 && this._index < this._tweenDataList.length){
			var tTweenData=this._tweenDataList[this._index];
			if (tCurrTime >=tTweenData.startTime){
				this._index++;
				if (tTweenData.type==0){
					this._gidIndex++;
					tTween=Pool.getItemByClass("tween",Tween);
					tTween._create(tTweenData.target,tTweenData.data,tTweenData.duration,tTweenData.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,false,tTweenData.isTo,true,false);
					tTween.setStartTime(tCurrTime);
					tTween.gid=this._gidIndex;
					this._tweenDic[this._gidIndex]=tTween;
					tTween._updateEase(tCurrTime);
					}else {
					this.event(/*laya.events.Event.LABEL*/"label",tTweenData.data);
				}
			}
		}
	}

	/**
	*指定的动画索引处的动画播放完成后，把此动画从列表中删除。
	*@param index
	*/
	__proto._animComplete=function(index){
		var tTween=this._tweenDic[index];
		if (tTween)delete this._tweenDic[index];
	}

	/**@private */
	__proto._complete=function(){
		this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	/**
	*重置所有对象，复用对象的时候使用。
	*/
	__proto.reset=function(){
		var p;
		if (this._labelDic){
			for (p in this._labelDic){
				delete this._labelDic[p];
			}
		};
		var tTween;
		for (p in this._tweenDic){
			tTween=this._tweenDic[p];
			tTween.clear();
			delete this._tweenDic[p];
		}
		for (p in this._firstTweenDic){
			delete this._firstTweenDic[p];
		}
		this._endTweenDataList=null;
		if (this._tweenDataList && this._tweenDataList.length){
			var i=0,len=0;
			len=this._tweenDataList.length;
			for (i=0;i < len;i++){
				if(this._tweenDataList[i])
					this._tweenDataList[i].destroy();
			}
		}
		this._tweenDataList.length=0;
		this._currTime=0;
		this._lastTime=0;
		this._startTime=0;
		this._index=0;
		this._gidIndex=0;
		this.scale=1;
		Laya.timer.clear(this,this._update);
	}

	/**
	*彻底销毁此对象。
	*/
	__proto.destroy=function(){
		this.reset();
		this._labelDic=null;
		this._tweenDic=null;
		this._tweenDataList=null;
		this._firstTweenDic=null;
	}

	/**
	*@private
	*设置帧索引
	*/
	/**
	*@private
	*得到帧索引
	*/
	__getset(0,__proto,'index',function(){
		return this._frameIndex;
		},function(value){
		this._frameIndex=value;
		this.gotoTime(this._frameIndex / this._frameRate *1000);
	});

	/**
	*得到总帧数。
	*/
	__getset(0,__proto,'total',function(){
		this._total=Math.floor(this._startTime / 1000 *this._frameRate);
		return this._total;
	});

	TimeLine.to=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return (new TimeLine()).to(target,props,duration,ease,offset);
	}

	TimeLine.from=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return (new TimeLine()).from(target,props,duration,ease,offset);
	}

	TimeLine.__init$=function(){
		//class tweenData
		tweenData=(function(){
			function tweenData(){
				this.type=0;
				//0代表TWEEN,1代表标签
				this.isTo=true;
				this.startTime=NaN;
				this.endTime=NaN;
				this.target=null;
				this.duration=NaN;
				this.ease=null;
				this.data=null;
			}
			__class(tweenData,'');
			var __proto=tweenData.prototype;
			__proto.destroy=function(){
				this.target=null;
				this.ease=null;
				this.data=null;
				this.isTo=true;
				this.type=0;
				Pool.recover("tweenData",this);
			}
			return tweenData;
		})()
	}

	return TimeLine;
})(EventDispatcher)


/**
*<p> <code>Sprite</code> 是基本的显示图形的显示列表节点。 <code>Sprite</code> 默认没有宽高，默认不接受鼠标事件。通过 <code>graphics</code> 可以绘制图片或者矢量图，支持旋转，缩放，位移等操作。<code>Sprite</code>同时也是容器类，可用来添加多个子节点。</p>
*<p>注意： <code>Sprite</code> 默认没有宽高，可以通过<code>getBounds</code>函数获取；也可手动设置宽高；还可以设置<code>autoSize=true</code>，然后再获取宽高。<code>Sprite</code>的宽高一般用于进行碰撞检测和排版，并不影响显示图像大小，如果需要更改显示图像大小，请使用 <code>scaleX</code> ， <code>scaleY</code> ， <code>scale</code>。</p>
*<p> <code>Sprite</code> 默认不接受鼠标事件，即<code>mouseEnabled=false</code>，但是只要对其监听任意鼠标事件，会自动打开自己以及所有父对象的<code>mouseEnabled=true</code>。所以一般也无需手动设置<code>mouseEnabled</code>。</p>
*<p>LayaAir引擎API设计精简巧妙。核心显示类只有一个<code>Sprite</code>。<code>Sprite</code>针对不同的情况做了渲染优化，所以保证一个类实现丰富功能的同时，又达到高性能。</p>
*
*@example <caption>创建了一个 <code>Sprite</code> 实例。</caption>
*package
*{
	*import laya.display.Sprite;
	*import laya.events.Event;
	*
	*public class Sprite_Example
	*{
		*private var sprite:Sprite;
		*private var shape:Sprite
		*public function Sprite_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
			*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
			*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
			*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
			*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
			*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
			*shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
			*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
			*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
			*shape.width=100;//设置 shape 对象的宽度。
			*shape.height=100;//设置 shape 对象的高度。
			*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
			*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
			*shape.on(Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
			*}
		*private function onClickSprite():void
		*{
			*trace("点击 sprite 对象。");
			*sprite.rotation+=5;//旋转 sprite 对象。
			*}
		*private function onClickShape():void
		*{
			*trace("点击 shape 对象。");
			*shape.rotation+=5;//旋转 shape 对象。
			*}
		*}
	*}
*
*@example
*var sprite;
*var shape;
*Sprite_Example();
*function Sprite_Example()
*{
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*onInit();
	*}
*function onInit()
*{
	*sprite=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
	*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
	*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
	*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
	*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
	*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
	*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
	*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
	*shape=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
	*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
	*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
	*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
	*shape.width=100;//设置 shape 对象的宽度。
	*shape.height=100;//设置 shape 对象的高度。
	*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
	*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
	*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
	*shape.on(laya.events.Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
	*}
*function onClickSprite()
*{
	*console.log("点击 sprite 对象。");
	*sprite.rotation+=5;//旋转 sprite 对象。
	*}
*function onClickShape()
*{
	*console.log("点击 shape 对象。");
	*shape.rotation+=5;//旋转 shape 对象。
	*}
*
*@example
*import Sprite=laya.display.Sprite;
*class Sprite_Example {
	*private sprite:Sprite;
	*private shape:Sprite
	*public Sprite_Example(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*this.sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*this.sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
		*this.sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
		*this.sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
		*this.sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
		*this.sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。
		*this.sprite.on(laya.events.Event.CLICK,this,this.onClickSprite);//给 sprite 对象添加点击事件侦听。
		*this.shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*this.shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
		*this.shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
		*this.shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
		*this.shape.width=100;//设置 shape 对象的宽度。
		*this.shape.height=100;//设置 shape 对象的高度。
		*this.shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
		*this.shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。
		*this.shape.on(laya.events.Event.CLICK,this,this.onClickShape);//给 shape 对象添加点击事件侦听。
		*}
	*private onClickSprite():void {
		*console.log("点击 sprite 对象。");
		*this.sprite.rotation+=5;//旋转 sprite 对象。
		*}
	*private onClickShape():void {
		*console.log("点击 shape 对象。");
		*this.shape.rotation+=5;//旋转 shape 对象。
		*}
	*}
*/
//class laya.display.Sprite extends laya.display.Node
var Sprite=(function(_super){
	function Sprite(){
		/**@private 矩阵变换信息。*/
		this._transform=null;
		/**@private */
		this._tfChanged=false;
		/**@private */
		this._x=0;
		/**@private */
		this._y=0;
		/**@private */
		this._width=0;
		/**@private */
		this._height=0;
		/**@private */
		this._repaint=1;
		/**@private 鼠标状态，0:auto,1:mouseEnabled=false,2:mouseEnabled=true。*/
		this._mouseEnableState=0;
		/**@private Z排序，数值越大越靠前。*/
		this._zOrder=0;
		/**@private */
		this._graphics=null;
		/**@private */
		this._renderType=0;
		/**@private */
		this._optimizeScrollRect=false;
		/**@private */
		this._texture=null;
		/**
		*<p>鼠标事件与此对象的碰撞检测是否可穿透。碰撞检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>
		*<p>穿透表示鼠标事件发生的位置处于本对象绘图区域内时，才算命中，而与对象宽高和值为Rectangle对象的hitArea属性无关。如果sprite.hitArea值是HitArea对象，表示显式声明了此对象的鼠标事件响应区域，而忽略对象的宽高、mouseThrough属性。</p>
		*<p>影响对象鼠标事件响应区域的属性为：width、height、hitArea，优先级顺序为：hitArea(type:HitArea)>hitArea(type:Rectangle)>width/height。</p>
		*@default false 不可穿透，此对象的鼠标响应区域由width、height、hitArea属性决定。</p>
		*/
		this.mouseThrough=false;
		/**
		*<p>指定是否自动计算宽高数据。默认值为 false 。</p>
		*<p>Sprite宽高默认为0，并且不会随着绘制内容的变化而变化，如果想根据绘制内容获取宽高，可以设置本属性为true，或者通过getBounds方法获取。设置为true，对性能有一定影响。</p>
		*/
		this.autoSize=false;
		/**
		*<p>指定鼠标事件检测是优先检测自身，还是优先检测其子对象。鼠标事件检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>
		*<p>如果为false，优先检测子对象，当有子对象被命中时，中断检测，获得命中目标。如果未命中任何子对象，最后再检测此对象；如果为true，则优先检测本对象，如果本对象没有被命中，直接中断检测，表示没有命中目标；如果本对象被命中，则进一步递归检测其子对象，以确认最终的命中目标。</p>
		*<p>合理使用本属性，能减少鼠标事件检测的节点，提高性能。可以设置为true的情况：开发者并不关心此节点的子节点的鼠标事件检测结果，也就是以此节点作为其子节点的鼠标事件检测依据。</p>
		*<p>Stage对象和UI的View组件默认为true。</p>
		*@default false 优先检测此对象的子对象，当递归检测完所有子对象后，仍然没有找到目标对象，最后再检测此对象。
		*/
		this.hitTestPrior=false;
		/**
		*<p>视口大小，视口外的子对象，将不被渲染(如果想实现裁剪效果，请使用srollRect)，合理使用能提高渲染性能。比如由一个个小图片拼成的地图块，viewport外面的小图片将不渲染</p>
		*<p>srollRect和viewport的区别：<br/>
		*1. srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
		*2. 设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
		*@default null
		*/
		this.viewport=null;
		Sprite.__super.call(this);
		this._style=Style.EMPTY;
	}

	__class(Sprite,'laya.display.Sprite',_super);
	var __proto=Sprite.prototype;
	Laya.imps(__proto,{"laya.display.ILayout":true})
	/**@private */
	__proto.createConchModel=function(){
		return /*__JS__ */new ConchNode();
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._releaseMem();
		_super.prototype.destroy.call(this,destroyChild);
		this._style && this._style.destroy();
		this._transform && this._transform.destroy();
		this._transform=null;
		this._style=null;
		this._graphics=null;
	}

	/**根据zOrder进行重新排序。*/
	__proto.updateZOrder=function(){
		Utils.updateOrder(this._childs)&& this.repaint();
	}

	/**在设置cacheAs的情况下，调用此方法会重新刷新缓存。*/
	__proto.reCache=function(){
		if (this._$P.cacheCanvas)this._$P.cacheCanvas.reCache=true;
		this._repaint=1;
	}

	/**
	*<p>设置对象在自身坐标系下的边界范围。与 <code>getSelfBounds</code> 对应。当 autoSize==true 时，会影响对象宽高。设置后，当需要获取自身边界范围时，就不再需要计算，合理使用能提高性能。比如 <code>getBounds</code> 会优先使用 <code>setBounds</code> 指定的值，如果没有指定则进行计算，此计算会对性能消耗比较大。</p>
	*<p><b>注意：</b> <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
	*@param bound bounds矩形区域
	*/
	__proto.setBounds=function(bound){
		this._set$P("uBounds",bound);
	}

	/**
	*<p>获取本对象在父容器坐标系的矩形显示区域。</p>
	*<p><b>注意：</b> 1.计算量较大，尽量少用，如果需要频繁使用，可以通过手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。2. <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
	*@return 矩形区域。
	*/
	__proto.getBounds=function(){
		if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
		return Rectangle._getWrapRec(this._boundPointsToParent(),this._$P.mBounds);
	}

	/**
	*获取对象在自身坐标系的边界范围。与 <code>setBounds</code> 对应。
	*<p><b>注意：</b>计算量较大，尽量少用，如果需要频繁使用，可以提前手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。</p>
	*@return 矩形区域。
	*/
	__proto.getSelfBounds=function(){
		if (this._$P.uBounds)return this._$P.uBounds;
		if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
		return Rectangle._getWrapRec(this._getBoundPointsM(false),this._$P.mBounds);
	}

	/**
	*@private
	*获取本对象在父容器坐标系的显示区域多边形顶点列表。
	*当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。
	*@param ifRotate （可选）之前的对象链中是否有旋转。
	*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
	*/
	__proto._boundPointsToParent=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		var pX=0,pY=0;
		if (this._style){
			pX=this._style._tf.translateX;
			pY=this._style._tf.translateY;
			ifRotate=ifRotate || (this._style._tf.rotate!==0);
			if (this._style.scrollRect){
				pX+=this._style.scrollRect.x;
				pY+=this._style.scrollRect.y;
			}
		};
		var pList=this._getBoundPointsM(ifRotate);
		if (!pList || pList.length < 1)return pList;
		if (pList.length !=8){
			pList=ifRotate ? GrahamScan.scanPList(pList):Rectangle._getWrapRec(pList,Rectangle.TEMP)._getBoundPoints();
		}
		if (!this.transform){
			Utils.transPointList(pList,this._x-pX,this._y-pY);
			return pList;
		};
		var tPoint=Point.TEMP;
		var i=0,len=pList.length;
		for (i=0;i < len;i+=2){
			tPoint.x=pList[i];
			tPoint.y=pList[i+1];
			this.toParentPoint(tPoint);
			pList[i]=tPoint.x;
			pList[i+1]=tPoint.y;
		}
		return pList;
	}

	/**
	*返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 一个 Rectangle 对象，表示获取到的显示区域。
	*/
	__proto.getGraphicBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._graphics)return Rectangle.TEMP.setTo(0,0,0,0);
		return this._graphics.getBounds(realSize);
	}

	/**
	*@private
	*获取自己坐标系的显示区域多边形顶点列表
	*@param ifRotate （可选）当前的显示对象链是否由旋转
	*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
	*/
	__proto._getBoundPointsM=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		if (this._$P.uBounds)return this._$P.uBounds._getBoundPoints();
		if (!this._$P.temBM)this._set$P("temBM",[]);
		if (this.scrollRect){
			var rst=Utils.clearArray(this._$P.temBM);
			var rec=Rectangle.TEMP;
			rec.copyFrom(this.scrollRect);
			Utils.concatArray(rst,rec._getBoundPoints());
			return rst;
		};
		var pList=this._graphics ? this._graphics.getBoundPoints():Utils.clearArray(this._$P.temBM);
		var child;
		var cList;
		var __childs;
		__childs=this._childs;
		for (var i=0,n=__childs.length;i < n;i++){
			child=__childs [i];
			if ((child instanceof laya.display.Sprite )&& child.visible==true){
				cList=child._boundPointsToParent(ifRotate);
				if (cList)
					pList=pList ? Utils.concatArray(pList,cList):cList;
			}
		}
		return pList;
	}

	/**
	*@private
	*获取样式。
	*@return 样式 Style 。
	*/
	__proto.getStyle=function(){
		this._style===Style.EMPTY && (this._style=new Style());
		return this._style;
	}

	/**
	*@private
	*设置样式。
	*@param value 样式。
	*/
	__proto.setStyle=function(value){
		this._style=value;
	}

	/**@private */
	__proto._adjustTransform=function(){
		'use strict';
		this._tfChanged=false;
		var style=this._style;
		var tf=style._tf;
		var sx=tf.scaleX,sy=tf.scaleY;
		var m;
		if (tf.rotate || sx!==1 || sy!==1 || tf.skewX || tf.skewY){
			m=this._transform || (this._transform=Matrix.create());
			m.bTransform=true;
			var skx=(tf.rotate-tf.skewX)*0.0174532922222222;
			var sky=(tf.rotate+tf.skewY)*0.0174532922222222;
			var cx=Math.cos(sky);
			var ssx=Math.sin(sky);
			var cy=Math.sin(skx);
			var ssy=Math.cos(skx);
			m.a=sx *cx;
			m.b=sx *ssx;
			m.c=-sy *cy;
			m.d=sy *ssy;
			m.tx=m.ty=0;
			return m;
			}else {
			this._transform && this._transform.destroy();
			this._transform=null;
			this._renderType &=~ /*laya.renders.RenderSprite.TRANSFORM*/0x04;
		}
		return m;
	}

	/**
	*<p>设置坐标位置。相当于分别设置x和y属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*@param speedMode （可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。
	*@return 返回对象本身。
	*/
	__proto.pos=function(x,y,speedMode){
		(speedMode===void 0)&& (speedMode=false);
		if (this._x!==x || this._y!==y){
			if (this.destroyed)return this;
			if (speedMode){
				this._x=x;
				this._y=y;
				this.conchModel && this.conchModel.pos(this._x,this._y);
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint===0){
					this._$P.maskParent._repaint=1;
					this._$P.maskParent.parentRepaint();
				}
				}else {
				this.x=x;
				this.y=y;
			}
		}
		return this;
	}

	/**
	*<p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(...);</p>
	*@param x X轴心点。
	*@param y Y轴心点。
	*@return 返回对象本身。
	*/
	__proto.pivot=function(x,y){
		this.pivotX=x;
		this.pivotY=y;
		return this;
	}

	/**
	*<p>设置宽高。相当于分别设置width和height属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(...);</p>
	*@param width 宽度值。
	*@param hegiht 高度值。
	*@return 返回对象本身。
	*/
	__proto.size=function(width,height){
		this.width=width;
		this.height=height;
		return this;
	}

	/**
	*<p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(...);</p>
	*@param scaleX X轴缩放比例。
	*@param scaleY Y轴缩放比例。
	*@param speedMode （可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。
	*@return 返回对象本身。
	*/
	__proto.scale=function(scaleX,scaleY,speedMode){
		(speedMode===void 0)&& (speedMode=false);
		var style=this.getStyle();
		var _tf=style._tf;
		if (_tf.scaleX !=scaleX || _tf.scaleY !=scaleY){
			if (this.destroyed)return this;
			if (speedMode){
				style.setScale(scaleX,scaleY);
				this._tfChanged=true;
				this.conchModel && this.conchModel.scale(scaleX,scaleY);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				}else {
				this.scaleX=scaleX;
				this.scaleY=scaleY;
			}
		}
		return this;
	}

	/**
	*<p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(...);</p>
	*@param skewX 水平倾斜角度。
	*@param skewY 垂直倾斜角度。
	*@return 返回对象本身
	*/
	__proto.skew=function(skewX,skewY){
		this.skewX=skewX;
		this.skewY=skewY;
		return this;
	}

	/**
	*更新、呈现显示对象。由系统调用。
	*@param context 渲染的上下文引用。
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*/
	__proto.render=function(context,x,y){
		Stat.spriteCount++;
		RenderSprite.renders[this._renderType]._fun(this,context,x+this._x,y+this._y);
		this._repaint=0;
	}

	/**
	*<p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>
	*<p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>
	*
	*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
	*var texture:Texture=new Texture(htmlCanvas);//使用htmlCanvas创建Texture
	*var sp:Sprite=new Sprite().pos(0,200);//创建精灵并把它放倒200位置
	*sp.graphics.drawTexture(texture);//把截图绘制到精灵上
	*Laya.stage.addChild(sp);//把精灵显示到舞台
	*
	*<p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>
	*
	*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
	*
	*htmlCanvas.toBase64("image/png",0.92,function(base64){//webgl和canvas模式下为同步方法，加速器下是异步方法
		*trace(base64);//打印图片base64信息，可以发给服务器或者保存为图片
		*});
	*
	*@param canvasWidth 画布宽度。
	*@param canvasHeight 画布高度。
	*@param x 绘制的 X 轴偏移量。
	*@param y 绘制的 Y 轴偏移量。
	*@return HTMLCanvas 对象。
	*/
	__proto.drawToCanvas=function(canvasWidth,canvasHeight,offsetX,offsetY){
		if (Render.isConchNode){
			var canvas=HTMLCanvas.create("2D");
			var context=new RenderContext(canvasWidth,canvasHeight,canvas);
			context.ctx.setCanvasType(1);
			this.conchModel.drawToCanvas(canvas.source,offsetX,offsetY);
			return canvas;
			}else {
			return RunDriver.drawToCanvas(this,this._renderType,canvasWidth,canvasHeight,offsetX,offsetY);
		}
	}

	/**
	*<p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>
	*<p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>
	*@param context 渲染的上下文引用。
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*/
	__proto.customRender=function(context,x,y){
		this._renderType |=/*laya.renders.RenderSprite.CUSTOM*/0x400;
	}

	/**
	*@private
	*应用滤镜。
	*/
	__proto._applyFilters=function(){
		if (Render.isWebGL)return;
		var _filters;
		_filters=this._$P.filters;
		if (!_filters || _filters.length < 1)return;
		for (var i=0,n=_filters.length;i < n;i++){
			_filters[i].action.apply(this._$P.cacheCanvas);
		}
	}

	/**
	*@private
	*查看当前原件中是否包含发光滤镜。
	*@return 一个 Boolean 值，表示当前原件中是否包含发光滤镜。
	*/
	__proto._isHaveGlowFilter=function(){
		var i=0,len=0;
		if (this.filters){
			for (i=0;i < this.filters.length;i++){
				if (this.filters[i].type==/*laya.filters.Filter.GLOW*/0x08){
					return true;
				}
			}
		}
		for (i=0,len=this._childs.length;i < len;i++){
			if (this._childs[i]._isHaveGlowFilter()){
				return true;
			}
		}
		return false;
	}

	/**
	*把本地坐标转换为相对stage的全局坐标。
	*@param point 本地坐标点。
	*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
	*@return 转换后的坐标的点。
	*/
	__proto.localToGlobal=function(point,createNewPoint){
		(createNewPoint===void 0)&& (createNewPoint=false);
		if (createNewPoint===true){
			point=new Point(point.x,point.y);
		};
		var ele=this;
		while (ele){
			if (ele==Laya.stage)break ;
			point=ele.toParentPoint(point);
			ele=ele.parent;
		}
		return point;
	}

	/**
	*把stage的全局坐标转换为本地坐标。
	*@param point 全局坐标点。
	*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
	*@return 转换后的坐标的点。
	*/
	__proto.globalToLocal=function(point,createNewPoint){
		(createNewPoint===void 0)&& (createNewPoint=false);
		if (createNewPoint){
			point=new Point(point.x,point.y);
		};
		var ele=this;
		var list=[];
		while (ele){
			if (ele==Laya.stage)break ;
			list.push(ele);
			ele=ele.parent;
		};
		var i=list.length-1;
		while (i >=0){
			ele=list[i];
			point=ele.fromParentPoint(point);
			i--;
		}
		return point;
	}

	/**
	*将本地坐标系坐标转转换到父容器坐标系。
	*@param point 本地坐标点。
	*@return 转换后的点。
	*/
	__proto.toParentPoint=function(point){
		if (!point)return point;
		point.x-=this.pivotX;
		point.y-=this.pivotY;
		if (this.transform){
			this._transform.transformPoint(point);
		}
		point.x+=this._x;
		point.y+=this._y;
		var scroll=this._style.scrollRect;
		if (scroll){
			point.x-=scroll.x;
			point.y-=scroll.y;
		}
		return point;
	}

	/**
	*将父容器坐标系坐标转换到本地坐标系。
	*@param point 父容器坐标点。
	*@return 转换后的点。
	*/
	__proto.fromParentPoint=function(point){
		if (!point)return point;
		point.x-=this._x;
		point.y-=this._y;
		var scroll=this._style.scrollRect;
		if (scroll){
			point.x+=scroll.x;
			point.y+=scroll.y;
		}
		if (this.transform){
			this._transform.invertTransformPoint(point);
		}
		point.x+=this.pivotX;
		point.y+=this.pivotY;
		return point;
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
			this.mouseEnabled=true;
			this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
			if (this._parent){
				this._$2__onDisplay();
			}
			return this._createListener(type,caller,listener,args,false);
		}
		return _super.prototype.on.call(this,type,caller,listener,args);
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
			this.mouseEnabled=true;
			this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
			if (this._parent){
				this._$2__onDisplay();
			}
			return this._createListener(type,caller,listener,args,true);
		}
		return _super.prototype.once.call(this,type,caller,listener,args);
	}

	/**@private */
	__proto._$2__onDisplay=function(){
		if (this._mouseEnableState!==1){
			var ele=this;
			ele=ele.parent;
			while (ele && ele._mouseEnableState!==1){
				if (ele._getBit(/*laya.display.Node.MOUSEENABLE*/0x2))break ;
				ele.mouseEnabled=true;
				ele._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
				ele=ele.parent;
			}
		}
	}

	/**
	*<p>加载并显示一个图片。功能等同于graphics.loadImage方法。支持异步加载。</p>
	*<p>注意：多次调用loadImage绘制不同的图片，会同时显示。</p>
	*@param url 图片地址。
	*@param x （可选）显示图片的x位置。
	*@param y （可选）显示图片的y位置。
	*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
	*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
	*@param complete （可选）加载完成回调。
	*@return 返回精灵对象本身。
	*/
	__proto.loadImage=function(url,x,y,width,height,complete){
		var _$this=this;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		function loaded (tex){
			if (!_$this.destroyed){
				_$this.size(x+(width || tex.width),y+(height || tex.height));
				_$this.repaint();
				complete && complete.runWith(tex);
			}
		}
		this.graphics.loadImage(url,x,y,width,height,loaded);
		return this;
	}

	/**cacheAs后，设置自己和父对象缓存失效。*/
	__proto.repaint=function(){
		this.conchModel && this.conchModel.repaint && this.conchModel.repaint();
		if (this._repaint===0){
			this._repaint=1;
			this.parentRepaint();
		}
		if (this._$P && this._$P.maskParent){
			this._$P.maskParent.repaint();
		}
	}

	/**
	*@private
	*获取是否重新缓存。
	*@return 如果重新缓存值为 true，否则值为 false。
	*/
	__proto._needRepaint=function(){
		return (this._repaint!==0)&& this._$P.cacheCanvas && this._$P.cacheCanvas.reCache;
	}

	/**@private */
	__proto._childChanged=function(child){
		if (this._childs.length)this._renderType |=/*laya.renders.RenderSprite.CHILDS*/0x800;
		else this._renderType &=~ /*laya.renders.RenderSprite.CHILDS*/0x800;
		if (child && this._get$P("hasZorder"))Laya.timer.callLater(this,this.updateZOrder);
		this.repaint();
	}

	/**cacheAs时，设置所有父对象缓存失效。 */
	__proto.parentRepaint=function(){
		var p=this._parent;
		if (p && p._repaint===0){
			p._repaint=1;
			p.parentRepaint();
		}
	}

	/**
	*开始拖动此对象。
	*@param area （可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
	*@param hasInertia （可选）鼠标松开后，是否还惯性滑动，默认为false，可选。
	*@param elasticDistance （可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
	*@param elasticBackTime （可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
	*@param data （可选）拖动事件携带的数据，可选。
	*@param disableMouseEvent （可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。
	*@param ratio （可选）惯性阻尼系数，影响惯性力度和时长。
	*/
	__proto.startDrag=function(area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
		(hasInertia===void 0)&& (hasInertia=false);
		(elasticDistance===void 0)&& (elasticDistance=0);
		(elasticBackTime===void 0)&& (elasticBackTime=300);
		(disableMouseEvent===void 0)&& (disableMouseEvent=false);
		(ratio===void 0)&& (ratio=0.92);
		this._$P.dragging || (this._set$P("dragging",new Dragging()));
		this._$P.dragging.start(this,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio);
	}

	/**停止拖动此对象。*/
	__proto.stopDrag=function(){
		this._$P.dragging && this._$P.dragging.stop();
	}

	__proto._releaseMem=function(){
		if (!this._$P)return;
		var cc=this._$P.cacheCanvas;
		if (cc && cc.ctx){
			Pool.recover("RenderContext",cc.ctx);
			cc.ctx.canvas.size(0,0);
			cc.ctx=null;
		};
		var fc=this._$P._filterCache;
		if (fc){
			fc.destroy();
			fc.recycle();
			this._set$P('_filterCache',null);
		}
		this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
		this._$P._isHaveGlowFilter=null;
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (!value)this._releaseMem();
		_super.prototype._setDisplay.call(this,value);
	}

	/**
	*检测某个点是否在此对象内。
	*@param x 全局x坐标。
	*@param y 全局y坐标。
	*@return 表示是否在对象内。
	*/
	__proto.hitTestPoint=function(x,y){
		var point=this.globalToLocal(Point.TEMP.setTo(x,y));
		x=point.x;
		y=point.y;
		var rect=this._$P.hitArea ? this._$P.hitArea :(this._width > 0 && this._height > 0)? Rectangle.TEMP.setTo(0,0,this._width,this._height):this.getSelfBounds();
		return rect.contains(x,y);
	}

	/**获得相对于本对象上的鼠标坐标信息。*/
	__proto.getMousePoint=function(){
		return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX,Laya.stage.mouseY));
	}

	/**@private */
	__proto._getWords=function(){
		return null;
	}

	/**@private */
	__proto._addChildsToLayout=function(out){
		var words=this._getWords();
		if (words==null && this._childs.length==0)return false;
		if (words){
			for (var i=0,n=words.length;i < n;i++){
				out.push(words[i]);
			}
		}
		this._childs.forEach(function(o,index,array){
			o._style._enableLayout()&& o._addToLayout(out);
		});
		return true;
	}

	/**@private */
	__proto._addToLayout=function(out){
		if (this._style.absolute)return;
		this._style.block ? out.push(this):(this._addChildsToLayout(out)&& (this.x=this.y=0));
	}

	/**@private */
	__proto._isChar=function(){
		return false;
	}

	/**@private */
	__proto._getCSSStyle=function(){
		return this._style.getCSSStyle();
	}

	/**
	*@private
	*设置指定属性名的属性值。
	*@param name 属性名。
	*@param value 属性值。
	*/
	__proto._setAttributes=function(name,value){
		switch (name){
			case 'x':
				this.x=parseFloat(value);
				break ;
			case 'y':
				this.y=parseFloat(value);
				break ;
			case 'width':
				this.width=parseFloat(value);
				break ;
			case 'height':
				this.height=parseFloat(value);
				break ;
			default :
				this[name]=value;
			}
	}

	/**
	*@private
	*/
	__proto._layoutLater=function(){
		this.parent && (this.parent)._layoutLater();
	}

	/**
	*<p>指定是否对使用了 scrollRect 的显示对象进行优化处理。默认为false(不优化)。</p>
	*<p>当值为ture时：将对此对象使用了scrollRect 设定的显示区域以外的显示内容不进行渲染，以提高性能(如果子对象有旋转缩放或者中心点偏移，则显示筛选会不精确)。</p>
	*/
	__getset(0,__proto,'optimizeScrollRect',function(){
		return this._optimizeScrollRect;
		},function(b){
		if (this._optimizeScrollRect !=b){
			this._optimizeScrollRect=b;
			this.conchModel && this.conchModel.optimizeScrollRect(b);
		}
	});

	/**
	*设置是否开启自定义渲染，只有开启自定义渲染，才能使用customRender函数渲染。
	*/
	__getset(0,__proto,'customRenderEnable',null,function(b){
		if (b){
			this._renderType |=/*laya.renders.RenderSprite.CUSTOM*/0x400;
			if (Render.isConchNode){
				Sprite.CustomList.push(this);
				var canvas=new HTMLCanvas("2d");
				canvas._setContext(/*__JS__ */new CanvasRenderingContext2D());
				/*__JS__ */this.customContext=new RenderContext(0,0,canvas);
				canvas.context.setCanvasType && canvas.context.setCanvasType(2);
				this.conchModel.custom(canvas.context);
			}
		}
	});

	/**
	*指定显示对象是否缓存为静态图像。功能同cacheAs的normal模式。建议优先使用cacheAs代替。
	*/
	__getset(0,__proto,'cacheAsBitmap',function(){
		return this.cacheAs!=="none";
		},function(value){
		this.cacheAs=value ? (this._$P["hasFilter"] ? "none" :"normal"):"none";
	});

	/**
	*<p>指定显示对象是否缓存为静态图像，cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。</p>
	*<p>建议把不经常变化的“复杂内容”缓存为静态图像，能极大提高渲染性能。cacheAs有"none"，"normal"和"bitmap"三个值可选。
	*<li>默认为"none"，不做任何缓存。</li>
	*<li>当值为"normal"时，canvas模式下进行画布缓存，webgl模式下进行命令缓存。</li>
	*<li>当值为"bitmap"时，canvas模式下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</li></p>
	*<p>webgl下renderTarget缓存模式缺点：会额外创建renderTarget对象，增加内存开销，缓存面积有最大2048限制，不断重绘时会增加CPU开销。优点：大幅减少drawcall，渲染性能最高。
	*webgl下命令缓存模式缺点：只会减少节点遍历及命令组织，不会减少drawcall数，性能中等。优点：没有额外内存开销，无需renderTarget支持。</p>
	*/
	__getset(0,__proto,'cacheAs',function(){
		return this._$P.cacheCanvas==null ? "none" :this._$P.cacheCanvas.type;
		},function(value){
		var cacheCanvas=this._$P.cacheCanvas;
		if (value===(cacheCanvas ? cacheCanvas.type :"none"))return;
		if (value!=="none"){
			if (!this._getBit(/*laya.display.Node.NOTICE_DISPLAY*/0x1))this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
			cacheCanvas || (cacheCanvas=this._set$P("cacheCanvas",Pool.getItemByClass("cacheCanvas",Object)));
			cacheCanvas.type=value;
			cacheCanvas.reCache=true;
			this._renderType |=/*laya.renders.RenderSprite.CANVAS*/0x10;
			if (value=="bitmap")this.conchModel && this.conchModel.cacheAs(1);
			this._set$P("cacheForFilters",false);
			}else {
			if (this._$P["hasFilter"]){
				this._set$P("cacheForFilters",true);
				}else {
				if (cacheCanvas){
					var cc=cacheCanvas;
					if (cc && cc.ctx){
						Pool.recover("RenderContext",cc.ctx);
						cc.ctx.canvas.size(0,0);
						cc.ctx=null;
					}
					Pool.recover("cacheCanvas",cacheCanvas);
				}
				this._$P.cacheCanvas=null;
				this._renderType &=~ /*laya.renders.RenderSprite.CANVAS*/0x10;
				this.conchModel && this.conchModel.cacheAs(0);
			}
		}
		this.repaint();
	});

	/**z排序，更改此值，则会按照值的大小对同一容器的所有对象重新排序。值越大，越靠上。默认为0，则根据添加顺序排序。*/
	__getset(0,__proto,'zOrder',function(){
		return this._zOrder;
		},function(value){
		if (this._zOrder !=value){
			this._zOrder=value;
			this.conchModel && this.conchModel.setZOrder && this.conchModel.setZOrder(value);
			if (this._parent){
				value && this._parent._set$P("hasZorder",true);
				Laya.timer.callLater(this._parent,this.updateZOrder);
			}
		}
	});

	/**旋转角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'rotation',function(){
		return this._style._tf.rotate;
		},function(value){
		var style=this.getStyle();
		if (style._tf.rotate!==value){
			style.setRotate(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.rotate(value);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的宽度，单位为像素，默认为0。</p>
	*<p>此宽度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
	*<p>可以通过getbounds获取显示对象图像的实际宽度。</p>
	*/
	__getset(0,__proto,'width',function(){
		if (!this.autoSize)return this._width;
		return this.getSelfBounds().width;
		},function(value){
		if (this._width!==value){
			this._width=value;
			this.conchModel && this.conchModel.size(value,this._height)
			this.repaint();
		}
	});

	/**表示显示对象相对于父容器的水平方向坐标值。*/
	__getset(0,__proto,'x',function(){
		return this._x;
		},function(value){
		if (this._x!==value){
			if (this.destroyed)return;
			this._x=value;
			this.conchModel && this.conchModel.pos(value,this._y);
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
			if (this._$P.maskParent && this._$P.maskParent._repaint===0){
				this._$P.maskParent._repaint=1;
				this._$P.maskParent.parentRepaint();
			}
		}
	});

	/**
	*获得相对于stage的全局Y轴缩放值（会叠加父亲节点的缩放值）。
	*/
	__getset(0,__proto,'globalScaleY',function(){
		var scale=1;
		var ele=this;
		while (ele){
			if (ele===Laya.stage)break ;
			scale *=ele.scaleY;
			ele=ele.parent;
		}
		return scale;
	});

	/**
	*<p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>
	*<p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>
	*/
	__getset(0,__proto,'hitArea',function(){
		return this._$P.hitArea;
		},function(value){
		this._set$P("hitArea",value);
	});

	/**
	*是否静态缓存此对象的当前帧的最终属性。为 true 时，子对象变化时不会自动更新缓存，但是可以通过调用 reCache 方法手动刷新。
	*<b>注意：</b> 1. 设置 cacheAs 为非空和非"none"时才有效。 2. 由于渲染的时机在脚本执行之后，也就是说当前帧渲染的是对象的最终属性，所以如果在当前帧渲染之前、设置静态缓存之后改变对象属性，则最终渲染结果表现的是对象的最终属性。
	*/
	__getset(0,__proto,'staticCache',function(){
		return this._$P.staticCache;
		},function(value){
		this._set$P("staticCache",value);
		if (!value)this.reCache();
	});

	/**设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。等同于graphics.clear();graphics.drawTexture()*/
	__getset(0,__proto,'texture',function(){
		return this._texture;
		},function(value){
		if (this._texture !=value){
			this._texture=value;
			this.graphics.cleanByTexture(value,0,0);
		}
	});

	/**表示显示对象相对于父容器的垂直方向坐标值。*/
	__getset(0,__proto,'y',function(){
		return this._y;
		},function(value){
		if (this._y!==value){
			if (this.destroyed)return;
			this._y=value;
			this.conchModel && this.conchModel.pos(this._x,value);
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
			if (this._$P.maskParent && this._$P.maskParent._repaint===0){
				this._$P.maskParent._repaint=1;
				this._$P.maskParent.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的高度，单位为像素，默认为0。</p>
	*<p>此高度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
	*<p>可以通过getbounds获取显示对象图像的实际高度。</p>
	*/
	__getset(0,__proto,'height',function(){
		if (!this.autoSize)return this._height;
		return this.getSelfBounds().height;
		},function(value){
		if (this._height!==value){
			this._height=value;
			this.conchModel && this.conchModel.size(this._width,value);
			this.repaint();
		}
	});

	/**指定要使用的混合模式。目前只支持"lighter"。*/
	__getset(0,__proto,'blendMode',function(){
		return this._style.blendMode;
		},function(value){
		this.getStyle().blendMode=value;
		this.conchModel && this.conchModel.blendMode(value);
		if (value && value !="source-over")this._renderType |=/*laya.renders.RenderSprite.BLEND*/0x08;
		else this._renderType &=~ /*laya.renders.RenderSprite.BLEND*/0x08;
		this.parentRepaint();
	});

	/**X轴缩放值，默认值为1。设置为负数，可以实现水平反转效果，比如scaleX=-1。*/
	__getset(0,__proto,'scaleX',function(){
		return this._style._tf.scaleX;
		},function(value){
		var style=this.getStyle();
		if (style._tf.scaleX!==value){
			style.setScaleX(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.scale(value,style._tf.scaleY);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**Y轴缩放值，默认值为1。设置为负数，可以实现垂直反转效果，比如scaleX=-1。*/
	__getset(0,__proto,'scaleY',function(){
		return this._style._tf.scaleY;
		},function(value){
		var style=this.getStyle();
		if (style._tf.scaleY!==value){
			style.setScaleY(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.scale(style._tf.scaleX,value);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**对舞台 <code>stage</code> 的引用。*/
	__getset(0,__proto,'stage',function(){
		return Laya.stage;
	});

	/**水平倾斜角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'skewX',function(){
		return this._style._tf.skewX;
		},function(value){
		var style=this.getStyle();
		if (style._tf.skewX!==value){
			style.setSkewX(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.skew(value,style._tf.skewY);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的滚动矩形范围，具有裁剪效果(如果只想限制子对象渲染区域，请使用viewport)，设置optimizeScrollRect=true，可以优化裁剪区域外的内容不进行渲染。</p>
	*<p> srollRect和viewport的区别：<br/>
	*1.srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
	*2.设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
	*/
	__getset(0,__proto,'scrollRect',function(){
		return this._style.scrollRect;
		},function(value){
		this.getStyle().scrollRect=value;
		this.repaint();
		if (value){
			this._renderType |=/*laya.renders.RenderSprite.CLIP*/0x80;
			this.conchModel && this.conchModel.scrollRect(value.x,value.y,value.width,value.height);
			}else {
			this._renderType &=~ /*laya.renders.RenderSprite.CLIP*/0x80;
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x40);
				else
				this.conchModel.removeType(/*laya.renders.RenderSprite.CLIP*/0x80);
			}
		}
	});

	/**垂直倾斜角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'skewY',function(){
		return this._style._tf.skewY;
		},function(value){
		var style=this.getStyle();
		if (style._tf.skewY!==value){
			style.setSkewY(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.skew(style._tf.skewX,value);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>对象的矩阵信息。通过设置矩阵可以实现节点旋转，缩放，位移效果。</p>
	*<p>矩阵更多信息请参考 <code>Matrix</code></p>
	*/
	__getset(0,__proto,'transform',function(){
		return this._tfChanged ? this._adjustTransform():this._transform;
		},function(value){
		this._tfChanged=false;
		this._transform=value;
		if (value){
			this._x=value.tx;
			this._y=value.ty;
			value.tx=value.ty=0;
			this.conchModel && this.conchModel.transform(value.a,value.b,value.c,value.d,this._x,this._y);
		}
		if (value)this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
		else {
			this._renderType &=~ /*laya.renders.RenderSprite.TRANSFORM*/0x04;
			this.conchModel && this.conchModel.removeType(/*laya.renders.RenderSprite.TRANSFORM*/0x04);
		}
		this.parentRepaint();
	});

	/**X轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
	__getset(0,__proto,'pivotX',function(){
		return this._style._tf.translateX;
		},function(value){
		this.getStyle().setTranslateX(value);
		this.conchModel && this.conchModel.pivot(value,this._style._tf.translateY);
		this.repaint();
	});

	/**Y轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
	__getset(0,__proto,'pivotY',function(){
		return this._style._tf.translateY;
		},function(value){
		this.getStyle().setTranslateY(value);
		this.conchModel && this.conchModel.pivot(this._style._tf.translateX,value);
		this.repaint();
	});

	/**透明度，值为0-1，默认值为1，表示不透明。更改alpha值会影响drawcall。*/
	__getset(0,__proto,'alpha',function(){
		return this._style.alpha;
		},function(value){
		if (this._style && this._style.alpha!==value){
			value=value < 0 ? 0 :(value > 1 ? 1 :value);
			this.getStyle().alpha=value;
			this.conchModel && this.conchModel.alpha(value);
			if (value!==1)this._renderType |=/*laya.renders.RenderSprite.ALPHA*/0x02;
			else this._renderType &=~ /*laya.renders.RenderSprite.ALPHA*/0x02;
			this.parentRepaint();
		}
	});

	/**表示是否可见，默认为true。如果设置不可见，节点将不被渲染。*/
	__getset(0,__proto,'visible',function(){
		return this._style.visible;
		},function(value){
		if (this._style && this._style.visible!==value){
			this.getStyle().visible=value;
			this.conchModel && this.conchModel.visible(value);
			this.parentRepaint();
		}
	});

	/**绘图对象。封装了绘制位图和矢量图的接口，Sprite所有的绘图操作都通过Graphics来实现的。*/
	__getset(0,__proto,'graphics',function(){
		return this._graphics || (this.graphics=RunDriver.createGraphics());
		},function(value){
		if (this._graphics)this._graphics._sp=null;
		this._graphics=value;
		if (value){
			this._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01;
			this._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200;
			value._sp=this;
			this.conchModel && this.conchModel.graphics(this._graphics);
			}else {
			this._renderType &=~ /*laya.renders.RenderSprite.GRAPHICS*/0x200;
			this._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01;
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x100);
				else
				this.conchModel.removeType(/*laya.renders.RenderSprite.GRAPHICS*/0x200);
			}
		}
		this.repaint();
	});

	/**滤镜集合。可以设置多个滤镜组合。*/
	__getset(0,__proto,'filters',function(){
		return this._$P.filters;
		},function(value){
		value && value.length===0 && (value=null);
		if (this._$P.filters==value)return;
		this._set$P("filters",value ? value.slice():null);
		if (Render.isConchApp){
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x10);
				else
				this.conchModel.removeType(/*laya.renders.RenderSprite.FILTERS*/0x20);
			}
			if (this._$P.filters && this._$P.filters.length==1){
				this._$P.filters[0].callNative(this);
			}
		}
		if (Render.isWebGL){
			if (value && value.length){
				this._renderType |=/*laya.renders.RenderSprite.FILTERS*/0x20;
				}else {
				this._renderType &=~ /*laya.renders.RenderSprite.FILTERS*/0x20;
			}
		}
		if (value && value.length > 0){
			if (!this._getBit(/*laya.display.Node.NOTICE_DISPLAY*/0x1))this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
			if (!(Render.isWebGL && value.length==1 && (((value[0])instanceof laya.filters.ColorFilter )))){
				if (this.cacheAs !="bitmap"){
					if (!Render.isConchNode)this.cacheAs="bitmap";
					this._set$P("cacheForFilters",true);
				}
				this._set$P("hasFilter",true);
			}
			}else {
			this._set$P("hasFilter",false);
			if (this._$P["cacheForFilters"] && this.cacheAs=="bitmap"){
				this.cacheAs="none";
			}
		}
		this.repaint();
	});

	__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
		Laya.superSet(Node,this,'parent',value);
		if (value && this._getBit(/*laya.display.Node.MOUSEENABLE*/0x2)){
			this._$2__onDisplay();
		}
	});

	/**
	*<p>遮罩，可以设置一个对象(支持位图和矢量图)，根据对象形状进行遮罩显示。</p>
	*<p>【注意】遮罩对象坐标系是相对遮罩对象本身的，和Flash机制不同</p>
	*/
	__getset(0,__proto,'mask',function(){
		return this._$P._mask;
		},function(value){
		if (value && this.mask && this.mask._$P.maskParent)return;
		if (value){
			this.cacheAs="bitmap";
			this._set$P("_mask",value);
			value._set$P("maskParent",this);
			}else {
			this.cacheAs="none";
			this.mask && this.mask._set$P("maskParent",null);
			this._set$P("_mask",value);
		}
		this.conchModel && this.conchModel.mask(value ? value.conchModel :null);
		this._renderType |=/*laya.renders.RenderSprite.MASK*/0x40;
		this.parentRepaint();
	});

	/**
	*是否接受鼠标事件。
	*默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的属性 mouseEnable 的值都为 true（如果父节点手动设置为false，则不会更改）。
	**/
	__getset(0,__proto,'mouseEnabled',function(){
		return this._mouseEnableState > 1;
		},function(value){
		this._mouseEnableState=value ? 2 :1;
	});

	/**
	*获得相对于stage的全局X轴缩放值（会叠加父亲节点的缩放值）。
	*/
	__getset(0,__proto,'globalScaleX',function(){
		var scale=1;
		var ele=this;
		while (ele){
			if (ele===Laya.stage)break ;
			scale *=ele.scaleX;
			ele=ele.parent;
		}
		return scale;
	});

	/**
	*返回鼠标在此对象坐标系上的 X 轴坐标信息。
	*/
	__getset(0,__proto,'mouseX',function(){
		return this.getMousePoint().x;
	});

	/**
	*返回鼠标在此对象坐标系上的 Y 轴坐标信息。
	*/
	__getset(0,__proto,'mouseY',function(){
		return this.getMousePoint().y;
	});

	Sprite.fromImage=function(url){
		return new Sprite().loadImage(url);
	}

	Sprite.CustomList=[];
	__static(Sprite,
	['RUNTIMEVERION',function(){return this.RUNTIMEVERION=/*__JS__ */window.conch?conchConfig.getRuntimeVersion().substr(conchConfig.getRuntimeVersion().lastIndexOf('-')+1):'';}
	]);
	return Sprite;
})(Node)


/**
*@private
*audio标签播放声音的音轨控制
*/
//class laya.media.h5audio.AudioSoundChannel extends laya.media.SoundChannel
var AudioSoundChannel=(function(_super){
	function AudioSoundChannel(audio){
		/**
		*播放用的audio标签
		*/
		this._audio=null;
		this._onEnd=null;
		this._resumePlay=null;
		AudioSoundChannel.__super.call(this);
		this._onEnd=Utils.bind(this.__onEnd,this);
		this._resumePlay=Utils.bind(this.__resumePlay,this);
		audio.addEventListener("ended",this._onEnd);
		this._audio=audio;
	}

	__class(AudioSoundChannel,'laya.media.h5audio.AudioSoundChannel',_super);
	var __proto=AudioSoundChannel.prototype;
	__proto.__onEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	__proto.__resumePlay=function(){
		if(this._audio)this._audio.removeEventListener("canplay",this._resumePlay);
		try {
			this._audio.currentTime=this.startTime;
			Browser.container.appendChild(this._audio);
			this._audio.play();
			}catch (e){
			this.event(/*laya.events.Event.ERROR*/"error");
		}
	}

	/**
	*播放
	*/
	__proto.play=function(){
		this.isStopped=false;
		try {
			this._audio.playbackRate=SoundManager.playbackRate;
			this._audio.currentTime=this.startTime;
			}catch (e){
			this._audio.addEventListener("canplay",this._resumePlay);
			return;
		}
		SoundManager.addChannel(this);
		Browser.container.appendChild(this._audio);
		if("play" in this._audio)
			this._audio.play();
	}

	/**
	*停止播放
	*
	*/
	__proto.stop=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if (!this._audio)
			return;
		if ("pause" in this._audio)
			if (Render.isConchApp){
			this._audio.stop();
		}
		this._audio.pause();
		this._audio.removeEventListener("ended",this._onEnd);
		this._audio.removeEventListener("canplay",this._resumePlay);
		if (!Browser.onIE){
			if (this._audio!=AudioSound._musicAudio){
				Pool.recover("audio:"+this.url,this._audio);
			}
		}
		Browser.removeElement(this._audio);
		this._audio=null;
	}

	__proto.pause=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		if("pause" in this._audio)
			this._audio.pause();
	}

	__proto.resume=function(){
		if (!this._audio)
			return;
		this.isStopped=false;
		SoundManager.addChannel(this);
		if("play" in this._audio)
			this._audio.play();
	}

	/**
	*当前播放到的位置
	*@return
	*
	*/
	__getset(0,__proto,'position',function(){
		if (!this._audio)
			return 0;
		return this._audio.currentTime;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		if (!this._audio)
			return 0;
		return this._audio.duration;
	});

	/**
	*设置音量
	*@param v
	*
	*/
	/**
	*获取音量
	*@return
	*
	*/
	__getset(0,__proto,'volume',function(){
		if (!this._audio)return 1;
		return this._audio.volume;
		},function(v){
		if (!this._audio)return;
		this._audio.volume=v;
	});

	return AudioSoundChannel;
})(SoundChannel)


/**
*@private
*web audio api方式播放声音的音轨控制
*/
//class laya.media.webaudio.WebAudioSoundChannel extends laya.media.SoundChannel
var WebAudioSoundChannel=(function(_super){
	function WebAudioSoundChannel(){
		/**
		*声音原始文件数据
		*/
		this.audioBuffer=null;
		/**
		*gain节点
		*/
		this.gain=null;
		/**
		*播放用的数据
		*/
		this.bufferSource=null;
		/**
		*当前时间
		*/
		this._currentTime=0;
		/**
		*当前音量
		*/
		this._volume=1;
		/**
		*播放开始时的时间戳
		*/
		this._startTime=0;
		this._pauseTime=0;
		this._onPlayEnd=null;
		this.context=WebAudioSound.ctx;
		WebAudioSoundChannel.__super.call(this);
		this._onPlayEnd=Utils.bind(this.__onPlayEnd,this);
		if (this.context["createGain"]){
			this.gain=this.context["createGain"]();
			}else {
			this.gain=this.context["createGainNode"]();
		}
	}

	__class(WebAudioSoundChannel,'laya.media.webaudio.WebAudioSoundChannel',_super);
	var __proto=WebAudioSoundChannel.prototype;
	/**
	*播放声音
	*/
	__proto.play=function(){
		SoundManager.addChannel(this);
		this.isStopped=false;
		this._clearBufferSource();
		if (!this.audioBuffer)return;
		var context=this.context;
		var gain=this.gain;
		var bufferSource=context.createBufferSource();
		this.bufferSource=bufferSource;
		bufferSource.buffer=this.audioBuffer;
		bufferSource.connect(gain);
		if (gain)
			gain.disconnect();
		gain.connect(context.destination);
		bufferSource.onended=this._onPlayEnd;
		if (this.startTime >=this.duration)this.startTime=0;
		this._startTime=Browser.now();
		this.gain.gain.value=this._volume;
		if (this.loops==0){
			bufferSource.loop=true;
		}
		bufferSource.playbackRate.value=SoundManager.playbackRate;
		bufferSource.start(0,this.startTime);
		this._currentTime=0;
	}

	__proto.__onPlayEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	__proto._clearBufferSource=function(){
		if (this.bufferSource){
			var sourceNode=this.bufferSource;
			if (sourceNode.stop){
				sourceNode.stop(0);
				}else {
				sourceNode.noteOff(0);
			}
			sourceNode.disconnect(0);
			sourceNode.onended=null;
			if (!WebAudioSoundChannel._tryCleanFailed)this._tryClearBuffer(sourceNode);
			this.bufferSource=null;
		}
	}

	__proto._tryClearBuffer=function(sourceNode){
		if (!Browser.onIOS){
			WebAudioSoundChannel._tryCleanFailed=true;
			return;
		}
		try {sourceNode.buffer=WebAudioSound._miniBuffer;}catch (e){WebAudioSoundChannel._tryCleanFailed=true;}
	}

	/**
	*停止播放
	*/
	__proto.stop=function(){
		this._clearBufferSource();
		this.audioBuffer=null;
		if (this.gain)
			this.gain.disconnect();
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if(SoundManager.autoReleaseSound)
			Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
	}

	__proto.pause=function(){
		if (!this.isStopped){
			this._pauseTime=this.position;
		}
		this._clearBufferSource();
		if (this.gain)
			this.gain.disconnect();
		this.isStopped=true;
		SoundManager.removeChannel(this);
		if(SoundManager.autoReleaseSound)
			Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
	}

	__proto.resume=function(){
		this.startTime=this._pauseTime;
		this.play();
	}

	/**
	*获取当前播放位置
	*/
	__getset(0,__proto,'position',function(){
		if (this.bufferSource){
			return (Browser.now()-this._startTime)/ 1000+this.startTime;
		}
		return 0;
	});

	__getset(0,__proto,'duration',function(){
		if (this.audioBuffer){
			return this.audioBuffer.duration;
		}
		return 0;
	});

	/**
	*设置音量
	*/
	/**
	*获取音量
	*/
	__getset(0,__proto,'volume',function(){
		return this._volume;
		},function(v){
		if (this.isStopped){
			return;
		}
		this._volume=v;
		this.gain.gain.value=v;
	});

	WebAudioSoundChannel._tryCleanFailed=false;
	return WebAudioSoundChannel;
})(SoundChannel)


/**
*@private
*<code>Bitmap</code> 是图片资源类。
*/
//class laya.resource.Bitmap extends laya.resource.Resource
var Bitmap=(function(_super){
	function Bitmap(){
		/**@private
		*HTML Image或HTML Canvas或WebGL Texture。
		**/
		//this._source=null;
		/**@private 宽度*/
		//this._w=NaN;
		/**@private 高度*/
		//this._h=NaN;
		Bitmap.__super.call(this);
		this._w=0;
		this._h=0;
	}

	__class(Bitmap,'laya.resource.Bitmap',_super);
	var __proto=Bitmap.prototype;
	/***
	*宽度。
	*/
	__getset(0,__proto,'width',function(){
		return this._w;
	});

	/***
	*高度。
	*/
	__getset(0,__proto,'height',function(){
		return this._h;
	});

	/***
	*HTML Image 或 HTML Canvas 或 WebGL Texture 。
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
	});

	return Bitmap;
})(Resource)


/**
*<p>动画播放基类，提供了基础的动画播放控制方法和帧标签事件相关功能。</p>
*<p>可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。</p>
*/
//class laya.display.AnimationPlayerBase extends laya.display.Sprite
var AnimationPlayerBase=(function(_super){
	function AnimationPlayerBase(){
		/**
		*是否循环播放，调用play(...)方法时，会将此值设置为指定的参数值。
		*/
		this.loop=false;
		/**
		*<p>播放顺序类型：AnimationPlayerBase.WRAP_POSITIVE为正序播放，AnimationPlayerBase.WRAP_REVERSE为倒序播放，AnimationPlayerBase.WRAP_PINGPONG为pingpong播放(当按指定顺序播放完结尾后，如果继续播发，则会改变播放顺序)。</p>
		*<p>默认为正序播放。</p>
		*/
		this.wrapMode=0;
		/**@private */
		this._index=0;
		/**@private */
		this._count=0;
		/**@private */
		this._isPlaying=false;
		/**@private */
		this._labels=null;
		/**是否是逆序播放*/
		this._isReverse=false;
		/**@private */
		this._frameRateChanged=false;
		/**@private */
		this._controlNode=null;
		/**@private */
		this._actionName=null;
		AnimationPlayerBase.__super.call(this);
		this._interval=Config.animationInterval;
		this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
	}

	__class(AnimationPlayerBase,'laya.display.AnimationPlayerBase',_super);
	var __proto=AnimationPlayerBase.prototype;
	/**
	*<p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>
	*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
	*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
	*@param loop （可选）是否循环播放。
	*@param name （可选）动画名称。
	*@param showWarn（可选）是否动画不存在时打印警告
	*/
	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		this._isPlaying=true;
		this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
		this.loop=loop;
		this._actionName=name;
		this._isReverse=this.wrapMode==1;
		if (this.interval > 0){
			this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
		}
	}

	/**@private */
	__proto._getFrameByLabel=function(label){
		var i=0;
		for (i=0;i < this._count;i++){
			if (this._labels[i] && (this._labels [i]).indexOf(label)>=0)return i;
		}
		return 0;
	}

	/**@private */
	__proto._frameLoop=function(){
		if (this._isReverse){
			this._index--;
			if (this._index < 0){
				if (this.loop){
					if (this.wrapMode==2){
						this._index=this._count > 0 ? 1 :0;
						this._isReverse=false;
						}else {
						this._index=this._count-1;
					}
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					}else {
					this._index=0;
					this.stop();
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					return;
				}
			}
			}else {
			this._index++;
			if (this._index >=this._count){
				if (this.loop){
					if (this.wrapMode==2){
						this._index=this._count-2 >=0 ? this._count-2 :0;
						this._isReverse=true;
						}else {
						this._index=0;
					}
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					}else {
					this._index--;
					this.stop();
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					return;
				}
			}
		}
		this.index=this._index;
	}

	/**@private */
	__proto._setControlNode=function(node){
		if (this._controlNode){
			this._controlNode.off(/*laya.events.Event.DISPLAY*/"display",this,this._checkResumePlaying);
			this._controlNode.off(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._checkResumePlaying);
		}
		this._controlNode=node;
		if (node && node !=this){
			node.on(/*laya.events.Event.DISPLAY*/"display",this,this._checkResumePlaying);
			node.on(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._checkResumePlaying);
		}
	}

	/**@private */
	__proto._setDisplay=function(value){
		_super.prototype._setDisplay.call(this,value);
		this._checkResumePlaying();
	}

	/**@private */
	__proto._checkResumePlaying=function(){
		if (this._isPlaying){
			if (this._controlNode.displayedInStage)this.play(this._index,this.loop,this._actionName);
			else this.clearTimer(this,this._frameLoop);
		}
	}

	/**
	*停止动画播放。
	*/
	__proto.stop=function(){
		this._isPlaying=false;
		this.clearTimer(this,this._frameLoop);
	}

	/**
	*增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。
	*@param label 帧标签名称
	*@param index 帧索引
	*/
	__proto.addLabel=function(label,index){
		if (!this._labels)this._labels={};
		if (!this._labels[index])this._labels[index]=[];
		this._labels[index].push(label);
	}

	/**
	*删除指定的帧标签。
	*@param label 帧标签名称。注意：如果为空，则删除所有帧标签！
	*/
	__proto.removeLabel=function(label){
		if (!label)this._labels=null;
		else if (this._labels){
			for (var name in this._labels){
				this._removeLabelFromLabelList(this._labels[name],label);
			}
		}
	}

	/**@private */
	__proto._removeLabelFromLabelList=function(list,label){
		if (!list)return;
		for (var i=list.length-1;i >=0;i--){
			if (list[i]==label){
				list.splice(i,1);
			}
		}
	}

	/**
	*将动画切换到指定帧并停在那里。
	*@param position 帧索引或帧标签
	*/
	__proto.gotoAndStop=function(position){
		this.index=((typeof position=='string'))? this._getFrameByLabel(position):position;
		this.stop();
	}

	/**
	*@private
	*显示到某帧
	*@param value 帧索引
	*/
	__proto._displayToIndex=function(value){}
	/**
	*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
	*/
	__proto.clear=function(){
		this.stop();
		this._labels=null;
	}

	/**
	*<p>动画播放的帧间隔时间(单位：毫秒)。默认值依赖于Config.animationInterval=50，通过Config.animationInterval可以修改默认帧间隔时间。</p>
	*<p>要想为某动画设置独立的帧间隔时间，可以使用set interval，注意：如果动画正在播放，设置后会重置帧循环定时器的起始时间为当前时间，也就是说，如果频繁设置interval，会导致动画帧更新的时间间隔会比预想的要慢，甚至不更新。</p>
	*/
	__getset(0,__proto,'interval',function(){
		return this._interval;
		},function(value){
		if (this._interval !=value){
			this._frameRateChanged=true;
			this._interval=value;
			if (this._isPlaying && value > 0){
				this.timerLoop(value,this,this._frameLoop,null,true,true);
			}
		}
	});

	/**
	*是否正在播放中。
	*/
	__getset(0,__proto,'isPlaying',function(){
		return this._isPlaying;
	});

	/**
	*动画当前帧的索引。
	*/
	__getset(0,__proto,'index',function(){
		return this._index;
		},function(value){
		this._index=value;
		this._displayToIndex(value);
		if (this._labels && this._labels[value]){
			var tArr=this._labels[value];
			for (var i=0,len=tArr.length;i < len;i++){
				this.event(/*laya.events.Event.LABEL*/"label",tArr[i]);
			}
		}
	});

	/**
	*当前动画中帧的总数。
	*/
	__getset(0,__proto,'count',function(){
		return this._count;
	});

	AnimationPlayerBase.WRAP_POSITIVE=0;
	AnimationPlayerBase.WRAP_REVERSE=1;
	AnimationPlayerBase.WRAP_PINGPONG=2;
	return AnimationPlayerBase;
})(Sprite)


/**
*<p> <code>Text</code> 类用于创建显示对象以显示文本。</p>
*<p>
*注意：如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。
*</p>
*@example
*package
*{
	*import laya.display.Text;
	*public class Text_Example
	*{
		*public function Text_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var text:Text=new Text();//创建一个 Text 类的实例对象 text 。
			*text.text="这个是一个 Text 文本示例。";
			*text.color="#008fff";//设置 text 的文本颜色。
			*text.font="Arial";//设置 text 的文本字体。
			*text.bold=true;//设置 text 的文本显示为粗体。
			*text.fontSize=30;//设置 text 的字体大小。
			*text.wordWrap=true;//设置 text 的文本自动换行。
			*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
			*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
			*text.width=300;//设置 text 的宽度。
			*text.height=200;//设置 text 的高度。
			*text.italic=true;//设置 text 的文本显示为斜体。
			*text.borderColor="#fff000";//设置 text 的文本边框颜色。
			*Laya.stage.addChild(text);//将 text 添加到显示列表。
			*}
		*}
	*}
*@example
*Text_Example();
*function Text_Example()
*{
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*onInit();
	*}
*function onInit()
*{
	*var text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
	*text.text="这个是一个 Text 文本示例。";
	*text.color="#008fff";//设置 text 的文本颜色。
	*text.font="Arial";//设置 text 的文本字体。
	*text.bold=true;//设置 text 的文本显示为粗体。
	*text.fontSize=30;//设置 text 的字体大小。
	*text.wordWrap=true;//设置 text 的文本自动换行。
	*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
	*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
	*text.width=300;//设置 text 的宽度。
	*text.height=200;//设置 text 的高度。
	*text.italic=true;//设置 text 的文本显示为斜体。
	*text.borderColor="#fff000";//设置 text 的文本边框颜色。
	*Laya.stage.addChild(text);//将 text 添加到显示列表。
	*}
*@example
*class Text_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var text:laya.display.Text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
		*text.text="这个是一个 Text 文本示例。";
		*text.color="#008fff";//设置 text 的文本颜色。
		*text.font="Arial";//设置 text 的文本字体。
		*text.bold=true;//设置 text 的文本显示为粗体。
		*text.fontSize=30;//设置 text 的字体大小。
		*text.wordWrap=true;//设置 text 的文本自动换行。
		*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
		*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
		*text.width=300;//设置 text 的宽度。
		*text.height=200;//设置 text 的高度。
		*text.italic=true;//设置 text 的文本显示为斜体。
		*text.borderColor="#fff000";//设置 text 的文本边框颜色。
		*Laya.stage.addChild(text);//将 text 添加到显示列表。
		*}
	*}
*/
//class laya.display.Text extends laya.display.Sprite
var Text=(function(_super){
	function Text(){
		/**@private */
		this._clipPoint=null;
		/**当前使用的位置字体。*/
		this._currBitmapFont=null;
		/**@private 表示文本内容字符串。*/
		this._text=null;
		/**@private 表示文本内容是否发生改变。*/
		this._isChanged=false;
		/**@private 表示文本的宽度，以像素为单位。*/
		this._textWidth=0;
		/**@private 表示文本的高度，以像素为单位。*/
		this._textHeight=0;
		/**@private 存储文字行数信息。*/
		this._lines=[];
		/**@private 保存每行宽度*/
		this._lineWidths=[];
		/**@private 文本的内容位置 X 轴信息。*/
		this._startX=NaN;
		/**@private 文本的内容位置X轴信息。 */
		this._startY=NaN;
		/**@private 当前可视行索引。*/
		this._lastVisibleLineIndex=-1;
		/**@private 当前可视行索引。*/
		this._words=null;
		/**@private */
		this._charSize={};
		/**
		*是否显示下划线。
		*/
		this.underline=false;
		/**
		*下划线的颜色，为null则使用字体颜色。
		*/
		this._underlineColor=null;
		Text.__super.call(this);
		this.overflow=Text.VISIBLE;
		this._style=new CSSStyle(this);
		(this._style).wordWrap=false;
	}

	__class(Text,'laya.display.Text',_super);
	var __proto=Text.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._lines=null;
		if (this._words){
			this._words.length=0;
			this._words=null;
		}
	}

	/**
	*@private
	*@inheritDoc
	*/
	__proto._getBoundPointsM=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		var rec=Rectangle.TEMP;
		rec.setTo(0,0,this.width,this.height);
		return rec._getBoundPoints();
	}

	/**
	*@inheritDoc
	*/
	__proto.getGraphicBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		var rec=Rectangle.TEMP;
		rec.setTo(0,0,this.width,this.height);
		return rec;
	}

	/**
	*@private
	*@inheritDoc
	*/
	__proto._getCSSStyle=function(){
		return this._style;
	}

	/**
	*<p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>
	*<p>设置Text.langPacks语言包后，即可使用lang获取里面的语言</p>
	*<p>例如：
	*<li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>
	*<li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。
	*则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0}diamonds,{1}experience.”，
	*然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。
	*将替换处理后的文本“Congratulations on your winning 100 diamonds,200 experience.”设置为当前文本的内容。
	*</li>
	*</p>
	*@param text 文本内容。
	*@param ...args 文本替换参数。
	*/
	__proto.lang=function(text,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10){
		text=Text.langPacks && Text.langPacks[text] ? Text.langPacks[text] :text;
		if (arguments.length < 2){
			this._text=text;
			}else {
			for (var i=0,n=arguments.length;i < n;i++){
				text=text.replace("{"+i+"}",arguments[i+1]);
			}
			this._text=text;
		}
	}

	/**
	*渲染文字。
	*@param begin 开始渲染的行索引。
	*@param visibleLineCount 渲染的行数。
	*/
	__proto.renderText=function(begin,visibleLineCount){
		var graphics=this.graphics;
		graphics.clear(true);
		var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+(Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font):this.font);
		Browser.context.font=ctxFont;
		var padding=this.padding;
		var startX=padding[3];
		var textAlgin="left";
		var lines=this._lines;
		var lineHeight=this.leading+this._charSize.height;
		var tCurrBitmapFont=this._currBitmapFont;
		if (tCurrBitmapFont){
			lineHeight=this.leading+tCurrBitmapFont.getMaxHeight();
		};
		var startY=padding[0];
		if ((!tCurrBitmapFont)&& this._width > 0 && this._textWidth <=this._width){
			if (this.align=="right"){
				textAlgin="right";
				startX=this._width-padding[1];
				}else if (this.align=="center"){
				textAlgin="center";
				startX=this._width *0.5+padding[3]-padding[1];
			}
		}
		if (this._height > 0){
			var tempVAlign=(this._textHeight > this._height)? "top" :this.valign;
			if (tempVAlign==="middle")
				startY=(this._height-visibleLineCount *lineHeight)*0.5+padding[0]-padding[2];
			else if (tempVAlign==="bottom")
			startY=this._height-visibleLineCount *lineHeight-padding[2];
		};
		var style=this._style;
		if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
			var bitmapScale=tCurrBitmapFont.fontSize / this.fontSize;
		}
		if (this._clipPoint){
			graphics.save();
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var tClipWidth=0;
				var tClipHeight=0;
				this._width ? tClipWidth=(this._width-padding[3]-padding[1]):tClipWidth=this._textWidth;
				this._height ? tClipHeight=(this._height-padding[0]-padding[2]):tClipHeight=this._textHeight;
				tClipWidth *=bitmapScale;
				tClipHeight *=bitmapScale;
				graphics.clipRect(padding[3],padding[0],tClipWidth,tClipHeight);
				}else {
				graphics.clipRect(padding[3],padding[0],this._width ? (this._width-padding[3]-padding[1]):this._textWidth,this._height ? (this._height-padding[0]-padding[2]):this._textHeight);
			}
		};
		var password=style.password;
		if (("prompt" in this)&& this['prompt']==this._text)
			password=false;
		var x=0,y=0;
		var end=Math.min(this._lines.length,visibleLineCount+begin)|| 1;
		for (var i=begin;i < end;i++){
			var word=lines[i];
			var _word;
			if (password){
				var len=word.length;
				word="";
				for (var j=len;j > 0;j--){
					word+="●";
				}
			}
			x=startX-(this._clipPoint ? this._clipPoint.x :0);
			y=startY+lineHeight *i-(this._clipPoint ? this._clipPoint.y :0);
			this.underline && this.drawUnderline(textAlgin,x,y,i);
			if (tCurrBitmapFont){
				var tWidth=this.width;
				if (tCurrBitmapFont.autoScaleSize){
					tWidth=this.width *bitmapScale;
				}
				tCurrBitmapFont.drawText(word,this,x,y,this.align,tWidth);
				}else {
				if (Render.isWebGL){
					this._words || (this._words=[]);
					_word=this._words.length > (i-begin)? this._words[i-begin] :new WordText();
					_word.setText(word);
					}else {
					_word=word;
				}
				style.stroke ? graphics.fillBorderText(_word,x,y,ctxFont,this.color,style.strokeColor,style.stroke,textAlgin):graphics.fillText(_word,x,y,ctxFont,this.color,textAlgin);
			}
		}
		if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
			var tScale=1 / bitmapScale;
			this.scale(tScale,tScale);
		}
		if (this._clipPoint)
			graphics.restore();
		this._startX=startX;
		this._startY=startY;
	}

	/**
	*绘制下划线
	*@param x 本行坐标
	*@param y 本行坐标
	*@param lineIndex 本行索引
	*/
	__proto.drawUnderline=function(align,x,y,lineIndex){
		var lineWidth=this._lineWidths[lineIndex];
		switch (align){
			case 'center':
				x-=lineWidth / 2;
				break ;
			case 'right':
				x-=lineWidth;
				break ;
			case 'left':
			default :
				break ;
			}
		y+=this._charSize.height;
		this._graphics.drawLine(x,y,x+lineWidth,y,this.underlineColor || this.color,1);
	}

	/**
	*<p>排版文本。</p>
	*<p>进行宽高计算，渲染、重绘文本。</p>
	*/
	__proto.typeset=function(){
		this._isChanged=false;
		if (!this._text){
			this._clipPoint=null;
			this._textWidth=this._textHeight=0;
			this.graphics.clear(true);
			return;
		}
		Browser.context.font=this._getCSSStyle().font;
		this._lines.length=0;
		this._lineWidths.length=0;
		this.parseLines(this._text);
		this.evalTextSize();
		if (this.checkEnabledViewportOrNot())
			this._clipPoint || (this._clipPoint=new Point(0,0));
		else
		this._clipPoint=null;
		var lineCount=this._lines.length;
		if (this.overflow !=Text.VISIBLE){
			var func=this.overflow==Text.HIDDEN ? Math.floor :Math.ceil;
			lineCount=Math.min(lineCount,func((this.height-this.padding[0]-this.padding[2])/ (this.leading+this._charSize.height)));
		};
		var startLine=this.scrollY / (this._charSize.height+this.leading)| 0;
		this.renderText(startLine,lineCount);
		this.repaint();
	}

	__proto.evalTextSize=function(){
		var nw=NaN,nh=NaN;
		nw=Math.max.apply(this,this._lineWidths);
		if (this._currBitmapFont)
			nh=this._lines.length *(this._currBitmapFont.getMaxHeight()+this.leading)+this.padding[0]+this.padding[2];
		else
		nh=this._lines.length *(this._charSize.height+this.leading)+this.padding[0]+this.padding[2];
		if (nw !=this._textWidth || nh !=this._textHeight){
			this._textWidth=nw;
			this._textHeight=nh;
			if (!this._width || !this._height)
				this.conchModel && this.conchModel.size(this._width || this._textWidth,this._height || this._textHeight);
		}
	}

	__proto.checkEnabledViewportOrNot=function(){
		return this.overflow==Text.SCROLL && ((this._width > 0 && this._textWidth > this._width)|| (this._height > 0 && this._textHeight > this._height));
	}

	/**
	*<p>快速更改显示文本。不进行排版计算，效率较高。</p>
	*<p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
	*@param text 文本内容。
	*/
	__proto.changeText=function(text){
		if (this._text!==text){
			this.lang(text+"");
			if (this._graphics && this._graphics.replaceText(this._text)){
				}else {
				this.typeset();
			}
		}
	}

	/**
	*@private
	*分析文本换行。
	*/
	__proto.parseLines=function(text){
		var needWordWrapOrTruncate=this.wordWrap || this.overflow==Text.HIDDEN;
		if (needWordWrapOrTruncate){
			var wordWrapWidth=this.getWordWrapWidth();
		}
		if (this._currBitmapFont){
			this._charSize.width=this._currBitmapFont.getMaxWidth();
			this._charSize.height=this._currBitmapFont.getMaxHeight();
			}else {
			var measureResult=Browser.context.measureText(Text._testWord);
			this._charSize.width=measureResult.width;
			this._charSize.height=(measureResult.height || this.fontSize);
		};
		var lines=text.replace(/\r\n/g,"\n").split("\n");
		for (var i=0,n=lines.length;i < n;i++){
			var line=lines[i];
			if (needWordWrapOrTruncate)
				this.parseLine(line,wordWrapWidth);
			else {
				this._lineWidths.push(this.getTextWidth(line));
				this._lines.push(line);
			}
		}
	}

	/**
	*@private
	*解析行文本。
	*@param line 某行的文本。
	*@param wordWrapWidth 文本的显示宽度。
	*/
	__proto.parseLine=function(line,wordWrapWidth){
		var ctx=Browser.context;
		var lines=this._lines;
		var maybeIndex=0;
		var execResult;
		var charsWidth=NaN;
		var wordWidth=NaN;
		var startIndex=0;
		charsWidth=this.getTextWidth(line);
		if (charsWidth <=wordWrapWidth){
			lines.push(line);
			this._lineWidths.push(charsWidth);
			return;
		}
		charsWidth=this._charSize.width;
		maybeIndex=Math.floor(wordWrapWidth / charsWidth);
		(maybeIndex==0)&& (maybeIndex=1);
		charsWidth=this.getTextWidth(line.substring(0,maybeIndex));
		wordWidth=charsWidth;
		for (var j=maybeIndex,m=line.length;j < m;j++){
			charsWidth=this.getTextWidth(line.charAt(j));
			wordWidth+=charsWidth;
			if (wordWidth > wordWrapWidth){
				if (this.wordWrap){
					var newLine=line.substring(startIndex,j);
					if (newLine.charCodeAt(newLine.length-1)< 255){
						execResult=/(?:\w|-)+$/.exec(newLine);
						if (execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)
								j+=newLine.length;
							else
							newLine=line.substring(startIndex,j);
						}
					}else
					if (Text.RightToLeft){
						execResult=/([\u0600-\u06FF])+$/.exec(newLine);
						if(execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)
								j+=newLine.length;
							else
							newLine=line.substring(startIndex,j);
						}
					}
					lines.push(newLine);
					this._lineWidths.push(wordWidth-charsWidth);
					startIndex=j;
					if (j+maybeIndex < m){
						j+=maybeIndex;
						charsWidth=this.getTextWidth(line.substring(startIndex,j));
						wordWidth=charsWidth;
						j--;
						}else {
						lines.push(line.substring(startIndex,m));
						this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
						startIndex=-1;
						break ;
					}
					}else if (this.overflow==Text.HIDDEN){
					lines.push(line.substring(0,j));
					this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
					return;
				}
			}
		}
		if (this.wordWrap && startIndex !=-1){
			lines.push(line.substring(startIndex,m));
			this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
		}
	}

	__proto.getTextWidth=function(text){
		if (this._currBitmapFont)
			return this._currBitmapFont.getTextWidth(text);
		else
		return Browser.context.measureText(text).width;
	}

	/**
	*获取换行所需的宽度。
	*/
	__proto.getWordWrapWidth=function(){
		var p=this.padding;
		var w=NaN;
		if (this._currBitmapFont && this._currBitmapFont.autoScaleSize)
			w=this._width *(this._currBitmapFont.fontSize / this.fontSize);
		else
		w=this._width;
		if (w <=0){
			w=this.wordWrap ? 100 :Browser.width;
		}
		w <=0 && (w=100);
		return w-p[3]-p[1];
	}

	/**
	*返回字符在本类实例的父坐标系下的坐标。
	*@param charIndex 索引位置。
	*@param out （可选）输出的Point引用。
	*@return Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。
	*/
	__proto.getCharPoint=function(charIndex,out){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		var len=0,lines=this._lines,startIndex=0;
		for (var i=0,n=lines.length;i < n;i++){
			len+=lines[i].length;
			if (charIndex < len){
				var line=i;
				break ;
			}
			startIndex=len;
		};
		var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+this.font;
		Browser.context.font=ctxFont;
		var width=this.getTextWidth(this._text.substring(startIndex,charIndex));
		var point=out || new Point();
		return point.setTo(this._startX+width-(this._clipPoint ? this._clipPoint.x :0),this._startY+line *(this._charSize.height+this.leading)-(this._clipPoint ? this._clipPoint.y :0));
	}

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)
			return this._width;
		return this.textWidth+this.padding[1]+this.padding[3];
		},function(value){
		if (value !=this._width){
			Laya.superSet(Sprite,this,'width',value);
			this.isChanged=true;
		}
	});

	/**
	*表示文本的宽度，以像素为单位。
	*/
	__getset(0,__proto,'textWidth',function(){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		return this._textWidth;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		return this.textHeight+this.padding[0]+this.padding[2];
		},function(value){
		if (value !=this._height){
			Laya.superSet(Sprite,this,'height',value);
			this.isChanged=true;
		}
	});

	/**
	*表示文本的高度，以像素为单位。
	*/
	__getset(0,__proto,'textHeight',function(){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		return this._textHeight;
	});

	/**
	*<p>边距信息。</p>
	*<p>数据格式：[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>
	*/
	__getset(0,__proto,'padding',function(){
		return this._getCSSStyle().padding;
		},function(value){
		this._getCSSStyle().padding=value;
		this.isChanged=true;
	});

	/**
	*<p>指定文本是否为粗体字。</p>
	*<p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>
	*/
	__getset(0,__proto,'bold',function(){
		return this._getCSSStyle().bold;
		},function(value){
		this._getCSSStyle().bold=value;
		this.isChanged=true;
	});

	/**当前文本的内容字符串。*/
	__getset(0,__proto,'text',function(){
		return this._text || "";
		},function(value){
		if (this._text!==value){
			this.lang(value+"");
			this.isChanged=true;
			this.event(/*laya.events.Event.CHANGE*/"change");
		}
	});

	/**
	*<p>表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。</p>
	*<p>默认值为黑色。</p>
	*/
	__getset(0,__proto,'color',function(){
		return this._getCSSStyle().color;
		},function(value){
		if (this._getCSSStyle().color !=value){
			this._getCSSStyle().color=value;
			if (!this._isChanged && this._graphics){
				this._graphics.replaceTextColor(this.color)
				}else {
				this.isChanged=true;
			}
		}
	});

	/**
	*<p>文本的字体名称，以字符串形式表示。</p>
	*<p>默认值为："Arial"，可以通过Font.defaultFont设置默认字体。</p>
	*<p>如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。</p>
	*@see laya.display.css.Font#defaultFamily
	*/
	__getset(0,__proto,'font',function(){
		return this._getCSSStyle().fontFamily;
		},function(value){
		if (this._currBitmapFont){
			this._currBitmapFont=null;
			this.scale(1,1);
		}
		if (Text._bitmapFonts && Text._bitmapFonts[value]){
			this._currBitmapFont=Text._bitmapFonts[value];
		}
		this._getCSSStyle().fontFamily=value;
		this.isChanged=true;
	});

	/**
	*<p>指定文本的字体大小（以像素为单位）。</p>
	*<p>默认为20像素，可以通过 <code>Text.defaultSize</code> 设置默认大小。</p>
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._getCSSStyle().fontSize;
		},function(value){
		this._getCSSStyle().fontSize=value;
		this.isChanged=true;
	});

	/**
	*<p>表示使用此文本格式的文本是否为斜体。</p>
	*<p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>
	*/
	__getset(0,__proto,'italic',function(){
		return this._getCSSStyle().italic;
		},function(value){
		this._getCSSStyle().italic=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本的水平显示方式。</p>
	*<p><b>取值：</b>
	*<li>"left"： 居左对齐显示。</li>
	*<li>"center"： 居中对齐显示。</li>
	*<li>"right"： 居右对齐显示。</li>
	*</p>
	*/
	__getset(0,__proto,'align',function(){
		return this._getCSSStyle().align;
		},function(value){
		this._getCSSStyle().align=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本的垂直显示方式。</p>
	*<p><b>取值：</b>
	*<li>"top"： 居顶部对齐显示。</li>
	*<li>"middle"： 居中对齐显示。</li>
	*<li>"bottom"： 居底部对齐显示。</li>
	*</p>
	*/
	__getset(0,__proto,'valign',function(){
		return this._getCSSStyle().valign;
		},function(value){
		this._getCSSStyle().valign=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本是否自动换行，默认为false。</p>
	*<p>若值为true，则自动换行；否则不自动换行。</p>
	*/
	__getset(0,__proto,'wordWrap',function(){
		return this._getCSSStyle().wordWrap;
		},function(value){
		this._getCSSStyle().wordWrap=value;
		this.isChanged=true;
	});

	/**
	*垂直行间距（以像素为单位）。
	*/
	__getset(0,__proto,'leading',function(){
		return this._getCSSStyle().leading;
		},function(value){
		this._getCSSStyle().leading=value;
		this.isChanged=true;
	});

	/**
	*文本背景颜色，以字符串表示。
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._getCSSStyle().backgroundColor;
		},function(value){
		this._getCSSStyle().backgroundColor=value;
		this.isChanged=true;
	});

	/**
	*文本边框背景颜色，以字符串表示。
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._getCSSStyle().borderColor;
		},function(value){
		this._getCSSStyle().borderColor=value;
		this.isChanged=true;
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*<p>默认值0，表示不描边。</p>
	*/
	__getset(0,__proto,'stroke',function(){
		return this._getCSSStyle().stroke;
		},function(value){
		this._getCSSStyle().stroke=value;
		this.isChanged=true;
	});

	/**
	*<p>描边颜色，以字符串表示。</p>
	*<p>默认值为 "#000000"（黑色）;</p>
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._getCSSStyle().strokeColor;
		},function(value){
		this._getCSSStyle().strokeColor=value;
		this.isChanged=true;
	});

	/**
	*一个布尔值，表示文本的属性是否有改变。若为true表示有改变。
	*/
	__getset(0,__proto,'isChanged',null,function(value){
		if (this._isChanged!==value){
			this._isChanged=value;
			value && Laya.timer.callLater(this,this.typeset);
		}
	});

	/**
	*<p>设置横向滚动量。</p>
	*<p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>
	*/
	/**
	*获取横向滚动量。
	*/
	__getset(0,__proto,'scrollX',function(){
		if (!this._clipPoint)
			return 0;
		return this._clipPoint.x;
		},function(value){
		if (this.overflow !=Text.SCROLL || (this.textWidth < this._width || !this._clipPoint))
			return;
		value=value < this.padding[3] ? this.padding[3] :value;
		var maxScrollX=this._textWidth-this._width;
		value=value > maxScrollX ? maxScrollX :value;
		var visibleLineCount=this._height / (this._charSize.height+this.leading)| 0+1;
		this._clipPoint.x=value;
		this.renderText(this._lastVisibleLineIndex,visibleLineCount);
	});

	/**
	*设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。
	*/
	/**
	*获取纵向滚动量。
	*/
	__getset(0,__proto,'scrollY',function(){
		if (!this._clipPoint)
			return 0;
		return this._clipPoint.y;
		},function(value){
		if (this.overflow !=Text.SCROLL || (this.textHeight < this._height || !this._clipPoint))
			return;
		value=value < this.padding[0] ? this.padding[0] :value;
		var maxScrollY=this._textHeight-this._height;
		value=value > maxScrollY ? maxScrollY :value;
		var startLine=value / (this._charSize.height+this.leading)| 0;
		this._lastVisibleLineIndex=startLine;
		var visibleLineCount=(this._height / (this._charSize.height+this.leading)| 0)+1;
		this._clipPoint.y=value;
		this.renderText(startLine,visibleLineCount);
	});

	/**
	*获取横向可滚动最大值。
	*/
	__getset(0,__proto,'maxScrollX',function(){
		return (this.textWidth < this._width)? 0 :this._textWidth-this._width;
	});

	/**
	*获取纵向可滚动最大值。
	*/
	__getset(0,__proto,'maxScrollY',function(){
		return (this.textHeight < this._height)? 0 :this._textHeight-this._height;
	});

	__getset(0,__proto,'lines',function(){
		if (this._isChanged)
			this.typeset();
		return this._lines;
	});

	__getset(0,__proto,'underlineColor',function(){
		return this._underlineColor;
		},function(value){
		this._underlineColor=value;
		this._isChanged=true;
		this.typeset();
	});

	Text.registerBitmapFont=function(name,bitmapFont){
		Text._bitmapFonts || (Text._bitmapFonts={});
		Text._bitmapFonts[name]=bitmapFont;
	}

	Text.unregisterBitmapFont=function(name,destroy){
		(destroy===void 0)&& (destroy=true);
		if (Text._bitmapFonts && Text._bitmapFonts[name]){
			var tBitmapFont=Text._bitmapFonts[name];
			if (destroy){
				tBitmapFont.destroy();
			}
			delete Text._bitmapFonts[name];
		}
	}

	Text.setTextRightToLeft=function(){
		var style;
		style=Browser.canvas.source.style;
		style.display="none";
		style.position="absolute";
		style.direction="rtl";
		Render._mainCanvas.source.style.direction="rtl";
		laya.display.Text.RightToLeft=true;
		Browser.document.body.appendChild(Browser.canvas.source);
	}

	Text.supportFont=function(font){
		Browser.context.font="10px sans-serif";
		var defaultFontWidth=Browser.context.measureText("abcji").width;
		Browser.context.font="10px "+font;
		var customFontWidth=Browser.context.measureText("abcji").width;
		console.log(defaultFontWidth,customFontWidth);
		if (defaultFontWidth===customFontWidth)return false;
		else return true;
	}

	Text._testWord="游";
	Text.langPacks=null;
	Text.VISIBLE="visible";
	Text.SCROLL="scroll";
	Text.HIDDEN="hidden";
	Text.CharacterCache=true;
	Text.RightToLeft=false;
	Text._bitmapFonts=null;
	__static(Text,
	['_fontFamilyMap',function(){return this._fontFamilyMap={"报隶" :"报隶-简","黑体" :"黑体-简","楷体" :"楷体-简","兰亭黑" :"兰亭黑-简","隶变" :"隶变-简","凌慧体" :"凌慧体-简","翩翩体" :"翩翩体-简","苹方" :"苹方-简","手札体" :"手札体-简","宋体" :"宋体-简","娃娃体" :"娃娃体-简","魏碑" :"魏碑-简","行楷" :"行楷-简","雅痞" :"雅痞-简","圆体" :"圆体-简"};}
	]);
	return Text;
})(Sprite)


/**
*<p> <code>Stage</code> 是舞台类，显示列表的根节点，所有显示对象都在舞台上显示。通过 Laya.stage 单例访问。</p>
*<p>Stage提供几种适配模式，不同的适配模式会产生不同的画布大小，画布越大，渲染压力越大，所以要选择合适的适配方案。</p>
*<p>Stage提供不同的帧率模式，帧率越高，渲染压力越大，越费电，合理使用帧率甚至动态更改帧率有利于改进手机耗电。</p>
*/
//class laya.display.Stage extends laya.display.Sprite
var Stage=(function(_super){
	function Stage(){
		/**当前焦点对象，此对象会影响当前键盘事件的派发主体。*/
		this.focus=null;
		/**设计宽度（初始化时设置的宽度Laya.init(width,height)）*/
		this.designWidth=0;
		/**设计高度（初始化时设置的高度Laya.init(width,height)）*/
		this.designHeight=0;
		/**画布是否发生翻转。*/
		this.canvasRotation=false;
		/**画布的旋转角度。*/
		this.canvasDegree=0;
		/**
		*<p>设置是否渲染，设置为false，可以停止渲染，画面会停留到最后一次渲染上，减少cpu消耗，此设置不影响时钟。</p>
		*<p>比如非激活状态，可以设置renderingEnabled=true以节省消耗。</p>
		**/
		this.renderingEnabled=true;
		/**是否启用屏幕适配，可以适配后，在某个时候关闭屏幕适配，防止某些操作导致的屏幕以外改变*/
		this.screenAdaptationEnabled=true;
		/**@private */
		this._screenMode="none";
		/**@private */
		this._scaleMode="noscale";
		/**@private */
		this._alignV="top";
		/**@private */
		this._alignH="left";
		/**@private */
		this._bgColor="black";
		/**@private */
		this._mouseMoveTime=0;
		/**@private */
		this._renderCount=0;
		/**@private */
		this._frameStartTime=NaN;
		/**@private */
		this._isFocused=false;
		/**@private */
		this._isVisibility=false;
		/**@private 3D场景*/
		this._scenes=null;
		/**@private */
		this._frameRate="fast";
		Stage.__super.call(this);
		this.offset=new Point();
		this._canvasTransform=new Matrix();
		this._previousOrientation=Browser.window.orientation;
		var _$this=this;
		this.transform=Matrix.create();
		this._scenes=[];
		this.mouseEnabled=true;
		this.hitTestPrior=true;
		this.autoSize=false;
		this._displayedInStage=true;
		this._isFocused=true;
		this._isVisibility=true;
		var window=Browser.window;
		var _this=this;
		window.addEventListener("focus",function(){
			_$this._isFocused=true;
			_this.event(/*laya.events.Event.FOCUS*/"focus");
			_this.event(/*laya.events.Event.FOCUS_CHANGE*/"focuschange");
		});
		window.addEventListener("blur",function(){
			_$this._isFocused=false;
			_this.event(/*laya.events.Event.BLUR*/"blur");
			_this.event(/*laya.events.Event.FOCUS_CHANGE*/"focuschange");
			if (_this._isInputting())Input["inputElement"].target.focus=false;
		});
		var hidden="hidden",state="visibilityState",visibilityChange="visibilitychange";
		var document=window.document;
		if (typeof document.hidden!=="undefined"){
			visibilityChange="visibilitychange";
			state="visibilityState";
			}else if (typeof document.mozHidden!=="undefined"){
			visibilityChange="mozvisibilitychange";
			state="mozVisibilityState";
			}else if (typeof document.msHidden!=="undefined"){
			visibilityChange="msvisibilitychange";
			state="msVisibilityState";
			}else if (typeof document.webkitHidden!=="undefined"){
			visibilityChange="webkitvisibilitychange";
			state="webkitVisibilityState";
		}
		window.document.addEventListener(visibilityChange,visibleChangeFun);
		function visibleChangeFun (){
			if (Browser.document[state]=="hidden"){
				_$this._isVisibility=false;
				if (_this._isInputting())Input["inputElement"].target.focus=false;
				}else {
				_$this._isVisibility=true;
			}
			_this.event(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange");
		}
		window.addEventListener("resize",function(){
			var orientation=Browser.window.orientation;
			if (orientation !=null && orientation !=_$this._previousOrientation && _this._isInputting()){
				Input["inputElement"].target.focus=false;
			}
			_$this._previousOrientation=orientation;
			if (_this._isInputting())return;
			_this._resetCanvas();
		});
		window.addEventListener("orientationchange",function(e){
			_this._resetCanvas();
		});
		this.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this._onmouseMove);
		if (Browser.onMobile)this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onmouseMove);
	}

	__class(Stage,'laya.display.Stage',_super);
	var __proto=Stage.prototype;
	/**
	*@private
	*在移动端输入时，输入法弹出期间不进行画布尺寸重置。
	*/
	__proto._isInputting=function(){
		return (Browser.onMobile && Input.isInputting);
	}

	/**@private */
	__proto._changeCanvasSize=function(){
		this.setScreenSize(Browser.clientWidth *Browser.pixelRatio,Browser.clientHeight *Browser.pixelRatio);
	}

	/**@private */
	__proto._resetCanvas=function(){
		if (!this.screenAdaptationEnabled)return;
		var canvas=Render._mainCanvas;
		var canvasStyle=canvas.source.style;
		canvas.size(1,1);
		Laya.timer.once(100,this,this._changeCanvasSize);
	}

	/**
	*设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。
	*@param screenWidth 屏幕宽度。
	*@param screenHeight 屏幕高度。
	*/
	__proto.setScreenSize=function(screenWidth,screenHeight){
		var rotation=false;
		if (this._screenMode!=="none"){
			var screenType=screenWidth / screenHeight < 1 ? "vertical" :"horizontal";
			rotation=screenType!==this._screenMode;
			if (rotation){
				var temp=screenHeight;
				screenHeight=screenWidth;
				screenWidth=temp;
			}
		}
		this.canvasRotation=rotation;
		var canvas=Render._mainCanvas;
		var canvasStyle=canvas.source.style;
		var mat=this._canvasTransform.identity();
		var scaleMode=this._scaleMode;
		var scaleX=screenWidth / this.designWidth;
		var scaleY=screenHeight / this.designHeight;
		var canvasWidth=this.designWidth;
		var canvasHeight=this.designHeight;
		var realWidth=screenWidth;
		var realHeight=screenHeight;
		var pixelRatio=Browser.pixelRatio;
		this._width=this.designWidth;
		this._height=this.designHeight;
		switch (scaleMode){
			case "noscale":
				scaleX=scaleY=1;
				realWidth=this.designWidth;
				realHeight=this.designHeight;
				break ;
			case "showall":
				scaleX=scaleY=Math.min(scaleX,scaleY);
				canvasWidth=realWidth=Math.round(this.designWidth *scaleX);
				canvasHeight=realHeight=Math.round(this.designHeight *scaleY);
				break ;
			case "noborder":
				scaleX=scaleY=Math.max(scaleX,scaleY);
				realWidth=Math.round(this.designWidth *scaleX);
				realHeight=Math.round(this.designHeight *scaleY);
				break ;
			case "full":
				scaleX=scaleY=1;
				this._width=canvasWidth=screenWidth;
				this._height=canvasHeight=screenHeight;
				break ;
			case "fixedwidth":
				scaleY=scaleX;
				this._height=canvasHeight=Math.round(screenHeight / scaleX);
				break ;
			case "fixedheight":
				scaleX=scaleY;
				this._width=canvasWidth=Math.round(screenWidth / scaleY);
				break ;
			case "fixedauto":
				if ((screenWidth / screenHeight)< (this.designWidth / this.designHeight)){
					scaleY=scaleX;
					this._height=canvasHeight=Math.round(screenHeight / scaleX);
					}else {
					scaleX=scaleY;
					this._width=canvasWidth=Math.round(screenWidth / scaleY);
				}
				break ;
			}
		if (this.conchModel)this.conchModel.size(this._width,this._height);
		scaleX *=this.scaleX;
		scaleY *=this.scaleY;
		if (scaleX===1 && scaleY===1){
			this.transform.identity();
			}else {
			this.transform.a=this._formatData(scaleX / (realWidth / canvasWidth));
			this.transform.d=this._formatData(scaleY / (realHeight / canvasHeight));
			this.conchModel && this.conchModel.scale(this.transform.a,this.transform.d);
		}
		canvas.size(canvasWidth,canvasHeight);
		RunDriver.changeWebGLSize(canvasWidth,canvasHeight);
		mat.scale(realWidth / canvasWidth / pixelRatio,realHeight / canvasHeight / pixelRatio);
		if (this._alignH==="left")this.offset.x=0;
		else if (this._alignH==="right")this.offset.x=screenWidth-realWidth;
		else this.offset.x=(screenWidth-realWidth)*0.5 / pixelRatio;
		if (this._alignV==="top")this.offset.y=0;
		else if (this._alignV==="bottom")this.offset.y=screenHeight-realHeight;
		else this.offset.y=(screenHeight-realHeight)*0.5 / pixelRatio;
		this.offset.x=Math.round(this.offset.x);
		this.offset.y=Math.round(this.offset.y);
		mat.translate(this.offset.x,this.offset.y);
		this.canvasDegree=0;
		if (rotation){
			if (this._screenMode==="horizontal"){
				mat.rotate(Math.PI / 2);
				mat.translate(screenHeight / pixelRatio,0);
				this.canvasDegree=90;
				}else {
				mat.rotate(-Math.PI / 2);
				mat.translate(0,screenWidth / pixelRatio);
				this.canvasDegree=-90;
			}
		}
		mat.a=this._formatData(mat.a);
		mat.d=this._formatData(mat.d);
		mat.tx=this._formatData(mat.tx);
		mat.ty=this._formatData(mat.ty);
		canvasStyle.transformOrigin=canvasStyle.webkitTransformOrigin=canvasStyle.msTransformOrigin=canvasStyle.mozTransformOrigin=canvasStyle.oTransformOrigin="0px 0px 0px";
		canvasStyle.transform=canvasStyle.webkitTransform=canvasStyle.msTransform=canvasStyle.mozTransform=canvasStyle.oTransform="matrix("+mat.toString()+")";
		mat.translate(parseInt(canvasStyle.left)|| 0,parseInt(canvasStyle.top)|| 0);
		this.visible=true;
		this._repaint=1;
		this.event(/*laya.events.Event.RESIZE*/"resize");
	}

	/**@private */
	__proto._formatData=function(value){
		if (Math.abs(value)< 0.000001)return 0;
		if (Math.abs(1-value)< 0.001)return value > 0 ? 1 :-1;
		return value;
	}

	/**@inheritDoc */
	__proto.getMousePoint=function(){
		return Point.TEMP.setTo(this.mouseX,this.mouseY);
	}

	/**@inheritDoc */
	__proto.repaint=function(){
		this._repaint=1;
	}

	/**@inheritDoc */
	__proto.parentRepaint=function(){}
	/**@private */
	__proto._loop=function(){
		this.render(Render.context,0,0);
		return true;
	}

	/**@private */
	__proto._onmouseMove=function(e){
		this._mouseMoveTime=Browser.now();
	}

	/**
	*<p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>
	*<p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>
	*/
	__proto.getTimeFromFrameStart=function(){
		return Browser.now()-this._frameStartTime;
	}

	/**@inheritDoc */
	__proto.render=function(context,x,y){
		if (this._frameRate==="sleep"){
			var now=Browser.now();
			if (now-this._frameStartTime >=1000)this._frameStartTime=now;
			else return;
		}
		this._renderCount++;
		Render.isFlash && this.repaint();
		if (!this._style.visible){
			if (this._renderCount % 5===0){
				Stat.loopCount++;
				MouseManager.instance.runEvent();
				Laya.timer._update();
			}
			return;
		}
		this._frameStartTime=Browser.now();
		var frameMode=this._frameRate==="mouse" ? (((this._frameStartTime-this._mouseMoveTime)< 2000)? "fast" :"slow"):this._frameRate;
		var isFastMode=(frameMode!=="slow");
		var isDoubleLoop=(this._renderCount % 2===0);
		Stat.renderSlow=!isFastMode;
		if (isFastMode || isDoubleLoop){
			Stat.loopCount++;
			MouseManager.instance.runEvent();
			Laya.timer._update();
			RunDriver.update3DLoop();
			var scene;
			var i=0,n=0;
			if (Render.isConchNode){
				for (i=0,n=this._scenes.length;i < n;i++){
					scene=this._scenes[i];
					(scene)&& (scene._updateSceneConch());
				}
				}else {
				for (i=0,n=this._scenes.length;i < n;i++){
					scene=this._scenes[i];
					(scene)&& (scene._updateScene());
				}
			}
			if (Render.isConchNode){
				var customList=Sprite["CustomList"];
				for (i=0,n=customList.length;i < n;i++){
					var customItem=customList[i];
					customItem.customRender(customItem.customContext,0,0);
				}
				return;
			}
		}
		if (Render.isConchNode)return;
		if (this.renderingEnabled && (isFastMode || !isDoubleLoop)){
			if (Render.isWebGL){
				context.clear();
				_super.prototype.render.call(this,context,x,y);
				Stat._show&& Stat._sp && Stat._sp.render(context,x,y);
				RunDriver.clear(this._bgColor);
				RunDriver.beginFlush();
				context.flush();
				RunDriver.endFinish();
				VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();
				}else {
				RunDriver.clear(this._bgColor);
				_super.prototype.render.call(this,context,x,y);
				Stat._show&& Stat._sp && Stat._sp.render(context,x,y);
			}
		}
	}

	/**@private */
	__proto._requestFullscreen=function(){
		var element=Browser.document.documentElement;
		if (element.requestFullscreen){
			element.requestFullscreen();
			}else if (element.mozRequestFullScreen){
			element.mozRequestFullScreen();
			}else if (element.webkitRequestFullscreen){
			element.webkitRequestFullscreen();
			}else if (element.msRequestFullscreen){
			element.msRequestFullscreen();
		}
	}

	/**@private */
	__proto._fullScreenChanged=function(){
		Laya.stage.event(/*laya.events.Event.FULL_SCREEN_CHANGE*/"fullscreenchange");
	}

	/**退出全屏模式*/
	__proto.exitFullscreen=function(){
		var document=Browser.document;
		if (document.exitFullscreen){
			document.exitFullscreen();
			}else if (document.mozCancelFullScreen){
			document.mozCancelFullScreen();
			}else if (document.webkitExitFullscreen){
			document.webkitExitFullscreen();
		}
	}

	/**当前视窗由缩放模式导致的 X 轴缩放系数。*/
	__getset(0,__proto,'clientScaleX',function(){
		return this._transform ? this._transform.getScaleX():1;
	});

	//[Deprecated]
	__getset(0,__proto,'desginHeight',function(){
		console.debug("desginHeight已经弃用，请使用designHeight代替");
		return this.designHeight;
	});

	/**帧率类型，支持三种模式：fast-60帧(默认)，slow-30帧，mouse-30帧（鼠标活动后会自动加速到60，鼠标不动2秒后降低为30帧，以节省消耗），sleep-1帧。*/
	__getset(0,__proto,'frameRate',function(){
		return this._frameRate;
		},function(value){
		this._frameRate=value;
		if (Render.isConchApp){
			switch (this._frameRate){
				case "slow":
					Browser.window.conch && Browser.window.conchConfig.setSlowFrame && Browser.window.conchConfig.setSlowFrame(true);
					break ;
				case "fast":
					Browser.window.conch && Browser.window.conchConfig.setSlowFrame && Browser.window.conchConfig.setSlowFrame(false);
					break ;
				case "mouse":
					Browser.window.conch && Browser.window.conchConfig.setMouseFrame && Browser.window.conchConfig.setMouseFrame(2000);
					break ;
				case "sleep":
					Browser.window.conch && Browser.window.conchConfig.setLimitFPS && Browser.window.conchConfig.setLimitFPS(1);
					break ;
				default :
					throw new Error("Stage:frameRate invalid.");
					break ;
				}
		}
	});

	/**当前视窗由缩放模式导致的 Y 轴缩放系数。*/
	__getset(0,__proto,'clientScaleY',function(){
		return this._transform ? this._transform.getScaleY():1;
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		this.designWidth=value;
		Laya.superSet(Sprite,this,'width',value);
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*<p>水平对齐方式。默认值为"left"。</p>
	*<p><ul>取值范围：
	*<li>"left" ：居左对齐；</li>
	*<li>"center" ：居中对齐；</li>
	*<li>"right" ：居右对齐；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'alignH',function(){
		return this._alignH;
		},function(value){
		this._alignH=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*舞台是否获得焦点。
	*/
	__getset(0,__proto,'isFocused',function(){
		return this._isFocused;
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		this.designHeight=value;
		Laya.superSet(Sprite,this,'height',value);
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	__getset(0,__proto,'transform',function(){
		if (this._tfChanged)this._adjustTransform();
		return this._transform=this._transform|| Matrix.create();
	},_super.prototype._$set_transform);

	/**
	*舞台是否处于可见状态(是否进入后台)。
	*/
	__getset(0,__proto,'isVisibility',function(){
		return this._isVisibility;
	});

	//[Deprecated]
	__getset(0,__proto,'desginWidth',function(){
		console.debug("desginWidth已经弃用，请使用designWidth代替");
		return this.designWidth;
	});

	/**
	*<p>缩放模式。默认值为 "noscale"。</p>
	*<p><ul>取值范围：
	*<li>"noscale" ：不缩放；</li>
	*<li>"exactfit" ：全屏不等比缩放；</li>
	*<li>"showall" ：最小比例缩放；</li>
	*<li>"noborder" ：最大比例缩放；</li>
	*<li>"full" ：不缩放，stage的宽高等于屏幕宽高；</li>
	*<li>"fixedwidth" ：宽度不变，高度根据屏幕比缩放；</li>
	*<li>"fixedheight" ：高度不变，宽度根据屏幕比缩放；</li>
	*<li>"fixedauto" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'scaleMode',function(){
		return this._scaleMode;
		},function(value){
		this._scaleMode=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*<p>垂直对齐方式。默认值为"top"。</p>
	*<p><ul>取值范围：
	*<li>"top" ：居顶部对齐；</li>
	*<li>"middle" ：居中对齐；</li>
	*<li>"bottom" ：居底部对齐；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'alignV',function(){
		return this._alignV;
		},function(value){
		this._alignV=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**舞台的背景颜色，默认为黑色，null为透明。*/
	__getset(0,__proto,'bgColor',function(){
		return this._bgColor;
		},function(value){
		this._bgColor=value;
		this.conchModel && this.conchModel.bgColor(value);
		if (Render.isWebGL){
			if (value && value!=="black" && value!=="#000000"){
				Stage._wgColor=Color.create(value)._color;
				}else {
				if (!Browser.onMiniGame)Stage._wgColor=null;
			}
		}
		if (value){
			Render.canvas.style.background=value;
			}else {
			Render.canvas.style.background="none";
		}
	});

	/**鼠标在 Stage 上的 X 轴坐标。*/
	__getset(0,__proto,'mouseX',function(){
		return Math.round(MouseManager.instance.mouseX / this.clientScaleX);
	});

	/**鼠标在 Stage 上的 Y 轴坐标。*/
	__getset(0,__proto,'mouseY',function(){
		return Math.round(MouseManager.instance.mouseY / this.clientScaleY);
	});

	/**
	*<p>场景布局类型。</p>
	*<p><ul>取值范围：
	*<li>"none" ：不更改屏幕</li>
	*<li>"horizontal" ：自动横屏</li>
	*<li>"vertical" ：自动竖屏</li>
	*</ul></p>
	*/
	__getset(0,__proto,'screenMode',function(){
		return this._screenMode;
		},function(value){
		this._screenMode=value;
	});

	__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
		if (this.visible!==value){
			Laya.superSet(Sprite,this,'visible',value);
			var style=Render._mainCanvas.source.style;
			style.visibility=value ? "visible" :"hidden";
		}
	});

	/**
	*<p>是否开启全屏，用户点击后进入全屏。</p>
	*<p>兼容性提示：部分浏览器不允许点击进入全屏，比如Iphone等。</p>
	*/
	__getset(0,__proto,'fullScreenEnabled',null,function(value){
		var document=Browser.document;
		var canvas=Render.canvas;
		if (value){
			canvas.addEventListener('mousedown',this._requestFullscreen);
			canvas.addEventListener('touchstart',this._requestFullscreen);
			document.addEventListener("fullscreenchange",this._fullScreenChanged);
			document.addEventListener("mozfullscreenchange",this._fullScreenChanged);
			document.addEventListener("webkitfullscreenchange",this._fullScreenChanged);
			document.addEventListener("msfullscreenchange",this._fullScreenChanged);
			}else {
			canvas.removeEventListener('mousedown',this._requestFullscreen);
			canvas.removeEventListener('touchstart',this._requestFullscreen);
			document.removeEventListener("fullscreenchange",this._fullScreenChanged);
			document.removeEventListener("mozfullscreenchange",this._fullScreenChanged);
			document.removeEventListener("webkitfullscreenchange",this._fullScreenChanged);
			document.removeEventListener("msfullscreenchange",this._fullScreenChanged);
		}
	});

	Stage.SCALE_NOSCALE="noscale";
	Stage.SCALE_EXACTFIT="exactfit";
	Stage.SCALE_SHOWALL="showall";
	Stage.SCALE_NOBORDER="noborder";
	Stage.SCALE_FULL="full";
	Stage.SCALE_FIXED_WIDTH="fixedwidth";
	Stage.SCALE_FIXED_HEIGHT="fixedheight";
	Stage.SCALE_FIXED_AUTO="fixedauto";
	Stage.ALIGN_LEFT="left";
	Stage.ALIGN_RIGHT="right";
	Stage.ALIGN_CENTER="center";
	Stage.ALIGN_TOP="top";
	Stage.ALIGN_MIDDLE="middle";
	Stage.ALIGN_BOTTOM="bottom";
	Stage.SCREEN_NONE="none";
	Stage.SCREEN_HORIZONTAL="horizontal";
	Stage.SCREEN_VERTICAL="vertical";
	Stage.FRAME_FAST="fast";
	Stage.FRAME_SLOW="slow";
	Stage.FRAME_MOUSE="mouse";
	Stage.FRAME_SLEEP="sleep";
	Stage._wgColor=null;
	Stage.FRAME_MOUSE_THREDHOLD=2000;
	return Stage;
})(Sprite)


/**
*@private
*/
//class laya.media.SoundNode extends laya.display.Sprite
var SoundNode=(function(_super){
	function SoundNode(){
		this.url=null;
		this._channel=null;
		this._tar=null;
		this._playEvents=null;
		this._stopEvents=null;
		SoundNode.__super.call(this);
		this.visible=false;
		this.on(/*laya.events.Event.ADDED*/"added",this,this._onParentChange);
		this.on(/*laya.events.Event.REMOVED*/"removed",this,this._onParentChange);
	}

	__class(SoundNode,'laya.media.SoundNode',_super);
	var __proto=SoundNode.prototype;
	/**@private */
	__proto._onParentChange=function(){
		this.target=this.parent;
	}

	/**
	*播放
	*@param loops 循环次数
	*@param complete 完成回调
	*
	*/
	__proto.play=function(loops,complete){
		(loops===void 0)&& (loops=1);
		if (isNaN(loops)){
			loops=1;
		}
		if (!this.url)return;
		this.stop();
		this._channel=SoundManager.playSound(this.url,loops,complete);
	}

	/**
	*停止播放
	*
	*/
	__proto.stop=function(){
		if (this._channel && !this._channel.isStopped){
			this._channel.stop();
		}
		this._channel=null;
	}

	/**@private */
	__proto._setPlayAction=function(tar,event,action,add){
		(add===void 0)&& (add=true);
		if (!this[action])return;
		if (!tar)return;
		if (add){
			tar.on(event,this,this[action]);
			}else {
			tar.off(event,this,this[action]);
		}
	}

	/**@private */
	__proto._setPlayActions=function(tar,events,action,add){
		(add===void 0)&& (add=true);
		if (!tar)return;
		if (!events)return;
		var eventArr=events.split(",");
		var i=0,len=0;
		len=eventArr.length;
		for (i=0;i < len;i++){
			this._setPlayAction(tar,eventArr[i],action,add);
		}
	}

	/**
	*设置触发播放的事件
	*@param events
	*
	*/
	__getset(0,__proto,'playEvent',null,function(events){
		this._playEvents=events;
		if (!events)return;
		if (this._tar){
			this._setPlayActions(this._tar,events,"play");
		}
	});

	/**
	*设置控制播放的对象
	*@param tar
	*
	*/
	__getset(0,__proto,'target',null,function(tar){
		if (this._tar){
			this._setPlayActions(this._tar,this._playEvents,"play",false);
			this._setPlayActions(this._tar,this._stopEvents,"stop",false);
		}
		this._tar=tar;
		if (this._tar){
			this._setPlayActions(this._tar,this._playEvents,"play",true);
			this._setPlayActions(this._tar,this._stopEvents,"stop",true);
		}
	});

	/**
	*设置触发停止的事件
	*@param events
	*
	*/
	__getset(0,__proto,'stopEvent',null,function(events){
		this._stopEvents=events;
		if (!events)return;
		if (this._tar){
			this._setPlayActions(this._tar,events,"stop");
		}
	});

	return SoundNode;
})(Sprite)


/**
*@private
*<code>FileBitmap</code> 是图片文件资源类。
*/
//class laya.resource.FileBitmap extends laya.resource.Bitmap
var FileBitmap=(function(_super){
	function FileBitmap(){
		/**@private 文件路径全名。*/
		this._src=null;
		/**@private onload触发函数*/
		this._onload=null;
		/**@private onerror触发函数*/
		this._onerror=null;
		FileBitmap.__super.call(this);
	}

	__class(FileBitmap,'laya.resource.FileBitmap',_super);
	var __proto=FileBitmap.prototype;
	/**
	*文件路径全名。
	*/
	__getset(0,__proto,'src',function(){
		return this._src;
		},function(value){
		this._src=value;
	});

	/**
	*载入完成处理函数。
	*/
	__getset(0,__proto,'onload',null,function(value){
	});

	/**
	*错误处理函数。
	*/
	__getset(0,__proto,'onerror',null,function(value){
	});

	return FileBitmap;
})(Bitmap)


/**
*<code>HTMLCanvas</code> 是 Html Canvas 的代理类，封装了 Canvas 的属性和方法。。请不要直接使用 new HTMLCanvas！
*/
//class laya.resource.HTMLCanvas extends laya.resource.Bitmap
var HTMLCanvas=(function(_super){
	function HTMLCanvas(type){
		//this._ctx=null;
		this._is2D=false;
		HTMLCanvas.__super.call(this);
		var _$this=this;
		this._source=this;
		if (type==="2D" || (type==="AUTO" && !Render.isWebGL)){
			this._is2D=true;
			this._source=Browser.createElement("canvas");
			var o=this;
			o.getContext=function (contextID,other){
				if (_$this._ctx)return _$this._ctx;
				var ctx=_$this._ctx=_$this._source.getContext(contextID,other);
				if (ctx){
					ctx._canvas=o;
					if(!Render.isFlash)ctx.size=function (w,h){
					};
				}
				return ctx;
			}
		}
		this.lock=true;
	}

	__class(HTMLCanvas,'laya.resource.HTMLCanvas',_super);
	var __proto=HTMLCanvas.prototype;
	/**
	*清空画布内容。
	*/
	__proto.clear=function(){
		this._ctx && this._ctx.clear();
	}

	/**
	*销毁。
	*/
	__proto.destroy=function(){
		this._ctx && this._ctx.destroy();
		this._ctx=null;
		laya.resource.Resource.prototype.destroy.call(this);
	}

	/**
	*释放。
	*/
	__proto.release=function(){}
	/**
	*@private
	*设置 Canvas 渲染上下文。
	*@param context Canvas 渲染上下文。
	*/
	__proto._setContext=function(context){
		this._ctx=context;
	}

	/**
	*获取 Canvas 渲染上下文。
	*@param contextID 上下文ID.
	*@param other
	*@return Canvas 渲染上下文 Context 对象。
	*/
	__proto.getContext=function(contextID,other){
		return this._ctx ? this._ctx :(this._ctx=HTMLCanvas._createContext(this));
	}

	/**
	*获取内存大小。
	*@return 内存大小。
	*/
	__proto.getMemSize=function(){
		return 0;
	}

	/**
	*设置宽高。
	*@param w 宽度。
	*@param h 高度。
	*/
	__proto.size=function(w,h){
		if (this._w !=w || this._h !=h ||(this._source && (this._source.width!=w || this._source.height!=h))){
			this._w=w;
			this._h=h;
			this.memorySize=this._w *this._h *4;
			this._ctx && this._ctx.size(w,h);
			this._source && (this._source.height=h,this._source.width=w);
		}
	}

	__proto.getCanvas=function(){
		return this._source;
	}

	__proto.toBase64=function(type,encoderOptions,callBack){
		if (this._source){
			if (Render.isConchApp && this._source.toBase64){
				this._source.toBase64(type,encoderOptions,callBack);
			}
			else {
				var base64Data=this._source.toDataURL(type,encoderOptions);
				callBack.call(this,base64Data);
			}
		}
	}

	/**
	*Canvas 渲染上下文。
	*/
	__getset(0,__proto,'context',function(){
		return this._ctx;
	});

	/**
	*是否当作 Bitmap 对象。
	*/
	__getset(0,__proto,'asBitmap',null,function(value){
	});

	HTMLCanvas.create=function(type){
		return new HTMLCanvas(type);
	}

	HTMLCanvas.TYPE2D="2D";
	HTMLCanvas.TYPE3D="3D";
	HTMLCanvas.TYPEAUTO="AUTO";
	HTMLCanvas._createContext=null;
	return HTMLCanvas;
})(Bitmap)


/**
*@private
*/
//class laya.resource.HTMLSubImage extends laya.resource.Bitmap
var HTMLSubImage=(function(_super){
	//请不要直接使用new HTMLSubImage
	function HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
		HTMLSubImage.__super.call(this);
		throw new Error("不允许new！");
	}

	__class(HTMLSubImage,'laya.resource.HTMLSubImage',_super);
	HTMLSubImage.create=function(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
		(allowMerageInAtlas===void 0)&& (allowMerageInAtlas=false);
		return new HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas);
	}

	return HTMLSubImage;
})(Bitmap)


/**
*<p> <code>Animation</code> 是Graphics动画类。实现了基于Graphics的动画创建、播放、控制接口。</p>
*<p>本类使用了动画模版缓存池，它以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
*<p>动画模版缓存池，以key-value键值对存储，key可以自定义，也可以从指定的配置文件中读取，value为对应的动画模版，是一个Graphics对象数组，每个Graphics对象对应一个帧图像，动画的播放实质就是定时切换Graphics对象。</p>
*<p>使用set source、loadImages(...)、loadAtlas(...)、loadAnimation(...)方法可以创建动画模版。使用play(...)可以播放指定动画。</p>
*@example <caption>以下示例代码，创建了一个 <code>Text</code> 实例。</caption>
*package
*{
	*import laya.display.Animation;
	*import laya.net.Loader;
	*import laya.utils.Handler;
	*public class Animation_Example
	*{
		*public function Animation_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*init();//初始化
			*}
		*private function init():void
		*{
			*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
			*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
			*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
			*animation.play();//播放动画。
			*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
			*}
		*}
	*}
*
*@example
*Animation_Example();
*function Animation_Example(){
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*init();//初始化
	*}
*function init()
*{
	*var animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
	*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
	*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
	*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
	*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
	*animation.play();//播放动画。
	*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
	*}
*
*@example
*import Animation=laya.display.Animation;
*class Animation_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.init();
		*}
	*private init():void {
		*var animation:Animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
		*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
		*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
		*animation.play();//播放动画。
		*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
		*}
	*}
*new Animation_Example();
*/
//class laya.display.Animation extends laya.display.AnimationPlayerBase
var Animation=(function(_super){
	function Animation(){
		/**@private */
		this._frames=null;
		/**@private */
		this._url=null;
		Animation.__super.call(this);
		this._setControlNode(this);
	}

	__class(Animation,'laya.display.Animation',_super);
	var __proto=Animation.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this.stop();
		laya.display.Sprite.prototype.destroy.call(this,destroyChild);
		this._frames=null;
		this._labels=null;
	}

	/**
	*<p>开始播放动画。会在动画模版缓存池中查找key值为name的动画模版，存在则用此动画模版初始化当前序列帧， 如果不存在，则使用当前序列帧。</p>
	*<p>play(...)方法被设计为在创建实例后的任何时候都可以被调用，调用后就处于播放状态，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否处于播放状态，如果是，则开始播放。</p>
	*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
	*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
	*@param loop （可选）是否循环播放。
	*@param name （可选）动画模板在动画模版缓存池中的key，也可认为是动画名称。如果name为空，则播放当前动画序列帧；如果不为空，则在动画模版缓存池中寻找key值为name的动画模版，如果存在则用此动画模版初始化当前序列帧并播放，如果不存在，则仍然播放当前动画序列帧；如果没有当前动画的帧数据，则不播放，但该实例仍然处于播放状态。
	*@param showWarn（可选）是否动画不存在时打印警告
	*/
	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		if (name)this._setFramesFromCache(name,showWarn);
		this._isPlaying=true;
		this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
		this.loop=loop;
		this._actionName=name;
		this._isReverse=this.wrapMode==1;
		if (this._frames && this.interval > 0){
			this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
		}
	}

	/**@private */
	__proto._setFramesFromCache=function(name,showWarn){
		(showWarn===void 0)&& (showWarn=false);
		if (this._url)name=this._url+"#"+name;
		if (name && Animation.framesMap[name]){
			var tAniO;
			tAniO=Animation.framesMap[name];
			if ((tAniO instanceof Array)){
				this._frames=Animation.framesMap[name];
				this._count=this._frames.length;
				}else {
				if (tAniO.nodeRoot){
					Animation.framesMap[name]=this._parseGraphicAnimationByData(tAniO);
					tAniO=Animation.framesMap[name];
				}
				this._frames=tAniO.frames;
				this._count=this._frames.length;
				if (!this._frameRateChanged)this._interval=tAniO.interval;
				this._labels=this._copyLabels(tAniO.labels);
			}
			return true;
			}else {
			if (showWarn)console.log("ani not found:",name);
		}
		return false;
	}

	/**@private */
	__proto._copyLabels=function(labels){
		if (!labels)return null;
		var rst;
		rst={};
		var key;
		for (key in labels){
			rst[key]=Utils.copyArray([],labels[key]);
		}
		return rst;
	}

	/**@private */
	__proto._frameLoop=function(){
		if (this._style.visible && this._style.alpha > 0.01){
			_super.prototype._frameLoop.call(this);
		}
	}

	/**@private */
	__proto._displayToIndex=function(value){
		if (this._frames)this.graphics=this._frames[value];
	}

	/**
	*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
	*/
	__proto.clear=function(){
		this.stop();
		this.graphics=null;
		this._frames=null;
		this._labels=null;
	}

	/**
	*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图片集合并创建动画模版。注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadImages(...).loadImages(...).play(...);。</p>
	*@param urls 图片路径集合。需要创建动画模版时，会以此为数据源。参数形如：[url1,url2,url3,...]。
	*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
	*@return 返回Animation对象本身。
	*/
	__proto.loadImages=function(urls,cacheName){
		(cacheName===void 0)&& (cacheName="");
		this._url="";
		if (!this._setFramesFromCache(cacheName)){
			this.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(urls,cacheName);
		}
		return this;
	}

	/**
	*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图集并创建动画模版。</p>
	*<p>注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAtlas(...).loadAtlas(...).play(...);。</p>
	*@param url 图集路径。需要创建动画模版时，会以此为数据源。
	*@param loaded （可选）使用指定图集初始化动画完毕的回调。
	*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
	*@return 返回动画本身。
	*/
	__proto.loadAtlas=function(url,loaded,cacheName){
		(cacheName===void 0)&& (cacheName="");
		this._url="";
		var _this_=this;
		function onLoaded (loadUrl){
			if (url===loadUrl){
				_this_.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(url,cacheName);
				if (loaded)loaded.run();
			}
		}
		if (!_this_._setFramesFromCache(cacheName)){
			if (Loader.getAtlas(url))onLoaded(url);
			else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,/*laya.net.Loader.ATLAS*/"atlas");
		}
		return this;
	}

	/**
	*<p>加载并解析由LayaAir IDE制作的动画文件，此文件中可能包含多个动画。默认帧率为在IDE中设计的帧率，如果调用过set interval，则使用此帧间隔对应的帧率。加载后创建动画模版，并缓存到动画模版缓存池，key "url#动画名称" 对应相应动画名称的动画模板，key "url#" 对应动画模版集合的默认动画模版。</p>
	*<p>注意：如果调用本方法前，还没有预加载动画使用的图集，请将atlas参数指定为对应的图集路径，否则会导致动画创建失败。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAnimation(...).loadAnimation(...).play(...);。</p>
	*@param url 动画文件路径。可由LayaAir IDE创建并发布。
	*@param loaded （可选）使用指定动画资源初始化动画完毕的回调。
	*@param atlas （可选）动画用到的图集地址（可选）。
	*@return 返回动画本身。
	*/
	__proto.loadAnimation=function(url,loaded,atlas){
		this._url=url;
		var _this_=this;
		if (!this._actionName)this._actionName="";
		if (!_this_._setFramesFromCache("")){
			if (!atlas || Loader.getAtlas(atlas)){
				this._loadAnimationData(url,loaded,atlas);
				}else {
				Laya.loader.load(atlas,Handler.create(this,this._loadAnimationData,[url,loaded,atlas]),null,/*laya.net.Loader.ATLAS*/"atlas")
			}
			}else {
			_this_._setFramesFromCache(this._actionName,true);
			this.index=0;
			if (loaded)loaded.run();
		}
		return this;
	}

	/**@private */
	__proto._loadAnimationData=function(url,loaded,atlas){
		var _$this=this;
		if (atlas && !Loader.getAtlas(atlas)){
			console.warn("atlas load fail:"+atlas);
			return;
		};
		var _this_=this;
		function onLoaded (loadUrl){
			if (!Loader.getRes(loadUrl))return;
			if (url===loadUrl){
				var tAniO;
				if (!Animation.framesMap[url+"#"]){
					var aniData=_this_._parseGraphicAnimation(Loader.getRes(url));
					if (!aniData)return;
					var aniList=aniData.animationList;
					var i=0,len=aniList.length;
					var defaultO;
					for (i=0;i < len;i++){
						tAniO=aniList[i];
						Animation.framesMap[url+"#"+tAniO.name]=tAniO;
						if (!defaultO)defaultO=tAniO;
					}
					if (defaultO){
						Animation.framesMap[url+"#"]=defaultO;
						_this_._setFramesFromCache(_$this._actionName,true);
						_$this.index=0;
					}
					_$this._checkResumePlaying();
					}else {
					_this_._setFramesFromCache(_$this._actionName,true);
					_$this.index=0;
					_$this._checkResumePlaying();
				}
				if (loaded)loaded.run();
			}
		}
		if (Loader.getRes(url))onLoaded(url);
		else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,/*laya.net.Loader.JSON*/"json");
		Loader.clearRes(url);
	}

	/**@private */
	__proto._parseGraphicAnimation=function(animationData){
		return GraphicAnimation.parseAnimationData(animationData);
	}

	/**@private */
	__proto._parseGraphicAnimationByData=function(animationObject){
		return GraphicAnimation.parseAnimationByData(animationObject);
	}

	/**
	*当前动画的帧图像数组。本类中，每个帧图像是一个Graphics对象，而动画播放就是定时切换Graphics对象的过程。
	*/
	__getset(0,__proto,'frames',function(){
		return this._frames;
		},function(value){
		this._frames=value;
		if (value){
			this._count=value.length;
			if (this._isPlaying)this.play(this._index,this.loop,this._actionName);
			else this.index=this._index;
		}
	});

	/**
	*是否自动播放，默认为false。如果设置为true，则动画被创建并添加到舞台后自动播放。
	*/
	__getset(0,__proto,'autoPlay',null,function(value){
		if (value)this.play();
		else this.stop();
	});

	/**
	*<p>动画数据源。</p>
	*<p>类型如下：<br/>
	*1. LayaAir IDE动画文件路径：使用此类型需要预加载所需的图集资源，否则会创建失败，如果不想预加载或者需要创建完毕的回调，请使用loadAnimation(...)方法；<br/>
	*2. 图集路径：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存或者创建完毕的回调，请使用loadAtlas(...)方法；<br/>
	*3. 图片路径集合：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存，请使用loadImages(...)方法。</p>
	*@param value 数据源。比如：图集："xx/a1.atlas"；图片集合："a1.png,a2.png,a3.png"；LayaAir IDE动画"xx/a1.ani"。
	*/
	__getset(0,__proto,'source',null,function(value){
		if (value.indexOf(".ani")>-1)this.loadAnimation(value);
		else if (value.indexOf(".json")>-1 || value.indexOf("als")>-1 || value.indexOf("atlas")>-1)this.loadAtlas(value);
		else this.loadImages(value.split(","));
	});

	/**
	*设置自动播放的动画名称，在LayaAir IDE中可以创建的多个动画组成的动画集合，选择其中一个动画名称进行播放。
	*/
	__getset(0,__proto,'autoAnimation',null,function(value){
		this.play(0,true,value,false);
	});

	Animation.createFrames=function(url,name){
		var arr,i=0,n=0,g;
		if ((typeof url=='string')){
			var atlas=Loader.getAtlas(url);
			if (atlas && atlas.length){
				arr=[];
				for (i=0,n=atlas.length;i < n;i++){
					g=new RunDriver.createGraphics();
					g.drawTexture(Loader.getRes(atlas[i]),0,0);
					arr.push(g);
				}
			}
			}else if ((url instanceof Array)){
			arr=[];
			for (i=0,n=url.length;i < n;i++){
				g=new RunDriver.createGraphics();
				g.loadImage(url[i],0,0);
				arr.push(g);
			}
		}
		if (name)Animation.framesMap[name]=arr;
		return arr;
	}

	Animation.clearCache=function(key){
		var cache=Animation.framesMap;
		var val;
		var key2=key+"#";
		for (val in cache){
			if (val===key || val.indexOf(key2)==0){
				delete Animation.framesMap[val];
			}
		}
	}

	Animation.framesMap={};
	return Animation;
})(AnimationPlayerBase)


/**
*关键帧动画播放类。
*/
//class laya.display.FrameAnimation extends laya.display.AnimationPlayerBase
var FrameAnimation=(function(_super){
	function FrameAnimation(){
		/**
		*@private
		*id对象表
		*/
		this._targetDic=null;
		/**
		*@private
		*动画数据
		*/
		this._animationData=null;
		/**@private */
		this._animationNewFrames=null;
		FrameAnimation.__super.call(this);
		if (FrameAnimation._sortIndexFun==null){
			FrameAnimation._sortIndexFun=MathUtil.sortByKey("index",false,true);
		}
	}

	__class(FrameAnimation,'laya.display.FrameAnimation',_super);
	var __proto=FrameAnimation.prototype;
	/**
	*@private
	*初始化动画数据
	*@param targetDic 对象表
	*@param animationData 动画数据
	*
	*/
	__proto._setUp=function(targetDic,animationData){
		this._labels=null;
		this._animationNewFrames=null;
		this._targetDic=targetDic;
		this._animationData=animationData;
		this.interval=1000 / animationData.frameRate;
		if (animationData.parsed){
			this._count=animationData.count;
			this._labels=animationData.labels;
			this._animationNewFrames=animationData.animationNewFrames;
			}else {
			this._animationNewFrames=[];
			this._calculateDatas();
		}
		animationData.parsed=true;
		animationData.labels=this._labels;
		animationData.count=this._count;
		animationData.animationNewFrames=this._animationNewFrames;
	}

	/**@inheritDoc */
	__proto.clear=function(){
		_super.prototype.clear.call(this);
		this._targetDic=null;
		this._animationData=null;
	}

	/**@inheritDoc */
	__proto._displayToIndex=function(value){
		if (!this._animationData)return;
		if (value < 0)value=0;
		if (value > this._count)value=this._count;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		for (i=0;i < len;i++){
			this._displayNodeToFrame(nodes[i],value);
		}
	}

	/**
	*@private
	*将节点设置到某一帧的状态
	*@param node 节点ID
	*@param frame
	*@param targetDic 节点表
	*
	*/
	__proto._displayNodeToFrame=function(node,frame,targetDic){
		if (!targetDic)targetDic=this._targetDic;
		var target=targetDic[node.target];
		if (!target){
			return;
		};
		var frames=node.frames,key,propFrames,value;
		var keys=node.keys,i=0,len=keys.length;
		for (i=0;i < len;i++){
			key=keys[i];
			propFrames=frames[key];
			if (propFrames.length > frame){
				value=propFrames[frame];
				}else {
				value=propFrames[propFrames.length-1];
			}
			target[key]=value;
		}
	}

	/**
	*@private
	*计算帧数据
	*
	*/
	__proto._calculateDatas=function(){
		if (!this._animationData)return;
		var nodes=this._animationData.nodes,i=0,len=nodes.length,tNode;
		this._count=0;
		for (i=0;i < len;i++){
			tNode=nodes[i];
			this._calculateNodeKeyFrames(tNode);
		}
		this._count+=1;
	}

	/**
	*@private
	*计算某个节点的帧数据
	*@param node
	*
	*/
	__proto._calculateNodeKeyFrames=function(node){
		var keyFrames=node.keyframes,key,tKeyFrames,target=node.target;
		if (!node.frames){
			node.frames={};
		}
		if (!node.keys){
			node.keys=[];
			}else {
			node.keys.length=0;
		}
		if (!node.initValues){
			node.initValues={};
		}
		for (key in keyFrames){
			tKeyFrames=keyFrames[key];
			if (!node.frames[key]){
				node.frames[key]=[];
			}
			if (this._targetDic && this._targetDic[target]){
				node.initValues[key]=this._targetDic[target][key];
			}
			tKeyFrames.sort(FrameAnimation._sortIndexFun);
			node.keys.push(key);
			this._calculateNodePropFrames(tKeyFrames,node.frames[key],key,target);
		}
	}

	/**
	*将动画控制对象还原到动画控制之前的状态
	*/
	__proto.resetToInitState=function(){
		if (!this._targetDic)return;
		if (!this._animationData)return;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		var tNode;
		var initValues;
		for (i=0;i < len;i++){
			tNode=nodes[i];
			initValues=tNode.initValues;
			if (!initValues)continue ;
			var target=this._targetDic[tNode.target];
			if (!target)continue ;
			var key;
			for (key in initValues){
				target[key]=initValues[key];
			}
		}
	}

	/**
	*@private
	*计算节点某个属性的帧数据
	*@param keyframes
	*@param frames
	*@param key
	*@param target
	*
	*/
	__proto._calculateNodePropFrames=function(keyframes,frames,key,target){
		var i=0,len=keyframes.length-1;
		frames.length=keyframes[len].index+1;
		for (i=0;i < len;i++){
			this._dealKeyFrame(keyframes[i]);
			this._calculateFrameValues(keyframes[i],keyframes[i+1],frames);
		}
		if (len==0){
			frames[0]=keyframes[0].value;
			if (this._animationNewFrames)
				this._animationNewFrames[keyframes[0].index]=true;
		}
		this._dealKeyFrame(keyframes[i]);
	}

	/**
	*@private
	*
	*/
	__proto._dealKeyFrame=function(keyFrame){
		if (keyFrame.label && keyFrame.label !="")this.addLabel(keyFrame.label,keyFrame.index);
	}

	/**
	*@private
	*计算两个关键帧直接的帧数据
	*@param startFrame
	*@param endFrame
	*@param result
	*
	*/
	__proto._calculateFrameValues=function(startFrame,endFrame,result){
		var i=0,easeFun;
		var start=startFrame.index,end=endFrame.index;
		var startValue=startFrame.value;
		var dValue=endFrame.value-startFrame.value;
		var dLen=end-start;
		if (end > this._count)this._count=end;
		if (startFrame.tween){
			easeFun=Ease[startFrame.tweenMethod];
			if (easeFun==null){
				easeFun=Ease.linearNone;
			}
			for (i=start;i < end;i++){
				result[i]=easeFun(i-start,startValue,dValue,dLen);
				if (this._animationNewFrames){
					this._animationNewFrames[i]=true;
				}
			}
			}else {
			for (i=start;i < end;i++){
				result[i]=startValue;
			}
		}
		if (this._animationNewFrames){
			this._animationNewFrames[startFrame.index]=true;
			this._animationNewFrames[endFrame.index]=true;
		}
		result[endFrame.index]=endFrame.value;
	}

	FrameAnimation._sortIndexFun=null;
	return FrameAnimation;
})(AnimationPlayerBase)


/**
*<p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>
*<p>Input 类封装了原生的文本输入框，由于不同浏览器的差异，会导致此对象的默认文本的位置与用户点击输入时的文本的位置有少许的偏差。</p>
*/
//class laya.display.Input extends laya.display.Text
var Input=(function(_super){
	function Input(){
		/**@private */
		this._focus=false;
		/**@private */
		this._multiline=false;
		/**@private */
		this._editable=true;
		/**@private */
		this._restrictPattern=null;
		this._type="text";
		/**输入提示符。*/
		this._prompt='';
		/**输入提示符颜色。*/
		this._promptColor="#A9A9A9";
		this._originColor="#000000";
		this._content='';
		Input.__super.call(this);
		this._maxChars=1E5;
		this._width=100;
		this._height=20;
		this.multiline=false;
		this.overflow=Text.SCROLL;
		this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onMouseDown);
		this.on(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._onUnDisplay);
	}

	__class(Input,'laya.display.Input',_super);
	var __proto=Input.prototype;
	/**
	*设置光标位置和选取字符。
	*@param startIndex 光标起始位置。
	*@param endIndex 光标结束位置。
	*/
	__proto.setSelection=function(startIndex,endIndex){
		this.focus=true;
		laya.display.Input.inputElement.selectionStart=startIndex;
		laya.display.Input.inputElement.selectionEnd=endIndex;
	}

	__proto._onUnDisplay=function(e){
		this.focus=false;
	}

	__proto._onMouseDown=function(e){
		this.focus=true;
	}

	/**
	*在输入期间，如果 Input 实例的位置改变，调用_syncInputTransform同步输入框的位置。
	*/
	__proto._syncInputTransform=function(){
		var inputElement=this.nativeInput;
		var transform=Utils.getTransformRelativeToWindow(this,this.padding[3],this.padding[0]);
		var inputWid=this._width-this.padding[1]-this.padding[3];
		var inputHei=this._height-this.padding[0]-this.padding[2];
		if (Render.isConchApp){
			inputElement.setScale(transform.scaleX,transform.scaleY);
			inputElement.setSize(inputWid,inputHei);
			inputElement.setPos(transform.x,transform.y);
			}else {
			Input.inputContainer.style.transform=Input.inputContainer.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
			inputElement.style.width=inputWid+'px';
			inputElement.style.height=inputHei+'px';
			Input.inputContainer.style.left=transform.x+'px';
			Input.inputContainer.style.top=transform.y+'px';
		}
	}

	/**选中当前实例的所有文本。*/
	__proto.select=function(){
		this.nativeInput.select();
	}

	__proto._setInputMethod=function(){
		Input.input.parentElement && (Input.inputContainer.removeChild(Input.input));
		Input.area.parentElement && (Input.inputContainer.removeChild(Input.area));
		Input.inputElement=(this._multiline ? Input.area :Input.input);
		Input.inputContainer.appendChild(Input.inputElement);
		if (Text.RightToLeft){
			Input.inputElement.style.direction="rtl";
		}
	}

	__proto._focusIn=function(){
		laya.display.Input.isInputting=true;
		var input=this.nativeInput;
		this._focus=true;
		var cssStyle=input.style;
		cssStyle.whiteSpace=(this.wordWrap ? "pre-wrap" :"nowrap");
		this._setPromptColor();
		input.readOnly=!this._editable;
		if (Render.isConchApp){
			input.setType(this._type);
			input.setForbidEdit(!this._editable);
		}
		input.maxLength=this._maxChars;
		var padding=this.padding;
		input.type=this._type;
		input.value=this._content;
		input.placeholder=this._prompt;
		Laya.stage.off(/*laya.events.Event.KEY_DOWN*/"keydown",this,this._onKeyDown);
		Laya.stage.on(/*laya.events.Event.KEY_DOWN*/"keydown",this,this._onKeyDown);
		Laya.stage.focus=this;
		this.event(/*laya.events.Event.FOCUS*/"focus");
		if (Browser.onPC)input.focus();
		if(!Browser.onMiniGame){
			var temp=this._text;
			this._text=null;
		}
		this.typeset();
		input.setColor(this._originColor);
		input.setFontSize(this.fontSize);
		input.setFontFace(Browser.onIPhone ? (Text._fontFamilyMap[this.font] || this.font):this.font);
		if (Render.isConchApp){
			input.setMultiAble && input.setMultiAble(this._multiline);
		}
		cssStyle.lineHeight=(this.leading+this.fontSize)+"px";
		cssStyle.fontStyle=(this.italic ? "italic" :"normal");
		cssStyle.fontWeight=(this.bold ? "bold" :"normal");
		cssStyle.textAlign=this.align;
		cssStyle.padding="0 0";
		this._syncInputTransform();
		if (!Render.isConchApp && Browser.onPC)
			Laya.timer.frameLoop(1,this,this._syncInputTransform);
	}

	// 设置DOM输入框提示符颜色。
	__proto._setPromptColor=function(){
		Input.promptStyleDOM=Browser.getElementById("promptStyle");
		if (!Input.promptStyleDOM){
			Input.promptStyleDOM=Browser.createElement("style");
			Input.promptStyleDOM.setAttribute("id","promptStyle");
			Browser.document.head.appendChild(Input.promptStyleDOM);
		}
		Input.promptStyleDOM.innerText="input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {"+"color:"+this._promptColor+"}"+"input:-moz-placeholder, textarea:-moz-placeholder {"+"color:"+this._promptColor+"}"+"input::-moz-placeholder, textarea::-moz-placeholder {"+"color:"+this._promptColor+"}"+"input:-ms-input-placeholder, textarea:-ms-input-placeholder {"+"color:"+this._promptColor+"}";
	}

	/**@private */
	__proto._focusOut=function(){
		laya.display.Input.isInputting=false;
		this._focus=false;
		this._text=null;
		this._content=this.nativeInput.value;
		if (!this._content){
			Laya.superSet(Text,this,'text',this._prompt);
			Laya.superSet(Text,this,'color',this._promptColor);
			}else {
			Laya.superSet(Text,this,'text',this._content);
			Laya.superSet(Text,this,'color',this._originColor);
		}
		Laya.stage.off(/*laya.events.Event.KEY_DOWN*/"keydown",this,this._onKeyDown);
		Laya.stage.focus=null;
		this.event(/*laya.events.Event.BLUR*/"blur");
		if (Render.isConchApp)this.nativeInput.blur();
		Browser.onPC && Laya.timer.clear(this,this._syncInputTransform);
	}

	/**@private */
	__proto._onKeyDown=function(e){
		if (e.keyCode===13){
			if (Browser.onMobile && !this._multiline)
				this.focus=false;
			this.event(/*laya.events.Event.ENTER*/"enter");
		}
	}

	__proto.changeText=function(text){
		this._content=text;
		if (this._focus){
			this.nativeInput.value=text || '';
			this.event(/*laya.events.Event.CHANGE*/"change");
		}else
		_super.prototype.changeText.call(this,text);
	}

	/**@inheritDoc */
	__getset(0,__proto,'color',_super.prototype._$get_color,function(value){
		if (this._focus)
			this.nativeInput.setColor(value);
		Laya.superSet(Text,this,'color',this._content?value:this._promptColor);
		this._originColor=value;
	});

	//[Deprecated]
	__getset(0,__proto,'inputElementYAdjuster',function(){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
		return 0;
		},function(value){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
	});

	/**表示是否是多行输入框。*/
	__getset(0,__proto,'multiline',function(){
		return this._multiline;
		},function(value){
		this._multiline=value;
		this.valign=value ? "top" :"middle";
	});

	/**
	*<p>字符数量限制，默认为10000。</p>
	*<p>设置字符数量限制时，小于等于0的值将会限制字符数量为10000。</p>
	*/
	__getset(0,__proto,'maxChars',function(){
		return this._maxChars;
		},function(value){
		if (value <=0)
			value=1E5;
		this._maxChars=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'text',function(){
		if (this._focus)
			return this.nativeInput.value;
		else
		return this._content || "";
		},function(value){
		Laya.superSet(Text,this,'color',this._originColor);
		value+='';
		if (this._focus){
			this.nativeInput.value=value || '';
			this.event(/*laya.events.Event.CHANGE*/"change");
			}else {
			if (!this._multiline)
				value=value.replace(/\r?\n/g,'');
			this._content=value;
			if (value)
				Laya.superSet(Text,this,'text',value);
			else {
				Laya.superSet(Text,this,'text',this._prompt);
				Laya.superSet(Text,this,'color',this.promptColor);
			}
		}
	});

	/**
	*获取对输入框的引用实例。
	*/
	__getset(0,__proto,'nativeInput',function(){
		return this._multiline ? Input.area :Input.input;
	});

	/**
	*设置输入提示符。
	*/
	__getset(0,__proto,'prompt',function(){
		return this._prompt;
		},function(value){
		if (!this._text && value)
			Laya.superSet(Text,this,'color',this._promptColor);
		this.promptColor=this._promptColor;
		if (this._text)
			Laya.superSet(Text,this,'text',(this._text==this._prompt)?value:this._text);
		else
		Laya.superSet(Text,this,'text',value);
		this._prompt=Text.langPacks && Text.langPacks[value] ? Text.langPacks[value] :value;
	});

	// 因此 调用focus接口是无法都在移动平台立刻弹出键盘的
	/**
	*表示焦点是否在此实例上。
	*/
	__getset(0,__proto,'focus',function(){
		return this._focus;
		},function(value){
		var input=this.nativeInput;
		if (this._focus!==value){
			if (value){
				if (input.target){
					input.target._focusOut();
					}else {
					this._setInputMethod();
				}
				input.target=this;
				this._focusIn();
				}else {
				input.target=null;
				this._focusOut();
				Browser.document.body.scrollTop=0;
				input.blur();
				if (Render.isConchApp){
					input.setPos(-10000,-10000);
				}else if (Input.inputContainer.contains(input))
				Input.inputContainer.removeChild(input);
			}
		}
	});

	/**限制输入的字符。*/
	__getset(0,__proto,'restrict',function(){
		if (this._restrictPattern){
			return this._restrictPattern.source;
		}
		return "";
		},function(pattern){
		if (pattern){
			pattern="[^"+pattern+"]";
			if (pattern.indexOf("^^")>-1)
				pattern=pattern.replace("^^","");
			this._restrictPattern=new RegExp(pattern,"g");
		}else
		this._restrictPattern=null;
	});

	/**
	*是否可编辑。
	*/
	__getset(0,__proto,'editable',function(){
		return this._editable;
		},function(value){
		this._editable=value;
		if (Render.isConchApp){
			Input.input.setForbidEdit(!value);
		}
	});

	/**
	*设置输入提示符颜色。
	*/
	__getset(0,__proto,'promptColor',function(){
		return this._promptColor;
		},function(value){
		this._promptColor=value;
		if (!this._content)Laya.superSet(Text,this,'color',value);
	});

	/**
	*<p>输入框类型为Input静态常量之一。</p>
	*<ul>
	*<li>TYPE_TEXT</li>
	*<li>TYPE_PASSWORD</li>
	*<li>TYPE_EMAIL</li>
	*<li>TYPE_URL</li>
	*<li>TYPE_NUMBER</li>
	*<li>TYPE_RANGE</li>
	*<li>TYPE_DATE</li>
	*<li>TYPE_MONTH</li>
	*<li>TYPE_WEEK</li>
	*<li>TYPE_TIME</li>
	*<li>TYPE_DATE_TIME</li>
	*<li>TYPE_DATE_TIME_LOCAL</li>
	*</ul>
	*<p>平台兼容性参见http://www.w3school.com.cn/html5/html_5_form_input_types.asp。</p>
	*/
	__getset(0,__proto,'type',function(){
		return this._type;
		},function(value){
		if (value=="password")
			this._getCSSStyle().password=true;
		else
		this._getCSSStyle().password=false;
		this._type=value;
		if (Render.isConchApp){
			this.nativeInput.setType(value);
		}
	});

	/**
	*<p>原生输入框 X 轴调整值，用来调整输入框坐标。</p>
	*<p>由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。</p>
	*@deprecated
	*/
	__getset(0,__proto,'inputElementXAdjuster',function(){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
		return 0;
		},function(value){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
	});

	//[Deprecated(replacement="Input.type")]
	__getset(0,__proto,'asPassword',function(){
		return this._getCSSStyle().password;
		},function(value){
		this._getCSSStyle().password=value;
		this._type=/*CLASS CONST:laya.display.Input.TYPE_PASSWORD*/"password";
		console.warn("deprecated: 使用type=\"password\"替代设置asPassword, asPassword将在下次重大更新时删去");
		this.isChanged=true;
	});

	Input.__init__=function(){
		Input._createInputElement();
		if (Browser.onMobile)
			Render.canvas.addEventListener(Input.IOS_IFRAME ?(Browser.onMiniGame ? "touchend" :"click"):"touchend",Input._popupInputMethod);
	}

	Input._popupInputMethod=function(e){
		if (!laya.display.Input.isInputting)return;
		var input=laya.display.Input.inputElement;
		input.focus();
	}

	Input._createInputElement=function(){
		Input._initInput(Input.area=Browser.createElement("textarea"));
		Input._initInput(Input.input=Browser.createElement("input"));
		Input.inputContainer=Browser.createElement("div");
		Input.inputContainer.style.position="absolute";
		Input.inputContainer.style.zIndex=1E5;
		Browser.container.appendChild(Input.inputContainer);
		Input.inputContainer.setPos=function (x,y){Input.inputContainer.style.left=x+'px';Input.inputContainer.style.top=y+'px';};
	}

	Input._initInput=function(input){
		var style=input.style;
		style.cssText="position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;";
		style.resize='none';
		style.backgroundColor='transparent';
		style.border='none';
		style.outline='none';
		style.zIndex=1;
		input.addEventListener('input',Input._processInputting);
		input.addEventListener('mousemove',Input._stopEvent);
		input.addEventListener('mousedown',Input._stopEvent);
		input.addEventListener('touchmove',Input._stopEvent);
		input.setFontFace=function (fontFace){input.style.fontFamily=fontFace;};
		if(!Render.isConchApp){
			input.setColor=function (color){input.style.color=color;};
			input.setFontSize=function (fontSize){input.style.fontSize=fontSize+'px';};
		}
	}

	Input._processInputting=function(e){
		var input=laya.display.Input.inputElement.target;
		if (!input)return;
		var value=laya.display.Input.inputElement.value;
		if (input._restrictPattern){
			value=value.replace(/\u2006|\x27/g,"");
			if (input._restrictPattern.test(value)){
				value=value.replace(input._restrictPattern,"");
				laya.display.Input.inputElement.value=value;
			}
		}
		input._text=value;
		input.event(/*laya.events.Event.INPUT*/"input");
	}

	Input._stopEvent=function(e){
		if (e.type=='touchmove')
			e.preventDefault();
		e.stopPropagation && e.stopPropagation();
	}

	Input.TYPE_TEXT="text";
	Input.TYPE_PASSWORD="password";
	Input.TYPE_EMAIL="email";
	Input.TYPE_URL="url";
	Input.TYPE_NUMBER="number";
	Input.TYPE_RANGE="range";
	Input.TYPE_DATE="date";
	Input.TYPE_MONTH="month";
	Input.TYPE_WEEK="week";
	Input.TYPE_TIME="time";
	Input.TYPE_DATE_TIME="datetime";
	Input.TYPE_DATE_TIME_LOCAL="datetime-local";
	Input.TYPE_SEARCH="search";
	Input.input=null;
	Input.area=null;
	Input.inputElement=null;
	Input.inputContainer=null;
	Input.confirmButton=null;
	Input.promptStyleDOM=null;
	Input.inputHeight=45;
	Input.isInputting=false;
	Input.stageMatrix=null;
	__static(Input,
	['IOS_IFRAME',function(){return this.IOS_IFRAME=(Browser.onIOS && Browser.window.top !=Browser.window.self);}
	]);
	return Input;
})(Text)


/**
*@private
*<p> <code>HTMLImage</code> 用于创建 HTML Image 元素。</p>
*<p>请使用 <code>HTMLImage.create()<code>获取新实例，不要直接使用 <code>new HTMLImage<code> 。</p>
*/
//class laya.resource.HTMLImage extends laya.resource.FileBitmap
var HTMLImage=(function(_super){
	function HTMLImage(src,def){
		/**异步加载锁*/
		this._recreateLock=false;
		/**异步加载完成后是否需要释放（有可能在恢复过程中,再次被释放，用此变量做标记）*/
		this._needReleaseAgain=false;
		this._enableMerageInAtlas=true;
		HTMLImage.__super.call(this);
		this._init_(src,def);
	}

	__class(HTMLImage,'laya.resource.HTMLImage',_super);
	var __proto=HTMLImage.prototype;
	__proto._init_=function(src,def){
		this._src=src;
		this._source=new Browser.window.Image();
		if (def){
			def.onload && (this.onload=def.onload);
			def.onerror && (this.onerror=def.onerror);
			def.onCreate && def.onCreate(this);
		}
		if (src.indexOf("data:image")!=0)this._source.crossOrigin="";
		(src)&& (this._source.src=src);
	}

	/**
	*@inheritDoc
	*/
	__proto.recreateResource=function(){
		var _$this=this;
		if (this._src==="")
			throw new Error("src no null！");
		this._needReleaseAgain=false;
		if (!this._source){
			this._recreateLock=true;
			var _this=this;
			this._source=new Browser.window.Image();
			this._source.crossOrigin="";
			this._source.onload=function (){
				if (_this._needReleaseAgain){
					_this._needReleaseAgain=false;
					_this._source.onload=null;
					_this._source=null;
					return;
				}
				_this._source.onload=null;
				_this.memorySize=_$this._w *_$this._h *4;
				_this._recreateLock=false;
				_this.completeCreate();
			};
			this._source.src=this._src;
			}else {
			if (this._recreateLock)
				return;
			this.memorySize=this._w *this._h *4;
			this._recreateLock=false;
			this.completeCreate();
		}
	}

	/**
	*@inheritDoc
	*/
	__proto.disposeResource=function(){
		if (this._recreateLock)
			this._needReleaseAgain=true;
		(this._source)&& (this._source=null,this.memorySize=0);
	}

	/***调整尺寸。*/
	__proto.onresize=function(){
		this._w=this._source.width;
		this._h=this._source.height;
	}

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'onload',null,function(value){
		var _$this=this;
		this._onload=value;
		this._source && (this._source.onload=this._onload !=null ? (function(){
			_$this.onresize();
			_$this._onload();
		}):null);
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'onerror',null,function(value){
		var _$this=this;
		this._onerror=value;
		this._source && (this._source.onerror=this._onerror !=null ? (function(){
			_$this._onerror()
		}):null);
	});

	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._enableMerageInAtlas;
		},function(value){
		this._enableMerageInAtlas=value;
		if (Render.isConchApp){
			if (this._source)this._source.enableMerageInAtlas=value;
		}
	});

	HTMLImage.create=function(src,def){
		return new HTMLImage(src,def);
	}

	return HTMLImage;
})(FileBitmap)


/**
*<p> 动效模板。用于为指定目标对象添加动画效果。每个动效有唯一的目标对象，而同一个对象可以添加多个动效。 当一个动效开始播放时，其他动效会自动停止播放。</p>
*<p> 可以通过LayaAir IDE创建。 </p>
*/
//class laya.display.EffectAnimation extends laya.display.FrameAnimation
var EffectAnimation=(function(_super){
	function EffectAnimation(){
		/**@private */
		this._target=null;
		/**@private */
		this._playEvents=null;
		/**@private */
		this._initData={};
		/**@private */
		this._aniKeys=null;
		/**@private */
		this._effectClass=null;
		EffectAnimation.__super.call(this);
	}

	__class(EffectAnimation,'laya.display.EffectAnimation',_super);
	var __proto=EffectAnimation.prototype;
	/**@private */
	__proto._onOtherBegin=function(effect){
		if (effect==this)
			return;
		this.stop();
	}

	/**@private */
	__proto.addEvent=function(){
		if (!this._target || !this._playEvents)
			return;
		this._setControlNode(this._target);
		this._target.on(this._playEvents,this,this._onPlayAction);
	}

	/**@private */
	__proto._onPlayAction=function(){
		this.play(0,false);
	}

	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		if (!this._target)
			return;
		this._target.event("effectanimationbegin",[this]);
		this._recordInitData();
		laya.display.AnimationPlayerBase.prototype.play.call(this,start,loop,name,showWarn);
	}

	/**@private */
	__proto._recordInitData=function(){
		if (!this._aniKeys)
			return;
		var i=0,len=0;
		len=this._aniKeys.length;
		var key;
		for (i=0;i < len;i++){
			key=this._aniKeys[i];
			this._initData[key]=this._target[key];
		}
	}

	/**@private */
	__proto._displayToIndex=function(value){
		if (!this._animationData)
			return;
		if (value < 0)
			value=0;
		if (value > this._count)
			value=this._count;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		len=len > 1 ? 1 :len;
		for (i=0;i < len;i++){
			this._displayNodeToFrame(nodes[i],value);
		}
	}

	/**@private */
	__proto._displayNodeToFrame=function(node,frame,targetDic){
		if (!this._target)
			return;
		var target;
		target=this._target;
		var frames=node.frames,key,propFrames,value;
		var keys=node.keys,i=0,len=keys.length;
		var secondFrames;
		secondFrames=node.secondFrames;
		var tSecondFrame=0;
		var easeFun;
		var tKeyFrames;
		var startFrame;
		var endFrame;
		for (i=0;i < len;i++){
			key=keys[i];
			propFrames=frames[key];
			tSecondFrame=secondFrames[key];
			if (tSecondFrame==-1){
				value=this._initData[key];
				}else {
				if (frame < tSecondFrame){
					tKeyFrames=node.keyframes[key];
					startFrame=tKeyFrames[0];
					if (startFrame.tween){
						easeFun=Ease[startFrame.tweenMethod];
						if (easeFun==null){
							easeFun=Ease.linearNone;
						}
						endFrame=tKeyFrames[1];
						value=easeFun(frame,this._initData[key],endFrame.value-this._initData[key],endFrame.index);
						}else {
						value=this._initData[key];
					}
					}else {
					if (propFrames.length > frame){
						value=propFrames[frame];
						}else {
						value=propFrames[propFrames.length-1];
					}
				}
			}
			target[key]=value;
		}
	}

	/**@private */
	__proto._calculateNodeKeyFrames=function(node){
		_super.prototype._calculateNodeKeyFrames.call(this,node);
		var keyFrames=node.keyframes,key,tKeyFrames,target=node.target;
		var secondFrames;
		secondFrames={};
		node.secondFrames=secondFrames;
		for (key in keyFrames){
			tKeyFrames=keyFrames[key];
			if (tKeyFrames.length <=1){
				secondFrames[key]=-1;
				}else {
				secondFrames[key]=tKeyFrames[1].index;
			}
		}
	}

	/**
	*本实例的目标对象。通过本实例控制目标对象的属性变化。
	*@param v 指定的目标对象。
	*/
	__getset(0,__proto,'target',function(){
		return this._target;
		},function(v){
		if (this._target){
			this._target.off("effectanimationbegin",this,this._onOtherBegin);
		}
		this._target=v;
		if (this._target){
			this._target.on("effectanimationbegin",this,this._onOtherBegin);
		}
		this.addEvent();
	});

	/**
	*设置开始播放的事件。本实例会侦听目标对象的指定事件，触发后播放相应动画效果。
	*@param event
	*/
	__getset(0,__proto,'playEvent',null,function(event){
		this._playEvents=event;
		if (!event)
			return;
		this.addEvent();
	});

	/**
	*设置动画数据。
	*@param uiData
	*/
	__getset(0,__proto,'effectData',null,function(uiData){
		if (uiData){
			var aniData;
			aniData=uiData["animations"];
			if (aniData && aniData[0]){
				this._setUp({},aniData[0]);
				if (aniData[0].nodes && aniData[0].nodes[0]){
					this._aniKeys=aniData[0].nodes[0].keys;
				}
			}
		}
	});

	/**
	*设置提供数据的类。
	*@param classStr 类路径
	*/
	__getset(0,__proto,'effectClass',null,function(classStr){
		this._effectClass=ClassUtils.getClass(classStr);
		if (this._effectClass){
			var uiData;
			uiData=this._effectClass["uiView"];
			if (uiData){
				var aniData;
				aniData=uiData["animations"];
				if (aniData && aniData[0]){
					this._setUp({},aniData[0]);
					if (aniData[0].nodes && aniData[0].nodes[0]){
						this._aniKeys=aniData[0].nodes[0].keys;
					}
				}
			}
		}
	});

	EffectAnimation.EffectAnimationBegin="effectanimationbegin";
	return EffectAnimation;
})(FrameAnimation)


/**
*@private
*/
//class laya.utils.GraphicAnimation extends laya.display.FrameAnimation
var GraphicAnimation=(function(_super){
	var GraphicNode;
	function GraphicAnimation(){
		/**
		*@private
		*/
		this.animationList=null;
		/**
		*@private
		*/
		this.animationDic=null;
		/**
		*@private
		*/
		this._nodeList=null;
		/**
		*@private
		*/
		this._nodeDefaultProps=null;
		/**
		*@private
		*/
		this._gList=null;
		/**
		*@private
		*/
		this._nodeIDAniDic={};
		this._rootNode=null;
		this._nodeGDic=null;
		GraphicAnimation.__super.call(this);
	}

	__class(GraphicAnimation,'laya.utils.GraphicAnimation',_super);
	var __proto=GraphicAnimation.prototype;
	/**
	*@private
	*/
	__proto._parseNodeList=function(uiView){
		if (!this._nodeList){
			this._nodeList=[];
		}
		this._nodeDefaultProps[uiView.compId]=uiView.props;
		if (uiView.compId)
			this._nodeList.push(uiView.compId);
		var childs=uiView.child;
		if (childs){
			var i=0,len=childs.length;
			for (i=0;i < len;i++){
				this._parseNodeList(childs[i]);
			}
		}
	}

	/**
	*@private
	*/
	__proto._calGraphicData=function(aniData){
		this._setUp(null,aniData);
		this._createGraphicData();
		if (this._nodeIDAniDic){
			var key;
			for (key in this._nodeIDAniDic){
				this._nodeIDAniDic[key]=null;
			}
		}
	}

	/**
	*@private
	*/
	__proto._createGraphicData=function(){
		var gList=[];
		var i=0,len=this.count;
		var animationDataNew=this._animationNewFrames;
		if (!animationDataNew)animationDataNew=[];
		var preGraphic;
		for (i=0;i < len;i++){
			if (animationDataNew[i] || !preGraphic){
				preGraphic=this._createFrameGraphic(i);
			}
			gList.push(preGraphic);
		}
		this._gList=gList;
	}

	/**
	*@private
	*/
	__proto._createFrameGraphic=function(frame){
		var g=RunDriver.createGraphics();
		if (!GraphicAnimation._rootMatrix)
			GraphicAnimation._rootMatrix=new Matrix();
		this._updateNodeGraphic(this._rootNode,frame,GraphicAnimation._rootMatrix,g);
		return g;
	}

	__proto._updateNodeGraphic=function(node,frame,parentTransfrom,g,alpha){
		(alpha===void 0)&& (alpha=1);
		var tNodeG;
		tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
		var tGraphicAlpha=tNodeG.alpha *alpha;
		if (tGraphicAlpha < 0.01)return;
		if (!tNodeG.resultTransform){
			tNodeG.resultTransform=Matrix.create();
		};
		var tResultTransform;
		tResultTransform=tNodeG.resultTransform;
		Matrix.mul(tNodeG.transform,parentTransfrom,tResultTransform);
		var tTex;
		if (tNodeG.skin){
			tTex=this._getTextureByUrl(tNodeG.skin);
			if (tTex){
				if (tResultTransform._checkTransform()){
					g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tResultTransform,tGraphicAlpha);
					tNodeG.resultTransform=null;
					}else {
					g.drawTexture(tTex,tResultTransform.tx,tResultTransform.ty,tNodeG.width,tNodeG.height,null,tGraphicAlpha);
				}
			}
		};
		var childs;
		childs=node.child;
		if (!childs)
			return;
		var i=0,len=0;
		len=childs.length;
		for (i=0;i < len;i++){
			this._updateNodeGraphic(childs[i],frame,tResultTransform,g,tGraphicAlpha);
		}
	}

	__proto._updateNoChilds=function(tNodeG,g){
		if (!tNodeG.skin)
			return;
		var tTex=this._getTextureByUrl(tNodeG.skin);
		if (!tTex)
			return;
		var tTransform=tNodeG.transform;
		tTransform._checkTransform();
		var onlyTranslate=false;
		onlyTranslate=!tTransform.bTransform;
		if (!onlyTranslate){
			g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tTransform.clone(),tNodeG.alpha);
			}else {
			g.drawTexture(tTex,tTransform.tx,tTransform.ty,tNodeG.width,tNodeG.height,null,tNodeG.alpha);
		}
	}

	__proto._updateNodeGraphic2=function(node,frame,g){
		var tNodeG;
		tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
		if (!node.child){
			this._updateNoChilds(tNodeG,g);
			return;
		};
		var tTransform=tNodeG.transform;
		tTransform._checkTransform();
		var onlyTranslate=false;
		onlyTranslate=!tTransform.bTransform;
		var hasTrans=false;
		hasTrans=onlyTranslate && (tTransform.tx !=0 || tTransform.ty !=0);
		var ifSave=false;
		ifSave=(tTransform.bTransform)|| tNodeG.alpha !=1;
		if (ifSave){
			g.save();
		}
		if (tNodeG.alpha !=1){
			g.alpha(tNodeG.alpha);
		}
		if (!onlyTranslate){
			g.transform(tTransform.clone());
			}else if (hasTrans){
			g.translate(tTransform.tx,tTransform.ty);
		};
		var childs;
		childs=node.child;
		var tTex;
		if (tNodeG.skin){
			tTex=this._getTextureByUrl(tNodeG.skin);
			if (tTex){
				g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height);
			}
		}
		if (childs){
			var i=0,len=0;
			len=childs.length;
			for (i=0;i < len;i++){
				this._updateNodeGraphic2(childs[i],frame,g);
			}
		}
		if (ifSave){
			g.restore();
			}else {
			if (!onlyTranslate){
				g.transform(tTransform.clone().invert());
				}else if (hasTrans){
				g.translate(-tTransform.tx,-tTransform.ty);
			}
		}
	}

	/**
	*@private
	*/
	__proto._calculateNodeKeyFrames=function(node){
		_super.prototype._calculateNodeKeyFrames.call(this,node);
		this._nodeIDAniDic[node.target]=node;
	}

	/**
	*@private
	*/
	__proto.getNodeDataByID=function(nodeID){
		return this._nodeIDAniDic[nodeID];
	}

	/**
	*@private
	*/
	__proto._getParams=function(obj,params,frame,obj2){
		var rst=GraphicAnimation._temParam;
		rst.length=params.length;
		var i=0,len=params.length;
		for (i=0;i < len;i++){
			rst[i]=this._getObjVar(obj,params[i][0],frame,params[i][1],obj2);
		}
		return rst;
	}

	/**
	*@private
	*/
	__proto._getObjVar=function(obj,key,frame,noValue,obj2){
		if (obj.hasOwnProperty(key)){
			var vArr=obj[key];
			if (frame >=vArr.length)
				frame=vArr.length-1;
			return obj[key][frame];
		}
		if (obj2.hasOwnProperty(key)){
			return obj2[key];
		}
		return noValue;
	}

	__proto._getNodeGraphicData=function(nodeID,frame,rst){
		if (!rst)
			rst=GraphicNode.create();
		if (!rst.transform){
			rst.transform=Matrix.create();
			}else{
			rst.transform.identity();
		};
		var node=this.getNodeDataByID(nodeID);
		if (!node)
			return rst;
		var frameData=node.frames;
		var params=this._getParams(frameData,GraphicAnimation._drawTextureCmd,frame,this._nodeDefaultProps[nodeID]);
		var url=params[0];
		var width=NaN,height=NaN;
		var px=params[5],py=params[6];
		var aX=params[13],aY=params[14];
		var sx=params[7],sy=params[8];
		var rotate=params[9];
		var skewX=params[11],skewY=params[12]
		width=params[3];
		height=params[4];
		if (width==0 || height==0)url=null;
		if (width==-1)width=0;
		if (height==-1)height=0;
		var tex;
		rst.skin=url;
		rst.width=width;
		rst.height=height;
		if (url){
			tex=this._getTextureByUrl(url);
			if (tex){
				if (!width)
					width=tex.sourceWidth;
				if (!height)
					height=tex.sourceHeight;
				}else {
				console.warn("lost skin:",url,",you may load pics first");
			}
		}
		rst.alpha=params[10];
		var m;
		m=rst.transform;
		if (aX !=0){
			px=aX *width;
		}
		if (aY !=0){
			py=aY *height;
		}
		if (px !=0 || py !=0){
			m.translate(-px,-py);
		};
		var tm=null;
		if (rotate || sx!==1 || sy!==1 || skewX || skewY){
			tm=GraphicAnimation._tempMt;
			tm.identity();
			tm.bTransform=true;
			var skx=(rotate-skewX)*0.0174532922222222;
			var sky=(rotate+skewY)*0.0174532922222222;
			var cx=Math.cos(sky);
			var ssx=Math.sin(sky);
			var cy=Math.sin(skx);
			var ssy=Math.cos(skx);
			tm.a=sx *cx;
			tm.b=sx *ssx;
			tm.c=-sy *cy;
			tm.d=sy *ssy;
			tm.tx=tm.ty=0;
		}
		if (tm){
			m=Matrix.mul(m,tm,m);
		}
		m.translate(params[1],params[2]);
		return rst;
	}

	/**
	*@private
	*/
	__proto._getTextureByUrl=function(url){
		return Loader.getRes(url);
	}

	/**
	*@private
	*/
	__proto.setAniData=function(uiView,aniName){
		if (uiView.animations){
			this._nodeDefaultProps={};
			this._nodeGDic={};
			if (this._nodeList)
				this._nodeList.length=0;
			this._rootNode=uiView;
			this._parseNodeList(uiView);
			var aniDic={};
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAniO;
			for (i=0;i < len;i++){
				tAniO=animations[i];
				this._labels=null;
				if (aniName && aniName !=tAniO.name){
					continue ;
				}
				if (!tAniO)
					continue ;
				try {
					this._calGraphicData(tAniO);
					}catch (e){
					console.warn("parse animation fail:"+tAniO.name+",empty animation created");
					this._gList=[];
				};
				var frameO={};
				frameO.interval=1000 / tAniO["frameRate"];
				frameO.frames=this._gList;
				frameO.labels=this._labels;
				frameO.name=tAniO.name;
				anilist.push(frameO);
				aniDic[tAniO.name]=frameO;
			}
			this.animationList=anilist;
			this.animationDic=aniDic;
		}
		GraphicAnimation._temParam.length=0;
	}

	__proto.parseByData=function(aniData){
		var rootNode,aniO;
		rootNode=aniData.nodeRoot;
		aniO=aniData.aniO;
		delete aniData.nodeRoot;
		delete aniData.aniO;
		this._nodeDefaultProps={};
		this._nodeGDic={};
		if (this._nodeList)
			this._nodeList.length=0;
		this._rootNode=rootNode;
		this._parseNodeList(rootNode);
		this._labels=null;
		try {
			this._calGraphicData(aniO);
			}catch (e){
			console.warn("parse animation fail:"+aniO.name+",empty animation created");
			this._gList=[];
		};
		var frameO=aniData;
		frameO.interval=1000 / aniO["frameRate"];
		frameO.frames=this._gList;
		frameO.labels=this._labels;
		frameO.name=aniO.name;
		return frameO;
	}

	/**
	*@private
	*/
	__proto.setUpAniData=function(uiView){
		if (uiView.animations){
			var aniDic={};
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAniO;
			for (i=0;i < len;i++){
				tAniO=animations[i];
				if (!tAniO)
					continue ;
				var frameO={};
				frameO.name=tAniO.name;
				frameO.aniO=tAniO;
				frameO.nodeRoot=uiView;
				anilist.push(frameO);
				aniDic[tAniO.name]=frameO;
			}
			this.animationList=anilist;
			this.animationDic=aniDic;
		}
	}

	/**
	*@private
	*/
	__proto._clear=function(){
		this.animationList=null;
		this.animationDic=null;
		this._gList=null;
		if (this._nodeGDic){
			var key;
			var tGNode;
			for (key in this._nodeGDic){
				tGNode=this._nodeGDic[key];
				if (tGNode)tGNode.recover();
			}
		}
		this._nodeGDic=null;
	}

	GraphicAnimation.parseAnimationByData=function(animationObject){
		if (!GraphicAnimation._I)
			GraphicAnimation._I=new GraphicAnimation();
		var rst;
		rst=GraphicAnimation._I.parseByData(animationObject);
		GraphicAnimation._I._clear();
		return rst;
	}

	GraphicAnimation.parseAnimationData=function(aniData){
		if (!GraphicAnimation._I)
			GraphicAnimation._I=new GraphicAnimation();
		GraphicAnimation._I.setUpAniData(aniData);
		var rst;
		rst={};
		rst.animationList=GraphicAnimation._I.animationList;
		rst.animationDic=GraphicAnimation._I.animationDic;
		GraphicAnimation._I._clear();
		return rst;
	}

	GraphicAnimation._temParam=[];
	GraphicAnimation._I=null;
	GraphicAnimation._rootMatrix=null;
	__static(GraphicAnimation,
	['_drawTextureCmd',function(){return this._drawTextureCmd=[["skin",null],["x",0],["y",0],["width",-1],["height",-1],["pivotX",0],["pivotY",0],["scaleX",1],["scaleY",1],["rotation",0],["alpha",1],["skewX",0],["skewY",0],["anchorX",0],["anchorY",0]];},'_tempMt',function(){return this._tempMt=new Matrix();}
	]);
	GraphicAnimation.__init$=function(){
		//class GraphicNode
		GraphicNode=(function(){
			function GraphicNode(){
				this.skin=null;
				this.transform=null;
				this.resultTransform=null;
				this.width=NaN;
				this.height=NaN;
				this.alpha=1;
			}
			__class(GraphicNode,'');
			var __proto=GraphicNode.prototype;
			__proto.recover=function(){
				this.skin=null;
				this.width=0;
				this.height=0;
				this.alpha=1;
				if (this.transform){
					this.transform.destroy();
					this.transform=null;
				}
				if (this.resultTransform){
					this.resultTransform.destroy();
					this.resultTransform=null;
				}
				Pool.recover("GraphicNode",this);
			}
			GraphicNode.create=function(){
				return Pool.getItemByClass("GraphicNode",GraphicNode);
			}
			return GraphicNode;
		})()
	}

	return GraphicAnimation;
})(FrameAnimation)


	Laya.__init([EventDispatcher,LoaderManager,Render,Browser,Timer,LocalStorage,TimeLine,GraphicAnimation]);
})(window,document,Laya);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
//class LayaMain
var LayaMain=(function(){
	/*[COMPILER OPTIONS:normal]*/
	function LayaMain(){}
	__class(LayaMain,'LayaMain');
	return LayaMain;
})()



	new LayaMain();

})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Arith=laya.maths.Arith,Bezier=laya.maths.Bezier,Bitmap=laya.resource.Bitmap,Browser=laya.utils.Browser;
	var Byte=laya.utils.Byte,Color=laya.utils.Color,ColorFilter=laya.filters.ColorFilter,Config=Laya.Config,Context=laya.resource.Context;
	var Event=laya.events.Event,Filter=laya.filters.Filter,Graphics=laya.display.Graphics,HTMLCanvas=laya.resource.HTMLCanvas;
	var HTMLChar=laya.utils.HTMLChar,HTMLImage=laya.resource.HTMLImage,HTMLSubImage=laya.resource.HTMLSubImage;
	var Handler=laya.utils.Handler,Loader=laya.net.Loader,Matrix=laya.maths.Matrix,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle;
	var Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Resource=laya.resource.Resource,ResourceManager=laya.resource.ResourceManager,RunDriver=laya.utils.RunDriver;
	var Sprite=laya.display.Sprite,Stage=laya.display.Stage,Stat=laya.utils.Stat,StringKey=laya.utils.StringKey;
	var Style=laya.display.css.Style,System=laya.system.System,Text=laya.display.Text,Texture=laya.resource.Texture;
	var TransformInfo=laya.display.css.TransformInfo,URL=laya.net.URL,Utils=laya.utils.Utils,VectorGraphManager=laya.utils.VectorGraphManager;
	var WordText=laya.utils.WordText;
Laya.interface('laya.webgl.shapes.IShape');
Laya.interface('laya.webgl.submit.ISubmit');
Laya.interface('laya.webgl.text.ICharSegment');
Laya.interface('laya.webgl.canvas.save.ISaveData');
Laya.interface('laya.webgl.resource.IMergeAtlasBitmap');
Laya.interface('laya.filters.IFilterActionGL','laya.filters.IFilterAction');
//class laya.filters.webgl.FilterActionGL
var FilterActionGL=(function(){
	function FilterActionGL(){}
	__class(FilterActionGL,'laya.filters.webgl.FilterActionGL');
	var __proto=FilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValue=function(shader){}
	__proto.setValueMix=function(shader){}
	__proto.apply3d=function(scope,sprite,context,x,y){return null;}
	__proto.apply=function(srcCanvas){return null;}
	__getset(0,__proto,'typeMix',function(){
		return 0;
	});

	return FilterActionGL;
})()


//class laya.webgl.shader.ShaderValue
var ShaderValue=(function(){
	function ShaderValue(){}
	__class(ShaderValue,'laya.webgl.shader.ShaderValue');
	return ShaderValue;
})()


//class laya.webgl.atlas.AtlasGrid
var AtlasGrid=(function(){
	var TexRowInfo,TexMergeTexSize;
	function AtlasGrid(width,height,atlasID){
		this._atlasID=0;
		this._width=0;
		this._height=0;
		this._texCount=0;
		this._rowInfo=null;
		this._cells=null;
		this._failSize=new TexMergeTexSize();
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(atlasID===void 0)&& (atlasID=0);
		this._cells=null;
		this._rowInfo=null;
		this._init(width,height);
		this._atlasID=atlasID;
	}

	__class(AtlasGrid,'laya.webgl.atlas.AtlasGrid');
	var __proto=AtlasGrid.prototype;
	//------------------------------------------------------------------------------
	__proto.getAltasID=function(){
		return this._atlasID;
	}

	//------------------------------------------------------------------------------
	__proto.setAltasID=function(atlasID){
		if (atlasID >=0){
			this._atlasID=atlasID;
		}
	}

	//------------------------------------------------------------------
	__proto.addTex=function(type,width,height){
		var result=this._get(width,height);
		if (result.ret==false){
			return result;
		}
		this._fill(result.x,result.y,width,height,type);
		this._texCount++;
		return result;
	}

	//------------------------------------------------------------------------------
	__proto._release=function(){
		if (this._cells !=null){
			this._cells.length=0;
			this._cells=null;
		}
		if (this._rowInfo){
			this._rowInfo.length=0;
			this._rowInfo=null;
		}
	}

	//------------------------------------------------------------------------------
	__proto._init=function(width,height){
		this._width=width;
		this._height=height;
		this._release();
		if (this._width==0)return false;
		this._cells=new Uint8Array(this._width *this._height*3);
		this._rowInfo=__newvec(this._height);
		for (var i=0;i < this._height;i++){
			this._rowInfo[i]=new TexRowInfo();
		}
		this._clear();
		return true;
	}

	//------------------------------------------------------------------
	__proto._get=function(width,height){
		var pFillInfo=new MergeFillInfo();
		if (width >=this._failSize.width && height >=this._failSize.height){
			return pFillInfo;
		};
		var rx=-1;
		var ry=-1;
		var nWidth=this._width;
		var nHeight=this._height;
		var pCellBox=this._cells;
		for (var y=0;y < nHeight;y++){
			if (this._rowInfo[y].spaceCount < width)continue ;
			for (var x=0;x < nWidth;){
				var tm=(y *nWidth+x)*3;
				if (pCellBox[tm] !=0 || pCellBox[tm+1] < width || pCellBox[tm+2] < height){
					x+=pCellBox[tm+1];
					continue ;
				}
				rx=x;
				ry=y;
				for (var xx=0;xx < width;xx++){
					if (pCellBox[3*xx+tm+2] < height){
						rx=-1;
						break ;
					}
				}
				if (rx < 0){
					x+=pCellBox[tm+1];
					continue ;
				}
				pFillInfo.ret=true;
				pFillInfo.x=rx;
				pFillInfo.y=ry;
				return pFillInfo;
			}
		}
		return pFillInfo;
	}

	//------------------------------------------------------------------
	__proto._fill=function(x,y,w,h,type){
		var nWidth=this._width;
		var nHeghit=this._height;
		this._check((x+w)<=nWidth && (y+h)<=nHeghit);
		for (var yy=y;yy < (h+y);++yy){
			this._check(this._rowInfo[yy].spaceCount >=w);
			this._rowInfo[yy].spaceCount-=w;
			for (var xx=0;xx < w;xx++){
				var tm=(x+yy *nWidth+xx)*3;
				this._check(this._cells[tm]==0);
				this._cells[tm]=type;
				this._cells[tm+1]=w;
				this._cells[tm+2]=h;
			}
		}
		if (x > 0){
			for (yy=0;yy < h;++yy){
				var s=0;
				for (xx=x-1;xx >=0;--xx,++s){
					if (this._cells[((y+yy)*nWidth+xx)*3] !=0)break ;
				}
				for (xx=s;xx > 0;--xx){
					this._cells[((y+yy)*nWidth+x-xx)*3+1]=xx;
					this._check(xx > 0);
				}
			}
		}
		if (y > 0){
			for (xx=x;xx < (x+w);++xx){
				s=0;
				for (yy=y-1;yy >=0;--yy,s++){
					if (this._cells[(xx+yy *nWidth)*3] !=0)break ;
				}
				for (yy=s;yy > 0;--yy){
					this._cells[(xx+(y-yy)*nWidth)*3+2]=yy;
					this._check(yy > 0);
				}
			}
		}
	}

	__proto._check=function(ret){
		if (ret==false){
			console.log("xtexMerger 错误啦");
		}
	}

	//------------------------------------------------------------------
	__proto._clear=function(){
		this._texCount=0;
		for (var y=0;y < this._height;y++){
			this._rowInfo[y].spaceCount=this._width;
		}
		for (var i=0;i < this._height;i++){
			for (var j=0;j < this._width;j++){
				var tm=(i *this._width+j)*3;
				this._cells[tm]=0;
				this._cells[tm+1]=this._width-j;
				this._cells[tm+2]=this._width-i;
			}
		}
		this._failSize.width=this._width+1;
		this._failSize.height=this._height+1;
	}

	AtlasGrid.__init$=function(){
		//------------------------------------------------------------------------------
		//class TexRowInfo
		TexRowInfo=(function(){
			function TexRowInfo(){
				this.spaceCount=0;
			}
			__class(TexRowInfo,'');
			return TexRowInfo;
		})()
		//------------------------------------------------------------------------------
		//class TexMergeTexSize
		TexMergeTexSize=(function(){
			function TexMergeTexSize(){
				this.width=0;
				this.height=0;
			}
			__class(TexMergeTexSize,'');
			return TexMergeTexSize;
		})()
	}

	return AtlasGrid;
})()


//class laya.webgl.atlas.AtlasResourceManager
var AtlasResourceManager=(function(){
	function AtlasResourceManager(width,height,gridSize,maxTexNum){
		this._currentAtlasCount=0;
		this._maxAtlaserCount=0;
		this._width=0;
		this._height=0;
		this._gridSize=0;
		this._gridNumX=0;
		this._gridNumY=0;
		this._init=false;
		this._curAtlasIndex=0;
		this._setAtlasParam=false;
		this._atlaserArray=null;
		this._needGC=false;
		this._setAtlasParam=true;
		this._width=width;
		this._height=height;
		this._gridSize=gridSize;
		this._maxAtlaserCount=maxTexNum;
		this._gridNumX=width / gridSize;
		this._gridNumY=height / gridSize;
		this._curAtlasIndex=0;
		this._atlaserArray=[];
	}

	__class(AtlasResourceManager,'laya.webgl.atlas.AtlasResourceManager');
	var __proto=AtlasResourceManager.prototype;
	__proto.setAtlasParam=function(width,height,gridSize,maxTexNum){
		if (this._setAtlasParam==true){
			AtlasResourceManager._sid_=0;
			this._width=width;
			this._height=height;
			this._gridSize=gridSize;
			this._maxAtlaserCount=maxTexNum;
			this._gridNumX=width / gridSize;
			this._gridNumY=height / gridSize;
			this._curAtlasIndex=0;
			this.freeAll();
			return true;
			}else {
			console.log("设置大图合集参数错误，只能在开始页面设置各种参数");
			throw-1;
			return false;
		}
		return false;
	}

	//添加 图片到大图集
	__proto.pushData=function(texture){
		var bitmap=texture.bitmap;
		var nWebGLImageIndex=-1;
		var curAtlas=null;
		var i=0,n=0,altasIndex=0;
		for (i=0,n=this._atlaserArray.length;i < n;i++){
			altasIndex=(this._curAtlasIndex+i)% n;
			curAtlas=this._atlaserArray[altasIndex];
			nWebGLImageIndex=curAtlas.findBitmapIsExist(bitmap);
			if (nWebGLImageIndex !=-1){
				break ;
			}
		}
		if (nWebGLImageIndex !=-1){
			var offset=curAtlas.InAtlasWebGLImagesOffsetValue[nWebGLImageIndex];
			offsetX=offset[0];
			offsetY=offset[1];
			curAtlas.addToAtlas(texture,offsetX,offsetY);
			return true;
			}else {
			var tex=texture;
			this._setAtlasParam=false;
			var bFound=false;
			var nImageGridX=(Math.ceil((texture.bitmap.width+2)/ this._gridSize));
			var nImageGridY=(Math.ceil((texture.bitmap.height+2)/ this._gridSize));
			var bSuccess=false;
			for (var k=0;k < 2;k++){
				var maxAtlaserCount=this._maxAtlaserCount;
				for (i=0;i < maxAtlaserCount;i++){
					altasIndex=(this._curAtlasIndex+i)% maxAtlaserCount;
					(this._atlaserArray.length-1 >=altasIndex)|| (this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++)));
					var atlas=this._atlaserArray[altasIndex];
					var offsetX=0,offsetY=0;
					var fillInfo=atlas.addTex(1,nImageGridX,nImageGridY);
					if (fillInfo.ret){
						offsetX=fillInfo.x *this._gridSize+1;
						offsetY=fillInfo.y *this._gridSize+1;
						bitmap.lock=true;
						atlas.addToAtlasTexture((bitmap),offsetX,offsetY);
						atlas.addToAtlas(texture,offsetX,offsetY);
						bSuccess=true;
						this._curAtlasIndex=altasIndex;
						break ;
					}
				}
				if (bSuccess)
					break ;
				this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++));
				this._needGC=true;
				this.garbageCollection();
				this._curAtlasIndex=this._atlaserArray.length-1;
			}
			if (!bSuccess){
				console.log(">>>AtlasManager pushData error");
			}
			return bSuccess;
		}
	}

	__proto.addToAtlas=function(tex){
		laya.webgl.atlas.AtlasResourceManager.instance.pushData(tex);
	}

	/**
	*回收大图合集,不建议手动调用
	*@return
	*/
	__proto.garbageCollection=function(){
		if (this._needGC===true){
			var n=this._atlaserArray.length-this._maxAtlaserCount;
			for (var i=0;i < n;i++){
				this._atlaserArray[i].dispose();
				console.log("AtlasResourceManager:Dispose the inner Atlas。");
			}
			console.log(">>>>altas garbageCollection ="+n);
			this._atlaserArray.splice(0,n);
			this._needGC=false;
		}
		return true;
	}

	__proto.freeAll=function(){
		for (var i=0,n=this._atlaserArray.length;i < n;i++){
			this._atlaserArray[i].dispose();
		}
		this._atlaserArray.length=0;
		this._curAtlasIndex=0;
	}

	__proto.getAtlaserCount=function(){
		return this._atlaserArray.length;
	}

	__proto.getAtlaserByIndex=function(index){
		return this._atlaserArray[index];
	}

	__getset(1,AtlasResourceManager,'instance',function(){
		if (!AtlasResourceManager._Instance){
			AtlasResourceManager._Instance=new AtlasResourceManager(laya.webgl.atlas.AtlasResourceManager.atlasTextureWidth,laya.webgl.atlas.AtlasResourceManager.atlasTextureHeight,/*CLASS CONST:laya.webgl.atlas.AtlasResourceManager.gridSize*/16,laya.webgl.atlas.AtlasResourceManager.maxTextureCount);
		}
		return AtlasResourceManager._Instance;
	});

	__getset(1,AtlasResourceManager,'enabled',function(){
		return Config.atlasEnable;
	});

	__getset(1,AtlasResourceManager,'atlasLimitWidth',function(){
		return AtlasResourceManager._atlasLimitWidth;
		},function(value){
		AtlasResourceManager._atlasLimitWidth=value;
	});

	__getset(1,AtlasResourceManager,'atlasLimitHeight',function(){
		return AtlasResourceManager._atlasLimitHeight;
		},function(value){
		AtlasResourceManager._atlasLimitHeight=value;
	});

	AtlasResourceManager._enable=function(){
		Config.atlasEnable=true;
	}

	AtlasResourceManager._disable=function(){
		Config.atlasEnable=false;
	}

	AtlasResourceManager.__init__=function(){
		AtlasResourceManager.atlasTextureWidth=2048;
		AtlasResourceManager.atlasTextureHeight=2048;
		AtlasResourceManager.maxTextureCount=6;
		AtlasResourceManager.atlasLimitWidth=512;
		AtlasResourceManager.atlasLimitHeight=512;
	}

	AtlasResourceManager._atlasLimitWidth=0;
	AtlasResourceManager._atlasLimitHeight=0;
	AtlasResourceManager.gridSize=16;
	AtlasResourceManager.atlasTextureWidth=0;
	AtlasResourceManager.atlasTextureHeight=0;
	AtlasResourceManager.maxTextureCount=0;
	AtlasResourceManager._atlasRestore=0;
	AtlasResourceManager.BOARDER_TYPE_NO=0;
	AtlasResourceManager.BOARDER_TYPE_RIGHT=1;
	AtlasResourceManager.BOARDER_TYPE_LEFT=2;
	AtlasResourceManager.BOARDER_TYPE_BOTTOM=4;
	AtlasResourceManager.BOARDER_TYPE_TOP=8;
	AtlasResourceManager.BOARDER_TYPE_ALL=15;
	AtlasResourceManager._sid_=0;
	AtlasResourceManager._Instance=null;
	return AtlasResourceManager;
})()


//class laya.webgl.atlas.MergeFillInfo
var MergeFillInfo=(function(){
	function MergeFillInfo(){
		this.x=0;
		this.y=0;
		this.ret=false;
		this.ret=false;
		this.x=0;
		this.y=0;
	}

	__class(MergeFillInfo,'laya.webgl.atlas.MergeFillInfo');
	return MergeFillInfo;
})()


;
//class laya.webgl.canvas.BlendMode
var BlendMode=(function(){
	function BlendMode(){}
	__class(BlendMode,'laya.webgl.canvas.BlendMode');
	BlendMode._init_=function(gl){
		BlendMode.fns=[BlendMode.BlendNormal,BlendMode.BlendAdd,BlendMode.BlendMultiply,BlendMode.BlendScreen,BlendMode.BlendOverlay,BlendMode.BlendLight,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
		BlendMode.targetFns=[BlendMode.BlendNormalTarget,BlendMode.BlendAddTarget,BlendMode.BlendMultiplyTarget,BlendMode.BlendScreenTarget,BlendMode.BlendOverlayTarget,BlendMode.BlendLightTarget,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
	}

	BlendMode.BlendNormal=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendAdd=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.DST_ALPHA*/0x0304);
	}

	BlendMode.BlendMultiply=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.DST_COLOR*/0x0306,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendScreen=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendOverlay=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_COLOR*/0x0301);
	}

	BlendMode.BlendLight=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendNormalTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendAddTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.DST_ALPHA*/0x0304);
	}

	BlendMode.BlendMultiplyTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.DST_COLOR*/0x0306,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendScreenTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendOverlayTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_COLOR*/0x0301);
	}

	BlendMode.BlendLightTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendMask=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ZERO*/0,/*laya.webgl.WebGLContext.SRC_ALPHA*/0x0302);
	}

	BlendMode.BlendDestinationOut=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ZERO*/0,/*laya.webgl.WebGLContext.ZERO*/0);
	}

	BlendMode.activeBlendFunction=null;
	BlendMode.NORMAL="normal";
	BlendMode.ADD="add";
	BlendMode.MULTIPLY="multiply";
	BlendMode.SCREEN="screen";
	BlendMode.LIGHT="light";
	BlendMode.OVERLAY="overlay";
	BlendMode.DESTINATIONOUT="destination-out";
	BlendMode.fns=[];
	BlendMode.targetFns=[];
	__static(BlendMode,
	['NAMES',function(){return this.NAMES=["normal","add","multiply","screen","overlay","light","mask","destination-out"];},'TOINT',function(){return this.TOINT={"normal":0,"add":1,"multiply":2,"screen":3 ,"lighter":1,"overlay":4,"light":5,"mask":6,"destination-out":7};}
	]);
	return BlendMode;
})()


//class laya.webgl.canvas.DrawStyle
var DrawStyle=(function(){
	function DrawStyle(value){
		this._color=Color.create("black");
		this.setValue(value);
	}

	__class(DrawStyle,'laya.webgl.canvas.DrawStyle');
	var __proto=DrawStyle.prototype;
	__proto.setValue=function(value){
		if (value){
			if ((typeof value=='string')){
				this._color=Color.create(value);
				return;
			}
			if ((value instanceof laya.utils.Color )){
				this._color=value;
				return;
			}
		}
	}

	__proto.reset=function(){
		this._color=Color.create("black");
	}

	__proto.equal=function(value){
		if ((typeof value=='string'))return this._color.strColor===value;
		if ((value instanceof laya.utils.Color ))return this._color.numColor===(value).numColor;
		return false;
	}

	__proto.toColorStr=function(){
		return this._color.strColor;
	}

	DrawStyle.create=function(value){
		if (value){
			var color;
			if ((typeof value=='string'))color=Color.create(value);
			else if ((value instanceof laya.utils.Color ))color=value;
			if (color){
				return color._drawStyle || (color._drawStyle=new DrawStyle(value));
			}
		}
		return null;
	}

	__static(DrawStyle,
	['DEFAULT',function(){return this.DEFAULT=new DrawStyle("#000000");}
	]);
	return DrawStyle;
})()


//class laya.webgl.canvas.Path
var Path=(function(){
	function Path(){
		this._x=0;
		this._y=0;
		//this._rect=null;
		//this.ib=null;
		//this.vb=null;
		this.dirty=false;
		//this.geomatrys=null;
		//this._curGeomatry=null;
		this.offset=0;
		this.count=0;
		this.geoStart=0;
		this.tempArray=[];
		this.closePath=false;
		this.geomatrys=[];
		var gl=WebGL.mainContext;
		this.ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		this.vb=VertexBuffer2D.create(5);
	}

	__class(Path,'laya.webgl.canvas.Path');
	var __proto=Path.prototype;
	__proto.addPoint=function(pointX,pointY){
		this.tempArray.push(pointX,pointY);
	}

	__proto.getEndPointX=function(){
		return this.tempArray[this.tempArray.length-2];
	}

	__proto.getEndPointY=function(){
		return this.tempArray[this.tempArray.length-1];
	}

	__proto.polygon=function(x,y,points,color,borderWidth,borderColor){
		var geo;
		this.geomatrys.push(this._curGeomatry=geo=new Polygon(x,y,points,color,borderWidth,borderColor));
		if (!color)geo.fill=false;
		if (borderColor==undefined)geo.borderWidth=0;
		return geo;
	}

	__proto.setGeomtry=function(shape){
		this.geomatrys.push(this._curGeomatry=shape);
	}

	__proto.drawLine=function(x,y,points,width,color){
		var geo;
		if (this.closePath){
			this.geomatrys.push(this._curGeomatry=geo=new LoopLine(x,y,points,width,color));
			}else {
			this.geomatrys.push(this._curGeomatry=geo=new Line(x,y,points,width,color));
		}
		geo.fill=false;
		return geo;
	}

	__proto.update=function(){
		var si=this.ib._byteLength;
		var len=this.geomatrys.length;
		this.offset=si;
		for (var i=this.geoStart;i < len;i++){
			this.geomatrys[i].getData(this.ib,this.vb,this.vb._byteLength / 20);
		}
		this.geoStart=len;
		this.count=(this.ib._byteLength-si)/ CONST3D2D.BYTES_PIDX;
	}

	__proto.reset=function(){
		this.vb.clear();
		this.ib.clear();
		this.offset=this.count=this.geoStart=0;
		this.geomatrys.length=0;
	}

	__proto.recover=function(){
		this._curGeomatry=null;
		this.vb.destory();
		this.vb=null;
		this.ib.destory();
		this.ib=null;
	}

	return Path;
})()


//class laya.webgl.canvas.save.SaveBase
var SaveBase=(function(){
	function SaveBase(){
		//this._valueName=null;
		//this._value=null;
		//this._dataObj=null;
		//this._newSubmit=false;
	}

	__class(SaveBase,'laya.webgl.canvas.save.SaveBase');
	var __proto=SaveBase.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		this._dataObj[this._valueName]=this._value;
		SaveBase._cache[SaveBase._cache._length++]=this;
		this._newSubmit && (context._curSubmit=Submit.RENDERBASE,context._renderKey=0);
	}

	SaveBase._createArray=function(){
		var value=[];
		value._length=0;
		return value;
	}

	SaveBase._init=function(){
		var namemap=SaveBase._namemap={};
		namemap[0x1]="ALPHA";
		namemap[0x2]="fillStyle";
		namemap[0x8]="font";
		namemap[0x100]="lineWidth";
		namemap[0x200]="strokeStyle";
		namemap[0x2000]="_mergeID";
		namemap[0x400]=namemap[0x800]=namemap[0x1000]=[];
		namemap[0x4000]="textBaseline";
		namemap[0x8000]="textAlign";
		namemap[0x10000]="_nBlendType";
		namemap[0x100000]="shader";
		namemap[0x200000]="filters";
		return namemap;
	}

	SaveBase.save=function(context,type,dataObj,newSubmit){
		if ((context._saveMark._saveuse & type)!==type){
			context._saveMark._saveuse |=type;
			var cache=SaveBase._cache;
			var o=cache._length > 0 ? cache[--cache._length] :(new SaveBase());
			o._value=dataObj[o._valueName=SaveBase._namemap[type]];
			o._dataObj=dataObj;
			o._newSubmit=newSubmit;
			var _save=context._save;
			_save[_save._length++]=o;
		}
	}

	__static(SaveBase,
	['_cache',function(){return this._cache=laya.webgl.canvas.save.SaveBase._createArray();},'_namemap',function(){return this._namemap=SaveBase._init();}
	]);
	return SaveBase;
})()


//class laya.webgl.canvas.save.SaveClipRect
var SaveClipRect=(function(){
	function SaveClipRect(){
		//this._clipSaveRect=null;
		//this._submitScissor=null;
		this._clipRect=new Rectangle();
	}

	__class(SaveClipRect,'laya.webgl.canvas.save.SaveClipRect');
	var __proto=SaveClipRect.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		context._clipRect=this._clipSaveRect;
		SaveClipRect._cache[SaveClipRect._cache._length++]=this;
		this._submitScissor.submitLength=context._submits._length-this._submitScissor.submitIndex;
		context._curSubmit=Submit.RENDERBASE;
		context._renderKey=0;
	}

	SaveClipRect.save=function(context,submitScissor){
		if ((context._saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000)==/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000)return;
		context._saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000;
		var cache=SaveClipRect._cache;
		var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRect());
		o._clipSaveRect=context._clipRect;
		context._clipRect=o._clipRect.copyFrom(context._clipRect);
		o._submitScissor=submitScissor;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveClipRect,
	['_cache',function(){return this._cache=SaveBase._createArray();}
	]);
	return SaveClipRect;
})()


//class laya.webgl.canvas.save.SaveClipRectStencil
var SaveClipRectStencil=(function(){
	function SaveClipRectStencil(){
		//this._clipSaveRect=null;
		//this._saveMatrix=null;
		this._contextX=0;
		this._contextY=0;
		//this._submitStencil=null;
		this._clipRect=new Rectangle();
		this._rect=new Rectangle();
		this._matrix=new Matrix();
	}

	__class(SaveClipRectStencil,'laya.webgl.canvas.save.SaveClipRectStencil');
	var __proto=SaveClipRectStencil.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		SubmitStencil.restore(context,this._rect,this._saveMatrix,this._contextX,this._contextY);
		context._clipRect=this._clipSaveRect;
		context._curMat=this._saveMatrix;
		context._x=this._contextX;
		context._y=this._contextY;
		SaveClipRectStencil._cache[SaveClipRectStencil._cache._length++]=this;
		context._curSubmit=Submit.RENDERBASE;
	}

	SaveClipRectStencil.save=function(context,submitStencil,x,y,width,height,clipX,clipY,clipWidth,clipHeight){
		if ((context._saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000)==/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000)return;
		context._saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000;
		var cache=SaveClipRectStencil._cache;
		var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRectStencil());
		o._clipSaveRect=context._clipRect;
		o._clipRect.setTo(clipX,clipY,clipWidth,clipHeight);
		context._clipRect=o._clipRect;
		o._rect.x=x;
		o._rect.y=y;
		o._rect.width=width;
		o._rect.height=height;
		o._contextX=context._x;
		o._contextY=context._y;
		o._saveMatrix=context._curMat;
		context._curMat.copyTo(o._matrix);
		context._curMat=o._matrix;
		o._submitStencil=submitStencil;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveClipRectStencil,
	['_cache',function(){return this._cache=SaveBase._createArray();}
	]);
	return SaveClipRectStencil;
})()


//class laya.webgl.canvas.save.SaveMark
var SaveMark=(function(){
	function SaveMark(){
		this._saveuse=0;
		//this._preSaveMark=null;
		;
	}

	__class(SaveMark,'laya.webgl.canvas.save.SaveMark');
	var __proto=SaveMark.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){
		return true;
	}

	__proto.restore=function(context){
		context._saveMark=this._preSaveMark;
		SaveMark._no[SaveMark._no._length++]=this;
	}

	SaveMark.Create=function(context){
		var no=SaveMark._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveMark());
		o._saveuse=0;
		o._preSaveMark=context._saveMark;
		context._saveMark=o;
		return o;
	}

	__static(SaveMark,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveMark;
})()


//class laya.webgl.canvas.save.SaveTransform
var SaveTransform=(function(){
	function SaveTransform(){
		//this._savematrix=null;
		this._matrix=new Matrix();
	}

	__class(SaveTransform,'laya.webgl.canvas.save.SaveTransform');
	var __proto=SaveTransform.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		context._curMat=this._savematrix;
		SaveTransform._no[SaveTransform._no._length++]=this;
	}

	SaveTransform.save=function(context){
		var _saveMark=context._saveMark;
		if ((_saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800)===/*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800)return;
		_saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800;
		var no=SaveTransform._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveTransform());
		o._savematrix=context._curMat;
		context._curMat=context._curMat.copyTo(o._matrix);
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveTransform,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveTransform;
})()


//class laya.webgl.canvas.save.SaveTranslate
var SaveTranslate=(function(){
	function SaveTranslate(){
		//this._x=NaN;
		//this._y=NaN;
	}

	__class(SaveTranslate,'laya.webgl.canvas.save.SaveTranslate');
	var __proto=SaveTranslate.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		var mat=context._curMat;
		context._x=this._x;
		context._y=this._y;
		SaveTranslate._no[SaveTranslate._no._length++]=this;
	}

	SaveTranslate.save=function(context){
		var no=SaveTranslate._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveTranslate());
		o._x=context._x;
		o._y=context._y;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveTranslate,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveTranslate;
})()


//class laya.webgl.resource.RenderTargetMAX
var RenderTargetMAX=(function(){
	function RenderTargetMAX(){
		//public var targets:Vector.<OneTarget>;//没用到
		this.target=null;
		this.repaint=false;
		this._width=NaN;
		this._height=NaN;
		this._sp=null;
		this._clipRect=new Rectangle();
	}

	__class(RenderTargetMAX,'laya.webgl.resource.RenderTargetMAX');
	var __proto=RenderTargetMAX.prototype;
	__proto.setSP=function(sp){
		this._sp=sp;
	}

	__proto.size=function(w,h){
		var _$this=this;
		if (this._width===w && this._height===h){
			this.target.size(w,h);
			return;
		}
		this.repaint=true;
		this._width=w;
		this._height=h;
		if (!this.target)
			this.target=RenderTarget2D.create(w,h);
		else
		this.target.size(w,h);
		if (!this.target.hasListener(/*laya.events.Event.RECOVERED*/"recovered")){
			this.target.on(/*laya.events.Event.RECOVERED*/"recovered",this,function(e){
				Laya.timer.callLater(_$this._sp,_$this._sp.repaint);
			});
		}
	}

	__proto._flushToTarget=function(context,target){
		if (target._destroy)return;
		var worldScissorTest=RenderState2D.worldScissorTest;
		var preworldClipRect=RenderState2D.worldClipRect;
		RenderState2D.worldClipRect=this._clipRect;
		this._clipRect.x=this._clipRect.y=0;
		this._clipRect.width=this._width;
		this._clipRect.height=this._height;
		RenderState2D.worldScissorTest=false;
		WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		var preAlpha=RenderState2D.worldAlpha;
		var preMatrix4=RenderState2D.worldMatrix4;
		var preMatrix=RenderState2D.worldMatrix;
		var preFilters=RenderState2D.worldFilters;
		var preShaderDefines=RenderState2D.worldShaderDefines;
		RenderState2D.worldMatrix=Matrix.EMPTY;
		RenderState2D.restoreTempArray();
		RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
		RenderState2D.worldAlpha=1;
		RenderState2D.worldFilters=null;
		RenderState2D.worldShaderDefines=null;
		BaseShader.activeShader=null;
		target.start();
		Config.showCanvasMark ? target.clear(0,1,0,0.3):target.clear(0,0,0,0);
		context.flush();
		target.end();
		BaseShader.activeShader=null;
		RenderState2D.worldAlpha=preAlpha;
		RenderState2D.worldMatrix4=preMatrix4;
		RenderState2D.worldMatrix=preMatrix;
		RenderState2D.worldFilters=preFilters;
		RenderState2D.worldShaderDefines=preShaderDefines;
		RenderState2D.worldScissorTest=worldScissorTest
		if (worldScissorTest){
			var y=RenderState2D.height-preworldClipRect.y-preworldClipRect.height;
			WebGL.mainContext.scissor(preworldClipRect.x,y,preworldClipRect.width,preworldClipRect.height);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		}
		RenderState2D.worldClipRect=preworldClipRect;
	}

	__proto.flush=function(context){
		if (this.repaint){
			this._flushToTarget(context,this.target);
			this.repaint=false;
		}
	}

	__proto.drawTo=function(context,x,y,width,height){
		context.drawTexture(this.target.getTexture(),x,y,width,height,0,0);
	}

	__proto.destroy=function(){
		if (this.target){
			this.target.destroy();
			this.target=null;
			this._sp=null;
		}
	}

	return RenderTargetMAX;
})()


//class laya.webgl.shader.d2.Shader2D
var Shader2D=(function(){
	function Shader2D(){
		this.ALPHA=1;
		//this.glTexture=null;
		//this.shader=null;
		//this.filters=null;
		this.shaderType=0;
		//this.colorAdd=null;
		//this.strokeStyle=null;
		//this.fillStyle=null;
		this.defines=new ShaderDefines2D();
	}

	__class(Shader2D,'laya.webgl.shader.d2.Shader2D');
	var __proto=Shader2D.prototype;
	__proto.destroy=function(){
		this.defines=null;
		this.filters=null;
		this.glTexture=null;
		this.strokeStyle=null;
		this.fillStyle=null;
	}

	Shader2D.__init__=function(){
		Shader.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform vec4 colorAlpha;\nuniform mat4 colorMat;");
		Shader.addInclude("parts/ColorFilter_ps_logic.glsl","mat4 alphaMat =colorMat;\n\nalphaMat[0][3] *= gl_FragColor.a;\nalphaMat[1][3] *= gl_FragColor.a;\nalphaMat[2][3] *= gl_FragColor.a;\n\ngl_FragColor = gl_FragColor * alphaMat;\ngl_FragColor += colorAlpha/255.0*gl_FragColor.a;\n");
		Shader.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform vec4 u_color;\nuniform float u_strength;\nuniform float u_blurX;\nuniform float u_blurY;\nuniform float u_offsetX;\nuniform float u_offsetY;\nuniform float u_textW;\nuniform float u_textH;");
		Shader.addInclude("parts/GlowFilter_ps_logic.glsl","const float c_IterationTime = 10.0;\nfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\nvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\nvec2 vec2FilterDir = vec2(-(u_offsetX)/u_textW,-(u_offsetY)/u_textH);\nvec2 vec2FilterOff = vec2(u_blurX/u_textW/c_IterationTime * 2.0,u_blurY/u_textH/c_IterationTime * 2.0);\nfloat maxNum = u_blurX * u_blurY;\nvec2 vec2Off = vec2(0.0,0.0);\nfloat floatOff = c_IterationTime/2.0;\nfor(float i = 0.0;i<=c_IterationTime; ++i){\n	for(float j = 0.0;j<=c_IterationTime; ++j){\n		vec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n		vec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n	}\n}\ngl_FragColor = vec4(u_color.rgb,vec4Color.a * u_strength);\ngl_FragColor.rgb *= gl_FragColor.a;");
		Shader.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor =   blur();\ngl_FragColor.w*=alpha;");
		Shader.addInclude("parts/BlurFilter_ps_uniform.glsl","uniform vec4 strength_sig2_2sig2_gauss1;\nuniform vec2 blurInfo;\n\n#define PI 3.141593\n\n//float sigma=strength/3.0;//3σ以外影响很小。即当σ=1的时候，半径为3\n//float sig2 = sigma*sigma;\n//float _2sig2 = 2.0*sig2;\n//return 1.0/(2*PI*sig2)*exp(-(x*x+y*y)/_2sig2)\n//float gauss1 = 1.0/(2.0*PI*sig2);\n\nfloat getGaussian(float x, float y){\n    return strength_sig2_2sig2_gauss1.w*exp(-(x*x+y*y)/strength_sig2_2sig2_gauss1.z);\n}\n\nvec4 blur(){\n    const float blurw = 9.0;\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \n    vec2 startpos=v_texcoord-halfsz;\n    vec2 ctexcoord = startpos;\n    vec2 step = 1.0/blurInfo;  //每个像素      \n    \n    for(float y = 0.0;y<=blurw; ++y){\n        ctexcoord.x=startpos.x;\n        for(float x = 0.0;x<=blurw; ++x){\n            //TODO 纹理坐标的固定偏移应该在vs中处理\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\n            ctexcoord.x+=step.x;\n        }\n        ctexcoord.y+=step.y;\n    }\n    return vec4Color;\n}");
		Shader.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n");
		Shader.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);\ngl_FragColor.xyz *= colorAdd.a;");
		var vs,ps;
		vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
		ps="precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   color.rgb*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,vs,ps,null);
		vs="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}";
		ps="precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\nvoid main() {\n	vec4 a = vec4(color.r, color.g, color.b, color.a);\n	a.w = alpha;\n	a.xyz *= alpha;\n	gl_FragColor = a;\n	#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,vs,ps,null);
		vs="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 u_pos;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 tPos = vec4(position.x + u_pos.x,position.y + u_pos.y,position.z,position.w);\n  vec4 pos=mmat*u_mmat2*tPos;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}";
		ps="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n	//vec4 a=vec4(color.r, color.g, color.b, 1);\n	//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n	gl_FragColor.rgb*=alpha;\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,vs,ps,null);
		vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
		ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform vec4 u_TexRange;\nuniform vec2 u_offset;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec2 newTexCoord;\n   newTexCoord.x = mod(u_offset.x + v_texcoord.x,u_TexRange.y) + u_TexRange.x;\n   newTexCoord.y = mod(u_offset.y + v_texcoord.y,u_TexRange.w) + u_TexRange.z;\n   vec4 color= texture2D(texture, newTexCoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,vs,ps,null);
		vs="attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_color.rgb *= v_color.a;\n  v_texcoord = texcoord;  \n}";
		ps="precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n	vec4 t_color = texture2D(texture, v_texcoord);\n	gl_FragColor = t_color.rgba * v_color;\n	gl_FragColor *= alpha;\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,vs,ps,null);
	}

	return Shader2D;
})()


//class laya.webgl.shader.ShaderDefines
var ShaderDefines=(function(){
	function ShaderDefines(name2int,int2name,int2nameMap){
		this._value=0;
		//this._name2int=null;
		//this._int2name=null;
		//this._int2nameMap=null;
		this._name2int=name2int;
		this._int2name=int2name;
		this._int2nameMap=int2nameMap;
	}

	__class(ShaderDefines,'laya.webgl.shader.ShaderDefines');
	var __proto=ShaderDefines.prototype;
	__proto.add=function(value){
		if ((typeof value=='string'))value=this._name2int[value];
		this._value |=value;
		return this._value;
	}

	__proto.addInt=function(value){
		this._value |=value;
		return this._value;
	}

	__proto.remove=function(value){
		if ((typeof value=='string'))value=this._name2int[value];
		this._value &=(~value);
		return this._value;
	}

	__proto.isDefine=function(def){
		return (this._value & def)===def;
	}

	__proto.getValue=function(){
		return this._value;
	}

	__proto.setValue=function(value){
		this._value=value;
	}

	__proto.toNameDic=function(){
		var r=this._int2nameMap[this._value];
		return r ? r :ShaderDefines._toText(this._value,this._int2name,this._int2nameMap);
	}

	ShaderDefines._reg=function(name,value,_name2int,_int2name){
		_name2int[name]=value;
		_int2name[value]=name;
	}

	ShaderDefines._toText=function(value,_int2name,_int2nameMap){
		var r=_int2nameMap[value];
		if (r)return r;
		var o={};
		var d=1;
		for (var i=0;i < 32;i++){
			d=1 << i;
			if (d > value)break ;
			if (value & d){
				var name=_int2name[d];
				name && (o[name]="");
			}
		}
		_int2nameMap[value]=o;
		return o;
	}

	ShaderDefines._toInt=function(names,_name2int){
		var words=names.split('.');
		var num=0;
		for (var i=0,n=words.length;i < n;i++){
			var value=_name2int[words[i]];
			if (!value)throw new Error("Defines to int err:"+names+"/"+words[i]);
			num |=value;
		}
		return num;
	}

	return ShaderDefines;
})()


/**
*这里销毁的问题，后面待确认
*/
//class laya.webgl.shader.d2.skinAnishader.SkinMesh
var SkinMesh=(function(){
	function SkinMesh(){
		this.mVBBuffer=null;
		this.mIBBuffer=null;
		this.mVBData=null;
		this.mIBData=null;
		this.mEleNum=0;
		this.mTexture=null;
		this.transform=null;
		this._vs=null;
		this._ps=null;
		this._indexStart=-1;
		this._verticles=null;
		this._uvs=null;
		this._tempMatrix=new Matrix();
	}

	__class(SkinMesh,'laya.webgl.shader.d2.skinAnishader.SkinMesh');
	var __proto=SkinMesh.prototype;
	__proto.init=function(texture,vs,ps){
		if (vs){
			this._vs=vs;
			}else {
			this._vs=[];
			var tWidth=texture.width;
			var tHeight=texture.height;
			var tRed=1;
			var tGreed=1;
			var tBlue=1;
			var tAlpha=1;
			this._vs.push(0,0,0,0,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(tWidth,0,1,0,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(tWidth,tHeight,1,1,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(0,tHeight,0,1,tRed,tGreed,tBlue,tAlpha);
		}
		if (ps){
			this._ps=ps;
			}else {
			if (!SkinMesh._defaultPS){
				SkinMesh._defaultPS=[];
				SkinMesh._defaultPS.push(0,1,3,3,1,2);
			}
			this._ps=SkinMesh._defaultPS;
		}
		this.mVBData=new Float32Array(this._vs);
		this.mIBData=new Uint16Array(this._ps.length);
		this.mIBData["start"]=-1;
		this.mEleNum=this._ps.length;
		this.mTexture=texture;
	}

	__proto.init2=function(texture,vs,ps,verticles,uvs){
		if (this.transform)this.transform=null;
		if (ps){
			this._ps=ps;
			}else {
			this._ps=[];
			this._ps.push(0,1,3,3,1,2);
		}
		this._verticles=verticles;
		this._uvs=uvs;
		this.mEleNum=this._ps.length;
		this.mTexture=texture;
		if (Render.isConchNode || Render.isConchApp){
			this._initMyData();
			this.mVBData=new Float32Array(this._vs);
		}
	}

	__proto._initMyData=function(){
		var vsI=0;
		var vI=0;
		var vLen=this._verticles.length;
		var tempVLen=vLen *4;
		this._vs=SkinMesh._tempVS;
		var insertNew=false;
		if (Render.isConchNode || Render.isConchApp){
			this._vs.length=tempVLen;
			insertNew=true;
			}else{
			if (this._vs.length < tempVLen){
				this._vs.length=tempVLen;
				insertNew=true;
			}
		}
		SkinMesh._tVSLen=tempVLen;
		if (insertNew){
			while (vsI < tempVLen){
				this._vs[vsI]=this._verticles[vI];
				this._vs[vsI+1]=this._verticles[vI+1];
				this._vs[vsI+2]=this._uvs[vI];
				this._vs[vsI+3]=this._uvs[vI+1];
				this._vs[vsI+4]=1;
				this._vs[vsI+5]=1;
				this._vs[vsI+6]=1;
				this._vs[vsI+7]=1;
				vsI+=8;
				vI+=2;
			}
			}else{
			while (vsI < tempVLen){
				this._vs[vsI]=this._verticles[vI];
				this._vs[vsI+1]=this._verticles[vI+1];
				this._vs[vsI+2]=this._uvs[vI];
				this._vs[vsI+3]=this._uvs[vI+1];
				vsI+=8;
				vI+=2;
			}
		}
	}

	__proto.getData2=function(vb,ib,start){
		this.mVBBuffer=vb;
		this.mIBBuffer=ib;
		this._initMyData();
		vb.appendEx2(this._vs,Float32Array,SkinMesh._tVSLen,4);
		this._indexStart=ib._byteLength;
		var tIB;
		tIB=SkinMesh._tempIB;
		if (tIB.length < this._ps.length){
			tIB.length=this._ps.length;
		}
		for (var i=0,n=this._ps.length;i < n;i++){
			tIB[i]=this._ps[i]+start;
		}
		ib.appendEx2(tIB,Uint16Array,this._ps.length,2);
	}

	__proto.getData=function(vb,ib,start){
		this.mVBBuffer=vb;
		this.mIBBuffer=ib;
		vb.append(this.mVBData);
		this._indexStart=ib._byteLength;
		if (this.mIBData["start"] !=start){
			for (var i=0,n=this._ps.length;i < n;i++){
				this.mIBData[i]=this._ps[i]+start;
			}
			this.mIBData["start"]=start;
		}
		ib.append(this.mIBData);
	}

	__proto.render=function(context,x,y){
		if (Render.isWebGL && this.mTexture){
			context._renderKey=0;
			context._shader2D.glTexture=null;
			SkinMeshBuffer.getInstance().addSkinMesh(this);
			var tempSubmit=Submit.createShape(context,this.mIBBuffer,this.mVBBuffer,this.mEleNum,this._indexStart,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,0));
			this.transform || (this.transform=Matrix.EMPTY);
			this.transform.translate(x,y);
			Matrix.mul(this.transform,context._curMat,this._tempMatrix);
			this.transform.translate(-x,-y);
			var tShaderValue=tempSubmit.shaderValue;
			var tArray=tShaderValue.u_mmat2||RenderState2D.getMatrArray();
			RenderState2D.mat2MatArray(this._tempMatrix,tArray);
			tShaderValue.textureHost=this.mTexture;
			tShaderValue.offsetX=0;
			tShaderValue.offsetY=0;
			tShaderValue.u_mmat2=tArray;
			tShaderValue.ALPHA=context._shader2D.ALPHA;
			context._submits[context._submits._length++]=tempSubmit;
		}
		else if (Render.isConchApp&&this.mTexture){
			this.transform || (this.transform=Matrix.EMPTY);
			context.setSkinMesh&&context.setSkinMesh(x,y,this._ps,this.mVBData,this.mEleNum,0,this.mTexture,this.transform);
		}
	}

	SkinMesh._tempVS=[];
	SkinMesh._tempIB=[];
	SkinMesh._defaultPS=null;
	SkinMesh._tVSLen=0;
	return SkinMesh;
})()


//class laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer
var SkinMeshBuffer=(function(){
	function SkinMeshBuffer(){
		this.ib=null;
		this.vb=null;
		var gl=WebGL.mainContext;
		this.ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		this.vb=VertexBuffer2D.create(8);
	}

	__class(SkinMeshBuffer,'laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer');
	var __proto=SkinMeshBuffer.prototype;
	__proto.addSkinMesh=function(skinMesh){
		skinMesh.getData2(this.vb,this.ib,this.vb._byteLength / 32);
	}

	__proto.reset=function(){
		this.vb.clear();
		this.ib.clear();
	}

	SkinMeshBuffer.getInstance=function(){
		return SkinMeshBuffer.instance=SkinMeshBuffer.instance|| new SkinMeshBuffer();
	}

	SkinMeshBuffer.instance=null;
	return SkinMeshBuffer;
})()


//此类可以减少代码
//class laya.webgl.shapes.BasePoly
var BasePoly=(function(){
	function BasePoly(x,y,width,height,edges,color,borderWidth,borderColor,round){
		//this.x=NaN;
		//this.y=NaN;
		//this.r=NaN;
		//this.width=NaN;
		//this.height=NaN;
		//this.edges=NaN;
		this.r0=0
		//this.color=0;
		//this.borderColor=NaN;
		//this.borderWidth=NaN;
		//this.round=0;
		this.fill=true;
		//this.mUint16Array=null;
		//this.mFloat32Array=null;
		this.r1=Math.PI / 2;
		(round===void 0)&& (round=0);
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
		this.edges=edges;
		this.color=color;
		this.borderWidth=borderWidth;
		this.borderColor=borderColor;
	}

	__class(BasePoly,'laya.webgl.shapes.BasePoly');
	var __proto=BasePoly.prototype;
	Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
	__proto.getData=function(ib,vb,start){}
	__proto.rebuild=function(points){}
	__proto.setMatrix=function(mat){}
	__proto.needUpdate=function(mat){
		return true;
	}

	__proto.sector=function(outVert,outIndex,start){
		var x=this.x,y=this.y,edges=this.edges,seg=(this.r1-this.r0)/ edges;
		var w=this.width,h=this.height,color=this.color;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		outVert.push(x,y,r,g,b);
		for (var i=0;i < edges+1;i++){
			outVert.push(x+Math.sin(seg *i+this.r0)*w,y+Math.cos(seg *i+this.r0)*h);
			outVert.push(r,g,b);
		}
		for (i=0;i < edges;i++){
			outIndex.push(start,start+i+1,start+i+2);
		}
	}

	//用于画线
	__proto.createLine2=function(p,indices,lineWidth,len,outVertex,indexCount){
		var points=p.concat();
		var result=outVertex;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		var length=points.length / 2;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[2];
		p2y=points[3];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx+this.x,p1y-perpy+this.y,r,g,b,p1x+perpx+this.x,p1y+perpy+this.y,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*2];
			p1y=points[(i-1)*2+1];
			p2x=points[(i)*2];
			p2y=points[(i)*2+1];
			p3x=points[(i+1)*2];
			p3y=points[(i+1)*2+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px+this.x,py+this.y,r,g,b,p2x-(px-p2x)+this.x,p2y-(py-p2y)+this.y,r,g,b);
		}
		p1x=points[points.length-4];
		p1y=points[points.length-3];
		p2x=points[points.length-2];
		p2y=points[points.length-1];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
		var groupLen=indexCount;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		return result;
	}

	// /*,outVertex:Array,outIndex:Array*/
	__proto.createLine=function(p,indices,lineWidth,len){
		var points=p.concat();
		var result=p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		points.splice(0,5);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		p1x=points[points.length-10];
		p1y=points[points.length-9];
		p2x=points[points.length-5];
		p2y=points[points.length-4];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		return result;
	}

	//闭合路径
	__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
		var points=p.concat();
		var result=outVertex ? outVertex :p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		points.splice(0,5);
		var firstPoint=[points[0],points[1]];
		var lastPoint=[points[points.length-5],points[points.length-4]];
		var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
		var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
		points.unshift(midPointX,midPointY,0,0,0);
		points.push(midPointX,midPointY,0,0,0);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		if (outIndex){
			indices=outIndex;
		};
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
		return result;
	}

	return BasePoly;
})()


//class laya.webgl.shapes.Earcut
var Earcut=(function(){
	function Earcut(){}
	__class(Earcut,'laya.webgl.shapes.Earcut');
	Earcut.earcut=function(data,holeIndices,dim){
		dim=dim || 2;
		var hasHoles=holeIndices && holeIndices.length,
		outerLen=hasHoles ? holeIndices[0] *dim :data.length,
		outerNode=Earcut.linkedList(data,0,outerLen,dim,true),
		triangles=[];
		if (!outerNode)return triangles;
		var minX,minY,maxX,maxY,x,y,invSize;
		if (hasHoles)outerNode=Earcut.eliminateHoles(data,holeIndices,outerNode,dim);
		if (data.length > 80 *dim){
			minX=maxX=data[0];
			minY=maxY=data[1];
			for (var i=dim;i < outerLen;i+=dim){
				x=data[i];
				y=data[i+1];
				if (x < minX)minX=x;
				if (y < minY)minY=y;
				if (x > maxX)maxX=x;
				if (y > maxY)maxY=y;
			}
			invSize=Math.max(maxX-minX,maxY-minY);
			invSize=invSize!==0 ? 1 / invSize :0;
		}
		Earcut.earcutLinked(outerNode,triangles,dim,minX,minY,invSize);
		return triangles;
	}

	Earcut.linkedList=function(data,start,end,dim,clockwise){
		var i,last;
		if (clockwise===(Earcut.signedArea(data,start,end,dim)> 0)){
			for (i=start;i < end;i+=dim)last=Earcut.insertNode(i,data[i],data[i+1],last);
			}else {
			for (i=end-dim;i >=start;i-=dim)last=Earcut.insertNode(i,data[i],data[i+1],last);
		}
		if (last && Earcut.equals(last,last.next)){
			Earcut.removeNode(last);
			last=last.next;
		}
		return last;
	}

	Earcut.filterPoints=function(start,end){
		if (!start)return start;
		if (!end)end=start;
		var p=start,
		again;
		do {
			again=false;
			if (!p.steiner && (Earcut.equals(p,p.next)|| Earcut.area(p.prev,p,p.next)===0)){
				Earcut.removeNode(p);
				p=end=p.prev;
				if (p===p.next)break ;
				again=true;
				}else {
				p=p.next;
			}
		}while (again || p!==end);
		return end;
	}

	Earcut.earcutLinked=function(ear,triangles,dim,minX,minY,invSize,pass){
		if (!ear)return;
		if (!pass && invSize)Earcut.indexCurve(ear,minX,minY,invSize);
		var stop=ear,
		prev,next;
		while (ear.prev!==ear.next){
			prev=ear.prev;
			next=ear.next;
			if (invSize ? Earcut.isEarHashed(ear,minX,minY,invSize):Earcut.isEar(ear)){
				triangles.push(prev.i / dim);
				triangles.push(ear.i / dim);
				triangles.push(next.i / dim);
				Earcut.removeNode(ear);
				ear=next.next;
				stop=next.next;
				continue ;
			}
			ear=next;
			if (ear===stop){
				if (!pass){
					Earcut.earcutLinked(Earcut.filterPoints(ear,null),triangles,dim,minX,minY,invSize,1);
					}else if (pass===1){
					ear=Earcut.cureLocalIntersections(ear,triangles,dim);
					Earcut.earcutLinked(ear,triangles,dim,minX,minY,invSize,2);
					}else if (pass===2){
					Earcut.splitEarcut(ear,triangles,dim,minX,minY,invSize);
				}
				break ;
			}
		}
	}

	Earcut.isEar=function(ear){
		var a=ear.prev,
		b=ear,
		c=ear.next;
		if (Earcut.area(a,b,c)>=0)return false;
		var p=ear.next.next;
		while (p!==ear.prev){
			if (Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
				Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.next;
		}
		return true;
	}

	Earcut.isEarHashed=function(ear,minX,minY,invSize){
		var a=ear.prev,
		b=ear,
		c=ear.next;
		if (Earcut.area(a,b,c)>=0)return false;
		var minTX=a.x < b.x ? (a.x < c.x ? a.x :c.x):(b.x < c.x ? b.x :c.x),
		minTY=a.y < b.y ? (a.y < c.y ? a.y :c.y):(b.y < c.y ? b.y :c.y),
		maxTX=a.x > b.x ? (a.x > c.x ? a.x :c.x):(b.x > c.x ? b.x :c.x),
		maxTY=a.y > b.y ? (a.y > c.y ? a.y :c.y):(b.y > c.y ? b.y :c.y);
		var minZ=Earcut.zOrder(minTX,minTY,minX,minY,invSize),
		maxZ=Earcut.zOrder(maxTX,maxTY,minX,minY,invSize);
		var p=ear.nextZ;
		while (p && p.z <=maxZ){
			if (p!==ear.prev && p!==ear.next &&
				Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
			Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.nextZ;
		}
		p=ear.prevZ;
		while (p && p.z >=minZ){
			if (p!==ear.prev && p!==ear.next &&
				Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
			Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.prevZ;
		}
		return true;
	}

	Earcut.cureLocalIntersections=function(start,triangles,dim){
		var p=start;
		do {
			var a=p.prev,
			b=p.next.next;
			if (!Earcut.equals(a,b)&& Earcut.intersects(a,p,p.next,b)&& Earcut.locallyInside(a,b)&& Earcut.locallyInside(b,a)){
				triangles.push(a.i / dim);
				triangles.push(p.i / dim);
				triangles.push(b.i / dim);
				Earcut.removeNode(p);
				Earcut.removeNode(p.next);
				p=start=b;
			}
			p=p.next;
		}while (p!==start);
		return p;
	}

	Earcut.splitEarcut=function(start,triangles,dim,minX,minY,invSize){
		var a=start;
		do {
			var b=a.next.next;
			while (b!==a.prev){
				if (a.i!==b.i && Earcut.isValidDiagonal(a,b)){
					var c=Earcut.splitPolygon(a,b);
					a=Earcut.filterPoints(a,a.next);
					c=Earcut.filterPoints(c,c.next);
					Earcut.earcutLinked(a,triangles,dim,minX,minY,invSize);
					Earcut.earcutLinked(c,triangles,dim,minX,minY,invSize);
					return;
				}
				b=b.next;
			}
			a=a.next;
		}while (a!==start);
	}

	Earcut.eliminateHoles=function(data,holeIndices,outerNode,dim){
		var queue=[],
		i,len,start,end,list;
		for (i=0,len=holeIndices.length;i < len;i++){
			start=holeIndices[i] *dim;
			end=i < len-1 ? holeIndices[i+1] *dim :data.length;
			list=Earcut.linkedList(data,start,end,dim,false);
			if (list===list.next)list.steiner=true;
			queue.push(Earcut.getLeftmost(list));
		}
		queue.sort(Earcut.compareX);
		for (i=0;i < queue.length;i++){
			Earcut.eliminateHole(queue[i],outerNode);
			outerNode=Earcut.filterPoints(outerNode,outerNode.next);
		}
		return outerNode;
	}

	Earcut.compareX=function(a,b){
		return a.x-b.x;
	}

	Earcut.eliminateHole=function(hole,outerNode){
		outerNode=Earcut.findHoleBridge(hole,outerNode);
		if (outerNode){
			var b=Earcut.splitPolygon(outerNode,hole);
			Earcut.filterPoints(b,b.next);
		}
	}

	Earcut.findHoleBridge=function(hole,outerNode){
		var p=outerNode,
		hx=hole.x,
		hy=hole.y,
		qx=-Infinity,
		m;
		do {
			if (hy <=p.y && hy >=p.next.y && p.next.y!==p.y){
				var x=p.x+(hy-p.y)*(p.next.x-p.x)/ (p.next.y-p.y);
				if (x <=hx && x > qx){
					qx=x;
					if (x===hx){
						if (hy===p.y)return p;
						if (hy===p.next.y)return p.next;
					}
					m=p.x < p.next.x ? p :p.next;
				}
			}
			p=p.next;
		}while (p!==outerNode);
		if (!m)return null;
		if (hx===qx)return m.prev;
		var stop=m,
		mx=m.x,
		my=m.y,
		tanMin=Infinity,
		tan;
		p=m.next;
		while (p!==stop){
			if (hx >=p.x && p.x >=mx && hx!==p.x &&
				Earcut.pointInTriangle(hy < my ? hx :qx,hy,mx,my,hy < my ? qx :hx,hy,p.x,p.y)){
				tan=Math.abs(hy-p.y)/ (hx-p.x);
				if ((tan < tanMin || (tan===tanMin && p.x > m.x))&& Earcut.locallyInside(p,hole)){
					m=p;
					tanMin=tan;
				}
			}
			p=p.next;
		}
		return m;
	}

	Earcut.indexCurve=function(start,minX,minY,invSize){
		var p=start;
		do {
			if (p.z===null)p.z=Earcut.zOrder(p.x,p.y,minX,minY,invSize);
			p.prevZ=p.prev;
			p.nextZ=p.next;
			p=p.next;
		}while (p!==start);
		p.prevZ.nextZ=null;
		p.prevZ=null;
		Earcut.sortLinked(p);
	}

	Earcut.sortLinked=function(list){
		var i,p,q,e,tail,numMerges,pSize,qSize,
		inSize=1;
		do {
			p=list;
			list=null;
			tail=null;
			numMerges=0;
			while (p){
				numMerges++;
				q=p;
				pSize=0;
				for (i=0;i < inSize;i++){
					pSize++;
					q=q.nextZ;
					if (!q)break ;
				}
				qSize=inSize;
				while (pSize > 0 || (qSize > 0 && q)){
					if (pSize!==0 && (qSize===0 || !q || p.z <=q.z)){
						e=p;
						p=p.nextZ;
						pSize--;
						}else {
						e=q;
						q=q.nextZ;
						qSize--;
					}
					if (tail)tail.nextZ=e;
					else list=e;
					e.prevZ=tail;
					tail=e;
				}
				p=q;
			}
			tail.nextZ=null;
			inSize *=2;
		}while (numMerges > 1);
		return list;
	}

	Earcut.zOrder=function(x,y,minX,minY,invSize){
		x=32767 *(x-minX)*invSize;
		y=32767 *(y-minY)*invSize;
		x=(x | (x << 8))& 0x00FF00FF;
		x=(x | (x << 4))& 0x0F0F0F0F;
		x=(x | (x << 2))& 0x33333333;
		x=(x | (x << 1))& 0x55555555;
		y=(y | (y << 8))& 0x00FF00FF;
		y=(y | (y << 4))& 0x0F0F0F0F;
		y=(y | (y << 2))& 0x33333333;
		y=(y | (y << 1))& 0x55555555;
		return x | (y << 1);
	}

	Earcut.getLeftmost=function(start){
		var p=start,
		leftmost=start;
		do {
			if (p.x < leftmost.x)leftmost=p;
			p=p.next;
		}while (p!==start);
		return leftmost;
	}

	Earcut.pointInTriangle=function(ax,ay,bx,by,cx,cy,px,py){
		return (cx-px)*(ay-py)-(ax-px)*(cy-py)>=0 &&
		(ax-px)*(by-py)-(bx-px)*(ay-py)>=0 &&
		(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;
	}

	Earcut.isValidDiagonal=function(a,b){
		return a.next.i!==b.i && a.prev.i!==b.i && !Earcut.intersectsPolygon(a,b)&&
		Earcut.locallyInside(a,b)&& Earcut.locallyInside(b,a)&& Earcut.middleInside(a,b);
	}

	Earcut.area=function(p,q,r){
		return (q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);
	}

	Earcut.equals=function(p1,p2){
		return p1.x===p2.x && p1.y===p2.y;
	}

	Earcut.intersects=function(p1,q1,p2,q2){
		if ((Earcut.equals(p1,q1)&& Earcut.equals(p2,q2))||
			(Earcut.equals(p1,q2)&& Earcut.equals(p2,q1)))return true;
		return Earcut.area(p1,q1,p2)> 0!==Earcut.area(p1,q1,q2)> 0 &&
		Earcut.area(p2,q2,p1)> 0!==Earcut.area(p2,q2,q1)> 0;
	}

	Earcut.intersectsPolygon=function(a,b){
		var p=a;
		do {
			if (p.i!==a.i && p.next.i!==a.i && p.i!==b.i && p.next.i!==b.i &&
				Earcut.intersects(p,p.next,a,b))return true;
			p=p.next;
		}while (p!==a);
		return false;
	}

	Earcut.locallyInside=function(a,b){
		return Earcut.area(a.prev,a,a.next)< 0 ?
		Earcut.area(a,b,a.next)>=0 && Earcut.area(a,a.prev,b)>=0 :
		Earcut.area(a,b,a.prev)< 0 || Earcut.area(a,a.next,b)< 0;
	}

	Earcut.middleInside=function(a,b){
		var p=a,
		inside=false,
		px=(a.x+b.x)/ 2,
		py=(a.y+b.y)/ 2;
		do {
			if (((p.y > py)!==(p.next.y > py))&& p.next.y!==p.y &&
				(px < (p.next.x-p.x)*(py-p.y)/ (p.next.y-p.y)+p.x))
			inside=!inside;
			p=p.next;
		}while (p!==a);
		return inside;
	}

	Earcut.splitPolygon=function(a,b){
		var a2=new EarcutNode(a.i,a.x,a.y),
		b2=new EarcutNode(b.i,b.x,b.y),
		an=a.next,
		bp=b.prev;
		a.next=b;
		b.prev=a;
		a2.next=an;
		an.prev=a2;
		b2.next=a2;
		a2.prev=b2;
		bp.next=b2;
		b2.prev=bp;
		return b2;
	}

	Earcut.insertNode=function(i,x,y,last){
		var p=new EarcutNode(i,x,y);
		if (!last){
			p.prev=p;
			p.next=p;
			}else {
			p.next=last.next;
			p.prev=last;
			last.next.prev=p;
			last.next=p;
		}
		return p;
	}

	Earcut.removeNode=function(p){
		p.next.prev=p.prev;
		p.prev.next=p.next;
		if (p.prevZ)p.prevZ.nextZ=p.nextZ;
		if (p.nextZ)p.nextZ.prevZ=p.prevZ;
	}

	Earcut.signedArea=function(data,start,end,dim){
		var sum=0;
		for (var i=start,j=end-dim;i < end;i+=dim){
			sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);
			j=i;
		}
		return sum;
	}

	return Earcut;
})()


//class laya.webgl.shapes.EarcutNode
var EarcutNode=(function(){
	function EarcutNode(i,x,y){
		this.i=null;
		this.x=null;
		this.y=null;
		this.prev=null;
		this.next=null;
		this.z=null;
		this.prevZ=null;
		this.nextZ=null;
		this.steiner=null;
		this.i=i;
		this.x=x;
		this.y=y;
		this.prev=null;
		this.next=null;
		this.z=null;
		this.prevZ=null;
		this.nextZ=null;
		this.steiner=false;
	}

	__class(EarcutNode,'laya.webgl.shapes.EarcutNode');
	return EarcutNode;
})()


//class laya.webgl.shapes.GeometryData
var GeometryData=(function(){
	function GeometryData(lineWidth,lineColor,lineAlpha,fillColor,fillAlpha,fill,shape){
		//this.lineWidth=NaN;
		//this.lineColor=NaN;
		//this.lineAlpha=NaN;
		//this.fillColor=NaN;
		//this.fillAlpha=NaN;
		//this.shape=null;
		//this.fill=false;
		this.lineWidth=lineWidth;
		this.lineColor=lineColor;
		this.lineAlpha=lineAlpha;
		this.fillColor=fillColor;
		this.fillAlpha=fillAlpha;
		this.shape=shape;
		this.fill=fill;
	}

	__class(GeometryData,'laya.webgl.shapes.GeometryData');
	var __proto=GeometryData.prototype;
	__proto.clone=function(){
		return new GeometryData(this.lineWidth,this.lineColor,this.lineAlpha,this.fillColor,this.fillAlpha,this.fill,this.shape);
	}

	__proto.getIndexData=function(){
		return null;
	}

	__proto.getVertexData=function(){
		return null;
	}

	__proto.destroy=function(){
		this.shape=null;
	}

	return GeometryData;
})()


//class laya.webgl.shapes.Vertex
var Vertex=(function(){
	function Vertex(p){
		//this.points=null;
		if((p instanceof Float32Array))
			this.points=p;
		else if((p instanceof Array)){
			var len=p.length;
			this.points=new Float32Array(p);
		}
	}

	__class(Vertex,'laya.webgl.shapes.Vertex');
	var __proto=Vertex.prototype;
	Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
	__proto.getData=function(ib,vb,start){}
	__proto.needUpdate=function(mat){
		return false;
	}

	__proto.rebuild=function(points){}
	// TODO Auto Generated method stub
	__proto.setMatrix=function(mat){}
	return Vertex;
})()


//class laya.webgl.submit.Submit
var Submit=(function(){
	function Submit(renderType){
		//this._selfVb=null;
		//this._ib=null;
		//this._blendFn=null;
		//this._renderType=0;
		//this._vb=null;
		// 从VB中什么地方开始画，画到哪
		//this._startIdx=0;
		//this._numEle=0;
		//this.shaderValue=null;
		(renderType===void 0)&& (renderType=10000);
		this._renderType=renderType;
	}

	__class(Submit,'laya.webgl.submit.Submit');
	var __proto=Submit.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.releaseRender=function(){
		var cache=Submit._cache;
		cache[cache._length++]=this;
		this.shaderValue.release();
		this._vb=null;
	}

	__proto.getRenderType=function(){
		return this._renderType;
	}

	__proto.renderSubmit=function(){
		if (this._numEle===0)return 1;
		var _tex=this.shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source)
				return 1;
			this.shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var gl=WebGL.mainContext;
		this.shaderValue.upload();
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
		return 1;
	}

	Submit.__init__=function(){
		var s=Submit.RENDERBASE=new Submit(-1);
		s.shaderValue=new Value2D(0,0);
		s.shaderValue.ALPHA=-1234;
	}

	Submit.createSubmit=function(context,ib,vb,pos,sv){
		var o=Submit._cache._length ? Submit._cache[--Submit._cache._length] :new Submit();
		if (vb==null){
			vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
			vb.clear();
			pos=0;
		}
		o._ib=ib;
		o._vb=vb;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		var filters=context._shader2D.filters;
		filters && o.shaderValue.setFilters(filters);
		return o;
	}

	Submit.createShape=function(ctx,ib,vb,numEle,offset,sv){
		var o=(!Submit._cache._length)? (new Submit()):Submit._cache[--Submit._cache._length];
		o._ib=ib;
		o._vb=vb;
		o._numEle=numEle;
		o._startIdx=offset;
		o.shaderValue=sv;
		o.shaderValue.setValue(ctx._shader2D);
		var blendType=ctx._nBlendType;
		o._blendFn=ctx._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		return o;
	}

	Submit.TYPE_2D=10000;
	Submit.TYPE_CANVAS=10003;
	Submit.TYPE_CMDSETRT=10004;
	Submit.TYPE_CUSTOM=10005;
	Submit.TYPE_BLURRT=10006;
	Submit.TYPE_CMDDESTORYPRERT=10007;
	Submit.TYPE_DISABLESTENCIL=10008;
	Submit.TYPE_OTHERIBVB=10009;
	Submit.TYPE_PRIMITIVE=10010;
	Submit.TYPE_RT=10011;
	Submit.TYPE_BLUR_RT=10012;
	Submit.TYPE_TARGET=10013;
	Submit.TYPE_CHANGE_VALUE=10014;
	Submit.TYPE_SHAPE=10015;
	Submit.TYPE_TEXTURE=10016;
	Submit.TYPE_FILLTEXTURE=10017;
	Submit.RENDERBASE=null;
	__static(Submit,
	['_cache',function(){return this._cache=(Submit._cache=[],Submit._cache._length=0,Submit._cache);}
	]);
	return Submit;
})()


//class laya.webgl.submit.SubmitCMD
var SubmitCMD=(function(){
	function SubmitCMD(){
		this.fun=null;
		this.args=null;
	}

	__class(SubmitCMD,'laya.webgl.submit.SubmitCMD');
	var __proto=SubmitCMD.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		this.fun.apply(null,this.args);
		return 1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitCMD._cache;
		cache[cache._length++]=this;
	}

	SubmitCMD.create=function(args,fun){
		var o=SubmitCMD._cache._length?SubmitCMD._cache[--SubmitCMD._cache._length]:new SubmitCMD();
		o.fun=fun;
		o.args=args;
		return o;
	}

	__static(SubmitCMD,
	['_cache',function(){return this._cache=(SubmitCMD._cache=[],SubmitCMD._cache._length=0,SubmitCMD._cache);}
	]);
	return SubmitCMD;
})()


//class laya.webgl.submit.SubmitCMDScope
var SubmitCMDScope=(function(){
	function SubmitCMDScope(){
		this.variables={};
	}

	__class(SubmitCMDScope,'laya.webgl.submit.SubmitCMDScope');
	var __proto=SubmitCMDScope.prototype;
	__proto.getValue=function(name){
		return this.variables[name];
	}

	__proto.addValue=function(name,value){
		return this.variables[name]=value;
	}

	__proto.setValue=function(name,value){
		if(this.variables.hasOwnProperty(name)){
			return this.variables[name]=value;
		}
		return null;
	}

	__proto.clear=function(){
		for(var key in this.variables){
			delete this.variables[key];
		}
	}

	__proto.recycle=function(){
		this.clear();
		SubmitCMDScope.POOL.push(this);
	}

	SubmitCMDScope.create=function(){
		var scope=SubmitCMDScope.POOL.pop();
		scope||(scope=new SubmitCMDScope());
		return scope;
	}

	SubmitCMDScope.POOL=[];
	return SubmitCMDScope;
})()


//class laya.webgl.submit.SubmitOtherIBVB
var SubmitOtherIBVB=(function(){
	function SubmitOtherIBVB(){
		this.offset=0;
		//this._vb=null;
		//this._ib=null;
		//this._blendFn=null;
		//this._mat=null;
		//this._shader=null;
		//this._shaderValue=null;
		//this._numEle=0;
		this.startIndex=0;
		;
		this._mat=Matrix.create();
	}

	__class(SubmitOtherIBVB,'laya.webgl.submit.SubmitOtherIBVB');
	var __proto=SubmitOtherIBVB.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.releaseRender=function(){
		var cache=SubmitOtherIBVB._cache;
		cache[cache._length++]=this;
	}

	__proto.getRenderType=function(){
		return /*laya.webgl.submit.Submit.TYPE_OTHERIBVB*/10009;
	}

	__proto.renderSubmit=function(){
		var _tex=this._shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source)
				return 1;
			this._shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var w=RenderState2D.worldMatrix4;
		var wmat=Matrix.TEMP;
		Matrix.mulPre(this._mat,w[0],w[1],w[4],w[5],w[12],w[13],wmat);
		var tmp=RenderState2D.worldMatrix4=SubmitOtherIBVB.tempMatrix4;
		tmp[0]=wmat.a;
		tmp[1]=wmat.b;
		tmp[4]=wmat.c;
		tmp[5]=wmat.d;
		tmp[12]=wmat.tx;
		tmp[13]=wmat.ty;
		this._shader._offset=this.offset;
		this._shaderValue.refresh();
		this._shader.upload(this._shaderValue);
		this._shader._offset=0;
		var gl=WebGL.mainContext;
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this.startIndex);
		RenderState2D.worldMatrix4=w;
		BaseShader.activeShader=null;
		return 1;
	}

	SubmitOtherIBVB.create=function(context,vb,ib,numElement,shader,shaderValue,startIndex,offset,type){
		(type===void 0)&& (type=0);
		var o=(!SubmitOtherIBVB._cache._length)? (new SubmitOtherIBVB()):SubmitOtherIBVB._cache[--SubmitOtherIBVB._cache._length];
		o._ib=ib;
		o._vb=vb;
		o._numEle=numElement;
		o._shader=shader;
		o._shaderValue=shaderValue;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		switch(type){
			case 0:
				o.offset=0;
				o.startIndex=offset / (CONST3D2D.BYTES_PE *vb.vertexStride)*1.5;
				o.startIndex *=CONST3D2D.BYTES_PIDX;
				break ;
			case 1:
				o.startIndex=startIndex;
				o.offset=offset;
				break ;
			}
		return o;
	}

	__static(SubmitOtherIBVB,
	['_cache',function(){return this._cache=(SubmitOtherIBVB._cache=[],SubmitOtherIBVB._cache._length=0,SubmitOtherIBVB._cache);},'tempMatrix4',function(){return this.tempMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,];}
	]);
	return SubmitOtherIBVB;
})()


//class laya.webgl.submit.SubmitScissor
var SubmitScissor=(function(){
	function SubmitScissor(){
		this.submitIndex=0;
		this.submitLength=0;
		this.context=null;
		this.clipRect=new Rectangle();
		this.screenRect=new Rectangle();
	}

	__class(SubmitScissor,'laya.webgl.submit.SubmitScissor');
	var __proto=SubmitScissor.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto._scissor=function(x,y,w,h){
		var m=RenderState2D.worldMatrix4;
		var a=m[0],d=m[5],tx=m[12],ty=m[13];
		x=x *a+tx;
		y=y *d+ty;
		w *=a;
		h *=d;
		if (w < 1 || h < 1){
			return false;
		};
		var r=x+w;
		var b=y+h;
		x < 0 && (x=0,w=r-x);
		y < 0 && (y=0,h=b-y);
		var screen=RenderState2D.worldClipRect;
		x=Math.max(x,screen.x);
		y=Math.max(y,screen.y);
		w=Math.min(r,screen.right)-x;
		h=Math.min(b,screen.bottom)-y;
		if (w < 1 || h < 1){
			return false;
		};
		var worldScissorTest=RenderState2D.worldScissorTest;
		this.screenRect.copyFrom(screen);
		screen.x=x;
		screen.y=y;
		screen.width=w;
		screen.height=h;
		RenderState2D.worldScissorTest=true;
		y=RenderState2D.height-y-h;
		WebGL.mainContext.scissor(x,y,w,h);
		WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
		if (worldScissorTest){
			y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
			WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		}
		else{
			WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			RenderState2D.worldScissorTest=false;
		}
		screen.copyFrom(this.screenRect);
		return true;
	}

	__proto._scissorWithTagart=function(x,y,w,h){
		if (w < 1 || h < 1){
			return false;
		};
		var r=x+w;
		var b=y+h;
		x < 0 && (x=0,w=r-x);
		y < 0 && (y=0,h=b-y);
		var screen=RenderState2D.worldClipRect;
		x=Math.max(x,screen.x);
		y=Math.max(y,screen.y);
		w=Math.min(r,screen.right)-x;
		h=Math.min(b,screen.bottom)-y;
		if (w < 1 || h < 1){
			return false;
		};
		var worldScissorTest=RenderState2D.worldScissorTest;
		this.screenRect.copyFrom(screen);
		RenderState2D.worldScissorTest=true;
		screen.x=x;
		screen.y=y;
		screen.width=w;
		screen.height=h;
		y=RenderState2D.height-y-h;
		WebGL.mainContext.scissor(x,y,w,h);
		WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
		if (worldScissorTest){
			y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
			WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		}
		else{
			WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			RenderState2D.worldScissorTest=false;
		}
		screen.copyFrom(this.screenRect);
		return true;
	}

	__proto.renderSubmit=function(){
		this.submitLength=Math.min(this.context._submits._length-1,this.submitLength);
		if (this.submitLength < 1 || this.clipRect.width < 1 || this.clipRect.height < 1)
			return this.submitLength+1;
		if (this.context._targets)
			this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
		else this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
		return this.submitLength+1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitScissor._cache;
		cache[cache._length++]=this;
		this.context=null;
	}

	SubmitScissor.create=function(context){
		var o=SubmitScissor._cache._length?SubmitScissor._cache[--SubmitScissor._cache._length]:new SubmitScissor();
		o.context=context;
		return o;
	}

	__static(SubmitScissor,
	['_cache',function(){return this._cache=(SubmitScissor._cache=[],SubmitScissor._cache._length=0,SubmitScissor._cache);}
	]);
	return SubmitScissor;
})()


//class laya.webgl.submit.SubmitStencil
var SubmitStencil=(function(){
	function SubmitStencil(){
		this.step=0;
		this.blendMode=null;
		this.level=0;
	}

	__class(SubmitStencil,'laya.webgl.submit.SubmitStencil');
	var __proto=SubmitStencil.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		switch(this.step){
			case 1:
				this.do1();
				break ;
			case 2:
				this.do2();
				break ;
			case 3:
				this.do3();
				break ;
			case 4:
				this.do4();
				break ;
			case 5:
				this.do5();
				break ;
			case 6:
				this.do6();
				break ;
			case 7:
				this.do7();
				break ;
			case 8:
				this.do8();
				break ;
			}
		return 1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitStencil._cache;
		cache[cache._length++]=this;
	}

	__proto.do1=function(){
		var gl=WebGL.mainContext;
		gl.enable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
		gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
		gl.colorMask(false,false,false,false);
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.INCR*/0x1E02);
	}

	//gl.stencilOp(WebGLContext.KEEP,WebGLContext.KEEP,WebGLContext.INVERT);//测试通过给模版缓冲 写入值 一开始是0 现在是 0xFF (模版缓冲中不知道是多少位的数据)
	__proto.do2=function(){
		var gl=WebGL.mainContext;
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level+1,0xFF);
		gl.colorMask(true,true,true,true);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
	}

	__proto.do3=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(true,true,true,true);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
		gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
		gl.disable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
	}

	__proto.do4=function(){
		var gl=WebGL.mainContext;
		if (this.level==0){
			gl.enable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
			gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
		}
		gl.colorMask(false,false,false,false);
		gl.stencilFunc(/*laya.webgl.WebGLContext.ALWAYS*/0x0207,0,0xFF);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.INCR*/0x1E02);
	}

	__proto.do5=function(){
		var gl=WebGL.mainContext;
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
		gl.colorMask(true,true,true,true);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
	}

	__proto.do6=function(){
		var gl=WebGL.mainContext;
		BlendMode.targetFns[BlendMode.TOINT[this.blendMode]](gl);
	}

	__proto.do7=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(false,false,false,false);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.DECR*/0x1E03);
	}

	__proto.do8=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(true,true,true,true);
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
	}

	SubmitStencil.restore=function(context,clip,m,_x,_y){
		var submitStencil;
		context._renderKey=0;
		if (SubmitStencil._mask > 0){
			SubmitStencil._mask--;
		}
		if (SubmitStencil._mask==0){
			submitStencil=laya.webgl.submit.SubmitStencil.create(3);
			context.addRenderObject(submitStencil);
			context._curSubmit=Submit.RENDERBASE;
		}
		else{
			submitStencil=laya.webgl.submit.SubmitStencil.create(7);
			context.addRenderObject(submitStencil);
			var vb=context._vb;
			var nPos=(vb._byteLength >> 2);
			if (GlUtils.fillRectImgVb(vb,null,clip.x,clip.y,clip.width,clip.height,Texture.DEF_UV,m,_x,_y,0,0)){
				var shader=context._shader2D;
				shader.glTexture=null;
				var submit=context._curSubmit=Submit.createSubmit(context,context._ib,vb,((vb._byteLength-/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.ALPHA=1.0;
				context._submits[context._submits._length++]=submit;
				context._curSubmit._numEle+=6;
				context._curSubmit=Submit.RENDERBASE;
				}else {
				alert("clipRect calc stencil rect error");
			}
			submitStencil=laya.webgl.submit.SubmitStencil.create(8);
			context.addRenderObject(submitStencil);
		}
	}

	SubmitStencil.restore2=function(context,submit){
		var submitStencil;
		context._renderKey=0;
		if (SubmitStencil._mask > 0){
			SubmitStencil._mask--;
		}
		if (SubmitStencil._mask==0){
			submitStencil=laya.webgl.submit.SubmitStencil.create(3);
			context.addRenderObject(submitStencil);
			context._curSubmit=Submit.RENDERBASE;
		}
		else{
			submitStencil=laya.webgl.submit.SubmitStencil.create(7);
			context.addRenderObject(submitStencil);
			context._submits[context._submits._length++]=submit;
			submitStencil=laya.webgl.submit.SubmitStencil.create(8);
			context.addRenderObject(submitStencil);
		}
	}

	SubmitStencil.create=function(step){
		var o=SubmitStencil._cache._length?SubmitStencil._cache[--SubmitStencil._cache._length]:new SubmitStencil();
		o.step=step;
		if (step==5)
			++SubmitStencil._mask;
		o.level=SubmitStencil._mask;
		return o;
	}

	SubmitStencil._mask=0;
	__static(SubmitStencil,
	['_cache',function(){return this._cache=(SubmitStencil._cache=[],SubmitStencil._cache._length=0,SubmitStencil._cache);}
	]);
	return SubmitStencil;
})()


//class laya.webgl.submit.SubmitTarget
var SubmitTarget=(function(){
	function SubmitTarget(){
		this._renderType=0;
		this._vb=null;
		this._ib=null;
		this._startIdx=0;
		this._numEle=0;
		this.shaderValue=null;
		this.blendType=0;
		this.proName=null;
		this.scope=null;
	}

	__class(SubmitTarget,'laya.webgl.submit.SubmitTarget');
	var __proto=SubmitTarget.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		this._vb.bind_upload(this._ib);
		var target=this.scope.getValue(this.proName);
		if (target){
			this.shaderValue.texture=target.source;
			if (this.shaderValue["strength"] && !this.shaderValue["blurInfo"]){
				this.shaderValue["blurInfo"]=[target.width,target.height];
			}
			this.shaderValue.upload();
			this.blend();
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle/3;
			WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
		}
		return 1;
	}

	__proto.blend=function(){
		if (BlendMode.activeBlendFunction!==BlendMode.fns[this.blendType]){
			var gl=WebGL.mainContext;
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			BlendMode.fns[this.blendType](gl);
			BlendMode.activeBlendFunction=BlendMode.fns[this.blendType];
		}
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitTarget._cache;
		cache[cache._length++]=this;
	}

	SubmitTarget.create=function(context,ib,vb,pos,sv,proName){
		var o=SubmitTarget._cache._length?SubmitTarget._cache[--SubmitTarget._cache._length]:new SubmitTarget();
		o._ib=ib;
		o._vb=vb;
		o.proName=proName;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		o.blendType=context._nBlendType;
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		return o;
	}

	__static(SubmitTarget,
	['_cache',function(){return this._cache=(SubmitTarget._cache=[],SubmitTarget._cache._length=0,SubmitTarget._cache);}
	]);
	return SubmitTarget;
})()


/**
*...特殊的字符，如泰文，必须重新实现这个类
*/
//class laya.webgl.text.CharSegment
var CharSegment=(function(){
	function CharSegment(){
		this._sourceStr=null;
	}

	__class(CharSegment,'laya.webgl.text.CharSegment');
	var __proto=CharSegment.prototype;
	Laya.imps(__proto,{"laya.webgl.text.ICharSegment":true})
	__proto.textToSpit=function(str){
		this._sourceStr=str;
	}

	__proto.getChar=function(i){
		return this._sourceStr.charAt(i);
	}

	__proto.getCharCode=function(i){
		return this._sourceStr.charCodeAt(i);
	}

	__proto.length=function(){
		return this._sourceStr.length;
	}

	return CharSegment;
})()


//class laya.webgl.text.DrawText
var DrawText=(function(){
	var CharValue;
	function DrawText(){}
	__class(DrawText,'laya.webgl.text.DrawText');
	DrawText.__init__=function(){
		DrawText._charsTemp=new Array;
		DrawText._drawValue=new CharValue();
		DrawText._charSeg=new CharSegment();
	}

	DrawText.customCharSeg=function(charseg){
		DrawText._charSeg=charseg;
	}

	DrawText.getChar=function(char,id,drawValue){
		var result=WebGLCharImage.createOneChar(char,drawValue);
		if(id!=-1)
			DrawText._charsCache[id]=result;
		return result;
	}

	DrawText._drawSlow=function(save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine){
		var drawValue=DrawText._drawValue.value(font,fillColor,borderColor,lineWidth,sx,sy,underLine);
		var i=0,n=0;
		var chars=DrawText._charsTemp;
		var width=0,oneChar,htmlWord,id=NaN;
		if (words){
			chars.length=words.length;
			for (i=0,n=words.length;i < n;i++){
				htmlWord=words[i];
				id=htmlWord.charNum+drawValue.txtID;
				chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(htmlWord.char,id,drawValue);
				oneChar.active();
			}
			}else {
			var text=((txt instanceof laya.utils.WordText ))? txt.toString():txt;
			if (Text.CharacterCache){
				DrawText._charSeg.textToSpit(text);
				var len=/*if err,please use iflash.method.xmlLength()*/DrawText._charSeg.length();
				chars.length=len;
				for (i=0,n=len;i < n;i++){
					id=DrawText._charSeg.getCharCode(i)+drawValue.txtID;
					chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(DrawText._charSeg.getChar(i),id,drawValue);
					oneChar.active();
					width+=oneChar.cw;
				}
			}
			else {
				chars.length=0;
				oneChar=DrawText.getChar(text,-1,drawValue);
				oneChar.active();
				width+=oneChar.cw;
				chars[0]=oneChar;
			}
		};
		var dx=0;
		if (textAlign!==null && textAlign!=="left")
			dx=-(textAlign=="center" ? (width / 2):width);
		var uv,bdSz=NaN,texture,value,saveLength=0;
		if (words){
			for (i=0,n=chars.length;i < n;i++){
				oneChar=chars[i];
				if (!oneChar.isSpace){
					htmlWord=words[i];
					bdSz=oneChar.borderSize;
					texture=oneChar.texture;
					ctx._drawText(texture,x+dx+htmlWord.x *sx-bdSz,y+htmlWord.y *sy-bdSz,texture.width,texture.height,curMat,0,0,0,0);
				}
			}
			}else {
			for (i=0,n=chars.length;i < n;i++){
				oneChar=chars[i];
				if (!oneChar.isSpace){
					bdSz=oneChar.borderSize;
					texture=oneChar.texture;
					ctx._drawText(texture,x+dx-bdSz,y-bdSz,texture.width,texture.height,curMat,0,0,0,0);
					save && (value=save[saveLength++],value || (value=save[saveLength-1]=[]),value[0]=texture,value[1]=dx-bdSz,value[2]=-bdSz);
				}
				dx+=oneChar.cw;
			}
			save && (save.length=saveLength);
		}
	}

	DrawText._drawFast=function(save,ctx,curMat,x,y){
		var texture,value;
		for (var i=0,n=save.length;i < n;i++){
			value=save[i];
			texture=value[0];
			texture.active();
			ctx._drawText(texture,x+value[1],y+value[2],texture.width,texture.height,curMat,0,0,0,0);
		}
	}

	DrawText.drawText=function(ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,underLine){
		(underLine===void 0)&& (underLine=0);
		if ((txt && txt.length===0)|| (words && words.length===0))
			return;
		var sx=curMat.a,sy=curMat.d;
		(curMat.b!==0 || curMat.c!==0)&& (sx=sy=1);
		var scale=sx!==1 || sy!==1;
		if (scale && Laya.stage.transform){
			var t=Laya.stage.transform;
			scale=t.a===sx && t.d===sy;
		}else scale=false;
		if (scale){
			curMat=curMat.copyTo(WebGLContext2D._tmpMatrix);
			var tempTx=curMat.tx;
			var tempTy=curMat.ty;
			curMat.scale(1 / sx,1 / sy);
			curMat._checkTransform();
			x *=sx;
			y *=sy;
			x+=tempTx-curMat.tx;
			y+=tempTy-curMat.ty;
		}else sx=sy=1;
		if (words){
			DrawText._drawSlow(null,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
			}else {
			if (txt.toUpperCase===null){
				var idNum=sx+sy *100000;
				var myCache=txt;
				if (!myCache.changed && myCache.id===idNum){
					DrawText._drawFast(myCache.save,ctx,curMat,x,y);
					}else {
					myCache.id=idNum;
					myCache.changed=false;
					DrawText._drawSlow(myCache.save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
				return;
			};
			var id=txt+font.toString()+fillColor+borderColor+lineWidth+sx+sy+textAlign;
			var cache=DrawText._textsCache[id];
			if (Text.CharacterCache){
				if (cache){
					DrawText._drawFast(cache,ctx,curMat,x,y);
					}else {
					DrawText._textsCache.__length || (DrawText._textsCache.__length=0);
					if (DrawText._textsCache.__length > Config.WebGLTextCacheCount){
						DrawText._textsCache={};
						DrawText._textsCache.__length=0;
						DrawText._curPoolIndex=0;
					}
					DrawText._textCachesPool[DrawText._curPoolIndex] ? (cache=DrawText._textsCache[id]=DrawText._textCachesPool[DrawText._curPoolIndex],cache.length=0):(DrawText._textCachesPool[DrawText._curPoolIndex]=cache=DrawText._textsCache[id]=[]);
					DrawText._textsCache.__length++
					DrawText._curPoolIndex++;
					DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
			}
			else{
				DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
			}
		}
	}

	DrawText._charsTemp=null;
	DrawText._textCachesPool=[];
	DrawText._curPoolIndex=0;
	DrawText._charsCache={};
	DrawText._textsCache={};
	DrawText._drawValue=null;
	DrawText.d=[];
	DrawText._charSeg=null;
	DrawText.__init$=function(){
		//class CharValue
		CharValue=(function(){
			function CharValue(){
				//this.txtID=NaN;
				//this.font=null;
				//this.fillColor=null;
				//this.borderColor=null;
				//this.lineWidth=0;
				//this.scaleX=NaN;
				//this.scaleY=NaN;
				//this.underLine=0;
			}
			__class(CharValue,'');
			var __proto=CharValue.prototype;
			__proto.value=function(font,fillColor,borderColor,lineWidth,scaleX,scaleY,underLine){
				this.font=font;
				this.fillColor=fillColor;
				this.borderColor=borderColor;
				this.lineWidth=lineWidth;
				this.scaleX=scaleX;
				this.scaleY=scaleY;
				this.underLine=underLine;
				var key=font.toString()+scaleX+scaleY+lineWidth+fillColor+borderColor+underLine;
				this.txtID=CharValue._keymap[key];
				if (!this.txtID){
					this.txtID=(++CharValue._keymapCount)*0.0000001;
					CharValue._keymap[key]=this.txtID;
				}
				return this;
			}
			CharValue.clear=function(){
				CharValue._keymap={};
				CharValue._keymapCount=1;
			}
			CharValue._keymap={};
			CharValue._keymapCount=1;
			return CharValue;
		})()
	}

	return DrawText;
})()


//class laya.webgl.text.FontInContext
var FontInContext=(function(){
	function FontInContext(font){
		//this._text=null;
		//this._words=null;
		this._index=0;
		this._size=14;
		this._italic=-2;
		FontInContext._cache2=FontInContext._cache2|| [];
		this.setFont(font || "14px Arial");
	}

	__class(FontInContext,'laya.webgl.text.FontInContext');
	var __proto=FontInContext.prototype;
	__proto.setFont=function(value){
		var arr=FontInContext._cache2[value];
		if (!arr){
			this._words=value.split(' ');
			for (var i=0,n=this._words.length;i < n;i++){
				if (this._words[i].indexOf('px')> 0){
					this._index=i;
					break ;
				}
			}
			this._size=parseInt(this._words[this._index]);
			FontInContext._cache2[value]=[this._words,this._size];
			}else {
			this._words=arr[0];
			this._size=arr[1];
		}
		this._text=null;
		this._italic=-2;
	}

	__proto.getItalic=function(){
		this._italic===-2 && (this._italic=this.hasType("italic"));
		return this._italic;
	}

	__proto.hasType=function(name){
		for (var i=0,n=this._words.length;i < n;i++)
		if (this._words[i]===name)return i;
		return-1;
	}

	__proto.removeType=function(name){
		for (var i=0,n=this._words.length;i < n;i++)
		if (this._words[i]===name){
			this._words.splice(i,1);
			if (this._index > i)this._index--;
			break ;
		}
		this._text=null;
		this._italic=-2;
	}

	__proto.copyTo=function(dec){
		dec._text=this._text;
		dec._size=this._size;
		dec._index=this._index;
		dec._words=this._words.slice();
		dec._italic=-2;
		return dec;
	}

	__proto.toString=function(){
		return this._text ? this._text :(this._text=this._words.join(' '));
	}

	__getset(0,__proto,'size',function(){
		return this._size;
		},function(value){
		this._size=value;
		this._words[this._index]=value+"px";
		this._text=null;
	});

	FontInContext.create=function(font){
		var r=FontInContext._cache[font];
		if (r)return r;
		r=FontInContext._cache[font]=new FontInContext(font);
		return r;
	}

	FontInContext._cache={};
	FontInContext._cache2=null;
	__static(FontInContext,
	['EMPTY',function(){return this.EMPTY=new FontInContext();}
	]);
	return FontInContext;
})()


//class laya.webgl.utils.CONST3D2D
var CONST3D2D=(function(){
	function CONST3D2D(){}
	__class(CONST3D2D,'laya.webgl.utils.CONST3D2D');
	CONST3D2D._TMPARRAY=[];
	CONST3D2D._OFFSETX=0;
	CONST3D2D._OFFSETY=0;
	__static(CONST3D2D,
	['BYTES_PE',function(){return this.BYTES_PE=/*__JS__ */Float32Array.BYTES_PER_ELEMENT;},'BYTES_PIDX',function(){return this.BYTES_PIDX=/*__JS__ */Uint16Array.BYTES_PER_ELEMENT;},'defaultMatrix4',function(){return this.defaultMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];},'defaultMinusYMatrix4',function(){return this.defaultMinusYMatrix4=[1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1];},'uniformMatrix3',function(){return this.uniformMatrix3=[1,0,0,0,0,1,0,0,0,0,1,0];}
	]);
	return CONST3D2D;
})()


//class laya.webgl.utils.GlUtils
var GlUtils=(function(){
	function GlUtils(){}
	__class(GlUtils,'laya.webgl.utils.GlUtils');
	GlUtils.make2DProjection=function(width,height,depth){
		return [2.0 / width,0,0,0,0,-2.0 / height,0,0,0,0,2.0 / depth,0,-1,1,0,1,];
	}

	GlUtils.fillIBQuadrangle=function(buffer,count){
		if (count > 65535 / 4){
			throw Error("IBQuadrangle count:"+count+" must<:"+Math.floor(65535 / 4));
			return false;
		}
		count=Math.floor(count);
		buffer._resizeBuffer((count+1)*6 */*laya.webgl.utils.Buffer2D.SHORT*/2,false);
		buffer.byteLength=buffer.bufferLength;
		var bufferData=buffer.getUint16Array();
		var idx=0;
		for (var i=0;i < count;i++){
			bufferData[idx++]=i *4;
			bufferData[idx++]=i *4+2;
			bufferData[idx++]=i *4+1;
			bufferData[idx++]=i *4;
			bufferData[idx++]=i *4+3;
			bufferData[idx++]=i *4+2;
		}
		buffer.setNeedUpload();
		return true;
	}

	GlUtils.expandIBQuadrangle=function(buffer,count){
		buffer.bufferLength >=(count *6 */*laya.webgl.utils.Buffer2D.SHORT*/2)|| GlUtils.fillIBQuadrangle(buffer,count);
	}

	GlUtils.mathCeilPowerOfTwo=function(value){
		value--;
		value |=value >> 1;
		value |=value >> 2;
		value |=value >> 4;
		value |=value >> 8;
		value |=value >> 16;
		value++;
		return value;
	}

	GlUtils.fillQuadrangleImgVb=function(vb,x,y,point4,uv,m,_x,_y){
		'use strict';
		var vpos=(vb._byteLength >> 2)+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
		vb.byteLength=(vpos << 2);
		var vbdata=vb.getFloat32Array();
		vpos-=/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
		vbdata[vpos+2]=uv[0];
		vbdata[vpos+3]=uv[1];
		vbdata[vpos+6]=uv[2];
		vbdata[vpos+7]=uv[3];
		vbdata[vpos+10]=uv[4];
		vbdata[vpos+11]=uv[5];
		vbdata[vpos+14]=uv[6];
		vbdata[vpos+15]=uv[7];
		var a=m.a,b=m.b,c=m.c,d=m.d;
		if (a!==1 || b!==0 || c!==0 || d!==1){
			m.bTransform=true;
			var tx=m.tx+_x,ty=m.ty+_y;
			vbdata[vpos]=(point4[0]+x)*a+(point4[1]+y)*c+tx;
			vbdata[vpos+1]=(point4[0]+x)*b+(point4[1]+y)*d+ty;
			vbdata[vpos+4]=(point4[2]+x)*a+(point4[3]+y)*c+tx;
			vbdata[vpos+5]=(point4[2]+x)*b+(point4[3]+y)*d+ty;
			vbdata[vpos+8]=(point4[4]+x)*a+(point4[5]+y)*c+tx;
			vbdata[vpos+9]=(point4[4]+x)*b+(point4[5]+y)*d+ty;
			vbdata[vpos+12]=(point4[6]+x)*a+(point4[7]+y)*c+tx;
			vbdata[vpos+13]=(point4[6]+x)*b+(point4[7]+y)*d+ty;
			}else {
			m.bTransform=false;
			x+=m.tx+_x;
			y+=m.ty+_y;
			vbdata[vpos]=x+point4[0];
			vbdata[vpos+1]=y+point4[1];
			vbdata[vpos+4]=x+point4[2];
			vbdata[vpos+5]=y+point4[3];
			vbdata[vpos+8]=x+point4[4];
			vbdata[vpos+9]=y+point4[5];
			vbdata[vpos+12]=x+point4[6];
			vbdata[vpos+13]=y+point4[7];
		}
		vb._upload=true;
		return true;
	}

	GlUtils.fillTranglesVB=function(vb,x,y,points,m,_x,_y){
		var vpos=(vb._byteLength >> 2)+points.length;
		vb.byteLength=(vpos << 2);
		var vbdata=vb.getFloat32Array();
		vpos-=points.length;
		var len=points.length;
		var a=m.a,b=m.b,c=m.c,d=m.d;
		for (var i=0;i < len;i+=4){
			vbdata[vpos+i+2]=points[i+2];
			vbdata[vpos+i+3]=points[i+3];
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				var tx=m.tx+_x,ty=m.ty+_y;
				vbdata[vpos+i]=(points[i]+x)*a+(points[i+1]+y)*c+tx;
				vbdata[vpos+i+1]=(points[i]+x)*b+(points[i+1]+y)*d+ty;
				}else {
				m.bTransform=false;
				x+=m.tx+_x;
				y+=m.ty+_y;
				vbdata[vpos+i]=x+points[i];
				vbdata[vpos+i+1]=y+points[i+1];
			}
		}
		vb._upload=true;
		return true;
	}

	GlUtils.copyPreImgVb=function(vb,dx,dy){
		var vpos=(vb._byteLength >> 2);
		vb.byteLength=((vpos+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
		var vbdata=vb.getFloat32Array();
		for (var i=0,ci=vpos-16;i < 4;i++){
			vbdata[vpos]=vbdata[ci]+dx;
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci]+dy;
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci];
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci];
			++vpos;
			++ci;
		}
		vb._upload=true;
	}

	GlUtils.fillRectImgVb=function(vb,clip,x,y,width,height,uv,m,_x,_y,dx,dy,round){
		(round===void 0)&& (round=false);
		var mType=1;
		var toBx,toBy,toEx,toEy;
		var cBx,cBy,cEx,cEy;
		var w0,h0,tx,ty;
		var finalX,finalY,offsetX,offsetY;
		var a=m.a,b=m.b,c=m.c,d=m.d;
		var useClip=clip && clip.width < /*laya.webgl.canvas.WebGLContext2D._MAXSIZE*/99999999;
		if (a!==1 || b!==0 || c!==0 || d!==1){
			m.bTransform=true;
			if (b===0 && c===0){
				mType=23;
				w0=width+x,h0=height+y;
				tx=m.tx+_x,ty=m.ty+_y;
				toBx=a *x+tx;
				toEx=a *w0+tx;
				toBy=d *y+ty;
				toEy=d *h0+ty;
			}
			}else {
			mType=23;
			m.bTransform=false;
			toBx=x+m.tx+_x;
			toEx=toBx+width;
			toBy=y+m.ty+_y;
			toEy=toBy+height;
		}
		if (useClip){
			cBx=clip.x,cBy=clip.y,cEx=clip.width+cBx,cEy=clip.height+cBy;
		}
		if (mType!==1){
			if (Math.min(toBx,toEx)>=cEx)return false;
			if (Math.min(toBy,toEy)>=cEy)return false;
			if (Math.max(toEx,toBx)<=cBx)return false;
			if (Math.max(toEy,toBy)<=cBy)return false;
		};
		var vpos=(vb._byteLength >> 2);
		vb.byteLength=((vpos+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
		var vbdata=vb.getFloat32Array();
		vbdata[vpos+2]=uv[0];
		vbdata[vpos+3]=uv[1];
		vbdata[vpos+6]=uv[2];
		vbdata[vpos+7]=uv[3];
		vbdata[vpos+10]=uv[4];
		vbdata[vpos+11]=uv[5];
		vbdata[vpos+14]=uv[6];
		vbdata[vpos+15]=uv[7];
		switch (mType){
			case 1:
				tx=m.tx+_x,ty=m.ty+_y;
				w0=width+x,h0=height+y;
				var w1=x,h1=y;
				var aw1=a *w1,ch1=c *h1,dh1=d *h1,bw1=b *w1;
				var aw0=a *w0,ch0=c *h0,dh0=d *h0,bw0=b *w0;
				if (round){
					finalX=aw1+ch1+tx;
					offsetX=Math.round(finalX)-finalX;
					finalY=dh1+bw1+ty;
					offsetY=Math.round(finalY)-finalY;
					vbdata[vpos]=finalX+offsetX;
					vbdata[vpos+1]=finalY+offsetY;
					vbdata[vpos+4]=aw0+ch1+tx+offsetX;
					vbdata[vpos+5]=dh1+bw0+ty+offsetY;
					vbdata[vpos+8]=aw0+ch0+tx+offsetX;
					vbdata[vpos+9]=dh0+bw0+ty+offsetY;
					vbdata[vpos+12]=aw1+ch0+tx+offsetX;
					vbdata[vpos+13]=dh0+bw1+ty+offsetY;
					}else {
					vbdata[vpos]=aw1+ch1+tx;
					vbdata[vpos+1]=dh1+bw1+ty;
					vbdata[vpos+4]=aw0+ch1+tx;
					vbdata[vpos+5]=dh1+bw0+ty;
					vbdata[vpos+8]=aw0+ch0+tx;
					vbdata[vpos+9]=dh0+bw0+ty;
					vbdata[vpos+12]=aw1+ch0+tx;
					vbdata[vpos+13]=dh0+bw1+ty;
				}
				break ;
			case 23:
				if (round){
					finalX=toBx+dx;
					offsetX=Math.round(finalX)-finalX;
					finalY=toBy;
					offsetY=Math.round(finalY)-finalY;
					vbdata[vpos]=finalX+offsetX;
					vbdata[vpos+1]=finalY+offsetY;
					vbdata[vpos+4]=toEx+dx+offsetX;
					vbdata[vpos+5]=toBy+offsetY;
					vbdata[vpos+8]=toEx+offsetX;
					vbdata[vpos+9]=toEy+offsetY;
					vbdata[vpos+12]=toBx+offsetX;
					vbdata[vpos+13]=toEy+offsetY;
					}else {
					vbdata[vpos]=toBx+dx;
					vbdata[vpos+1]=toBy;
					vbdata[vpos+4]=toEx+dx;
					vbdata[vpos+5]=toBy;
					vbdata[vpos+8]=toEx;
					vbdata[vpos+9]=toEy;
					vbdata[vpos+12]=toBx;
					vbdata[vpos+13]=toEy;
				}
				break ;
			}
		vb._upload=true;
		return true;
	}

	GlUtils.fillLineVb=function(vb,clip,fx,fy,tx,ty,width,mat){
		'use strict';
		var linew=width *.5;
		var data=GlUtils._fillLineArray;
		var perpx=-(fy-ty),perpy=fx-tx;
		var dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx /=dist,perpy /=dist,perpx *=linew,perpy *=linew;
		data[0]=fx-perpx,data[1]=fy-perpy,data[4]=fx+perpx,data[5]=fy+perpy,data[8]=tx+perpx,data[9]=ty+perpy,data[12]=tx-perpx,data[13]=ty-perpy;
		mat && mat.transformPointArray(data,data);
		var vpos=(vb._byteLength >> 2)+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
		vb.byteLength=(vpos << 2);
		vb.insertData(data,vpos-/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
		return true;
	}

	__static(GlUtils,
	['_fillLineArray',function(){return this._fillLineArray=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];}
	]);
	return GlUtils;
})()


//class laya.webgl.utils.MatirxArray
var MatirxArray=(function(){
	function MatirxArray(){}
	__class(MatirxArray,'laya.webgl.utils.MatirxArray');
	MatirxArray.ArrayMul=function(a,b,o){
		if (!a){
			MatirxArray.copyArray(b,o);
			return;
		}
		if (!b){
			MatirxArray.copyArray(a,o);
			return;
		};
		var ai0=NaN,ai1=NaN,ai2=NaN,ai3=NaN;
		for (var i=0;i < 4;i++){
			ai0=a[i];
			ai1=a[i+4];
			ai2=a[i+8];
			ai3=a[i+12];
			o[i]=ai0 *b[0]+ai1 *b[1]+ai2 *b[2]+ai3 *b[3];
			o[i+4]=ai0 *b[4]+ai1 *b[5]+ai2 *b[6]+ai3 *b[7];
			o[i+8]=ai0 *b[8]+ai1 *b[9]+ai2 *b[10]+ai3 *b[11];
			o[i+12]=ai0 *b[12]+ai1 *b[13]+ai2 *b[14]+ai3 *b[15];
		}
	}

	MatirxArray.copyArray=function(f,t){
		if (!f)return;
		if (!t)return;
		for (var i=0;i < f.length;i++){
			t[i]=f[i];
		}
	}

	return MatirxArray;
})()


//class laya.webgl.utils.RenderState2D
var RenderState2D=(function(){
	function RenderState2D(){}
	__class(RenderState2D,'laya.webgl.utils.RenderState2D');
	RenderState2D.getMatrArray=function(){
		return [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	}

	RenderState2D.mat2MatArray=function(mat,matArray){
		var m=mat;
		var m4=matArray;
		m4[0]=m.a;
		m4[1]=m.b;
		m4[2]=RenderState2D.EMPTYMAT4_ARRAY[2];
		m4[3]=RenderState2D.EMPTYMAT4_ARRAY[3];
		m4[4]=m.c;
		m4[5]=m.d;
		m4[6]=RenderState2D.EMPTYMAT4_ARRAY[6];
		m4[7]=RenderState2D.EMPTYMAT4_ARRAY[7];
		m4[8]=RenderState2D.EMPTYMAT4_ARRAY[8];
		m4[9]=RenderState2D.EMPTYMAT4_ARRAY[9];
		m4[10]=RenderState2D.EMPTYMAT4_ARRAY[10];
		m4[11]=RenderState2D.EMPTYMAT4_ARRAY[11];
		m4[12]=m.tx;
		m4[13]=m.ty;
		m4[14]=RenderState2D.EMPTYMAT4_ARRAY[14];
		m4[15]=RenderState2D.EMPTYMAT4_ARRAY[15];
		return matArray;
	}

	RenderState2D.restoreTempArray=function(){
		RenderState2D.TEMPMAT4_ARRAY[0]=1;
		RenderState2D.TEMPMAT4_ARRAY[1]=0;
		RenderState2D.TEMPMAT4_ARRAY[4]=0;
		RenderState2D.TEMPMAT4_ARRAY[5]=1;
		RenderState2D.TEMPMAT4_ARRAY[12]=0;
		RenderState2D.TEMPMAT4_ARRAY[13]=0;
	}

	RenderState2D.clear=function(){
		RenderState2D.worldScissorTest=false;
		RenderState2D.worldShaderDefines=null;
		RenderState2D.worldFilters=null;
		RenderState2D.worldAlpha=1;
		RenderState2D.worldClipRect.x=RenderState2D.worldClipRect.y=0;
		RenderState2D.worldClipRect.width=RenderState2D.width;
		RenderState2D.worldClipRect.height=RenderState2D.height;
		RenderState2D.curRenderTarget=null;
	}

	RenderState2D._MAXSIZE=99999999;
	RenderState2D.worldAlpha=1.0;
	RenderState2D.worldScissorTest=false;
	RenderState2D.worldFilters=null;
	RenderState2D.worldShaderDefines=null;
	RenderState2D.curRenderTarget=null;
	RenderState2D.width=0;
	RenderState2D.height=0;
	__static(RenderState2D,
	['EMPTYMAT4_ARRAY',function(){return this.EMPTYMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];},'TEMPMAT4_ARRAY',function(){return this.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];},'worldMatrix4',function(){return this.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;},'worldMatrix',function(){return this.worldMatrix=new Matrix();},'worldClipRect',function(){return this.worldClipRect=new Rectangle(0,0,99999999,99999999);}
	]);
	return RenderState2D;
})()


/**
*@private
*<code>ShaderCompile</code> 类用于实现Shader编译。
*/
//class laya.webgl.utils.ShaderCompile
var ShaderCompile=(function(){
	var ShaderNode,InlcudeFile;
	function ShaderCompile(name,vs,ps,nameMap,defs){
		//this._nameMap=null;
		//this._VS=null;
		//this._PS=null;
		var _$this=this;
		function _compile (script){
			var includefiles=[];
			var top=new ShaderNode(includefiles);
			_$this._compileToTree(top,script.split('\n'),0,includefiles,defs);
			return top;
		};
		var startTime=Browser.now();
		this._VS=_compile(vs);
		this._PS=_compile(ps);
		this._nameMap=nameMap;
		if ((Browser.now()-startTime)> 2)
			console.log("ShaderCompile use time:"+(Browser.now()-startTime)+"  size:"+vs.length+"/"+ps.length);
	}

	__class(ShaderCompile,'laya.webgl.utils.ShaderCompile');
	var __proto=ShaderCompile.prototype;
	__proto._compileToTree=function(parent,lines,start,includefiles,defs){
		var node,preNode;
		var text,name,fname;
		var ofs=0,words,noUseNode;
		var i=0,n=0,j=0;
		for (i=start;i < lines.length;i++){
			text=lines[i];
			if (text.length < 1)continue ;
			ofs=text.indexOf("//");
			if (ofs===0)continue ;
			if (ofs >=0)text=text.substr(0,ofs);
			node=noUseNode || new ShaderNode(includefiles);
			noUseNode=null;
			node.text=text;
			node.noCompile=true;
			if ((ofs=text.indexOf("#"))>=0){
				name="#";
				for (j=ofs+1,n=text.length;j < n;j++){
					var c=text.charAt(j);
					if (c===' ' || c==='\t' || c==='?')break ;
					name+=c;
				}
				node.name=name;
				switch (name){
					case "#ifdef":
					case "#ifndef":
						node.src=text;
						node.noCompile=text.match(/[!&|()=<>]/)!=null;
						if (!node.noCompile){
							words=text.replace(/^\s*/,'').split(/\s+/);
							node.setCondition(words[1],name==="#ifdef" ? 1 :2);
							node.text="//"+node.text;
							}else {
							console.log("function():Boolean{return "+text.substr(ofs+node.name.length)+"}");
						}
						node.setParent(parent);
						parent=node;
						if (defs){
							words=text.substr(j).split(ShaderCompile._splitToWordExps3);
							for (j=0;j < words.length;j++){
								text=words[j];
								text.length && (defs[ text]=true);
							}
						}
						continue ;
					case "#if":
						node.src=text;
						node.noCompile=true;
						node.setParent(parent);
						parent=node;
						if (defs){
							words=text.substr(j).split(ShaderCompile._splitToWordExps3);
							for (j=0;j < words.length;j++){
								text=words[j];
								text.length && text!="defined" && (defs[ text]=true);
							}
						}
						continue ;
					case "#else":
						node.src=text;
						parent=parent.parent;
						preNode=parent.childs[parent.childs.length-1];
						node.noCompile=preNode.noCompile
						if (!(node.noCompile)){
							node.condition=preNode.condition;
							node.conditionType=preNode.conditionType==1 ? 2 :1;
							node.text="//"+node.text+" "+preNode.text+" "+node.conditionType;
						}
						node.setParent(parent);
						parent=node;
						continue ;
					case "#endif":
						parent=parent.parent;
						preNode=parent.childs[parent.childs.length-1];
						node.noCompile=preNode.noCompile;
						if (!(node.noCompile)){
							node.text="//"+node.text;
						}
						node.setParent(parent);
						continue ;
					case "#include":
						words=ShaderCompile.splitToWords(text,null);
						var inlcudeFile=ShaderCompile.includes[words[1]];
						if (!inlcudeFile){
							throw "ShaderCompile error no this include file:"+words[1];
							return;
						}
						if ((ofs=words[0].indexOf("?"))< 0){
							node.setParent(parent);
							text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
							this._compileToTree(node,text.split('\n'),0,includefiles,defs);
							node.text="";
							continue ;
						}
						node.setCondition(words[0].substr(ofs+1),1);
						node.text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
						break ;
					case "#import":
						words=ShaderCompile.splitToWords(text,null);
						fname=words[1];
						includefiles.push({node:node,file:ShaderCompile.includes[fname],ofs:node.text.length});
						continue ;
					}
				}else {
				preNode=parent.childs[parent.childs.length-1];
				if (preNode && !preNode.name){
					includefiles.length > 0 && ShaderCompile.splitToWords(text,preNode);
					noUseNode=node;
					preNode.text+="\n"+text;
					continue ;
				}
				includefiles.length > 0 && ShaderCompile.splitToWords(text,node);
			}
			node.setParent(parent);
		}
	}

	__proto.createShader=function(define,shaderName,createShader){
		var defMap={};
		var defineStr="";
		if (define){
			for (var i in define){
				defineStr+="#define "+i+"\n";
				defMap[i]=true;
			}
		};
		var vs=this._VS.toscript(defMap,[]);
		var ps=this._PS.toscript(defMap,[]);
		return (createShader || Shader.create)(defineStr+vs.join('\n'),defineStr+ps.join('\n'),shaderName,this._nameMap);
	}

	ShaderCompile._parseOne=function(attributes,uniforms,words,i,word,b){
		var one={type:ShaderCompile.shaderParamsMap[words[i+1]],name:words[i+2],size:isNaN(parseInt(words[i+3]))? 1 :parseInt(words[i+3])};
		if (b){
			if (word=="attribute"){
				attributes.push(one);
				}else {
				uniforms.push(one);
			}
		}
		if (words[i+3]==':'){
			one.type=words[i+4];
			i+=2;
		}
		i+=2;
		return i;
	}

	ShaderCompile.addInclude=function(fileName,txt){
		if (!txt || txt.length===0)
			throw new Error("add shader include file err:"+fileName);
		if (ShaderCompile.includes[fileName])
			throw new Error("add shader include file err, has add:"+fileName);
		ShaderCompile.includes[fileName]=new InlcudeFile(txt);
	}

	ShaderCompile.preGetParams=function(vs,ps){
		var text=[vs,ps];
		var result={};
		var attributes=[];
		var uniforms=[];
		var definesInfo={};
		var definesName=[];
		result.attributes=attributes;
		result.uniforms=uniforms;
		result.defines=definesInfo;
		var i=0,n=0,one;
		for (var s=0;s < 2;s++){
			text[s]=text[s].replace(ShaderCompile._removeAnnotation,"");
			var words=text[s].match(ShaderCompile._reg);
			var tempelse;
			for (i=0,n=words.length;i < n;i++){
				var word=words[i];
				if (word !="attribute" && word !="uniform"){
					if (word=="#define"){
						word=words[++i];
						definesName[word]=1;
						continue ;
						}else if (word=="#ifdef"){
						tempelse=words[++i];
						var def=definesInfo[tempelse]=definesInfo[tempelse] || [];
						for (i++;i < n;i++){
							word=words[i];
							if (word !="attribute" && word !="uniform"){
								if (word=="#else"){
									for (i++;i < n;i++){
										word=words[i];
										if (word !="attribute" && word !="uniform"){
											if (word=="#endif"){
												break ;
											}
											continue ;
										}
										i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,!definesName[tempelse]);
									}
								}
								continue ;
							}
							i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,definesName[tempelse]);
						}
					}
					continue ;
				}
				i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,true);
			}
		}
		return result;
	}

	ShaderCompile.splitToWords=function(str,block){
		var out=[];
		var c;
		var ofs=-1;
		var word;
		for (var i=0,n=str.length;i < n;i++){
			c=str.charAt(i);
			if (" \t=+-*/&%!<>()'\",;".indexOf(c)>=0){
				if (ofs >=0 && (i-ofs)> 1){
					word=str.substr(ofs,i-ofs);
					out.push(word);
				}
				if (c=='"' || c=="'"){
					var ofs2=str.indexOf(c,i+1);
					if (ofs2 < 0){
						throw "Sharder err:"+str;
					}
					out.push(str.substr(i+1,ofs2-i-1));
					i=ofs2;
					ofs=-1;
					continue ;
				}
				if (c=='(' && block && out.length > 0){
					word=out[out.length-1]+";";
					if ("vec4;main;".indexOf(word)< 0)
						block.useFuns+=word;
				}
				ofs=-1;
				continue ;
			}
			if (ofs < 0)ofs=i;
		}
		if (ofs < n && (n-ofs)> 1){
			word=str.substr(ofs,n-ofs);
			out.push(word);
		}
		return out;
	}

	ShaderCompile.IFDEF_NO=0;
	ShaderCompile.IFDEF_YES=1;
	ShaderCompile.IFDEF_ELSE=2;
	ShaderCompile.IFDEF_PARENT=3;
	ShaderCompile.includes={};
	__static(ShaderCompile,
	['_removeAnnotation',function(){return this._removeAnnotation=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g");},'_reg',function(){return this._reg=new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g");},'_splitToWordExps',function(){return this._splitToWordExps=new RegExp("[(\".*\")]+|[('.*')]+|([ \\t=\\+\\-*/&%!<>!%\(\),;])","g");},'shaderParamsMap',function(){return this.shaderParamsMap={"float":/*laya.webgl.WebGLContext.FLOAT*/0x1406,"int":/*laya.webgl.WebGLContext.INT*/0x1404,"bool":/*laya.webgl.WebGLContext.BOOL*/0x8B56,"vec2":/*laya.webgl.WebGLContext.FLOAT_VEC2*/0x8B50,"vec3":/*laya.webgl.WebGLContext.FLOAT_VEC3*/0x8B51,"vec4":/*laya.webgl.WebGLContext.FLOAT_VEC4*/0x8B52,"ivec2":/*laya.webgl.WebGLContext.INT_VEC2*/0x8B53,"ivec3":/*laya.webgl.WebGLContext.INT_VEC3*/0x8B54,"ivec4":/*laya.webgl.WebGLContext.INT_VEC4*/0x8B55,"bvec2":/*laya.webgl.WebGLContext.BOOL_VEC2*/0x8B57,"bvec3":/*laya.webgl.WebGLContext.BOOL_VEC3*/0x8B58,"bvec4":/*laya.webgl.WebGLContext.BOOL_VEC4*/0x8B59,"mat2":/*laya.webgl.WebGLContext.FLOAT_MAT2*/0x8B5A,"mat3":/*laya.webgl.WebGLContext.FLOAT_MAT3*/0x8B5B,"mat4":/*laya.webgl.WebGLContext.FLOAT_MAT4*/0x8B5C,"sampler2D":/*laya.webgl.WebGLContext.SAMPLER_2D*/0x8B5E,"samplerCube":/*laya.webgl.WebGLContext.SAMPLER_CUBE*/0x8B60};},'_splitToWordExps3',function(){return this._splitToWordExps3=new RegExp("[ \\t=\\+\\-*/&%!<>!%\(\),;\\|]","g");}
	]);
	ShaderCompile.__init$=function(){
		//class ShaderNode
		ShaderNode=(function(){
			function ShaderNode(includefiles){
				this.childs=[];
				this.text="";
				this.parent=null;
				this.name=null;
				this.noCompile=false;
				this.includefiles=null;
				this.condition=null;
				this.conditionType=0;
				this.useFuns="";
				this.z=0;
				this.src=null;
				this.includefiles=includefiles;
			}
			__class(ShaderNode,'');
			var __proto=ShaderNode.prototype;
			__proto.setParent=function(parent){
				parent.childs.push(this);
				this.z=parent.z+1;
				this.parent=parent;
			}
			__proto.setCondition=function(condition,type){
				if (condition){
					this.conditionType=type;
					condition=condition.replace(/(\s*$)/g,"");
					this.condition=function (){
						return this[condition];
					}
					this.condition.__condition=condition;
				}
			}
			__proto.toscript=function(def,out){
				return this._toscript(def,out,++ShaderNode.__id);
			}
			__proto._toscript=function(def,out,id){
				if (this.childs.length < 1 && !this.text)return out;
				var outIndex=out.length;
				if (this.condition){
					var ifdef=!!this.condition.call(def);
					this.conditionType===/*laya.webgl.utils.ShaderCompile.IFDEF_ELSE*/2 && (ifdef=!ifdef);
					if (!ifdef)return out;
				}
				this.text && out.push(this.text);
				this.childs.length > 0 && this.childs.forEach(function(o,index,arr){
					o._toscript(def,out,id);
				});
				if (this.includefiles.length > 0 && this.useFuns.length > 0){
					var funsCode;
					for (var i=0,n=this.includefiles.length;i < n;i++){
						if (this.includefiles[i].curUseID==id){
							continue ;
						}
						funsCode=this.includefiles[i].file.getFunsScript(this.useFuns);
						if (funsCode.length > 0){
							this.includefiles[i].curUseID=id;
							out[0]=funsCode+out[0];
						}
					}
				}
				return out;
			}
			ShaderNode.__id=1;
			return ShaderNode;
		})()
		//class InlcudeFile
		InlcudeFile=(function(){
			function InlcudeFile(txt){
				this.script=null;
				this.codes={};
				this.funs={};
				this.curUseID=-1;
				this.funnames="";
				this.script=txt;
				var begin=0,ofs=0,end=0;
				while (true){
					begin=txt.indexOf("#begin",begin);
					if (begin < 0)break ;
					end=begin+5;
					while (true){
						end=txt.indexOf("#end",end);
						if (end < 0)break ;
						if (txt.charAt(end+4)==='i')
							end+=5;
						else break ;
					}
					if (end < 0){
						throw "add include err,no #end:"+txt;
						return;
					}
					ofs=txt.indexOf('\n',begin);
					var words=ShaderCompile.splitToWords(txt.substr(begin,ofs-begin),null);
					if (words[1]=='code'){
						this.codes[words[2]]=txt.substr(ofs+1,end-ofs-1);
						}else if (words[1]=='function'){
						ofs=txt.indexOf("function",begin);
						ofs+="function".length;
						this.funs[words[3]]=txt.substr(ofs+1,end-ofs-1);
						this.funnames+=words[3]+";";
					}
					begin=end+1;
				}
			}
			__class(InlcudeFile,'');
			var __proto=InlcudeFile.prototype;
			__proto.getWith=function(name){
				var r=name ? this.codes[name] :this.script;
				if (!r){
					throw "get with error:"+name;
				}
				return r;
			}
			__proto.getFunsScript=function(funsdef){
				var r="";
				for (var i in this.funs){
					if (funsdef.indexOf(i+";")>=0){
						r+=this.funs[i];
					}
				}
				return r;
			}
			return InlcudeFile;
		})()
	}

	return ShaderCompile;
})()


/**
*@private
*/
//class laya.webgl.WebGL
var WebGL=(function(){
	function WebGL(){}
	__class(WebGL,'laya.webgl.WebGL');
	WebGL._uint8ArraySlice=function(){
		var _this=/*__JS__ */this;
		var sz=_this.length;
		var dec=new Uint8Array(_this.length);
		for (var i=0;i < sz;i++)dec[i]=_this[i];
		return dec;
	}

	WebGL._float32ArraySlice=function(){
		var _this=/*__JS__ */this;
		var sz=_this.length;
		var dec=new Float32Array(_this.length);
		for (var i=0;i < sz;i++)dec[i]=_this[i];
		return dec;
	}

	WebGL._uint16ArraySlice=function(__arg){
		var arg=arguments;
		var _this=/*__JS__ */this;
		var sz=0;
		var dec;
		var i=0;
		if (arg.length===0){
			sz=_this.length;
			dec=new Uint16Array(sz);
			for (i=0;i < sz;i++)
			dec[i]=_this[i];
			}else if (arg.length===2){
			var start=arg[0];
			var end=arg[1];
			if (end > start){
				sz=end-start;
				dec=new Uint16Array(sz);
				for (i=start;i < end;i++)
				dec[i-start]=_this[i];
				}else {
				dec=new Uint16Array(0);
			}
		}
		return dec;
	}

	WebGL.expandContext=function(){
		var from=Context.prototype;
		var to=/*__JS__ */CanvasRenderingContext2D.prototype;
		to.fillTrangles=from.fillTrangles;
		Buffer2D.__int__(null);
		to.setIBVB=function (x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset){
			(startIndex===void 0)&& (startIndex=0);
			(offset===void 0)&& (offset=0);
			if (ib===null){
				this._ib=this._ib || IndexBuffer2D.QuadrangleIB;
				ib=this._ib;
				GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (4 *16)+8));
			}
			this._setIBVB(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset);
		};
		to.fillTrangles=function (tex,x,y,points,m){
			this._curMat=this._curMat || Matrix.create();
			this._vb=this._vb || VertexBuffer2D.create();
			if (!this._ib){
				this._ib=IndexBuffer2D.create();
				GlUtils.fillIBQuadrangle(this._ib,length / 4);
			};
			var vb=this._vb;
			var length=points.length >> 4;
			GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,0,0);
			GlUtils.expandIBQuadrangle(this._ib,(vb._byteLength / (4 *16)+8));
			var shaderValues=new Value2D(0x01,0);
			shaderValues.textureHost=tex;
			var sd=new Shader2X("attribute vec2 position; attribute vec2 texcoord; uniform vec2 size; uniform mat4 mmat; varying vec2 v_texcoord; void main() { vec4 p=vec4(position.xy,0.0,1.0);vec4 pos=mmat*p; gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0); v_texcoord = texcoord; }","precision mediump float; varying vec2 v_texcoord; uniform sampler2D texture; void main() {vec4 color= texture2D(texture, v_texcoord); color.a*=1.0; gl_FragColor= color;}");
			/*__JS__ */vb._vertType=3;
			this._setIBVB(x,y,this._ib,vb,length *6,m,sd,shaderValues,0,0);
		}
	}

	WebGL.enable=function(){
		Browser.__init__();
		if (Render.isConchApp){
			if (!Render.isConchWebGL){
				RunDriver.skinAniSprite=function (){
					var tSkinSprite=new SkinMesh()
					return tSkinSprite;
				}
				WebGL.expandContext();
				return false;
			}
		}
		RunDriver.getWebGLContext=function getWebGLContext (canvas){
			var gl;
			var names=["webgl","experimental-webgl","webkit-3d","moz-webgl"];
			for (var i=0;i < names.length;i++){
				try {
					gl=canvas.getContext(names[i],{stencil:Config.isStencil,alpha:Config.isAlpha,antialias:Config.isAntialias,premultipliedAlpha:Config.premultipliedAlpha,preserveDrawingBuffer:Config.preserveDrawingBuffer});
				}catch (e){}
				if (gl)
					return gl;
			}
			return null;
		}
		WebGL.mainContext=RunDriver.getWebGLContext(Render._mainCanvas);
		if (WebGL.mainContext==null)
			return false;
		if (Render.isWebGL)return true;
		HTMLImage.create=function (src,def){
			return new WebGLImage(src,def);
		}
		HTMLSubImage.create=function (canvas,offsetX,offsetY,width,height,atlasImage,src){
			return new WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src);
		}
		Render.WebGL=WebGL;
		Render.isWebGL=true;
		DrawText.__init__();
		RunDriver.createRenderSprite=function (type,next){
			return new RenderSprite3D(type,next);
		}
		RunDriver.createWebGLContext2D=function (c){
			return new WebGLContext2D(c);
		}
		RunDriver.changeWebGLSize=function (width,height){
			laya.webgl.WebGL.onStageResize(width,height);
		}
		RunDriver.createGraphics=function (){
			return new GraphicsGL();
		};
		var action=RunDriver.createFilterAction;
		RunDriver.createFilterAction=action ? action :function (type){
			return new ColorFilterActionGL()
		}
		RunDriver.clear=function (color){
			RenderState2D.worldScissorTest && laya.webgl.WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			var ctx=Render.context.ctx;
			var c=(ctx._submits._length==0 || Config.preserveDrawingBuffer)? Color.create(color)._color :Stage._wgColor;
			if (c)ctx.clearBG(c[0],c[1],c[2],c[3]);
			RenderState2D.clear();
		}
		RunDriver.addToAtlas=function (texture,force){
			(force===void 0)&& (force=false);
			var bitmap=texture.bitmap;
			if (!Render.optimizeTextureMemory(texture.url,texture)){
				(bitmap).enableMerageInAtlas=false;
				return;
			}
			if ((Laya.__typeof(bitmap,'laya.webgl.resource.IMergeAtlasBitmap'))&& ((bitmap).allowMerageInAtlas)){
				bitmap.on(/*laya.events.Event.RECOVERED*/"recovered",texture,texture.addTextureToAtlas);
			}
		}
		RunDriver.isAtlas=function (bitmap){
			return (bitmap instanceof laya.webgl.atlas.AtlasWebGLCanvas );
		}
		AtlasResourceManager._enable();
		RunDriver.beginFlush=function (){
			var atlasResourceManager=AtlasResourceManager.instance;
			var count=atlasResourceManager.getAtlaserCount();
			for (var i=0;i < count;i++){
				var atlerCanvas=atlasResourceManager.getAtlaserByIndex(i).texture;
				(atlerCanvas._flashCacheImageNeedFlush)&& (RunDriver.flashFlushImage(atlerCanvas));
			}
		}
		RunDriver.drawToCanvas=function (sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
			offsetX-=sprite.x;
			offsetY-=sprite.y;
			var renderTarget=RenderTarget2D.create(canvasWidth,canvasHeight,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,0,false);
			renderTarget.start();
			renderTarget.clear(0,0,0,0);
			Render.context.clear();
			RenderSprite.renders[_renderType]._fun(sprite,Render.context,offsetX,RenderState2D.height-canvasHeight+offsetY);
			Render.context.flush();
			renderTarget.end();
			var pixels=renderTarget.getData(0,0,renderTarget.width,renderTarget.height);
			renderTarget.recycle();
			var htmlCanvas=new WebGLCanvas();
			htmlCanvas._canvas=Browser.createElement("canvas");
			htmlCanvas.size(canvasWidth,canvasHeight);
			var context=htmlCanvas._canvas.getContext('2d');
			Browser.canvas.size(canvasWidth,canvasHeight);
			var tempContext=Browser.context;
			var imgData=tempContext.createImageData(canvasWidth,canvasHeight);
			imgData.data.set(/*__JS__ */new Uint8ClampedArray(pixels.buffer));
			htmlCanvas._imgData=imgData;
			tempContext.putImageData(imgData,0,0);
			context.save();
			context.translate(0,canvasHeight);
			context.scale(1,-1);
			context.drawImage(Browser.canvas.source,0,0);
			context.restore();
			return htmlCanvas;
		}
		RunDriver.createFilterAction=function (type){
			var action;
			switch (type){
				case /*laya.filters.Filter.COLOR*/0x20:
					action=new ColorFilterActionGL();
					break ;
				}
			return action;
		}
		RunDriver.addTextureToAtlas=function (texture){
			texture._uvID++;
			AtlasResourceManager._atlasRestore++;
			((texture.bitmap).enableMerageInAtlas)&& (AtlasResourceManager.instance.addToAtlas(texture));
		}
		RunDriver.getTexturePixels=function (value,x,y,width,height){
			(Render.context.ctx).clear();
			var tSprite=new Sprite();
			tSprite.graphics.drawTexture(value,-x,-y);
			var tRenderTarget=RenderTarget2D.create(width,height);
			tRenderTarget.start();
			tRenderTarget.clear(0,0,0,0);
			tSprite.render(Render.context,0,0);
			(Render.context.ctx).flush();
			tRenderTarget.end();
			var tUint8Array=tRenderTarget.getData(0,0,width,height);
			var tArray=[];
			var tIndex=0;
			for (var i=height-1;i >=0;i--){
				for (var j=0;j < width;j++){
					tIndex=(i *width+j)*4;
					tArray.push(tUint8Array[tIndex]);
					tArray.push(tUint8Array[tIndex+1]);
					tArray.push(tUint8Array[tIndex+2]);
					tArray.push(tUint8Array[tIndex+3]);
				}
			}
			return tArray;
		}
		RunDriver.skinAniSprite=function (){
			var tSkinSprite=new SkinMesh()
			return tSkinSprite;
		}
		Filter._filterStart=function (scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var source=RenderTarget2D.create(b.width,b.height);
			source.start();
			source.clear(0,0,0,0);
			scope.addValue("src",source);
			scope.addValue("ScissorTest",RenderState2D.worldScissorTest);
			if (RenderState2D.worldScissorTest){
				var tClilpRect=new Rectangle();
				tClilpRect.copyFrom((context.ctx)._clipRect)
				scope.addValue("clipRect",tClilpRect);
				RenderState2D.worldScissorTest=false;
				laya.webgl.WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			}
		}
		Filter._filterEnd=function (scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var source=scope.getValue("src");
			source.end();
			var out=RenderTarget2D.create(b.width,b.height);
			out.start();
			out.clear(0,0,0,0);
			scope.addValue("out",out);
			sprite._set$P('_filterCache',out);
			sprite._set$P('_isHaveGlowFilter',scope.getValue("_isHaveGlowFilter"));
		}
		Filter._EndTarget=function (scope,context){
			var source=scope.getValue("src");
			source.recycle();
			var out=scope.getValue("out");
			out.end();
			var b=scope.getValue("ScissorTest");
			if (b){
				RenderState2D.worldScissorTest=true;
				laya.webgl.WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
				context.ctx.save();
				var tClipRect=scope.getValue("clipRect");
				(context.ctx).clipRect(tClipRect.x,tClipRect.y,tClipRect.width,tClipRect.height);
			}
		}
		Filter._useSrc=function (scope){
			var source=scope.getValue("out");
			source.end();
			source=scope.getValue("src");
			source.start();
			source.clear(0,0,0,0);
		}
		Filter._endSrc=function (scope){
			var source=scope.getValue("src");
			source.end();
		}
		Filter._useOut=function (scope){
			var source=scope.getValue("src");
			source.end();
			source=scope.getValue("out");
			source.start();
			source.clear(0,0,0,0);
		}
		Filter._endOut=function (scope){
			var source=scope.getValue("out");
			source.end();
		}
		Filter._recycleScope=function (scope){
			scope.recycle();
		}
		Filter._filter=function (sprite,context,x,y){
			var next=this._next;
			if (next){
				var filters=sprite.filters,len=filters.length;
				if (len==1 && (filters[0].type==/*laya.filters.Filter.COLOR*/0x20)){
					context.ctx.save();
					context.ctx.setFilters([filters[0]]);
					next._fun.call(next,sprite,context,x,y);
					context.ctx.restore();
					return;
				};
				var shaderValue;
				var b;
				var scope=SubmitCMDScope.create();
				var p=Point.TEMP;
				var tMatrix=context.ctx._getTransformMatrix();
				var mat=Matrix.create();
				tMatrix.copyTo(mat);
				var tPadding=0;
				var tHalfPadding=0;
				var tIsHaveGlowFilter=false;
				var out=sprite._$P._filterCache ? sprite._$P._filterCache :null;
				if (!out || sprite._repaint){
					tIsHaveGlowFilter=sprite._isHaveGlowFilter();
					scope.addValue("_isHaveGlowFilter",tIsHaveGlowFilter);
					if (tIsHaveGlowFilter){
						tPadding=50;
						tHalfPadding=25;
					}
					b=new Rectangle();
					b.copyFrom((sprite).getSelfBounds());
					b.x+=(sprite).x;
					b.y+=(sprite).y;
					b.x-=(sprite).pivotX+4;
					b.y-=(sprite).pivotY+4;
					var tSX=b.x;
					var tSY=b.y;
					b.width+=(tPadding+8);
					b.height+=(tPadding+8);
					p.x=b.x *mat.a+b.y *mat.c;
					p.y=b.y *mat.d+b.x *mat.b;
					b.x=p.x;
					b.y=p.y;
					p.x=b.width *mat.a+b.height *mat.c;
					p.y=b.height *mat.d+b.width *mat.b;
					b.width=p.x;
					b.height=p.y;
					if (b.width <=0 || b.height <=0){
						return;
					}
					out && out.recycle();
					scope.addValue("bounds",b);
					var submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterStart);
					context.addRenderObject(submit);
					(context.ctx)._renderKey=0;
					(context.ctx)._shader2D.glTexture=null;
					var tX=sprite.x-tSX+tHalfPadding;
					var tY=sprite.y-tSY+tHalfPadding;
					next._fun.call(next,sprite,context,tX,tY);
					submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterEnd);
					context.addRenderObject(submit);
					for (var i=0;i < len;i++){
						if (i !=0){
							submit=SubmitCMD.create([scope],Filter._useSrc);
							context.addRenderObject(submit);
							shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
							Matrix.TEMP.identity();
							context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
							submit=SubmitCMD.create([scope],Filter._useOut);
							context.addRenderObject(submit);
						};
						var fil=filters[i];
						fil.action.apply3d(scope,sprite,context,0,0);
					}
					submit=SubmitCMD.create([scope,context],Filter._EndTarget);
					context.addRenderObject(submit);
					}else {
					tIsHaveGlowFilter=sprite._$P._isHaveGlowFilter ? sprite._$P._isHaveGlowFilter :false;
					if (tIsHaveGlowFilter){
						tPadding=50;
						tHalfPadding=25;
					}
					b=sprite.getBounds();
					if (b.width <=0 || b.height <=0){
						return;
					}
					b.width+=tPadding;
					b.height+=tPadding;
					p.x=b.x *mat.a+b.y *mat.c;
					p.y=b.y *mat.d+b.x *mat.b;
					b.x=p.x;
					b.y=p.y;
					p.x=b.width *mat.a+b.height *mat.c;
					p.y=b.height *mat.d+b.width *mat.b;
					b.width=p.x;
					b.height=p.y;
					scope.addValue("out",out);
				}
				x=x-tHalfPadding-sprite.x;
				y=y-tHalfPadding-sprite.y;
				p.setTo(x,y);
				mat.transformPoint(p);
				x=p.x+b.x;
				y=p.y+b.y;
				shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
				Matrix.TEMP.identity();
				(context.ctx).drawTarget(scope,x,y,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
				submit=SubmitCMD.create([scope],Filter._recycleScope);
				context.addRenderObject(submit);
				mat.destroy();
			}
		}
		Float32Array.prototype.slice || (Float32Array.prototype.slice=WebGL._float32ArraySlice);
		Uint16Array.prototype.slice || (Uint16Array.prototype.slice=WebGL._uint16ArraySlice);
		Uint8Array.prototype.slice || (Uint8Array.prototype.slice=WebGL._uint8ArraySlice);
		return true;
	}

	WebGL.onStageResize=function(width,height){
		if (WebGL.mainContext==null)return;
		WebGL.mainContext.viewport(0,0,width,height);
		RenderState2D.width=width;
		RenderState2D.height=height;
	}

	WebGL.onInvalidGLRes=function(){
		AtlasResourceManager.instance.freeAll();
		ResourceManager.releaseContentManagers(true);
		WebGL.doNodeRepaint(Laya.stage);
		WebGL.mainContext.viewport(0,0,RenderState2D.width,RenderState2D.height);
		Laya.stage.event(/*laya.events.Event.DEVICE_LOST*/"devicelost");
	}

	WebGL.doNodeRepaint=function(sprite){
		(sprite.numChildren==0)&& (sprite.repaint());
		for (var i=0;i < sprite.numChildren;i++)
		WebGL.doNodeRepaint(sprite.getChildAt(i));
	}

	WebGL.init=function(canvas,width,height){
		WebGL.mainCanvas=canvas;
		HTMLCanvas._createContext=function (canvas){
			return new WebGLContext2D(canvas);
		};
		var gl=laya.webgl.WebGL.mainContext;
		if (gl.getShaderPrecisionFormat !=null){
			var vertexPrecisionFormat=gl.getShaderPrecisionFormat(/*laya.webgl.WebGLContext.VERTEX_SHADER*/0x8B31,/*laya.webgl.WebGLContext.HIGH_FLOAT*/0x8DF2);
			var framePrecisionFormat=gl.getShaderPrecisionFormat(/*laya.webgl.WebGLContext.FRAGMENT_SHADER*/0x8B30,/*laya.webgl.WebGLContext.HIGH_FLOAT*/0x8DF2);
			WebGL.shaderHighPrecision=(vertexPrecisionFormat.precision&&framePrecisionFormat.precision)? true :false;
			}else {
			WebGL.shaderHighPrecision=false;
		}
		WebGL.compressAstc=gl.getExtension("WEBGL_compressed_texture_astc");
		WebGL.compressAtc=gl.getExtension("WEBGL_compressed_texture_atc");
		WebGL.compressEtc=gl.getExtension("WEBGL_compressed_texture_etc");
		WebGL.compressEtc1=gl.getExtension("WEBGL_compressed_texture_etc1");
		WebGL.compressPvrtc=gl.getExtension("WEBGL_compressed_texture_pvrtc");
		WebGL.compressS3tc=gl.getExtension("WEBGL_compressed_texture_s3tc");
		WebGL.compressS3tc_srgb=gl.getExtension("WEBGL_compressed_texture_s3tc_srgb");
		gl.deleteTexture1=gl.deleteTexture;
		gl.deleteTexture=function (t){
			if (t==WebGLContext.curBindTexValue){
				WebGLContext.curBindTexValue=null;
			}
			gl.deleteTexture1(t);
		}
		WebGL.onStageResize(width,height);
		if (WebGL.mainContext==null)
			throw new Error("webGL getContext err!");
		System.__init__();
		AtlasResourceManager.__init__();
		ShaderDefines2D.__init__();
		Submit.__init__();
		WebGLContext2D.__init__();
		Value2D.__init__();
		Shader2D.__init__();
		Buffer2D.__int__(gl);
		BlendMode._init_(gl);
		if (Render.isConchApp){
			/*__JS__ */conch.setOnInvalidGLRes(WebGL.onInvalidGLRes);
		}
	}

	WebGL.compressAstc=null;
	WebGL.compressAtc=null;
	WebGL.compressEtc=null;
	WebGL.compressEtc1=null;
	WebGL.compressPvrtc=null;
	WebGL.compressS3tc=null;
	WebGL.compressS3tc_srgb=null;
	WebGL.mainCanvas=null;
	WebGL.mainContext=null;
	WebGL.antialias=true;
	WebGL.shaderHighPrecision=false;
	__static(WebGL,
	['_bg_null',function(){return this._bg_null=[0,0,0,0];}
	]);
	return WebGL;
})()


//class laya.webgl.WebGLContext
var WebGLContext=(function(){
	function WebGLContext(){}
	__class(WebGLContext,'laya.webgl.WebGLContext');
	WebGLContext.UseProgram=function(program){
		if (WebGLContext._useProgram===program)return false;
		WebGL.mainContext.useProgram(program);
		WebGLContext._useProgram=program;
		return true;
	}

	WebGLContext.setDepthTest=function(gl,value){
		value!==WebGLContext._depthTest && (WebGLContext._depthTest=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.DEPTH_TEST*/0x0B71):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.DEPTH_TEST*/0x0B71));
	}

	WebGLContext.setDepthMask=function(gl,value){
		value!==WebGLContext._depthMask && (WebGLContext._depthMask=value,gl.depthMask(value));
	}

	WebGLContext.setDepthFunc=function(gl,value){
		value!==WebGLContext._depthFunc && (WebGLContext._depthFunc=value,gl.depthFunc(value));
	}

	WebGLContext.setBlend=function(gl,value){
		value!==WebGLContext._blend && (WebGLContext._blend=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.BLEND*/0x0BE2):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.BLEND*/0x0BE2));
	}

	WebGLContext.setBlendFunc=function(gl,sFactor,dFactor){
		(sFactor!==WebGLContext._sFactor||dFactor!==WebGLContext._dFactor)&& (WebGLContext._sFactor=sFactor,WebGLContext._dFactor=dFactor,gl.blendFunc(sFactor,dFactor));
	}

	WebGLContext.setCullFace=function(gl,value){
		value!==WebGLContext._cullFace && (WebGLContext._cullFace=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.CULL_FACE*/0x0B44):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.CULL_FACE*/0x0B44));
	}

	WebGLContext.setFrontFace=function(gl,value){
		value!==WebGLContext._frontFace && (WebGLContext._frontFace=value,gl.frontFace(value));
	}

	WebGLContext.bindTexture=function(gl,target,texture){
		gl.bindTexture(target,texture);
		WebGLContext.curBindTexTarget=target;
		WebGLContext.curBindTexValue=texture;
	}

	WebGLContext.DEPTH_BUFFER_BIT=0x00000100;
	WebGLContext.STENCIL_BUFFER_BIT=0x00000400;
	WebGLContext.COLOR_BUFFER_BIT=0x00004000;
	WebGLContext.POINTS=0x0000;
	WebGLContext.LINES=0x0001;
	WebGLContext.LINE_LOOP=0x0002;
	WebGLContext.LINE_STRIP=0x0003;
	WebGLContext.TRIANGLES=0x0004;
	WebGLContext.TRIANGLE_STRIP=0x0005;
	WebGLContext.TRIANGLE_FAN=0x0006;
	WebGLContext.ZERO=0;
	WebGLContext.ONE=1;
	WebGLContext.SRC_COLOR=0x0300;
	WebGLContext.ONE_MINUS_SRC_COLOR=0x0301;
	WebGLContext.SRC_ALPHA=0x0302;
	WebGLContext.ONE_MINUS_SRC_ALPHA=0x0303;
	WebGLContext.DST_ALPHA=0x0304;
	WebGLContext.ONE_MINUS_DST_ALPHA=0x0305;
	WebGLContext.DST_COLOR=0x0306;
	WebGLContext.ONE_MINUS_DST_COLOR=0x0307;
	WebGLContext.SRC_ALPHA_SATURATE=0x0308;
	WebGLContext.FUNC_ADD=0x8006;
	WebGLContext.BLEND_EQUATION=0x8009;
	WebGLContext.BLEND_EQUATION_RGB=0x8009;
	WebGLContext.BLEND_EQUATION_ALPHA=0x883D;
	WebGLContext.FUNC_SUBTRACT=0x800A;
	WebGLContext.FUNC_REVERSE_SUBTRACT=0x800B;
	WebGLContext.BLEND_DST_RGB=0x80C8;
	WebGLContext.BLEND_SRC_RGB=0x80C9;
	WebGLContext.BLEND_DST_ALPHA=0x80CA;
	WebGLContext.BLEND_SRC_ALPHA=0x80CB;
	WebGLContext.CONSTANT_COLOR=0x8001;
	WebGLContext.ONE_MINUS_CONSTANT_COLOR=0x8002;
	WebGLContext.CONSTANT_ALPHA=0x8003;
	WebGLContext.ONE_MINUS_CONSTANT_ALPHA=0x8004;
	WebGLContext.BLEND_COLOR=0x8005;
	WebGLContext.ARRAY_BUFFER=0x8892;
	WebGLContext.ELEMENT_ARRAY_BUFFER=0x8893;
	WebGLContext.ARRAY_BUFFER_BINDING=0x8894;
	WebGLContext.ELEMENT_ARRAY_BUFFER_BINDING=0x8895;
	WebGLContext.STREAM_DRAW=0x88E0;
	WebGLContext.STATIC_DRAW=0x88E4;
	WebGLContext.DYNAMIC_DRAW=0x88E8;
	WebGLContext.BUFFER_SIZE=0x8764;
	WebGLContext.BUFFER_USAGE=0x8765;
	WebGLContext.CURRENT_VERTEX_ATTRIB=0x8626;
	WebGLContext.FRONT=0x0404;
	WebGLContext.BACK=0x0405;
	WebGLContext.CULL_FACE=0x0B44;
	WebGLContext.FRONT_AND_BACK=0x0408;
	WebGLContext.BLEND=0x0BE2;
	WebGLContext.DITHER=0x0BD0;
	WebGLContext.STENCIL_TEST=0x0B90;
	WebGLContext.DEPTH_TEST=0x0B71;
	WebGLContext.SCISSOR_TEST=0x0C11;
	WebGLContext.POLYGON_OFFSET_FILL=0x8037;
	WebGLContext.SAMPLE_ALPHA_TO_COVERAGE=0x809E;
	WebGLContext.SAMPLE_COVERAGE=0x80A0;
	WebGLContext.NO_ERROR=0;
	WebGLContext.INVALID_ENUM=0x0500;
	WebGLContext.INVALID_VALUE=0x0501;
	WebGLContext.INVALID_OPERATION=0x0502;
	WebGLContext.OUT_OF_MEMORY=0x0505;
	WebGLContext.CW=0x0900;
	WebGLContext.CCW=0x0901;
	WebGLContext.LINE_WIDTH=0x0B21;
	WebGLContext.ALIASED_POINT_SIZE_RANGE=0x846D;
	WebGLContext.ALIASED_LINE_WIDTH_RANGE=0x846E;
	WebGLContext.CULL_FACE_MODE=0x0B45;
	WebGLContext.FRONT_FACE=0x0B46;
	WebGLContext.DEPTH_RANGE=0x0B70;
	WebGLContext.DEPTH_WRITEMASK=0x0B72;
	WebGLContext.DEPTH_CLEAR_VALUE=0x0B73;
	WebGLContext.DEPTH_FUNC=0x0B74;
	WebGLContext.STENCIL_CLEAR_VALUE=0x0B91;
	WebGLContext.STENCIL_FUNC=0x0B92;
	WebGLContext.STENCIL_FAIL=0x0B94;
	WebGLContext.STENCIL_PASS_DEPTH_FAIL=0x0B95;
	WebGLContext.STENCIL_PASS_DEPTH_PASS=0x0B96;
	WebGLContext.STENCIL_REF=0x0B97;
	WebGLContext.STENCIL_VALUE_MASK=0x0B93;
	WebGLContext.STENCIL_WRITEMASK=0x0B98;
	WebGLContext.STENCIL_BACK_FUNC=0x8800;
	WebGLContext.STENCIL_BACK_FAIL=0x8801;
	WebGLContext.STENCIL_BACK_PASS_DEPTH_FAIL=0x8802;
	WebGLContext.STENCIL_BACK_PASS_DEPTH_PASS=0x8803;
	WebGLContext.STENCIL_BACK_REF=0x8CA3;
	WebGLContext.STENCIL_BACK_VALUE_MASK=0x8CA4;
	WebGLContext.STENCIL_BACK_WRITEMASK=0x8CA5;
	WebGLContext.VIEWPORT=0x0BA2;
	WebGLContext.SCISSOR_BOX=0x0C10;
	WebGLContext.COLOR_CLEAR_VALUE=0x0C22;
	WebGLContext.COLOR_WRITEMASK=0x0C23;
	WebGLContext.UNPACK_ALIGNMENT=0x0CF5;
	WebGLContext.PACK_ALIGNMENT=0x0D05;
	WebGLContext.MAX_TEXTURE_SIZE=0x0D33;
	WebGLContext.MAX_VIEWPORT_DIMS=0x0D3A;
	WebGLContext.SUBPIXEL_BITS=0x0D50;
	WebGLContext.RED_BITS=0x0D52;
	WebGLContext.GREEN_BITS=0x0D53;
	WebGLContext.BLUE_BITS=0x0D54;
	WebGLContext.ALPHA_BITS=0x0D55;
	WebGLContext.DEPTH_BITS=0x0D56;
	WebGLContext.STENCIL_BITS=0x0D57;
	WebGLContext.POLYGON_OFFSET_UNITS=0x2A00;
	WebGLContext.POLYGON_OFFSET_FACTOR=0x8038;
	WebGLContext.TEXTURE_BINDING_2D=0x8069;
	WebGLContext.SAMPLE_BUFFERS=0x80A8;
	WebGLContext.SAMPLES=0x80A9;
	WebGLContext.SAMPLE_COVERAGE_VALUE=0x80AA;
	WebGLContext.SAMPLE_COVERAGE_INVERT=0x80AB;
	WebGLContext.NUM_COMPRESSED_TEXTURE_FORMATS=0x86A2;
	WebGLContext.COMPRESSED_TEXTURE_FORMATS=0x86A3;
	WebGLContext.DONT_CARE=0x1100;
	WebGLContext.FASTEST=0x1101;
	WebGLContext.NICEST=0x1102;
	WebGLContext.GENERATE_MIPMAP_HINT=0x8192;
	WebGLContext.BYTE=0x1400;
	WebGLContext.UNSIGNED_BYTE=0x1401;
	WebGLContext.SHORT=0x1402;
	WebGLContext.UNSIGNED_SHORT=0x1403;
	WebGLContext.INT=0x1404;
	WebGLContext.UNSIGNED_INT=0x1405;
	WebGLContext.FLOAT=0x1406;
	WebGLContext.DEPTH_COMPONENT=0x1902;
	WebGLContext.ALPHA=0x1906;
	WebGLContext.RGB=0x1907;
	WebGLContext.RGBA=0x1908;
	WebGLContext.LUMINANCE=0x1909;
	WebGLContext.LUMINANCE_ALPHA=0x190A;
	WebGLContext.UNSIGNED_SHORT_4_4_4_4=0x8033;
	WebGLContext.UNSIGNED_SHORT_5_5_5_1=0x8034;
	WebGLContext.UNSIGNED_SHORT_5_6_5=0x8363;
	WebGLContext.FRAGMENT_SHADER=0x8B30;
	WebGLContext.VERTEX_SHADER=0x8B31;
	WebGLContext.MAX_VERTEX_ATTRIBS=0x8869;
	WebGLContext.MAX_VERTEX_UNIFORM_VECTORS=0x8DFB;
	WebGLContext.MAX_VARYING_VECTORS=0x8DFC;
	WebGLContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS=0x8B4D;
	WebGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS=0x8B4C;
	WebGLContext.MAX_TEXTURE_IMAGE_UNITS=0x8872;
	WebGLContext.MAX_FRAGMENT_UNIFORM_VECTORS=0x8DFD;
	WebGLContext.SHADER_TYPE=0x8B4F;
	WebGLContext.DELETE_STATUS=0x8B80;
	WebGLContext.LINK_STATUS=0x8B82;
	WebGLContext.VALIDATE_STATUS=0x8B83;
	WebGLContext.ATTACHED_SHADERS=0x8B85;
	WebGLContext.ACTIVE_UNIFORMS=0x8B86;
	WebGLContext.ACTIVE_ATTRIBUTES=0x8B89;
	WebGLContext.SHADING_LANGUAGE_VERSION=0x8B8C;
	WebGLContext.CURRENT_PROGRAM=0x8B8D;
	WebGLContext.NEVER=0x0200;
	WebGLContext.LESS=0x0201;
	WebGLContext.EQUAL=0x0202;
	WebGLContext.LEQUAL=0x0203;
	WebGLContext.GREATER=0x0204;
	WebGLContext.NOTEQUAL=0x0205;
	WebGLContext.GEQUAL=0x0206;
	WebGLContext.ALWAYS=0x0207;
	WebGLContext.KEEP=0x1E00;
	WebGLContext.REPLACE=0x1E01;
	WebGLContext.INCR=0x1E02;
	WebGLContext.DECR=0x1E03;
	WebGLContext.INVERT=0x150A;
	WebGLContext.INCR_WRAP=0x8507;
	WebGLContext.DECR_WRAP=0x8508;
	WebGLContext.VENDOR=0x1F00;
	WebGLContext.RENDERER=0x1F01;
	WebGLContext.VERSION=0x1F02;
	WebGLContext.NEAREST=0x2600;
	WebGLContext.LINEAR=0x2601;
	WebGLContext.NEAREST_MIPMAP_NEAREST=0x2700;
	WebGLContext.LINEAR_MIPMAP_NEAREST=0x2701;
	WebGLContext.NEAREST_MIPMAP_LINEAR=0x2702;
	WebGLContext.LINEAR_MIPMAP_LINEAR=0x2703;
	WebGLContext.TEXTURE_MAG_FILTER=0x2800;
	WebGLContext.TEXTURE_MIN_FILTER=0x2801;
	WebGLContext.TEXTURE_WRAP_S=0x2802;
	WebGLContext.TEXTURE_WRAP_T=0x2803;
	WebGLContext.TEXTURE_2D=0x0DE1;
	WebGLContext.TEXTURE=0x1702;
	WebGLContext.TEXTURE_CUBE_MAP=0x8513;
	WebGLContext.TEXTURE_BINDING_CUBE_MAP=0x8514;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X=0x8515;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X=0x8516;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y=0x8517;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y=0x8518;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z=0x8519;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z=0x851A;
	WebGLContext.MAX_CUBE_MAP_TEXTURE_SIZE=0x851C;
	WebGLContext.TEXTURE0=0x84C0;
	WebGLContext.TEXTURE1=0x84C1;
	WebGLContext.TEXTURE2=0x84C2;
	WebGLContext.TEXTURE3=0x84C3;
	WebGLContext.TEXTURE4=0x84C4;
	WebGLContext.TEXTURE5=0x84C5;
	WebGLContext.TEXTURE6=0x84C6;
	WebGLContext.TEXTURE7=0x84C7;
	WebGLContext.TEXTURE8=0x84C8;
	WebGLContext.TEXTURE9=0x84C9;
	WebGLContext.TEXTURE10=0x84CA;
	WebGLContext.TEXTURE11=0x84CB;
	WebGLContext.TEXTURE12=0x84CC;
	WebGLContext.TEXTURE13=0x84CD;
	WebGLContext.TEXTURE14=0x84CE;
	WebGLContext.TEXTURE15=0x84CF;
	WebGLContext.TEXTURE16=0x84D0;
	WebGLContext.TEXTURE17=0x84D1;
	WebGLContext.TEXTURE18=0x84D2;
	WebGLContext.TEXTURE19=0x84D3;
	WebGLContext.TEXTURE20=0x84D4;
	WebGLContext.TEXTURE21=0x84D5;
	WebGLContext.TEXTURE22=0x84D6;
	WebGLContext.TEXTURE23=0x84D7;
	WebGLContext.TEXTURE24=0x84D8;
	WebGLContext.TEXTURE25=0x84D9;
	WebGLContext.TEXTURE26=0x84DA;
	WebGLContext.TEXTURE27=0x84DB;
	WebGLContext.TEXTURE28=0x84DC;
	WebGLContext.TEXTURE29=0x84DD;
	WebGLContext.TEXTURE30=0x84DE;
	WebGLContext.TEXTURE31=0x84DF;
	WebGLContext.ACTIVE_TEXTURE=0x84E0;
	WebGLContext.REPEAT=0x2901;
	WebGLContext.CLAMP_TO_EDGE=0x812F;
	WebGLContext.MIRRORED_REPEAT=0x8370;
	WebGLContext.FLOAT_VEC2=0x8B50;
	WebGLContext.FLOAT_VEC3=0x8B51;
	WebGLContext.FLOAT_VEC4=0x8B52;
	WebGLContext.INT_VEC2=0x8B53;
	WebGLContext.INT_VEC3=0x8B54;
	WebGLContext.INT_VEC4=0x8B55;
	WebGLContext.BOOL=0x8B56;
	WebGLContext.BOOL_VEC2=0x8B57;
	WebGLContext.BOOL_VEC3=0x8B58;
	WebGLContext.BOOL_VEC4=0x8B59;
	WebGLContext.FLOAT_MAT2=0x8B5A;
	WebGLContext.FLOAT_MAT3=0x8B5B;
	WebGLContext.FLOAT_MAT4=0x8B5C;
	WebGLContext.SAMPLER_2D=0x8B5E;
	WebGLContext.SAMPLER_CUBE=0x8B60;
	WebGLContext.VERTEX_ATTRIB_ARRAY_ENABLED=0x8622;
	WebGLContext.VERTEX_ATTRIB_ARRAY_SIZE=0x8623;
	WebGLContext.VERTEX_ATTRIB_ARRAY_STRIDE=0x8624;
	WebGLContext.VERTEX_ATTRIB_ARRAY_TYPE=0x8625;
	WebGLContext.VERTEX_ATTRIB_ARRAY_NORMALIZED=0x886A;
	WebGLContext.VERTEX_ATTRIB_ARRAY_POINTER=0x8645;
	WebGLContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=0x889F;
	WebGLContext.COMPILE_STATUS=0x8B81;
	WebGLContext.LOW_FLOAT=0x8DF0;
	WebGLContext.MEDIUM_FLOAT=0x8DF1;
	WebGLContext.HIGH_FLOAT=0x8DF2;
	WebGLContext.LOW_INT=0x8DF3;
	WebGLContext.MEDIUM_INT=0x8DF4;
	WebGLContext.HIGH_INT=0x8DF5;
	WebGLContext.FRAMEBUFFER=0x8D40;
	WebGLContext.RENDERBUFFER=0x8D41;
	WebGLContext.RGBA4=0x8056;
	WebGLContext.RGB5_A1=0x8057;
	WebGLContext.RGB565=0x8D62;
	WebGLContext.DEPTH_COMPONENT16=0x81A5;
	WebGLContext.STENCIL_INDEX=0x1901;
	WebGLContext.STENCIL_INDEX8=0x8D48;
	WebGLContext.DEPTH_STENCIL=0x84F9;
	WebGLContext.RENDERBUFFER_WIDTH=0x8D42;
	WebGLContext.RENDERBUFFER_HEIGHT=0x8D43;
	WebGLContext.RENDERBUFFER_INTERNAL_FORMAT=0x8D44;
	WebGLContext.RENDERBUFFER_RED_SIZE=0x8D50;
	WebGLContext.RENDERBUFFER_GREEN_SIZE=0x8D51;
	WebGLContext.RENDERBUFFER_BLUE_SIZE=0x8D52;
	WebGLContext.RENDERBUFFER_ALPHA_SIZE=0x8D53;
	WebGLContext.RENDERBUFFER_DEPTH_SIZE=0x8D54;
	WebGLContext.RENDERBUFFER_STENCIL_SIZE=0x8D55;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=0x8CD0;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=0x8CD1;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=0x8CD2;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=0x8CD3;
	WebGLContext.COLOR_ATTACHMENT0=0x8CE0;
	WebGLContext.DEPTH_ATTACHMENT=0x8D00;
	WebGLContext.STENCIL_ATTACHMENT=0x8D20;
	WebGLContext.DEPTH_STENCIL_ATTACHMENT=0x821A;
	WebGLContext.NONE=0;
	WebGLContext.FRAMEBUFFER_COMPLETE=0x8CD5;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=0x8CD6;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=0x8CD7;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=0x8CD9;
	WebGLContext.FRAMEBUFFER_UNSUPPORTED=0x8CDD;
	WebGLContext.FRAMEBUFFER_BINDING=0x8CA6;
	WebGLContext.RENDERBUFFER_BINDING=0x8CA7;
	WebGLContext.MAX_RENDERBUFFER_SIZE=0x84E8;
	WebGLContext.INVALID_FRAMEBUFFER_OPERATION=0x0506;
	WebGLContext.UNPACK_FLIP_Y_WEBGL=0x9240;
	WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL=0x9241;
	WebGLContext.CONTEXT_LOST_WEBGL=0x9242;
	WebGLContext.UNPACK_COLORSPACE_CONVERSION_WEBGL=0x9243;
	WebGLContext.BROWSER_DEFAULT_WEBGL=0x9244;
	WebGLContext._useProgram=null;
	WebGLContext._depthTest=true;
	WebGLContext._depthMask=true;
	WebGLContext._blend=false;
	WebGLContext._cullFace=false;
	WebGLContext.curBindTexTarget=null;
	WebGLContext.curBindTexValue=null;
	__static(WebGLContext,
	['_depthFunc',function(){return this._depthFunc=/*CLASS CONST:laya.webgl.WebGLContext.LESS*/0x0201;},'_sFactor',function(){return this._sFactor=/*CLASS CONST:laya.webgl.WebGLContext.ONE*/1;},'_dFactor',function(){return this._dFactor=/*CLASS CONST:laya.webgl.WebGLContext.ZERO*/0;},'_frontFace',function(){return this._frontFace=/*CLASS CONST:laya.webgl.WebGLContext.CCW*/0x0901;}
	]);
	return WebGLContext;
})()


//class laya.webgl.display.GraphicsGL extends laya.display.Graphics
var GraphicsGL=(function(_super){
	function GraphicsGL(){
		GraphicsGL.__super.call(this);
	}

	__class(GraphicsGL,'laya.webgl.display.GraphicsGL',_super);
	var __proto=GraphicsGL.prototype;
	__proto.setShader=function(shader){
		this._saveToCmd(Render.context._setShader,[shader]);
	}

	__proto.setIBVB=function(x,y,ib,vb,numElement,shader){
		this._saveToCmd(Render.context._setIBVB,[x,y,ib,vb,numElement,shader]);
	}

	__proto.drawParticle=function(x,y,ps){
		var pt=RunDriver.createParticleTemplate2D(ps);
		pt.x=x;
		pt.y=y;
		this._saveToCmd(Render.context._drawParticle,[pt]);
	}

	return GraphicsGL;
})(Graphics)


//class laya.webgl.canvas.WebGLContext2D extends laya.resource.Context
var WebGLContext2D=(function(_super){
	var ContextParams;
	function WebGLContext2D(c){
		this._x=0;
		this._y=0;
		this._id=++WebGLContext2D._COUNT;
		//this._other=null;
		this._path=null;
		//this._primitiveValue2D=null;
		this._drawCount=1;
		this._maxNumEle=0;
		this._clear=false;
		this._isMain=false;
		this._atlasResourceChange=0;
		this._submits=null;
		this._curSubmit=null;
		this._ib=null;
		this._vb=null;
		//this._curMat=null;
		this._nBlendType=0;
		//this._save=null;
		//this._targets=null;
		//this._renderKey=NaN;
		this._saveMark=null;
		this._shader2D=null;
		/**所cacheAs精灵*/
		//this.sprite=null;
		/*******************************************start矢量绘制***************************************************/
		this.mId=-1;
		this.mHaveKey=false;
		this.mHaveLineKey=false;
		this.mX=0;
		this.mY=0;
		WebGLContext2D.__super.call(this);
		this._width=99999999;
		this._height=99999999;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		this.mOutPoint
		this._canvas=c;
		WebGLContext2D._contextcount++;
		if (Render.isFlash){
			this._ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
			GlUtils.fillIBQuadrangle(this._ib,16);
		}else
		this._ib=IndexBuffer2D.QuadrangleIB;
		this.clear();
	}

	__class(WebGLContext2D,'laya.webgl.canvas.WebGLContext2D',_super);
	var __proto=WebGLContext2D.prototype;
	__proto.setIsMainContext=function(){
		this._isMain=true;
	}

	__proto.clearBG=function(r,g,b,a){
		var gl=WebGL.mainContext;
		gl.clearColor(r,g,b,a);
		gl.clear(/*laya.webgl.WebGLContext.COLOR_BUFFER_BIT*/0x00004000);
	}

	__proto._getSubmits=function(){
		return this._submits;
	}

	__proto._releaseMem=function(){
		if (!this._submits)
			return;
		this._curMat.destroy();
		this._curMat=null;
		this._shader2D.destroy();
		this._shader2D=null;
		for (var i=0,n=this._submits._length;i < n;i++)
		this._submits[i].releaseRender();
		this._submits.length=0;
		this._submits._length=0;
		this._submits=null;
		this._curSubmit=null;
		this._path && this._path.recover();
		this._path=null;
		this._other && (this._other.font=null);
		this._save=null;
		if (this._vb){
			this._vb.releaseResource();
			this._vb.destroy();
			this._vb.destory();
			this._vb=null;
		}
	}

	__proto.destroy=function(){
		--WebGLContext2D._contextcount;
		this.sprite=null;
		this._releaseMem();
		this._targets && this._targets.destroy();
		this._targets=null;
		this._canvas=null;
		this._ib && (this._ib !=IndexBuffer2D.QuadrangleIB)&& this._ib.releaseResource();
	}

	__proto.clear=function(){
		if (!this._submits){
			this._other=ContextParams.DEFAULT;
			this._curMat=Matrix.create();
			this._vb=VertexBuffer2D.create(-1);
			this._submits=[];
			this._save=[SaveMark.Create(this)];
			this._save.length=10;
			this._shader2D=new Shader2D();
		}
		this._vb.clear();
		this._targets && (this._targets.repaint=true);
		this._other=ContextParams.DEFAULT;
		this._clear=true;
		this._repaint=false;
		this._drawCount=1;
		this._renderKey=0;
		this._other.lineWidth=this._shader2D.ALPHA=1.0;
		this._nBlendType=0;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		this._curSubmit=Submit.RENDERBASE;
		this._shader2D.glTexture=null;
		this._shader2D.fillStyle=this._shader2D.strokeStyle=DrawStyle.DEFAULT;
		for (var i=0,n=this._submits._length;i < n;i++)
		this._submits[i].releaseRender();
		this._submits._length=0;
		this._curMat.identity();
		this._other.clear();
		this._saveMark=this._save[0];
		this._save._length=1;
	}

	__proto.size=function(w,h){
		if (this._width !=w || this._height !=h){
			if (w==0 || h==0){
				if (this._vb._byteLength !=0){
					this._width=w;
					this._height=h;
					this._vb.clear();
					this._vb.upload();
				}
				for (var i=0,n=this._submits._length;i < n;i++)
				this._submits[i].releaseRender();
				this._submits.length=0;
				this._submits._length=0;
				this._curSubmit=null;
				this._path && this._path.recover();
				this._path=null;
				this.sprite=null;
				this._targets && (this._targets.destroy());
				this._targets=null;
				}else {
				this._width=w;
				this._height=h;
				this._targets && (this._targets.size(w,h));
				this._canvas.memorySize-=this._canvas.memorySize;
			}
		}
		if (w===0 && h===0)this._releaseMem();
	}

	__proto._getTransformMatrix=function(){
		return this._curMat;
	}

	__proto.translate=function(x,y){
		if (x!==0 || y!==0){
			SaveTranslate.save(this);
			if (this._curMat.bTransform){
				SaveTransform.save(this);
				this._curMat.transformPointN(Point.TEMP.setTo(x,y));
				x=Point.TEMP.x;
				y=Point.TEMP.y;
			}
			this._x+=x;
			this._y+=y;
		}
	}

	__proto.save=function(){
		this._save[this._save._length++]=SaveMark.Create(this);
	}

	__proto.restore=function(){
		var sz=this._save._length;
		if (sz < 1)
			return;
		for (var i=sz-1;i >=0;i--){
			var o=this._save[i];
			o.restore(this);
			if (o.isSaveMark()){
				this._save._length=i;
				return;
			}
		}
	}

	__proto._fillText=function(txt,words,x,y,fontStr,color,strokeColor,lineWidth,textAlign,underLine){
		(underLine===void 0)&& (underLine=0);
		var shader=this._shader2D;
		var curShader=this._curSubmit.shaderValue;
		var font=fontStr ? FontInContext.create(fontStr):this._other.font;
		if (AtlasResourceManager.enabled){
			if (shader.ALPHA!==curShader.ALPHA)
				shader.glTexture=null;
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
			}else {
			var preDef=this._shader2D.defines.getValue();
			var colorAdd=color ? Color.create(color)._color :shader.colorAdd;
			if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
				shader.glTexture=null;
				shader.colorAdd=colorAdd;
			}
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
		}
	}

	//TODO:实现下划线
	__proto.fillWords=function(words,x,y,fontStr,color,underLine){
		this._fillText(null,words,x,y,fontStr,color,null,-1,null,underLine);
	}

	__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
		this._fillBorderText(null,words,x,y,font,color,borderColor,lineWidth,null);
	}

	__proto.fillText=function(txt,x,y,fontStr,color,textAlign){
		this._fillText(txt,null,x,y,fontStr,color,null,-1,textAlign);
	}

	__proto.strokeText=function(txt,x,y,fontStr,color,lineWidth,textAlign){
		this._fillText(txt,null,x,y,fontStr,null,color,lineWidth || 1,textAlign);
	}

	__proto.fillBorderText=function(txt,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
		this._fillBorderText(txt,null,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign);
	}

	__proto._fillBorderText=function(txt,words,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
		if (!AtlasResourceManager.enabled){
			this._fillText(txt,words,x,y,fontStr,null,borderColor,lineWidth || 1,textAlign);
			this._fillText(txt,words,x,y,fontStr,fillColor,null,-1,textAlign);
			return;
		};
		var shader=this._shader2D;
		var curShader=this._curSubmit.shaderValue;
		if (shader.ALPHA!==curShader.ALPHA)
			shader.glTexture=null;
		var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
		DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,fillColor,borderColor,lineWidth || 1,x,y,0);
	}

	__proto.fillRect=function(x,y,width,height,fillStyle){
		var vb=this._vb;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var pre=this._shader2D.fillStyle;
			fillStyle && (this._shader2D.fillStyle=DrawStyle.create(fillStyle));
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			if (shader.fillStyle!==curShader.fillStyle || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.color=shader.fillStyle._color._color;
				submit.shaderValue.ALPHA=shader.ALPHA;
				this._submits[this._submits._length++]=submit;
			}
			this._curSubmit._numEle+=6;
			this._shader2D.fillStyle=pre;
		}
	}

	__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
		if (!(texture.loaded && texture.bitmap && texture.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return;
		};
		var vb=this._vb;
		var w=texture.bitmap.width,h=texture.bitmap.height,uv=texture.uv;
		var ox=offset.x % texture.width,oy=offset.y % texture.height;
		if (w !=other.w || h !=other.h){
			if (!other.w && !other.h){
				other.oy=other.ox=0;
				switch (type){
					case "repeat":
						other.width=width;
						other.height=height;
						break ;
					case "repeat-x":
						other.width=width;
						if (oy < 0){
							if (texture.height+oy > height){
								other.height=height;
								}else {
								other.height=texture.height+oy;
							}
							}else {
							other.oy=oy;
							if (texture.height+oy > height){
								other.height=height-oy;
								}else {
								other.height=texture.height;
							}
						}
						break ;
					case "repeat-y":
						if (ox < 0){
							if (texture.width+ox > width){
								other.width=width;
								}else {
								other.width=texture.width+ox;
							}
							}else {
							other.ox=ox;
							if (texture.width+ox > width){
								other.width=width-ox;
								}else {
								other.width=texture.width;
							}
						}
						other.height=height;
						break ;
					default :
						other.width=width;
						other.height=height;
						break ;
					}
			}
			other.w=w;
			other.h=h;
			other.uv=[0,0,other.width / w,0,other.width / w,other.height / h,0,other.height / h];
		}
		x+=other.ox;
		y+=other.oy;
		ox-=other.ox;
		oy-=other.oy;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,other.width,other.height,other.uv,this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var submit=SubmitTexture.create(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,0));
			this._submits[this._submits._length++]=submit;
			var shaderValue=submit.shaderValue;
			shaderValue.textureHost=texture;
			var tTextureX=uv[0] *w;
			var tTextureY=uv[1] *h;
			var tTextureW=(uv[2]-uv[0])*w;
			var tTextureH=(uv[5]-uv[3])*h;
			var tx=-ox / w;
			var ty=-oy / h;
			shaderValue.u_TexRange[0]=tTextureX / w;
			shaderValue.u_TexRange[1]=tTextureW / w;
			shaderValue.u_TexRange[2]=tTextureY / h;
			shaderValue.u_TexRange[3]=tTextureH / h;
			shaderValue.u_offset[0]=tx;
			shaderValue.u_offset[1]=ty;
			if (AtlasResourceManager.enabled && !this._isMain)
				submit.addTexture(texture,(vb._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			this._curSubmit=submit;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_FILLTEXTURE*/10017;
			submit._numEle+=6;
		}
	}

	__proto.setShader=function(shader){
		SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_SHADER*/0x100000,this._shader2D,true);
		this._shader2D.shader=shader;
	}

	__proto.setFilters=function(value){
		SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FILTERS*/0x200000,this._shader2D,true);
		this._shader2D.filters=value;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
		this._drawCount++;
	}

	__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
		this._drawTextureM(tex,x,y,width,height,tx,ty,null,1);
	}

	__proto.addTextureVb=function(invb,x,y){
		var finalVB=this._curSubmit._vb || this._vb;
		var vpos=(finalVB._byteLength >> 2);
		finalVB.byteLength=((vpos+/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
		var vbdata=finalVB.getFloat32Array();
		for (var i=0,ci=0;i < 16;i+=4){
			vbdata[vpos++]=invb[i]+x;
			vbdata[vpos++]=invb[i+1]+y;
			vbdata[vpos++]=invb[i+2];
			vbdata[vpos++]=invb[i+3];
		}
		this._curSubmit._numEle+=6;
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		finalVB._upload=true;
	}

	__proto.willDrawTexture=function(tex,alpha){
		if (!(tex.loaded && tex.bitmap && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return 0;
		};
		var webGLImg=tex.bitmap;
		var rid=webGLImg.id+this._shader2D.ALPHA *alpha+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		if (rid==this._renderKey)return rid;
		var shader=this._shader2D;
		var preAlpha=shader.ALPHA;
		var curShader=this._curSubmit.shaderValue;
		shader.ALPHA *=alpha;
		this._renderKey=rid;
		this._drawCount++;
		shader.glTexture=webGLImg;
		var vb=this._vb;
		var submit=null;
		var vbSize=(vb._byteLength / 32)*3;
		submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
		this._submits[this._submits._length++]=submit;
		submit.shaderValue.textureHost=tex;
		submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
		this._curSubmit=submit;
		shader.ALPHA=preAlpha;
		return rid;
	}

	__proto.drawTextures=function(tex,pos,tx,ty){
		if (!(tex.loaded && tex.bitmap && tex.source)){
			this.sprite && Laya.timer.callLater(this,this._repaintSprite);
			return;
		};
		var pre=this._clipRect;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		if (!this._drawTextureM(tex,pos[0],pos[1],tex.width,tex.height,tx,ty,null,1)){
			alert("drawTextures err");
			return;
		}
		this._clipRect=pre;
		Stat.drawCall++;
		if (pos.length < 4)
			return;
		var finalVB=this._curSubmit._vb || this._vb;
		var sx=this._curMat.a,sy=this._curMat.d;
		for (var i=2,sz=pos.length;i < sz;i+=2){
			GlUtils.copyPreImgVb(finalVB,(pos[i]-pos[i-2])*sx,(pos[i+1]-pos[i-1])*sy);
			this._curSubmit._numEle+=6;
		}
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
	}

	__proto._drawTextureM=function(tex,x,y,width,height,tx,ty,m,alpha){
		if (!(tex.loaded && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return false;
		};
		var finalVB=this._curSubmit._vb || this._vb;
		var webGLImg=tex.bitmap;
		x+=tx;
		y+=ty;
		this._drawCount++;
		var rid=webGLImg.id+this._shader2D.ALPHA *alpha+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		if (rid !=this._renderKey){
			this._renderKey=rid;
			var curShader=this._curSubmit.shaderValue;
			var shader=this._shader2D;
			var alphaBack=shader.ALPHA;
			shader.ALPHA *=alpha;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var vbSize=(vb._byteLength / 32)*3;
			submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
			this._curSubmit=submit;
			finalVB=this._curSubmit._vb || this._vb;
			shader.ALPHA=alphaBack;
		}
		if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x,y,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,0,0)){
			if (AtlasResourceManager.enabled && !this._isMain)
				(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			return true;
		}
		return false;
	}

	__proto._repaintSprite=function(){
		if(this.sprite)
			this.sprite.repaint();
	}

	//}
	__proto._drawText=function(tex,x,y,width,height,m,tx,ty,dx,dy){
		var webGLImg=tex.bitmap;
		this._drawCount++;
		var rid=webGLImg.id+this._shader2D.ALPHA+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		if (rid !=this._renderKey){
			this._renderKey=rid;
			var curShader=this._curSubmit.shaderValue;
			var shader=this._shader2D;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var submitID=NaN;
			var vbSize=(vb._byteLength / 32)*3;
			if (AtlasResourceManager.enabled){
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
				}else {
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,TextSV.create());
			}
			submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			this._curSubmit=submit;
		}
		tex.active();
		var finalVB=this._curSubmit._vb || this._vb;
		if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x+tx,y+ty,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,dx,dy,true)){
			if (AtlasResourceManager.enabled && !this._isMain){
				(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			}
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		}
	}

	__proto.drawTextureWithTransform=function(tex,x,y,width,height,transform,tx,ty,alpha){
		if (!transform){
			this._drawTextureM(tex,x,y,width,height,tx,ty,null,alpha);
			return;
		};
		var curMat=this._curMat;
		var prex=this._x;
		var prey=this._y;
		(tx!==0 || ty!==0)&& (this._x=tx *curMat.a+ty *curMat.c,this._y=ty *curMat.d+tx *curMat.b);
		if (transform && curMat.bTransform){
			Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
			transform=WebGLContext2D._tmpMatrix;
			transform._checkTransform();
			}else {
			this._x+=curMat.tx;
			this._y+=curMat.ty;
		}
		this._drawTextureM(tex,x,y,width,height,0,0,transform,alpha);
		this._x=prex;
		this._y=prey;
	}

	__proto.fillQuadrangle=function(tex,x,y,point4,m){
		var submit=this._curSubmit;
		var vb=this._vb;
		var shader=this._shader2D;
		var curShader=submit.shaderValue;
		this._renderKey=0;
		if (tex.bitmap){
			var t_tex=tex.bitmap;
			if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=t_tex;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
				submit.shaderValue.glTexture=t_tex;
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillQuadrangleImgVb(vb,x,y,point4,tex.uv,m || this._curMat,this._x,this._y);
			}else {
			if (!submit.shaderValue.fillStyle || !submit.shaderValue.fillStyle.equal(tex)|| shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02);
				submit.shaderValue.fillStyle=DrawStyle.create(tex);
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillQuadrangleImgVb(vb,x,y,point4,Texture.DEF_UV,m || this._curMat,this._x,this._y);
		}
		submit._numEle+=6;
	}

	__proto.drawTexture2=function(x,y,pivotX,pivotY,transform,alpha,blendMode,args){
		if (alpha==0)return;
		var curMat=this._curMat;
		this._x=x *curMat.a+y *curMat.c;
		this._y=y *curMat.d+x *curMat.b;
		if (transform){
			if (curMat.bTransform || transform.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
				}else {
				this._x+=transform.tx+curMat.tx;
				this._y+=transform.ty+curMat.ty;
				transform=Matrix.EMPTY;
			}
		}
		if (alpha===1 && !blendMode)
			this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
		else {
			var preAlpha=this._shader2D.ALPHA;
			var preblendType=this._nBlendType;
			this._shader2D.ALPHA=alpha;
			blendMode && (this._nBlendType=BlendMode.TOINT(blendMode));
			this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
			this._shader2D.ALPHA=preAlpha;
			this._nBlendType=preblendType;
		}
		this._x=this._y=0;
	}

	__proto.drawCanvas=function(canvas,x,y,width,height){
		var src=canvas.context;
		this._renderKey=0;
		if (src._targets){
			this._submits[this._submits._length++]=SubmitCanvas.create(src,0,null);
			this._curSubmit=Submit.RENDERBASE;
			src._targets.drawTo(this,x,y,width,height);
			}else {
			var submit=this._submits[this._submits._length++]=SubmitCanvas.create(src,this._shader2D.ALPHA,this._shader2D.filters);
			var sx=width / canvas.width;
			var sy=height / canvas.height;
			var mat=submit._matrix;
			this._curMat.copyTo(mat);
			sx !=1 && sy !=1 && mat.scale(sx,sy);
			var tx=mat.tx,ty=mat.ty;
			mat.tx=mat.ty=0;
			mat.transformPoint(Point.TEMP.setTo(x,y));
			mat.translate(Point.TEMP.x+tx,Point.TEMP.y+ty);
			this._curSubmit=Submit.RENDERBASE;
		}
		if (Config.showCanvasMark){
			this.save();
			this.lineWidth=4;
			this.strokeStyle=src._targets ? "yellow" :"green";
			this.strokeRect(x-1,y-1,width+2,height+2,1);
			this.strokeRect(x,y,width,height,1);
			this.restore();
		}
	}

	__proto.drawTarget=function(scope,x,y,width,height,m,proName,shaderValue,uv,blend){
		(blend===void 0)&& (blend=-1);
		var vb=this._vb;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,uv || Texture.DEF_UV,m || this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var shader=this._shader2D;
			shader.glTexture=null;
			var curShader=this._curSubmit.shaderValue;
			var submit=this._curSubmit=SubmitTarget.create(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,shaderValue,proName);
			if (blend==-1){
				submit.blendType=this._nBlendType;
				}else {
				submit.blendType=blend;
			}
			submit.scope=scope;
			this._submits[this._submits._length++]=submit;
			this._curSubmit._numEle+=6;
		}
	}

	__proto.transform=function(a,b,c,d,tx,ty){
		SaveTransform.save(this);
		Matrix.mul(Matrix.TEMP.setTo(a,b,c,d,tx,ty),this._curMat,this._curMat);
		this._curMat._checkTransform();
	}

	__proto.setTransformByMatrix=function(value){
		value.copyTo(this._curMat);
	}

	__proto.transformByMatrix=function(value){
		SaveTransform.save(this);
		Matrix.mul(value,this._curMat,this._curMat);
		this._curMat._checkTransform();
	}

	__proto.rotate=function(angle){
		SaveTransform.save(this);
		this._curMat.rotateEx(angle);
	}

	__proto.scale=function(scaleX,scaleY){
		SaveTransform.save(this);
		this._curMat.scaleEx(scaleX,scaleY);
	}

	__proto.clipRect=function(x,y,width,height){
		if (this._curMat.b !=0 || this._curMat.c !=0){
			this._renderKey=0;
			var submitStencil0=SubmitStencil.create(4);
			this.addRenderObject(submitStencil0);
			var vb=this._vb;
			var nPos=(vb._byteLength >> 2);
			if (GlUtils.fillRectImgVb(vb,null,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
				var shader=this._shader2D;
				shader.glTexture=null;
				var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.ALPHA=1.0;
				this._submits[this._submits._length++]=submit;
				this._curSubmit._numEle+=6;
				}else {
				alert("clipRect calc stencil rect error");
			};
			var submitStencil1=SubmitStencil.create(5);
			this.addRenderObject(submitStencil1);
			var vbdata=vb.getFloat32Array();
			var minx=Math.min(Math.min(Math.min(vbdata[nPos+0],vbdata[nPos+4]),vbdata[nPos+8]),vbdata[nPos+12]);
			var maxx=Math.max(Math.max(Math.max(vbdata[nPos+0],vbdata[nPos+4]),vbdata[nPos+8]),vbdata[nPos+12]);
			var miny=Math.min(Math.min(Math.min(vbdata[nPos+1],vbdata[nPos+5]),vbdata[nPos+9]),vbdata[nPos+13]);
			var maxy=Math.max(Math.max(Math.max(vbdata[nPos+1],vbdata[nPos+5]),vbdata[nPos+9]),vbdata[nPos+13]);
			SaveClipRectStencil.save(this,submitStencil1,x,y,width,height,minx,miny,maxx-minx,maxy-miny);
			this._curSubmit=Submit.RENDERBASE;
			}else {
			width *=this._curMat.a;
			height *=this._curMat.d;
			var p=Point.TEMP;
			this._curMat.transformPoint(p.setTo(x,y));
			if (width < 0){
				p.x=p.x+width;
				width=-width;
			}
			if (height < 0){
				p.y=p.y+height;
				height=-height;
			}
			this._renderKey=0;
			var submitSc=this._curSubmit=SubmitScissor.create(this);
			this._submits[this._submits._length++]=submitSc;
			submitSc.submitIndex=this._submits._length;
			submitSc.submitLength=9999999;
			SaveClipRect.save(this,submitSc);
			var clip=this._clipRect;
			var x1=clip.x,y1=clip.y;
			var r=p.x+width,b=p.y+height;
			x1 < p.x && (clip.x=p.x);
			y1 < p.y && (clip.y=p.y);
			clip.width=Math.min(r,x1+clip.width)-clip.x;
			clip.height=Math.min(b,y1+clip.height)-clip.y;
			this._shader2D.glTexture=null;
			submitSc.clipRect.copyFrom(clip);
			this._curSubmit=Submit.RENDERBASE;
		}
	}

	__proto.setIBVB=function(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset,type){
		(startIndex===void 0)&& (startIndex=0);
		(offset===void 0)&& (offset=0);
		(type===void 0)&& (type=0);
		if (ib===null){
			if (!Render.isFlash){
				ib=this._ib;
				}else {
				var falshVB=vb;
				(falshVB._selfIB)|| (falshVB._selfIB=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4));
				falshVB._selfIB.clear();
				ib=falshVB._selfIB;
			}
			GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (/*laya.webgl.utils.Buffer2D.FLOAT32*/4 *vb.vertexStride *4)));
		}
		if (!shaderValues || !shader)
			throw Error("setIBVB must input:shader shaderValues");
		var submit=SubmitOtherIBVB.create(this,vb,ib,numElement,shader,shaderValues,startIndex,offset,type);
		mat || (mat=Matrix.EMPTY);
		mat.translate(x,y);
		Matrix.mul(mat,this._curMat,submit._mat);
		mat.translate(-x,-y);
		this._submits[this._submits._length++]=submit;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
	}

	__proto.addRenderObject=function(o){
		this._submits[this._submits._length++]=o;
	}

	__proto.fillTrangles=function(tex,x,y,points,m){
		var submit=this._curSubmit;
		var vb=this._vb;
		var shader=this._shader2D;
		var curShader=submit.shaderValue;
		var length=points.length >> 4;
		var t_tex=tex.bitmap;
		this._renderKey=0;
		if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
			submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
			submit.shaderValue.textureHost=tex;
			this._submits[this._submits._length++]=submit;
		}
		GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,this._x,this._y);
		submit._numEle+=length *6;
	}

	__proto.submitElement=function(start,end){
		var renderList=this._submits;
		end < 0 && (end=renderList._length);
		while (start < end){
			start+=renderList[start].renderSubmit();
		}
	}

	__proto.finish=function(){
		WebGL.mainContext.finish();
	}

	__proto.flush=function(){
		var maxNum=Math.max(this._vb._byteLength / (/*laya.webgl.utils.Buffer2D.FLOAT32*/4 *16),this._maxNumEle / 6)+8;
		if (maxNum > (this._ib.bufferLength / (6 */*laya.webgl.utils.Buffer2D.SHORT*/2))){
			GlUtils.expandIBQuadrangle(this._ib,maxNum);
		}
		if (!this._isMain && AtlasResourceManager.enabled && AtlasResourceManager._atlasRestore > this._atlasResourceChange){
			this._atlasResourceChange=AtlasResourceManager._atlasRestore;
			var renderList=this._submits;
			for (var i=0,s=renderList._length;i < s;i++){
				var submit=renderList [i];
				if (submit.getRenderType()===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016)
					(submit).checkTexture();
			}
		}
		this.submitElement(0,this._submits._length);
		this._path && this._path.reset();
		SkinMeshBuffer.instance && SkinMeshBuffer.getInstance().reset();
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
		return this._submits._length;
	}

	__proto.setPathId=function(id){
		this.mId=id;
		if (this.mId !=-1){
			this.mHaveKey=false;
			var tVGM=VectorGraphManager.getInstance();
			if (tVGM.shapeDic[this.mId]){
				this.mHaveKey=true;
			}
			this.mHaveLineKey=false;
			if (tVGM.shapeLineDic[this.mId]){
				this.mHaveLineKey=true;
			}
		}
	}

	__proto.movePath=function(x,y){
		var _x1=x,_y1=y;
		x=this._curMat.a *_x1+this._curMat.c *_y1+this._curMat.tx;
		y=this._curMat.b *_x1+this._curMat.d *_y1+this._curMat.ty;
		this.mX+=x;
		this.mY+=y;
	}

	__proto.beginPath=function(){
		var tPath=this._getPath();
		tPath.tempArray.length=0;
		tPath.closePath=false;
		this.mX=0;
		this.mY=0;
	}

	__proto.closePath=function(){
		this._path.closePath=true;
	}

	__proto.fill=function(isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		var tPath=this._getPath();
		this.drawPoly(0,0,tPath.tempArray,this.fillStyle._color.numColor,0,0,isConvexPolygon);
	}

	__proto.stroke=function(){
		var tPath=this._getPath();
		if (this.lineWidth > 0){
			if (this.mId==-1){
				tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor);
				}else {
				if (this.mHaveLineKey){
					var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
					tShapeLine.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShapeLine);
					}else {
					VectorGraphManager.getInstance().addLine(this.mId,tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor));
				}
			}
			tPath.update();
			var tPosArray=[this.mX,this.mY];
			var tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			(tempSubmit.shaderValue).u_pos=tPosArray;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.TEMPMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
		}
	}

	__proto.line=function(fromX,fromY,toX,toY,lineWidth,mat){
		var submit=this._curSubmit;
		var vb=this._vb;
		if (GlUtils.fillLineVb(vb,this._clipRect,fromX,fromY,toX,toY,lineWidth,mat)){
			this._renderKey=0;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			if (shader.strokeStyle!==curShader.strokeStyle || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.strokeStyle=shader.strokeStyle;
				submit.shaderValue.mainID=/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02;
				submit.shaderValue.ALPHA=shader.ALPHA;
				this._submits[this._submits._length++]=submit;
			}
			submit._numEle+=6;
		}
	}

	__proto.moveTo=function(x,y,b){
		(b===void 0)&& (b=true);
		var tPath=this._getPath();
		if (b){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		tPath.addPoint(x,y);
	}

	__proto.lineTo=function(x,y,b){
		(b===void 0)&& (b=true);
		var tPath=this._getPath();
		if (b){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		tPath.addPoint(x,y);
	}

	__proto.drawCurves=function(x,y,args){
		this.setPathId(-1);
		this.beginPath();
		this.strokeStyle=args[3];
		this.lineWidth=args[4];
		var points=args[2];
		x+=args[0],y+=args[1];
		this.movePath(x,y);
		this.moveTo(points[0],points[1]);
		var i=2,n=points.length;
		while (i < n){
			this.quadraticCurveTo(points[i++],points[i++],points[i++],points[i++]);
		}
		this.stroke();
	}

	__proto.arcTo=function(x1,y1,x2,y2,r){
		if (this.mId !=-1){
			if (this.mHaveKey){
				return;
			}
		};
		var i=0;
		var x=0,y=0;
		var tPath=this._getPath();
		this._curMat.copyTo(WebGLContext2D._tmpMatrix);
		WebGLContext2D._tmpMatrix.tx=WebGLContext2D._tmpMatrix.ty=0;
		WebGLContext2D._tempPoint.setTo(tPath.getEndPointX(),tPath.getEndPointY());
		WebGLContext2D._tmpMatrix.invertTransformPoint(WebGLContext2D._tempPoint);
		var dx=WebGLContext2D._tempPoint.x-x1;
		var dy=WebGLContext2D._tempPoint.y-y1;
		var len1=Math.sqrt(dx*dx+dy*dy);
		if (len1 <=0.000001){
			return;
		};
		var ndx=dx / len1;
		var ndy=dy / len1;
		var dx2=x2-x1;
		var dy2=y2-y1;
		var len22=dx2*dx2+dy2*dy2;
		var len2=Math.sqrt(len22);
		if (len2 <=0.000001){
			return;
		};
		var ndx2=dx2 / len2;
		var ndy2=dy2 / len2;
		var odx=ndx+ndx2;
		var ody=ndy+ndy2;
		var olen=Math.sqrt(odx*odx+ody*ody);
		if (olen <=0.000001){
			return;
		};
		var nOdx=odx / olen;
		var nOdy=ody / olen;
		var alpha=Math.acos(nOdx*ndx+nOdy*ndy);
		var halfAng=Math.PI / 2-alpha;
		len1=r / Math.tan(halfAng);
		var ptx1=len1*ndx+x1;
		var pty1=len1*ndy+y1;
		var orilen=Math.sqrt(len1*len1+r*r);
		var orix=x1+nOdx*orilen;
		var oriy=y1+nOdy*orilen;
		var ptx2=len1*ndx2+x1;
		var pty2=len1*ndy2+y1;
		var dir=ndx *ndy2-ndy *ndx2;
		var fChgAng=0;
		var sinx=0.0;
		var cosx=0.0;
		if (dir >=0){
			fChgAng=halfAng *2;
			var fda=fChgAng / WebGLContext2D.SEGNUM;
			sinx=Math.sin(fda);
			cosx=Math.cos(fda);
		}
		else {
			fChgAng=-halfAng *2;
			fda=fChgAng / WebGLContext2D.SEGNUM;
			sinx=Math.sin(fda);
			cosx=Math.cos(fda);
		}
		x=this._curMat.a *ptx1+this._curMat.c *pty1;
		y=this._curMat.b *ptx1+this._curMat.d *pty1;
		if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
			tPath.addPoint(x,y);
		};
		var cvx=ptx1-orix;
		var cvy=pty1-oriy;
		var tx=0.0;
		var ty=0.0;
		for (i=0;i < WebGLContext2D.SEGNUM;i++){
			var cx=cvx*cosx+cvy*sinx;
			var cy=-cvx*sinx+cvy*cosx;
			x=cx+orix;
			y=cy+oriy;
			x1=this._curMat.a *x+this._curMat.c *y;
			y1=this._curMat.b *x+this._curMat.d *y;
			x=x1;
			y=y1;
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
			cvx=cx;
			cvy=cy;
		}
	}

	__proto.arc=function(cx,cy,r,startAngle,endAngle,counterclockwise,b){
		(counterclockwise===void 0)&& (counterclockwise=false);
		(b===void 0)&& (b=true);
		if (this.mId !=-1){
			var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
			if (tShape){
				if (this.mHaveKey && !tShape.needUpdate(this._curMat))
					return;
			}
			cx=0;
			cy=0;
		};
		var a=0,da=0,hda=0,kappa=0;
		var dx=0,dy=0,x=0,y=0,tanx=0,tany=0;
		var px=0,py=0,ptanx=0,ptany=0;
		var i=0,ndivs=0,nvals=0;
		da=endAngle-startAngle;
		if (!counterclockwise){
			if (Math.abs(da)>=Math.PI *2){
				da=Math.PI *2;
				}else {
				while (da < 0.0){
					da+=Math.PI *2;
				}
			}
			}else {
			if (Math.abs(da)>=Math.PI *2){
				da=-Math.PI *2;
				}else {
				while (da > 0.0){
					da-=Math.PI *2;
				}
			}
		}
		if (r < 101){
			ndivs=Math.max(10,da *r / 5);
			}else if (r < 201){
			ndivs=Math.max(10,da *r / 20);
			}else {
			ndivs=Math.max(10,da *r / 40);
		}
		hda=(da / ndivs)/ 2.0;
		kappa=Math.abs(4 / 3 *(1-Math.cos(hda))/ Math.sin(hda));
		if (counterclockwise)
			kappa=-kappa;
		nvals=0;
		var tPath=this._getPath();
		var _x1=NaN,_y1=NaN;
		for (i=0;i <=ndivs;i++){
			a=startAngle+da *(i / ndivs);
			dx=Math.cos(a);
			dy=Math.sin(a);
			x=cx+dx *r;
			y=cy+dy *r;
			if (b){
				_x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
		}
		dx=Math.cos(endAngle);
		dy=Math.sin(endAngle);
		x=cx+dx *r;
		y=cy+dy *r;
		if (b){
			_x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
			tPath.addPoint(x,y);
		}
	}

	__proto.quadraticCurveTo=function(cpx,cpy,x,y){
		var tBezier=Bezier.I;
		var tResultArray=[];
		var _x1=x,_y1=y;
		x=this._curMat.a *_x1+this._curMat.c *_y1;
		y=this._curMat.b *_x1+this._curMat.d *_y1;
		_x1=cpx,_y1=cpy;
		cpx=this._curMat.a *_x1+this._curMat.c *_y1;
		cpy=this._curMat.b *_x1+this._curMat.d *_y1;
		var tArray=tBezier.getBezierPoints([this._path.getEndPointX(),this._path.getEndPointY(),cpx,cpy,x,y],30,2);
		for (var i=0,n=tArray.length / 2;i < n;i++){
			this.lineTo(tArray[i *2],tArray[i *2+1],false);
		}
		this.lineTo(x,y,false);
	}

	__proto.rect=function(x,y,width,height){
		this._other=this._other.make();
		this._other.path || (this._other.path=new Path());
		this._other.path.rect(x,y,width,height);
	}

	__proto.strokeRect=function(x,y,width,height,parameterLineWidth){
		var tW=parameterLineWidth *0.5;
		this.line(x-tW,y,x+width+tW,y,parameterLineWidth,this._curMat);
		this.line(x+width,y,x+width,y+height,parameterLineWidth,this._curMat);
		this.line(x,y,x,y+height,parameterLineWidth,this._curMat);
		this.line(x-tW,y+height,x+width+tW,y+height,parameterLineWidth,this._curMat);
	}

	__proto.clip=function(){}
	/**
	*画多边形(用)
	*@param x
	*@param y
	*@param points
	*/
	__proto.drawPoly=function(x,y,points,color,lineWidth,boderColor,isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		this._renderKey=0;
		this._shader2D.glTexture=null;
		var tPath=this._getPath();
		if (this.mId==-1){
			tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor)
			}else {
			if (this.mHaveKey){
				var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
				tShape.setMatrix(this._curMat);
				tShape.rebuild(tPath.tempArray);
				tPath.setGeomtry(tShape);
				}else {
				var t=tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor);
				VectorGraphManager.getInstance().addShape(this.mId,t);
				t.setMatrix(this._curMat);
			}
		}
		tPath.update();
		var tPosArray=[this.mX,this.mY];
		var tempSubmit;
		tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
		tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
		(tempSubmit.shaderValue).u_pos=tPosArray;
		tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
		this._submits[this._submits._length++]=tempSubmit;
		if (lineWidth > 0){
			if (this.mHaveLineKey){
				var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
				tShapeLine.rebuild(tPath.tempArray);
				tPath.setGeomtry(tShapeLine);
				}else {
				VectorGraphManager.getInstance().addShape(this.mId,tPath.drawLine(x,y,points,lineWidth,boderColor));
			}
			tPath.update();
			tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
		}
	}

	/*******************************************end矢量绘制***************************************************/
	__proto.drawParticle=function(x,y,pt){
		pt.x=x;
		pt.y=y;
		this._submits[this._submits._length++]=pt;
	}

	__proto._getPath=function(){
		return this._path || (this._path=new Path());
	}

	/*,_shader2D.ALPHA=1*/
	__getset(0,__proto,'globalCompositeOperation',function(){
		return BlendMode.NAMES[this._nBlendType];
		},function(value){
		var n=BlendMode.TOINT[value];
		n==null || (this._nBlendType===n)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_GLOBALCOMPOSITEOPERATION*/0x10000,this,true),this._curSubmit=Submit.RENDERBASE,this._renderKey=0,this._nBlendType=n);
	});

	__getset(0,__proto,'strokeStyle',function(){
		return this._shader2D.strokeStyle;
		},function(value){
		this._shader2D.strokeStyle.equal(value)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_STROKESTYLE*/0x200,this._shader2D,false),this._shader2D.strokeStyle=DrawStyle.create(value));
	});

	__getset(0,__proto,'globalAlpha',function(){
		return this._shader2D.ALPHA;
		},function(value){
		value=Math.floor(value *1000)/ 1000;
		if (value !=this._shader2D.ALPHA){
			SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_ALPHA*/0x1,this._shader2D,true);
			this._shader2D.ALPHA=value;
		}
	});

	__getset(0,__proto,'asBitmap',null,function(value){
		if (value){
			this._targets || (this._targets=new RenderTargetMAX());
			this._targets.repaint=true;
			if (!this._width || !this._height)
				throw Error("asBitmap no size!");
			this._targets.setSP(this.sprite);
			this._targets.size(this._width,this._height);
		}else
		this._targets=null;
	});

	__getset(0,__proto,'fillStyle',function(){
		return this._shader2D.fillStyle;
		},function(value){
		this._shader2D.fillStyle.equal(value)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FILESTYLE*/0x2,this._shader2D,false),this._shader2D.fillStyle=DrawStyle.create(value));
	});

	__getset(0,__proto,'textAlign',function(){
		return this._other.textAlign;
		},function(value){
		(this._other.textAlign===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_TEXTALIGN*/0x8000,this._other,false),this._other.textAlign=value);
	});

	__getset(0,__proto,'lineWidth',function(){
		return this._other.lineWidth;
		},function(value){
		(this._other.lineWidth===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_LINEWIDTH*/0x100,this._other,false),this._other.lineWidth=value);
	});

	__getset(0,__proto,'textBaseline',function(){
		return this._other.textBaseline;
		},function(value){
		(this._other.textBaseline===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_TEXTBASELINE*/0x4000,this._other,false),this._other.textBaseline=value);
	});

	__getset(0,__proto,'font',null,function(str){
		if (str==this._other.font.toString())
			return;
		this._other=this._other.make();
		SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FONT*/0x8,this._other,false);
		this._other.font===FontInContext.EMPTY ? (this._other.font=new FontInContext(str)):(this._other.font.setFont(str));
	});

	WebGLContext2D.__init__=function(){
		ContextParams.DEFAULT=new ContextParams();
	}

	WebGLContext2D._SUBMITVBSIZE=32000;
	WebGLContext2D._MAXSIZE=99999999;
	WebGLContext2D._RECTVBSIZE=16;
	WebGLContext2D._COUNT=0;
	WebGLContext2D.SEGNUM=32;
	WebGLContext2D._contextcount=0;
	__static(WebGLContext2D,
	['_tempPoint',function(){return this._tempPoint=new Point();},'MAXCLIPRECT',function(){return this.MAXCLIPRECT=new Rectangle(0,0,99999999,99999999);},'_tmpMatrix',function(){return this._tmpMatrix=new Matrix();},'_fontTemp',function(){return this._fontTemp=new FontInContext();},'_drawStyleTemp',function(){return this._drawStyleTemp=new DrawStyle(null);}
	]);
	WebGLContext2D.__init$=function(){
		//class ContextParams
		ContextParams=(function(){
			function ContextParams(){
				this.lineWidth=1;
				this.path=null;
				this.textAlign=null;
				this.textBaseline=null;
				this.font=FontInContext.EMPTY;
			}
			__class(ContextParams,'');
			var __proto=ContextParams.prototype;
			__proto.clear=function(){
				this.lineWidth=1;
				this.path && this.path.clear();
				this.textAlign=this.textBaseline=null;
				this.font=FontInContext.EMPTY;
			}
			__proto.make=function(){
				return this===ContextParams.DEFAULT ? new ContextParams():this;
			}
			ContextParams.DEFAULT=null;
			return ContextParams;
		})()
	}

	return WebGLContext2D;
})(Context)


//class laya.webgl.shader.d2.value.Value2D extends laya.webgl.shader.ShaderValue
var Value2D=(function(_super){
	function Value2D(mainID,subID){
		this.size=[0,0];
		this.alpha=1.0;
		//this.mmat=null;
		this.ALPHA=1.0;
		//this.shader=null;
		//this.mainID=0;
		this.subID=0;
		//this.filters=null;
		//this.textureHost=null;
		//this.texture=null;
		//this.fillStyle=null;
		//this.color=null;
		//this.strokeStyle=null;
		//this.colorAdd=null;
		//this.glTexture=null;
		//this.u_mmat2=null;
		//this._inClassCache=null;
		this._cacheID=0;
		Value2D.__super.call(this);
		this.defines=new ShaderDefines2D();
		this.position=Value2D._POSITION;
		this.mainID=mainID;
		this.subID=subID;
		this.textureHost=null;
		this.texture=null;
		this.fillStyle=null;
		this.color=null;
		this.strokeStyle=null;
		this.colorAdd=null;
		this.glTexture=null;
		this.u_mmat2=null;
		this._cacheID=mainID|subID;
		this._inClassCache=Value2D._cache[this._cacheID];
		if (mainID>0 && !this._inClassCache){
			this._inClassCache=Value2D._cache[this._cacheID]=[];
			this._inClassCache._length=0;
		}
		this.clear();
	}

	__class(Value2D,'laya.webgl.shader.d2.value.Value2D',_super);
	var __proto=Value2D.prototype;
	__proto.setValue=function(value){}
	//throw new Error("todo in subclass");
	__proto.refresh=function(){
		var size=this.size;
		size[0]=RenderState2D.width;
		size[1]=RenderState2D.height;
		this.alpha=this.ALPHA *RenderState2D.worldAlpha;
		this.mmat=RenderState2D.worldMatrix4;
		return this;
	}

	__proto._ShaderWithCompile=function(){
		return Shader.withCompile2D(0,this.mainID,this.defines.toNameDic(),this.mainID | this.defines._value,Shader2X.create);
	}

	__proto._withWorldShaderDefines=function(){
		var defs=RenderState2D.worldShaderDefines;
		var sd=Shader.sharders [this.mainID | this.defines._value | defs.getValue()];
		if (!sd){
			var def={};
			var dic;
			var name;
			dic=this.defines.toNameDic();for (name in dic)def[name]="";
			dic=defs.toNameDic();for (name in dic)def[name]="";
			sd=Shader.withCompile2D(0,this.mainID,def,this.mainID | this.defines._value| defs.getValue(),Shader2X.create);
		};
		var worldFilters=RenderState2D.worldFilters;
		if (!worldFilters)return sd;
		var n=worldFilters.length,f;
		for (var i=0;i < n;i++){
			((f=worldFilters[i]))&& f.action.setValue(this);
		}
		return sd;
	}

	__proto.upload=function(){
		var renderstate2d=RenderState2D;
		this.alpha=this.ALPHA *renderstate2d.worldAlpha;
		if (RenderState2D.worldMatrix4!==RenderState2D.TEMPMAT4_ARRAY)this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.WORLDMAT*/0x80);
		(WebGL.shaderHighPrecision)&& (this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION*/0x400));
		var sd=renderstate2d.worldShaderDefines?this._withWorldShaderDefines():(Shader.sharders [this.mainID | this.defines._value] || this._ShaderWithCompile());
		var params;
		this.size[0]=renderstate2d.width,this.size[1]=renderstate2d.height;
		this.mmat=renderstate2d.worldMatrix4;
		if (BaseShader.activeShader!==sd){
			if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
				sd._shaderValueWidth=renderstate2d.width;
				sd._shaderValueHeight=renderstate2d.height;
			}
			else{
				params=sd._params2dQuick2 || sd._make2dQuick2();
			}
			sd.upload(this,params);
		}
		else{
			if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
				sd._shaderValueWidth=renderstate2d.width;
				sd._shaderValueHeight=renderstate2d.height;
			}
			else{
				params=(sd._params2dQuick1)|| sd._make2dQuick1();
			}
			sd.upload(this,params);
		}
	}

	__proto.setFilters=function(value){
		this.filters=value;
		if (!value)
			return;
		var n=value.length,f;
		for (var i=0;i < n;i++){
			f=value[i];
			if (f){
				this.defines.add(f.type);
				f.action.setValue(this);
			}
		}
	}

	__proto.clear=function(){
		this.defines.setValue(this.subID);
	}

	__proto.release=function(){
		this._inClassCache[this._inClassCache._length++]=this;
		this.fillStyle=null;
		this.strokeStyle=null;
		this.clear();
	}

	Value2D._initone=function(type,classT){
		Value2D._typeClass[type]=classT;
		Value2D._cache[type]=[];
		Value2D._cache[type]._length=0;
	}

	Value2D.__init__=function(){
		Value2D._POSITION=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,4 *CONST3D2D.BYTES_PE,0];
		Value2D._TEXCOORD=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,4 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,Color2dSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,PrimitiveSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,FillTextureSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,SkinSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,TextureSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01 | /*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40,TextSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01 | /*laya.webgl.shader.d2.ShaderDefines2D.FILTERGLOW*/0x08,TextureSV);
	}

	Value2D.create=function(mainType,subType){
		var types=Value2D._cache[mainType|subType];
		if (types._length)
			return types[--types._length];
		else
		return new Value2D._typeClass[mainType|subType](subType);
	}

	Value2D._POSITION=null;
	Value2D._TEXCOORD=null;
	Value2D._cache=[];
	Value2D._typeClass=[];
	__static(Value2D,
	['TEMPMAT4_ARRAY',function(){return this.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];}
	]);
	return Value2D;
})(ShaderValue)


//class laya.webgl.utils.RenderSprite3D extends laya.renders.RenderSprite
var RenderSprite3D=(function(_super){
	function RenderSprite3D(type,next){
		RenderSprite3D.__super.call(this,type,next);
	}

	__class(RenderSprite3D,'laya.webgl.utils.RenderSprite3D',_super);
	var __proto=RenderSprite3D.prototype;
	__proto.onCreate=function(type){
		switch (type){
			case 0x08:
				this._fun=this._blend;
				return;
			case 0x04:
				this._fun=this._transform;
				return;
			}
	}

	__proto._mask=function(sprite,context,x,y){
		var next=this._next;
		var mask=sprite.mask;
		var submitCMD;
		var submitStencil;
		if (mask){
			context.ctx.save();
			var preBlendMode=(context.ctx).globalCompositeOperation;
			var tRect=new Rectangle();
			tRect.copyFrom(mask.getBounds());
			tRect.width=Math.round(tRect.width);
			tRect.height=Math.round(tRect.height);
			tRect.x=Math.round(tRect.x);
			tRect.y=Math.round(tRect.y);
			if (tRect.width > 0 && tRect.height > 0){
				var tf=sprite._style._tf;
				var scope=SubmitCMDScope.create();
				scope.addValue("bounds",tRect);
				submitCMD=SubmitCMD.create([scope,context],laya.webgl.utils.RenderSprite3D.tmpTarget);
				context.addRenderObject(submitCMD);
				mask.render(context,-tRect.x,-tRect.y);
				submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.endTmpTarget);
				context.addRenderObject(submitCMD);
				context.ctx.save();
				context.clipRect(x-tf.translateX+tRect.x,y-tf.translateY+tRect.y,tRect.width,tRect.height);
				next._fun.call(next,sprite,context,x,y);
				context.ctx.restore();
				submitStencil=SubmitStencil.create(6);
				preBlendMode=(context.ctx).globalCompositeOperation;
				submitStencil.blendMode="mask";
				context.addRenderObject(submitStencil);
				Matrix.TEMP.identity();
				var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
				var uv=Texture.INV_UV;
				var w=tRect.width;
				var h=tRect.height;
				var tempLimit=32;
				if (tRect.width < tempLimit || tRect.height < tempLimit){
					uv=RenderSprite3D.tempUV;
					uv[0]=0;
					uv[1]=0;
					uv[2]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
					uv[3]=0
					uv[4]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
					uv[5]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
					uv[6]=0;
					uv[7]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
					tRect.width=(tRect.width >=32)? tRect.width :tempLimit;
					tRect.height=(tRect.height >=32)? tRect.height :tempLimit;
					uv[1] *=-1;uv[3] *=-1;uv[5] *=-1;uv[7] *=-1;
					uv[1]+=1;uv[3]+=1;uv[5]+=1;uv[7]+=1;
				}
				(context.ctx).drawTarget(scope,x+tRect.x-tf.translateX,y+tRect.y-tf.translateY,w,h,Matrix.TEMP,"tmpTarget",shaderValue,uv,6);
				submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.recycleTarget);
				context.addRenderObject(submitCMD);
				submitStencil=SubmitStencil.create(6);
				submitStencil.blendMode=preBlendMode;
				context.addRenderObject(submitStencil);
			}
			context.ctx.restore();
		}
		else{
			next._fun.call(next,sprite,context,x,y);
		}
	}

	__proto._blend=function(sprite,context,x,y){
		var style=sprite._style;
		var next=this._next;
		if (style.blendMode){
			context.ctx.save();
			context.ctx.globalCompositeOperation=style.blendMode;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.restore();
		}
		else{
			next._fun.call(next,sprite,context,x,y);
		}
	}

	__proto._transform=function(sprite,context,x,y){
		'use strict';
		var transform=sprite.transform,_next=this._next;
		if (transform && _next !=RenderSprite.NORENDER){
			var ctx=context.ctx;
			var style=sprite._style;
			transform.tx=x;
			transform.ty=y;
			var m2=ctx._getTransformMatrix();
			var m1=m2.clone();
			Matrix.mul(transform,m2,m2);
			m2._checkTransform();
			transform.tx=transform.ty=0;
			_next._fun.call(_next,sprite,context,0,0);
			m1.copyTo(m2);
			m1.destroy();
			}else {
			_next._fun.call(_next,sprite,context,x,y);
		}
	}

	RenderSprite3D.tmpTarget=function(scope,context){
		var b=scope.getValue("bounds");
		var tmpTarget=RenderTarget2D.create(b.width,b.height);
		tmpTarget.start();
		tmpTarget.clear(0,0,0,0);
		scope.addValue("tmpTarget",tmpTarget);
	}

	RenderSprite3D.endTmpTarget=function(scope){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.end();
	}

	RenderSprite3D.recycleTarget=function(scope){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.recycle();
		scope.recycle();
	}

	__static(RenderSprite3D,
	['tempUV',function(){return this.tempUV=new Array(8);}
	]);
	return RenderSprite3D;
})(RenderSprite)


//class laya.filters.webgl.ColorFilterActionGL extends laya.filters.webgl.FilterActionGL
var ColorFilterActionGL=(function(_super){
	function ColorFilterActionGL(){
		this.data=null;
		ColorFilterActionGL.__super.call(this);
	}

	__class(ColorFilterActionGL,'laya.filters.webgl.ColorFilterActionGL',_super);
	var __proto=ColorFilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValue=function(shader){
		shader.colorMat=this.data._mat;
		shader.colorAlpha=this.data._alpha;
	}

	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
		shaderValue.setFilters([this.data]);
		var tMatrix=Matrix.TEMP;
		tMatrix.identity();
		context.ctx.drawTarget(scope,0,0,b.width,b.height,tMatrix,"src",shaderValue);
	}

	return ColorFilterActionGL;
})(FilterActionGL)


//class laya.webgl.atlas.Atlaser extends laya.webgl.atlas.AtlasGrid
var Atlaser=(function(_super){
	function Atlaser(gridNumX,gridNumY,width,height,atlasID){
		this._atlasCanvas=null;
		this._inAtlasTextureKey=null;
		this._inAtlasTextureBitmapValue=null;
		this._inAtlasTextureOriUVValue=null;
		this._InAtlasWebGLImagesKey=null;
		this._InAtlasWebGLImagesOffsetValue=null;
		Atlaser.__super.call(this,gridNumX,gridNumY,atlasID);
		this._inAtlasTextureKey=[];
		this._inAtlasTextureBitmapValue=[];
		this._inAtlasTextureOriUVValue=[];
		this._InAtlasWebGLImagesKey={};
		this._InAtlasWebGLImagesOffsetValue=[];
		this._atlasCanvas=new AtlasWebGLCanvas();
		this._atlasCanvas._atlaser=this;
		this._atlasCanvas.width=width;
		this._atlasCanvas.height=height;
		this._atlasCanvas.activeResource();
		this._atlasCanvas.lock=true;
	}

	__class(Atlaser,'laya.webgl.atlas.Atlaser',_super);
	var __proto=Atlaser.prototype;
	__proto.computeUVinAtlasTexture=function(texture,oriUV,offsetX,offsetY){
		var tex=texture;
		var _width=AtlasResourceManager.atlasTextureWidth;
		var _height=AtlasResourceManager.atlasTextureHeight;
		var u1=offsetX / _width,v1=offsetY / _height,u2=(offsetX+texture.bitmap.width)/ _width,v2=(offsetY+texture.bitmap.height)/ _height;
		var inAltasUVWidth=texture.bitmap.width / _width,inAltasUVHeight=texture.bitmap.height / _height;
		texture.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
	}

	__proto.findBitmapIsExist=function(bitmap){
		if ((bitmap instanceof laya.webgl.resource.WebGLImage )){
			var webImage=bitmap;
			var sUrl=webImage.url;
			var object=this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]
			if (object){
				return object.offsetInfoID;
			}
		}
		return-1;
	}

	/**
	*
	*@param inAtlasRes
	*@return 是否已经存在队列中
	*/
	__proto.addToAtlasTexture=function(mergeAtlasBitmap,offsetX,offsetY){
		if ((mergeAtlasBitmap instanceof laya.webgl.resource.WebGLImage )){
			var webImage=mergeAtlasBitmap;
			var sUrl=webImage.url;
			this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]={bitmap:mergeAtlasBitmap,offsetInfoID:this._InAtlasWebGLImagesOffsetValue.length};
			this._InAtlasWebGLImagesOffsetValue.push([offsetX,offsetY]);
		}
		this._atlasCanvas.texSubImage2D(offsetX,offsetY,mergeAtlasBitmap.atlasSource);
		mergeAtlasBitmap.clearAtlasSource();
	}

	__proto.addToAtlas=function(texture,offsetX,offsetY){
		texture._atlasID=this._inAtlasTextureKey.length;
		var oriUV=texture.uv.slice();
		var oriBitmap=texture.bitmap;
		this._inAtlasTextureKey.push(texture);
		this._inAtlasTextureOriUVValue.push(oriUV);
		this._inAtlasTextureBitmapValue.push(oriBitmap);
		this.computeUVinAtlasTexture(texture,oriUV,offsetX,offsetY);
		texture.bitmap=this._atlasCanvas;
	}

	__proto.clear=function(){
		for (var i=0,n=this._inAtlasTextureKey.length;i < n;i++){
			this._inAtlasTextureKey[i].bitmap=this._inAtlasTextureBitmapValue[i];
			this._inAtlasTextureKey[i].uv=this._inAtlasTextureOriUVValue[i];
			this._inAtlasTextureKey[i]._atlasID=-1;
			this._inAtlasTextureKey[i].bitmap.lock=false;
			this._inAtlasTextureKey[i].bitmap.releaseResource();
		}
		this._inAtlasTextureKey.length=0;
		this._inAtlasTextureBitmapValue.length=0;
		this._inAtlasTextureOriUVValue.length=0;
		this._InAtlasWebGLImagesKey=null;
		this._InAtlasWebGLImagesOffsetValue.length=0;
	}

	__proto.dispose=function(){
		this.clear();
		this._atlasCanvas.destroy();
	}

	__getset(0,__proto,'InAtlasWebGLImagesOffsetValue',function(){
		return this._InAtlasWebGLImagesOffsetValue;
	});

	__getset(0,__proto,'texture',function(){
		return this._atlasCanvas;
	});

	__getset(0,__proto,'inAtlasWebGLImagesKey',function(){
		return this._InAtlasWebGLImagesKey;
	});

	return Atlaser;
})(AtlasGrid)


//class laya.webgl.shader.d2.ShaderDefines2D extends laya.webgl.shader.ShaderDefines
var ShaderDefines2D=(function(_super){
	function ShaderDefines2D(){
		ShaderDefines2D.__super.call(this,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name,ShaderDefines2D.__int2nameMap);
	}

	__class(ShaderDefines2D,'laya.webgl.shader.d2.ShaderDefines2D',_super);
	ShaderDefines2D.__init__=function(){
		ShaderDefines2D.reg("TEXTURE2D",0x01);
		ShaderDefines2D.reg("COLOR2D",0x02);
		ShaderDefines2D.reg("PRIMITIVE",0x04);
		ShaderDefines2D.reg("GLOW_FILTER",0x08);
		ShaderDefines2D.reg("BLUR_FILTER",0x10);
		ShaderDefines2D.reg("COLOR_FILTER",0x20);
		ShaderDefines2D.reg("COLOR_ADD",0x40);
		ShaderDefines2D.reg("WORLDMAT",0x80);
		ShaderDefines2D.reg("FILLTEXTURE",0x100);
		ShaderDefines2D.reg("FSHIGHPRECISION",0x400);
	}

	ShaderDefines2D.reg=function(name,value){
		ShaderDefines._reg(name,value,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name);
	}

	ShaderDefines2D.toText=function(value,int2name,int2nameMap){
		return ShaderDefines._toText(value,int2name,int2nameMap);
	}

	ShaderDefines2D.toInt=function(names){
		return ShaderDefines._toInt(names,ShaderDefines2D.__name2int);
	}

	ShaderDefines2D.TEXTURE2D=0x01;
	ShaderDefines2D.COLOR2D=0x02;
	ShaderDefines2D.PRIMITIVE=0x04;
	ShaderDefines2D.FILTERGLOW=0x08;
	ShaderDefines2D.FILTERBLUR=0x10;
	ShaderDefines2D.FILTERCOLOR=0x20;
	ShaderDefines2D.COLORADD=0x40;
	ShaderDefines2D.WORLDMAT=0x80;
	ShaderDefines2D.FILLTEXTURE=0x100;
	ShaderDefines2D.SKINMESH=0x200;
	ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION=0x400;
	ShaderDefines2D.__name2int={};
	ShaderDefines2D.__int2name=[];
	ShaderDefines2D.__int2nameMap=[];
	return ShaderDefines2D;
})(ShaderDefines)


//class laya.webgl.shapes.Ellipse extends laya.webgl.shapes.BasePoly
var Ellipse=(function(_super){
	function Ellipse(x,y,width,height,color,borderWidth,borderColor){
		Ellipse.__super.call(this,x,y,width,height,40,color,borderWidth,borderColor);
	}

	__class(Ellipse,'laya.webgl.shapes.Ellipse',_super);
	return Ellipse;
})(BasePoly)


//class laya.webgl.shapes.Line extends laya.webgl.shapes.BasePoly
var Line=(function(_super){
	function Line(x,y,points,borderWidth,color){
		this._points=[];
		this.rebuild(points);
		Line.__super.call(this,x,y,0,0,0,color,borderWidth,color,0);
	}

	__class(Line,'laya.webgl.shapes.Line',_super);
	var __proto=Line.prototype;
	__proto.rebuild=function(points){
		var len=points.length;
		var preLen=this._points.length;
		if (len !=preLen){
			this.mUint16Array=new Uint16Array((len/2-1)*6);
			this.mFloat32Array=new Float32Array(len*5);
		}
		this._points.length=0;
		var tCurrX=NaN;
		var tCurrY=NaN;
		var tLastX=-1;
		var tLastY=-1;
		var tLen=points.length / 2;
		for (var i=0;i < tLen;i++){
			tCurrX=points[i *2];
			tCurrY=points[i *2+1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)>0.01){
				this._points.push(tCurrX,tCurrY);
			}
			tLastX=tCurrX;
			tLastY=tCurrY;
		}
	}

	__proto.getData=function(ib,vb,start){
		var indices=[];
		var verts=[];
		(this.borderWidth > 0)&& this.createLine2(this._points,indices,this.borderWidth,start,verts,this._points.length / 2);
		this.mUint16Array.set(indices,0);
		this.mFloat32Array.set(verts,0);
		ib.append(this.mUint16Array);
		vb.append(this.mFloat32Array);
	}

	return Line;
})(BasePoly)


//class laya.webgl.shapes.LoopLine extends laya.webgl.shapes.BasePoly
var LoopLine=(function(_super){
	function LoopLine(x,y,points,width,color){
		this._points=[];
		var tCurrX=NaN;
		var tCurrY=NaN;
		var tLastX=-1;
		var tLastY=-1;
		var tLen=points.length / 2-1;
		for (var i=0;i < tLen;i++){
			tCurrX=points[i *2];
			tCurrY=points[i *2+1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
				this._points.push(tCurrX,tCurrY);
			}
			tLastX=tCurrX;
			tLastY=tCurrY;
		}
		tCurrX=points[tLen *2];
		tCurrY=points[tLen *2+1];
		tLastX=this._points[0];
		tLastY=this._points[1];
		if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
			this._points.push(tCurrX,tCurrY);
		}
		LoopLine.__super.call(this,x,y,0,0,this._points.length / 2,0,width,color);
	}

	__class(LoopLine,'laya.webgl.shapes.LoopLine',_super);
	var __proto=LoopLine.prototype;
	__proto.getData=function(ib,vb,start){
		if (this.borderWidth > 0){
			var color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var verts=[];
			var tLastX=-1,tLastY=-1;
			var tCurrX=0,tCurrY=0;
			var indices=[];
			var tLen=Math.floor(this._points.length / 2);
			for (var i=0;i < tLen;i++){
				tCurrX=this._points[i *2];
				tCurrY=this._points[i *2+1];
				verts.push(this.x+tCurrX,this.y+tCurrY,r,g,b);
			}
			this.createLoopLine(verts,indices,this.borderWidth,start+verts.length / 5);
			ib.append(new Uint16Array(indices));
			vb.append(new Float32Array(verts));
		}
	}

	__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
		var tLen=p.length / 5;
		var points=p.concat();
		var result=outVertex ? outVertex :p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		var firstPoint=[points[0],points[1]];
		var lastPoint=[points[points.length-5],points[points.length-4]];
		var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
		var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
		points.unshift(midPointX,midPointY,0,0,0);
		points.push(midPointX,midPointY,0,0,0);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		if (outIndex){
			indices=outIndex;
		};
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
		return result;
	}

	return LoopLine;
})(BasePoly)


//class laya.webgl.shapes.Polygon extends laya.webgl.shapes.BasePoly
var Polygon=(function(_super){
	function Polygon(x,y,points,color,borderWidth,borderColor){
		this._points=null;
		this._start=-1;
		this._repaint=false;
		this.earcutTriangles=null;
		this._mat=Matrix.create();
		this._points=points.slice(0,points.length);
		Polygon.__super.call(this,x,y,0,0,this._points.length / 2,color,borderWidth,borderColor);
	}

	__class(Polygon,'laya.webgl.shapes.Polygon',_super);
	var __proto=Polygon.prototype;
	__proto.rebuild=function(point){
		if (!this._repaint){
			this._points.length=0;
			this._points=this._points.concat(point);
		}
	}

	__proto.setMatrix=function(mat){
		mat.copyTo(this._mat);
	}

	__proto.needUpdate=function(mat){
		this._repaint=(this._mat.a==mat.a && this._mat.b==mat.b && this._mat.c==mat.c && this._mat.d==mat.d && this._mat.tx==mat.tx && this._mat.ty==mat.ty);
		return !this._repaint;
	}

	__proto.getData=function(ib,vb,start){
		var indices,i=0;
		var tArray=this._points;
		var tLen=0;
		if (this.mUint16Array && this.mFloat32Array&&this._repaint){
			if (this._start !=start){
				this._start=start;
				indices=[];
				tLen=this.earcutTriangles.length;
				for (i=0;i < tLen;i++){
					indices.push(this.earcutTriangles[i]+start);
				}
				this.mUint16Array=new Uint16Array(indices);
			}
		}
		else {
			this._start=start;
			indices=[];
			var verts=[];
			var vertsEarcut=[];
			var color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			tLen=Math.floor(tArray.length / 2);
			for (i=0;i < tLen;i++){
				verts.push(this.x+tArray[i *2],this.y+tArray[i *2+1],r,g,b);
				vertsEarcut.push(this.x+tArray[i *2],this.y+tArray[i *2+1]);
			}
			this.earcutTriangles=Earcut.earcut(vertsEarcut,null,2);
			tLen=this.earcutTriangles.length;
			for (i=0;i < tLen;i++){
				indices.push(this.earcutTriangles[i]+start);
			}
			this.mUint16Array=new Uint16Array(indices);
			this.mFloat32Array=new Float32Array(verts);
		}
		ib.append(this.mUint16Array);
		vb.append(this.mFloat32Array);
	}

	return Polygon;
})(BasePoly)


//class laya.webgl.submit.SubmitCanvas extends laya.webgl.submit.Submit
var SubmitCanvas=(function(_super){
	function SubmitCanvas(){
		//this._ctx_src=null;
		this._matrix=new Matrix();
		this._matrix4=CONST3D2D.defaultMatrix4.concat();
		SubmitCanvas.__super.call(this,/*laya.webgl.submit.Submit.TYPE_2D*/10000);
		this.shaderValue=new Value2D(0,0);
	}

	__class(SubmitCanvas,'laya.webgl.submit.SubmitCanvas',_super);
	var __proto=SubmitCanvas.prototype;
	__proto.renderSubmit=function(){
		if (this._ctx_src._targets){
			this._ctx_src._targets.flush(this._ctx_src);
			return 1;
		};
		var preAlpha=RenderState2D.worldAlpha;
		var preMatrix4=RenderState2D.worldMatrix4;
		var preMatrix=RenderState2D.worldMatrix;
		var preFilters=RenderState2D.worldFilters;
		var preWorldShaderDefines=RenderState2D.worldShaderDefines;
		var v=this.shaderValue;
		var m=this._matrix;
		var m4=this._matrix4;
		var mout=Matrix.TEMP;
		Matrix.mul(m,preMatrix,mout);
		m4[0]=mout.a;
		m4[1]=mout.b;
		m4[4]=mout.c;
		m4[5]=mout.d;
		m4[12]=mout.tx;
		m4[13]=mout.ty;
		RenderState2D.worldMatrix=mout.clone();
		RenderState2D.worldMatrix4=m4;
		RenderState2D.worldAlpha=RenderState2D.worldAlpha *v.alpha;
		if (v.filters && v.filters.length){
			RenderState2D.worldFilters=v.filters;
			RenderState2D.worldShaderDefines=v.defines;
		}
		this._ctx_src.flush();
		RenderState2D.worldAlpha=preAlpha;
		RenderState2D.worldMatrix4=preMatrix4;
		RenderState2D.worldMatrix.destroy();
		RenderState2D.worldMatrix=preMatrix;
		RenderState2D.worldFilters=preFilters;
		RenderState2D.worldShaderDefines=preWorldShaderDefines;
		return 1;
	}

	__proto.releaseRender=function(){
		var cache=SubmitCanvas._cache;
		this._ctx_src=null;
		cache[cache._length++]=this;
	}

	__proto.getRenderType=function(){
		return /*laya.webgl.submit.Submit.TYPE_CANVAS*/10003;
	}

	SubmitCanvas.create=function(ctx_src,alpha,filters){
		var o=(!SubmitCanvas._cache._length)? (new SubmitCanvas()):SubmitCanvas._cache[--SubmitCanvas._cache._length];
		o._ctx_src=ctx_src;
		var v=o.shaderValue;
		v.alpha=alpha;
		v.defines.setValue(0);
		filters && filters.length && v.setFilters(filters);
		return o;
	}

	__static(SubmitCanvas,
	['_cache',function(){return this._cache=(SubmitCanvas._cache=[],SubmitCanvas._cache._length=0,SubmitCanvas._cache);}
	]);
	return SubmitCanvas;
})(Submit)


//class laya.webgl.submit.SubmitTexture extends laya.webgl.submit.Submit
var SubmitTexture=(function(_super){
	function SubmitTexture(renderType){
		this._preIsSameTextureShader=false;
		this._isSameTexture=true;
		this._texs=new Array;
		this._texsID=new Array;
		this._vbPos=new Array;
		(renderType===void 0)&& (renderType=10000);
		SubmitTexture.__super.call(this,renderType);
	}

	__class(SubmitTexture,'laya.webgl.submit.SubmitTexture',_super);
	var __proto=SubmitTexture.prototype;
	__proto.releaseRender=function(){
		var cache=SubmitTexture._cache;
		cache[cache._length++]=this;
		this.shaderValue.release();
		this._preIsSameTextureShader=false;
		this._vb=null;
		this._texs.length=0;
		this._vbPos.length=0;
		this._isSameTexture=true;
	}

	__proto.addTexture=function(tex,vbpos){
		this._texsID[this._texs.length]=tex._uvID;
		this._texs.push(tex);
		this._vbPos.push(vbpos);
	}

	//检查材质是否修改，修改UV，设置是否是同一材质
	__proto.checkTexture=function(){
		if (this._texs.length < 1){
			this._isSameTexture=true;
			return;
		};
		var _tex=this.shaderValue.textureHost;
		var webGLImg=_tex.bitmap;
		if (webGLImg===null)return;
		var vbdata=this._vb.getFloat32Array();
		for (var i=0,s=this._texs.length;i < s;i++){
			var tex=this._texs[i];
			tex.active();
			var newUV=tex.uv;
			if (this._texsID[i]!==tex._uvID){
				this._texsID[i]=tex._uvID;
				var vbPos=this._vbPos[i];
				vbdata[vbPos+2]=newUV[0];
				vbdata[vbPos+3]=newUV[1];
				vbdata[vbPos+6]=newUV[2];
				vbdata[vbPos+7]=newUV[3];
				vbdata[vbPos+10]=newUV[4];
				vbdata[vbPos+11]=newUV[5];
				vbdata[vbPos+14]=newUV[6];
				vbdata[vbPos+15]=newUV[7];
				this._vb.setNeedUpload();
			}
			if (tex.bitmap!==webGLImg){
				this._isSameTexture=false;
			}
		}
	}

	__proto.renderSubmit=function(){
		if (this._numEle===0){
			SubmitTexture._shaderSet=false;
			return 1;
		};
		var _tex=this.shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source){
				SubmitTexture._shaderSet=false;
				return 1;
			}
			this.shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var gl=WebGL.mainContext;
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		if (this._preIsSameTextureShader && BaseShader.activeShader && SubmitTexture._shaderSet)
			(BaseShader.activeShader).uploadTexture2D(this.shaderValue.texture);
		else this.shaderValue.upload();
		SubmitTexture._shaderSet=true;
		if (this._texs.length > 1 && !this._isSameTexture){
			var webGLImg=_tex.bitmap;
			var index=0;
			var shader=BaseShader.activeShader;
			for (var i=0,s=this._texs.length;i < s;i++){
				var tex2=this._texs[i];
				if (tex2.bitmap!==webGLImg || (i+1)===s){
					shader.uploadTexture2D(tex2.source);
					gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(i-index+1)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx+index *6 *CONST3D2D.BYTES_PIDX);
					webGLImg=tex2.bitmap;
					index=i;
				}
			}
			}else {
			gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
		}
		return 1;
	}

	SubmitTexture.create=function(context,ib,vb,pos,sv){
		var o=SubmitTexture._cache._length ? SubmitTexture._cache[--SubmitTexture._cache._length] :new SubmitTexture();
		if (vb==null){
			vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
			vb.clear();
			pos=0;
		}
		o._ib=ib;
		o._vb=vb;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		var filters=context._shader2D.filters;
		filters && o.shaderValue.setFilters(filters);
		return o;
	}

	SubmitTexture._shaderSet=true;
	__static(SubmitTexture,
	['_cache',function(){return this._cache=(SubmitTexture._cache=[],SubmitTexture._cache._length=0,SubmitTexture._cache);}
	]);
	return SubmitTexture;
})(Submit)


/**
*...
*@author ...
*/
//class laya.webgl.shader.BaseShader extends laya.resource.Resource
var BaseShader=(function(_super){
	function BaseShader(){
		BaseShader.__super.call(this);
		this.lock=true;
	}

	__class(BaseShader,'laya.webgl.shader.BaseShader',_super);
	BaseShader.activeShader=null;
	BaseShader.bindShader=null;
	return BaseShader;
})(Resource)


//class laya.webgl.resource.RenderTarget2D extends laya.resource.Texture
var RenderTarget2D=(function(_super){
	function RenderTarget2D(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		this._type=0;
		this._svWidth=NaN;
		this._svHeight=NaN;
		this._preRenderTarget=null;
		//TODO:.........................................................
		this._alreadyResolved=false;
		this._looked=false;
		this._surfaceFormat=0;
		this._surfaceType=0;
		this._depthStencilFormat=0;
		this._mipMap=false;
		this._repeat=false;
		this._minFifter=0;
		this._magFifter=0;
		this._destroy=false;
		(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=-1);
		this._type=1;
		this._w=width;
		this._h=height;
		this._surfaceFormat=surfaceFormat;
		this._surfaceType=surfaceType;
		this._depthStencilFormat=depthStencilFormat;
		this._mipMap=mipMap;
		this._repeat=repeat;
		this._minFifter=minFifter;
		this._magFifter=magFifter;
		this._createWebGLRenderTarget();
		this.bitmap.lock=true;
		RenderTarget2D.__super.call(this,this.bitmap,Texture.INV_UV);
	}

	__class(RenderTarget2D,'laya.webgl.resource.RenderTarget2D',_super);
	var __proto=RenderTarget2D.prototype;
	Laya.imps(__proto,{"laya.resource.IDispose":true})
	//TODO:临时......................................................
	__proto.getType=function(){
		return this._type;
	}

	//*/
	__proto.getTexture=function(){
		return this;
	}

	__proto.size=function(w,h){
		if (this._w==w && this._h==h)return;
		this._w=w;
		this._h=h;
		this.release();
		if (this._w !=0 && this._h !=0)this._createWebGLRenderTarget();
	}

	__proto.release=function(){
		this.destroy();
	}

	__proto.recycle=function(){
		RenderTarget2D.POOL.push(this);
	}

	__proto.start=function(){
		var gl=WebGL.mainContext;
		this._preRenderTarget=RenderState2D.curRenderTarget;
		RenderState2D.curRenderTarget=this;
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this.bitmap.frameBuffer);
		this._alreadyResolved=false;
		if (this._type==1){
			gl.viewport(0,0,this._w,this._h);
			this._svWidth=RenderState2D.width;
			this._svHeight=RenderState2D.height;
			RenderState2D.width=this._w;
			RenderState2D.height=this._h;
			BaseShader.activeShader=null;
		}
		return this;
	}

	__proto.clear=function(r,g,b,a){
		(r===void 0)&& (r=0.0);
		(g===void 0)&& (g=0.0);
		(b===void 0)&& (b=0.0);
		(a===void 0)&& (a=1.0);
		var gl=WebGL.mainContext;
		gl.clearColor(r,g,b,a);
		var clearFlag=/*laya.webgl.WebGLContext.COLOR_BUFFER_BIT*/0x00004000;
		switch (this._depthStencilFormat){
			case /*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5:
				clearFlag |=/*laya.webgl.WebGLContext.DEPTH_BUFFER_BIT*/0x00000100;
				break ;
			case /*laya.webgl.WebGLContext.STENCIL_INDEX8*/0x8D48:
				clearFlag |=/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400;
				break ;
			case /*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9:
				clearFlag |=/*laya.webgl.WebGLContext.DEPTH_BUFFER_BIT*/0x00000100;
				clearFlag |=/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400
				break ;
			}
		gl.clear(clearFlag);
	}

	__proto.end=function(){
		var gl=WebGL.mainContext;
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this._preRenderTarget ? this._preRenderTarget.bitmap.frameBuffer :null);
		this._alreadyResolved=true;
		RenderState2D.curRenderTarget=this._preRenderTarget;
		if (this._type==1){
			gl.viewport(0,0,this._svWidth,this._svHeight);
			RenderState2D.width=this._svWidth;
			RenderState2D.height=this._svHeight;
			BaseShader.activeShader=null;
		}else gl.viewport(0,0,Laya.stage.width,Laya.stage.height);
	}

	__proto.getData=function(x,y,width,height){
		var gl=WebGL.mainContext;
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,(this.bitmap).frameBuffer);
		var canRead=(gl.checkFramebufferStatus(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40)===/*laya.webgl.WebGLContext.FRAMEBUFFER_COMPLETE*/0x8CD5);
		if (!canRead){
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
			return null;
		};
		var pixels=new Uint8Array(this._w *this._h *4);
		gl.readPixels(x,y,width,height,this._surfaceFormat,this._surfaceType,pixels);
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
		return pixels;
	}

	/**彻底清理资源,注意会强制解锁清理*/
	__proto.destroy=function(foreDiposeTexture){
		(foreDiposeTexture===void 0)&& (foreDiposeTexture=false);
		if (!this._destroy){
			this._loaded=false;
			this.bitmap.offAll();
			this.bitmap.disposeResource();
			this.bitmap.dispose();
			this.offAll();
			this.bitmap=null;
			this._alreadyResolved=false;
			this._destroy=true;
			_super.prototype.destroy.call(this);
		}
	}

	//待测试
	__proto.dispose=function(){}
	__proto._createWebGLRenderTarget=function(){
		this.bitmap=new WebGLRenderTarget(this.width,this.height,this._surfaceFormat,this._surfaceType,this._depthStencilFormat,this._mipMap,this._repeat,this._minFifter,this._magFifter);
		this.bitmap.activeResource();
		this._alreadyResolved=true;
		this._destroy=false;
		this._loaded=true;
		this.bitmap.on(/*laya.events.Event.RECOVERED*/"recovered",this,function(e){
			this.event(/*laya.events.Event.RECOVERED*/"recovered");
		})
	}

	__getset(0,__proto,'surfaceFormat',function(){
		return this._surfaceFormat;
	});

	__getset(0,__proto,'magFifter',function(){
		return this._magFifter;
	});

	__getset(0,__proto,'surfaceType',function(){
		return this._surfaceType;
	});

	__getset(0,__proto,'mipMap',function(){
		return this._mipMap;
	});

	__getset(0,__proto,'depthStencilFormat',function(){
		return this._depthStencilFormat;
	});

	//}
	__getset(0,__proto,'minFifter',function(){
		return this._minFifter;
	});

	/**返回RenderTarget的Texture*/
	__getset(0,__proto,'source',function(){
		if (this._alreadyResolved)
			return Laya.superGet(Texture,this,'source');
		return null;
	});

	RenderTarget2D.create=function(w,h,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=-1);
		var t=RenderTarget2D.POOL.pop();
		t || (t=new RenderTarget2D(w,h));
		if (!t.bitmap || t._w !=w || t._h !=h || t._surfaceFormat !=surfaceFormat || t._surfaceType !=surfaceType || t._depthStencilFormat !=depthStencilFormat || t._mipMap !=mipMap || t._repeat !=repeat || t._minFifter !=minFifter || t._magFifter !=magFifter){
			t._w=w;
			t._h=h;
			t._surfaceFormat=surfaceFormat;
			t._surfaceType=surfaceType;
			t._depthStencilFormat=depthStencilFormat;
			t._mipMap=mipMap;
			t._repeat=repeat;
			t._minFifter=minFifter;
			t._magFifter=magFifter;
			t.release();
			t._createWebGLRenderTarget();
		}
		return t;
	}

	RenderTarget2D.TYPE2D=1;
	RenderTarget2D.TYPE3D=2;
	RenderTarget2D.POOL=[];
	return RenderTarget2D;
})(Texture)


//class laya.webgl.utils.Buffer extends laya.resource.Resource
var Buffer=(function(_super){
	function Buffer(){
		this._glBuffer=null;
		this._buffer=null;
		//可能为Float32Array、Uint16Array、Uint8Array、ArrayBuffer等。
		this._bufferType=0;
		this._bufferUsage=0;
		this._byteLength=0;
		Buffer.__super.call(this);
		Buffer._gl=WebGL.mainContext;
	}

	__class(Buffer,'laya.webgl.utils.Buffer',_super);
	var __proto=Buffer.prototype;
	__proto._bind=function(){
		this.activeResource();
		if (Buffer._bindActive[this._bufferType]!==this._glBuffer){
			(this._bufferType===/*laya.webgl.WebGLContext.ARRAY_BUFFER*/0x8892)&& (Buffer._bindVertexBuffer=this._glBuffer);
			Buffer._gl.bindBuffer(this._bufferType,Buffer._bindActive[this._bufferType]=this._glBuffer);
			BaseShader.activeShader=null;
		}
	}

	__proto.recreateResource=function(){
		this._glBuffer || (this._glBuffer=Buffer._gl.createBuffer());
		this.completeCreate();
	}

	__proto.disposeResource=function(){
		if (this._glBuffer){
			WebGL.mainContext.deleteBuffer(this._glBuffer);
			this._glBuffer=null;
		}
		this.memorySize=0;
	}

	__getset(0,__proto,'bufferUsage',function(){
		return this._bufferUsage;
	});

	Buffer._gl=null;
	Buffer._bindActive={};
	Buffer._bindVertexBuffer=null;
	Buffer._enableAtributes=[];
	return Buffer;
})(Resource)


//class laya.webgl.shader.d2.skinAnishader.SkinSV extends laya.webgl.shader.d2.value.Value2D
var SkinSV=(function(_super){
	function SkinSV(type){
		this.texcoord=null;
		this.offsetX=300;
		this.offsetY=0;
		SkinSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,0);
		var _vlen=8 *CONST3D2D.BYTES_PE;
		this.position=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,0];
		this.texcoord=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,2 *CONST3D2D.BYTES_PE];
		this.color=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,4 *CONST3D2D.BYTES_PE];
	}

	__class(SkinSV,'laya.webgl.shader.d2.skinAnishader.SkinSV',_super);
	return SkinSV;
})(Value2D)


//class laya.webgl.shader.d2.value.Color2dSV extends laya.webgl.shader.d2.value.Value2D
var Color2dSV=(function(_super){
	function Color2dSV(args){
		Color2dSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0);
		this.color=[];
	}

	__class(Color2dSV,'laya.webgl.shader.d2.value.Color2dSV',_super);
	var __proto=Color2dSV.prototype;
	__proto.setValue=function(value){
		value.fillStyle&&(this.color=value.fillStyle._color._color);
		value.strokeStyle&&(this.color=value.strokeStyle._color._color);
	}

	return Color2dSV;
})(Value2D)


//class laya.webgl.shader.d2.value.FillTextureSV extends laya.webgl.shader.d2.value.Value2D
var FillTextureSV=(function(_super){
	function FillTextureSV(type){
		this.u_colorMatrix=null;
		this.strength=0;
		this.colorMat=null;
		this.colorAlpha=null;
		this.u_TexRange=[0,1,0,1];
		this.u_offset=[0,0];
		this.texcoord=Value2D._TEXCOORD;
		FillTextureSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,0);
	}

	__class(FillTextureSV,'laya.webgl.shader.d2.value.FillTextureSV',_super);
	var __proto=FillTextureSV.prototype;
	//this.color=[4,WebGLContext.FLOAT,false,_vlen,4 *CONST3D2D.BYTES_PE];
	__proto.setValue=function(vo){
		this.ALPHA=vo.ALPHA;
		vo.filters && this.setFilters(vo.filters);
	}

	__proto.clear=function(){
		this.texture=null;
		this.shader=null;
		this.defines.setValue(0);
	}

	return FillTextureSV;
})(Value2D)


//class laya.webgl.shader.d2.value.TextureSV extends laya.webgl.shader.d2.value.Value2D
var TextureSV=(function(_super){
	function TextureSV(subID){
		this.u_colorMatrix=null;
		this.strength=0;
		this.blurInfo=null;
		this.colorMat=null;
		this.colorAlpha=null;
		this.texcoord=Value2D._TEXCOORD;
		(subID===void 0)&& (subID=0);
		TextureSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,subID);
	}

	__class(TextureSV,'laya.webgl.shader.d2.value.TextureSV',_super);
	var __proto=TextureSV.prototype;
	__proto.setValue=function(vo){
		this.ALPHA=vo.ALPHA;
		vo.filters && this.setFilters(vo.filters);
	}

	__proto.clear=function(){
		this.texture=null;
		this.shader=null;
		this.defines.setValue(0);
	}

	return TextureSV;
})(Value2D)


//class laya.webgl.shader.d2.value.PrimitiveSV extends laya.webgl.shader.d2.value.Value2D
var PrimitiveSV=(function(_super){
	function PrimitiveSV(args){
		this.a_color=null;
		this.u_pos=[0,0];
		PrimitiveSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0);
		this.position=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,5 *CONST3D2D.BYTES_PE,0];
		this.a_color=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,5 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
	}

	__class(PrimitiveSV,'laya.webgl.shader.d2.value.PrimitiveSV',_super);
	return PrimitiveSV;
})(Value2D)


//class laya.webgl.atlas.AtlasWebGLCanvas extends laya.resource.Bitmap
var AtlasWebGLCanvas=(function(_super){
	function AtlasWebGLCanvas(){
		this._atlaser=null;
		/**兼容Stage3D使用*/
		this._flashCacheImage=null;
		this._flashCacheImageNeedFlush=false;
		AtlasWebGLCanvas.__super.call(this);
	}

	__class(AtlasWebGLCanvas,'laya.webgl.atlas.AtlasWebGLCanvas',_super);
	var __proto=AtlasWebGLCanvas.prototype;
	/***重新创建资源*/
	__proto.recreateResource=function(){
		var gl=WebGL.mainContext;
		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,this._w,this._h,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,null);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this.memorySize=this._w *this._h *4;
		this.completeCreate();
	}

	/***销毁资源*/
	__proto.disposeResource=function(){
		if (this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}
	}

	/**采样image到WebGLTexture的一部分*/
	__proto.texSubImage2D=function(xoffset,yoffset,bitmap){
		if (!Render.isFlash){
			var gl=WebGL.mainContext;
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
			(xoffset-1 >=0)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset-1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
			(xoffset+1 <=this._w)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset+1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
			(yoffset-1 >=0)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset-1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
			(yoffset+1 <=this._h)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset+1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
			gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap);
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			}else {
			if (!this._flashCacheImage){
				this._flashCacheImage=HTMLImage.create("");
				this._flashCacheImage._image.createCanvas(this._w,this._h);
			};
			var bmData=bitmap.bitmapdata;
			this._flashCacheImage._image.copyPixels(bmData,0,0,bmData.width,bmData.height,xoffset,yoffset);
			(this._flashCacheImageNeedFlush)|| (this._flashCacheImageNeedFlush=true);
		}
	}

	/**采样image到WebGLTexture的一部分*/
	__proto.texSubImage2DPixel=function(xoffset,yoffset,width,height,pixel){
		var gl=WebGL.mainContext;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
		var pixels=new Uint8Array(pixel.data);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,width,height,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,pixels);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}

	/***
	*设置图片宽度
	*@param value 图片宽度
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		this._w=value;
	});

	/***
	*设置图片高度
	*@param value 图片高度
	*/
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		this._h=value;
	});

	return AtlasWebGLCanvas;
})(Bitmap)


//class laya.webgl.resource.WebGLCanvas extends laya.resource.Bitmap
var WebGLCanvas=(function(_super){
	function WebGLCanvas(){
		//this._ctx=null;
		/**HTML Canvas*/
		//this._canvas=null;
		//this._imgData=null;
		//}
		//this.iscpuSource=false;
		WebGLCanvas.__super.call(this);
	}

	__class(WebGLCanvas,'laya.webgl.resource.WebGLCanvas',_super);
	var __proto=WebGLCanvas.prototype;
	//}
	__proto.getCanvas=function(){
		return this._canvas;
	}

	__proto.clear=function(){
		this._ctx && this._ctx.clear();
	}

	__proto.destroy=function(){
		this._ctx && this._ctx.destroy();
		this._ctx=null;
	}

	__proto._setContext=function(context){
		this._ctx=context;
	}

	__proto.getContext=function(contextID,other){
		return this._ctx ? this._ctx :(this._ctx=WebGLCanvas._createContext(this));
	}

	/*override public function copyTo(dec:Bitmap):void {
	super.copyTo(dec);
	(dec as WebGLCanvas)._ctx=_ctx;
}*/


__proto.size=function(w,h){
	if (this._w !=w || this._h !=h){
		this._w=w;
		this._h=h;
		this._ctx && this._ctx.size(w,h);
		this._canvas && (this._canvas.height=h,this._canvas.width=w);
	}

}


__proto.recreateResource=function(){
	this.createWebGlTexture();
	this.completeCreate();
}


__proto.disposeResource=function(){
	if (this._source && !this.iscpuSource){
		WebGL.mainContext.deleteTexture(this._source);
		this._source=null;
		this.memorySize=0;
	}

}


__proto.createWebGlTexture=function(){
	var gl=WebGL.mainContext;
	if (!this._canvas){
		throw "create GLTextur err:no data:"+this._canvas;
	};

	var glTex=this._source=gl.createTexture();
	this.iscpuSource=false;
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_FLIP_Y_WEBGL*/0x9240,1);
	gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._imgData);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_FLIP_Y_WEBGL*/0x9240,0);
	this.memorySize=this._w *this._h *4;
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


//_canvas=null;
__proto.texSubImage2D=function(webglCanvas,xoffset,yoffset){
	var gl=WebGL.mainContext;
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
	gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,webglCanvas._source);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


__proto.toBase64=function(type,encoderOptions,callBack){
	var base64Data=null;
	if (this._canvas){
		base64Data=this._canvas.toDataURL(type,encoderOptions);
	}

	callBack.call(this,base64Data);
}


__getset(0,__proto,'context',function(){
	return this._ctx;
});


__getset(0,__proto,'asBitmap',null,function(value){
	this._ctx && (this._ctx.asBitmap=value);
});


WebGLCanvas._createContext=null;
return WebGLCanvas;
})(Bitmap)


//class laya.webgl.resource.WebGLCharImage extends laya.resource.Bitmap
var WebGLCharImage=(function(_super){
	function WebGLCharImage(content,drawValue){
		this.CborderSize=12;
		//this._ctx=null;
		/***是否创建私有Source*/
		//this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		//this._enableMerageInAtlas=false;
		/**HTML Canvas，绘制字符载体,非私有数据载体*/
		//this.canvas=null;
		/**********************************************************************************/
		//this.cw=NaN;
		//this.ch=NaN;
		//this.xs=NaN;
		//this.ys=NaN;
		//this.char=null;
		//this.fillColor=null;
		//this.borderColor=null;
		//this.borderSize=0;
		//this.font=null;
		//this.fontSize=0;
		//this.texture=null;
		//this.lineWidth=0;
		//this.UV=null;
		//this.isSpace=false;
		//this.underLine=0;
		WebGLCharImage.__super.call(this);
		this.char=content;
		this.isSpace=content===' ';
		this.xs=drawValue.scaleX;
		this.ys=drawValue.scaleY;
		this.font=drawValue.font.toString();
		this.fontSize=drawValue.font.size;
		this.fillColor=drawValue.fillColor;
		this.borderColor=drawValue.borderColor;
		this.lineWidth=drawValue.lineWidth;
		this.underLine=drawValue.underLine;
		var bIsConchApp=Render.isConchApp;
		var pCanvas;
		if (bIsConchApp){
			/*__JS__ */pCanvas=ConchTextCanvas;
			/*__JS__ */pCanvas._source=ConchTextCanvas;
			/*__JS__ */pCanvas._source.canvas=ConchTextCanvas;
			}else {
			pCanvas=Browser.canvas.source;
		}
		this.canvas=pCanvas;
		this._enableMerageInAtlas=true;
		if (bIsConchApp){
			/*__JS__ */this._ctx=pCanvas;
			}else {
			this._ctx=this.canvas.getContext('2d',undefined);
		};
		var t=Utils.measureText(this.char,this.font);
		this.cw=t.width *this.xs;
		this.ch=(t.height || this.fontSize)*this.ys;
		this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
		this.texture=new Texture(this);
	}

	__class(WebGLCharImage,'laya.webgl.resource.WebGLCharImage',_super);
	var __proto=WebGLCharImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	__proto.active=function(){
		this.texture.active();
	}

	__proto.recreateResource=function(){
		var bIsConchApp=Render.isConchApp;
		this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
		this.canvas && (this.canvas.height=this._h,this.canvas.width=this._w);
		if (bIsConchApp){
			var nFontSize=this.fontSize;
			if (this.xs !=1 || this.ys !=1){
				nFontSize=parseInt(nFontSize *((this.xs > this.ys)? this.xs :this.ys)+"");
			};
			var sFont="normal 100 "+nFontSize+"px Arial";
			if (this.borderColor){
				sFont+=" 1 "+this.borderColor;
			}
			this._ctx.font=sFont;
			this._ctx.textBaseline="top";
			this._ctx.fillStyle=this.fillColor;
			this._ctx.fillText(this.char,this.CborderSize,this.CborderSize,null,null,null);
			}else {
			this._ctx.save();
			(this._ctx).clearRect(0,0,this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this._ctx.font=this.font;
			if (Text.RightToLeft){
				this._ctx.textAlign="end";
			}
			this._ctx.textBaseline="top";
			this._ctx.translate(this.CborderSize,this.CborderSize);
			if (this.xs !=1 || this.ys !=1){
				this._ctx.scale(this.xs,this.ys);
			}
			if (this.fillColor && this.borderColor){
				this._ctx.strokeStyle=this.borderColor;
				this._ctx.lineWidth=this.lineWidth;
				this._ctx.strokeText(this.char,0,0,null,null,0,null);
				this._ctx.fillStyle=this.fillColor;
				this._ctx.fillText(this.char,0,0,null,null,null);
				}else {
				if (this.lineWidth===-1){
					this._ctx.fillStyle=this.fillColor ? this.fillColor :"white";
					this._ctx.fillText(this.char,0,0,null,null,null);
					}else {
					this._ctx.strokeStyle=this.borderColor?this.borderColor:'white';
					this._ctx.lineWidth=this.lineWidth;
					this._ctx.strokeText(this.char,0,0,null,null,0,null);
				}
			}
			if (this.underLine){
				this._ctx.lineWidth=1;
				this._ctx.strokeStyle=this.fillColor;
				this._ctx.beginPath();
				this._ctx.moveTo(0,this.fontSize+1);
				var nW=this._ctx.measureText(this.char).width+1;
				this._ctx.lineTo(nW,this.fontSize+1);
				this._ctx.stroke();
			}
			this._ctx.restore();
		}
		this.borderSize=this.CborderSize;
		this.completeCreate();
	}

	__proto.onresize=function(w,h){
		this._w=w;
		this._h=h;
		this._allowMerageInAtlas=true;
	}

	__proto.clearAtlasSource=function(){}
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});

	__getset(0,__proto,'atlasSource',function(){
		return this.canvas;
	});

	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._enableMerageInAtlas;
		},function(value){
		this._enableMerageInAtlas=value;
	});

	WebGLCharImage.createOneChar=function(content,drawValue){
		var char=new WebGLCharImage(content,drawValue);
		return char;
	}

	return WebGLCharImage;
})(Bitmap)


//class laya.webgl.resource.WebGLRenderTarget extends laya.resource.Bitmap
var WebGLRenderTarget=(function(_super){
	function WebGLRenderTarget(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		//this._frameBuffer=null;
		//this._depthStencilBuffer=null;
		//this._surfaceFormat=0;
		//this._surfaceType=0;
		//this._depthStencilFormat=0;
		//this._mipMap=false;
		//this._repeat=false;
		//this._minFifter=0;
		//this._magFifter=0;
		(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=1);
		WebGLRenderTarget.__super.call(this);
		this._w=width;
		this._h=height;
		this._surfaceFormat=surfaceFormat;
		this._surfaceType=surfaceType;
		this._depthStencilFormat=depthStencilFormat;
		this._mipMap=mipMap;
		this._repeat=repeat;
		this._minFifter=minFifter;
		this._magFifter=magFifter;
	}

	__class(WebGLRenderTarget,'laya.webgl.resource.WebGLRenderTarget',_super);
	var __proto=WebGLRenderTarget.prototype;
	__proto.recreateResource=function(){
		var gl=WebGL.mainContext;
		this._frameBuffer || (this._frameBuffer=gl.createFramebuffer());
		this._source || (this._source=gl.createTexture());
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);
		var minFifter=this._minFifter;
		var magFifter=this._magFifter;
		var repeat=this._repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
		var isPot=Arith.isPOT(this._w,this._h);
		if (isPot){
			if (this._mipMap)
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
			else
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
			this._mipMap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		}
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this._frameBuffer);
		gl.framebufferTexture2D(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.COLOR_ATTACHMENT0*/0x8CE0,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source,0);
		if (this._depthStencilFormat){
			this._depthStencilBuffer || (this._depthStencilBuffer=gl.createRenderbuffer());
			gl.bindRenderbuffer(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
			gl.renderbufferStorage(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilFormat,this._w,this._h);
			switch (this._depthStencilFormat){
				case /*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5:
					gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.DEPTH_ATTACHMENT*/0x8D00,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
					break ;
				case /*laya.webgl.WebGLContext.STENCIL_INDEX8*/0x8D48:
					gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.STENCIL_ATTACHMENT*/0x8D20,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
					break ;
				case /*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9:
					gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.DEPTH_STENCIL_ATTACHMENT*/0x821A,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
					break ;
				}
		}
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		gl.bindRenderbuffer(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,null);
		this.memorySize=this._w *this._h *4;
		this.completeCreate();
	}

	__proto.disposeResource=function(){
		if (this._frameBuffer){
			WebGL.mainContext.deleteTexture(this._source);
			WebGL.mainContext.deleteFramebuffer(this._frameBuffer);
			WebGL.mainContext.deleteRenderbuffer(this._depthStencilBuffer);
			this._source=null;
			this._frameBuffer=null;
			this._depthStencilBuffer=null;
			this.memorySize=0;
		}
	}

	__getset(0,__proto,'depthStencilBuffer',function(){
		return this._depthStencilBuffer;
	});

	__getset(0,__proto,'frameBuffer',function(){
		return this._frameBuffer;
	});

	return WebGLRenderTarget;
})(Bitmap)


//class laya.webgl.resource.WebGLSubImage extends laya.resource.Bitmap
var WebGLSubImage=(function(_super){
	function WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src){
		/**HTML Context*/
		//this._ctx=null;
		/***是否创建私有Source,值为false时不根据src创建私有WebGLTexture,同时销毁时也只清空source=null,不调用WebGL.mainContext.deleteTexture类似函数，调用资源激活前有效*/
		//this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		//this._enableMerageInAtlas=false;
		/**HTML Canvas，绘制子图载体,非私有数据载体*/
		//this.canvas=null;
		/**是否使用重复模式纹理寻址*/
		//this.repeat=false;
		/**是否使用mipLevel*/
		//this.mipmap=false;
		/**缩小过滤器*/
		//this.minFifter=0;
		/**放大过滤器*/
		//this.magFifter=0;
		//动态默认值，判断是否可生成miplevel
		//this.atlasImage=null;
		this.offsetX=0;
		this.offsetY=0;
		//this.src=null;
		WebGLSubImage.__super.call(this);
		this.repeat=true;
		this.mipmap=false;
		this.minFifter=-1;
		this.magFifter=-1;
		this.atlasImage=atlasImage;
		this.canvas=canvas;
		this._ctx=canvas.getContext('2d',undefined);
		this._w=width;
		this._h=height;
		this.offsetX=offsetX;
		this.offsetY=offsetY;
		this.src=src;
		this._enableMerageInAtlas=true;
		(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
	}

	__class(WebGLSubImage,'laya.webgl.resource.WebGLSubImage',_super);
	var __proto=WebGLSubImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	/*override public function copyTo(dec:Bitmap):void {
	var d:WebGLSubImage=dec as WebGLSubImage;
	super.copyTo(dec);
	d._ctx=_ctx;
}*/


__proto.size=function(w,h){
	this._w=w;
	this._h=h;
	this._ctx && this._ctx.size(w,h);
	this.canvas && (this.canvas.height=h,this.canvas.width=w);
}


__proto.recreateResource=function(){
	this.size(this._w,this._h);
	this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h);
	(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this.createWebGlTexture()):(this.memorySize=0);
	this.completeCreate();
}


__proto.createWebGlTexture=function(){
	var gl=WebGL.mainContext;
	if (!this.canvas){
		throw "create GLTextur err:no data:"+this.canvas;
	};

	var glTex=this._source=gl.createTexture();
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
	gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this.canvas);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
	var minFifter=this.minFifter;
	var magFifter=this.magFifter;
	var repeat=this.repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
	var isPOT=Arith.isPOT(this.width,this.height);
	if (isPOT){
		if (this.mipmap)
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
		else
		(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
		this.mipmap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
		}else {
		(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
	}

	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	this.canvas=null;
	this.memorySize=this._w *this._h *4;
}


__proto.disposeResource=function(){
	if (!(AtlasResourceManager.enabled && this._allowMerageInAtlas)&& this._source){
		WebGL.mainContext.deleteTexture(this._source);
		this._source=null;
		this.memorySize=0;
	}

}


//}
__proto.clearAtlasSource=function(){}
/**
*是否创建私有Source
*@return 是否创建
*/
__getset(0,__proto,'allowMerageInAtlas',function(){
	return this._allowMerageInAtlas;
});


//public var createFromPixel:Boolean=true;
__getset(0,__proto,'atlasSource',function(){
	return this.canvas;
});


/**
*是否创建私有Source,通常禁止修改
*@param value 是否创建
*/
/**
*是否创建私有Source
*@return 是否创建
*/
__getset(0,__proto,'enableMerageInAtlas',function(){
	return this._allowMerageInAtlas;
	},function(value){

	this._allowMerageInAtlas=value;
});


return WebGLSubImage;
})(Bitmap)


//class laya.webgl.shader.Shader extends laya.webgl.shader.BaseShader
var Shader=(function(_super){
	function Shader(vs,ps,saveName,nameMap){
		this.customCompile=false;
		//this._nameMap=null;
		//shader参数别名，语义
		//this._vs=null;
		//this._ps=null;
		this._curActTexIndex=0;
		//this._reCompile=false;
		//存储一些私有变量
		this.tag={};
		//this._vshader=null;
		//this._pshader=null;
		this._program=null;
		this._params=null;
		this._paramsMap={};
		this._offset=0;
		//this._id=0;
		Shader.__super.call(this);
		if ((!vs)|| (!ps))throw "Shader Error";
		if (Render.isConchApp || Render.isFlash){
			this.customCompile=true;
		}
		this._id=++Shader._count;
		this._vs=vs;
		this._ps=ps;
		this._nameMap=nameMap ? nameMap :{};
		saveName !=null && (Shader.sharders[saveName]=this);
	}

	__class(Shader,'laya.webgl.shader.Shader',_super);
	var __proto=Shader.prototype;
	__proto.recreateResource=function(){
		this._compile();
		this.completeCreate();
		this.memorySize=0;
	}

	//忽略尺寸尺寸
	__proto.disposeResource=function(){
		WebGL.mainContext.deleteShader(this._vshader);
		WebGL.mainContext.deleteShader(this._pshader);
		WebGL.mainContext.deleteProgram(this._program);
		this._vshader=this._pshader=this._program=null;
		this._params=null;
		this._paramsMap={};
		this.memorySize=0;
		this._curActTexIndex=0;
	}

	__proto._compile=function(){
		if (!this._vs || !this._ps || this._params)
			return;
		this._reCompile=true;
		this._params=[];
		var text=[this._vs,this._ps];
		var result;
		if (this.customCompile)
			result=ShaderCompile.preGetParams(this._vs,this._ps);
		var gl=WebGL.mainContext;
		this._program=gl.createProgram();
		this._vshader=Shader._createShader(gl,text[0],/*laya.webgl.WebGLContext.VERTEX_SHADER*/0x8B31);
		this._pshader=Shader._createShader(gl,text[1],/*laya.webgl.WebGLContext.FRAGMENT_SHADER*/0x8B30);
		gl.attachShader(this._program,this._vshader);
		gl.attachShader(this._program,this._pshader);
		gl.linkProgram(this._program);
		if (!this.customCompile && !gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.LINK_STATUS*/0x8B82)){
			throw gl.getProgramInfoLog(this._program);
		};
		var one,i=0,j=0,n=0,location;
		var attribNum=this.customCompile ? result.attributes.length :gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.ACTIVE_ATTRIBUTES*/0x8B89);
		for (i=0;i < attribNum;i++){
			var attrib=this.customCompile ? result.attributes[i] :gl.getActiveAttrib(this._program,i);
			location=gl.getAttribLocation(this._program,attrib.name);
			one={vartype:"attribute",glfun:null,ivartype:0,attrib:attrib,location:location,name:attrib.name,type:attrib.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
			this._params.push(one);
		};
		var nUniformNum=this.customCompile ? result.uniforms.length :gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.ACTIVE_UNIFORMS*/0x8B86);
		for (i=0;i < nUniformNum;i++){
			var uniform=this.customCompile ? result.uniforms[i] :gl.getActiveUniform(this._program,i);
			location=gl.getUniformLocation(this._program,uniform.name);
			one={vartype:"uniform",glfun:null,ivartype:1,attrib:attrib,location:location,name:uniform.name,type:uniform.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
			if (one.name.indexOf('[0]')> 0){
				one.name=one.name.substr(0,one.name.length-3);
				one.isArray=true;
				one.location=gl.getUniformLocation(this._program,one.name);
			}
			this._params.push(one);
		}
		for (i=0,n=this._params.length;i < n;i++){
			one=this._params[i];
			one.indexOfParams=i;
			one.index=1;
			one.value=[one.location,null];
			one.codename=one.name;
			one.name=this._nameMap[one.codename] ? this._nameMap[one.codename] :one.codename;
			this._paramsMap[one.name]=one;
			one._this=this;
			one.uploadedValue=[];
			if (one.vartype==="attribute"){
				one.fun=this._attribute;
				continue ;
			}
			switch (one.type){
				case /*laya.webgl.WebGLContext.INT*/0x1404:
					one.fun=one.isArray ? this._uniform1iv :this._uniform1i;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT*/0x1406:
					one.fun=one.isArray ? this._uniform1fv :this._uniform1f;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_VEC2*/0x8B50:
					one.fun=one.isArray ? this._uniform_vec2v:this._uniform_vec2;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_VEC3*/0x8B51:
					one.fun=one.isArray ? this._uniform_vec3v:this._uniform_vec3;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_VEC4*/0x8B52:
					one.fun=one.isArray ? this._uniform_vec4v:this._uniform_vec4;
					break ;
				case /*laya.webgl.WebGLContext.SAMPLER_2D*/0x8B5E:
					one.fun=this._uniform_sampler2D;
					break ;
				case /*laya.webgl.WebGLContext.SAMPLER_CUBE*/0x8B60:
					one.fun=this._uniform_samplerCube;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_MAT4*/0x8B5C:
					one.glfun=gl.uniformMatrix4fv;
					one.fun=this._uniformMatrix4fv;
					break ;
				case /*laya.webgl.WebGLContext.BOOL*/0x8B56:
					one.fun=this._uniform1i;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_MAT2*/0x8B5A:
				case /*laya.webgl.WebGLContext.FLOAT_MAT3*/0x8B5B:
					throw new Error("compile shader err!");
					break ;
				default :
					throw new Error("compile shader err!");
					break ;
				}
		}
	}

	/**
	*根据变量名字获得
	*@param name
	*@return
	*/
	__proto.getUniform=function(name){
		return this._paramsMap[name];
	}

	__proto._attribute=function(one,value){
		var gl=WebGL.mainContext;
		var enableAtributes=Buffer._enableAtributes;
		var location=one.location;
		(enableAtributes[location])||(gl.enableVertexAttribArray(location));
		gl.vertexAttribPointer(location,value[0],value[1],value[2],value[3],value[4]+this._offset);
		enableAtributes[location]=Buffer._bindVertexBuffer;
		return 1;
	}

	__proto._uniform1f=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value){
			WebGL.mainContext.uniform1f(one.location,uploadedValue[0]=value);
			return 1;
		}
		return 0;
	}

	__proto._uniform1fv=function(one,value){
		if (value.length < 4){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform1fv(one.location,value);
				uploadedValue[0]=value[0];
				uploadedValue[1]=value[1];
				uploadedValue[2]=value[2];
				uploadedValue[3]=value[3];
				return 1;
			}
			return 0;
			}else {
			WebGL.mainContext.uniform1fv(one.location,value);
			return 1;
		}
	}

	__proto._uniform_vec2=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
			WebGL.mainContext.uniform2f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec2v=function(one,value){
		if (value.length < 2){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform2fv(one.location,value);
				uploadedValue[0]=value[0];
				uploadedValue[1]=value[1];
				uploadedValue[2]=value[2];
				uploadedValue[3]=value[3];
				return 1;
			}
			return 0;
			}else {
			WebGL.mainContext.uniform2fv(one.location,value);
			return 1;
		}
	}

	__proto._uniform_vec3=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
			WebGL.mainContext.uniform3f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec3v=function(one,value){
		WebGL.mainContext.uniform3fv(one.location,value);
		return 1;
	}

	__proto._uniform_vec4=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
			WebGL.mainContext.uniform4f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec4v=function(one,value){
		WebGL.mainContext.uniform4fv(one.location,value);
		return 1;
	}

	__proto._uniformMatrix2fv=function(one,value){
		WebGL.mainContext.uniformMatrix2fv(one.location,false,value);
		return 1;
	}

	__proto._uniformMatrix3fv=function(one,value){
		WebGL.mainContext.uniformMatrix3fv(one.location,false,value);
		return 1;
	}

	__proto._uniformMatrix4fv=function(one,value){
		WebGL.mainContext.uniformMatrix4fv(one.location,false,value);
		return 1;
	}

	__proto._uniform1i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value){
			WebGL.mainContext.uniform1i(one.location,uploadedValue[0]=value);
			return 1;
		}
		return 0;
	}

	__proto._uniform1iv=function(one,value){
		WebGL.mainContext.uniform1iv(one.location,value);
		return 1;
	}

	__proto._uniform_ivec2=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
			WebGL.mainContext.uniform2i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_ivec2v=function(one,value){
		WebGL.mainContext.uniform2iv(one.location,value);
		return 1;
	}

	__proto._uniform_vec3i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
			WebGL.mainContext.uniform3i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec3vi=function(one,value){
		WebGL.mainContext.uniform3iv(one.location,value);
		return 1;
	}

	__proto._uniform_vec4i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
			WebGL.mainContext.uniform4i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec4vi=function(one,value){
		WebGL.mainContext.uniform4iv(one.location,value);
		return 1;
	}

	__proto._uniform_sampler2D=function(one,value){
		var gl=WebGL.mainContext;
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]==null){
			uploadedValue[0]=this._curActTexIndex;
			gl.uniform1i(one.location,this._curActTexIndex);
			gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
			this._curActTexIndex++;
			return 1;
			}else {
			gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
			return 0;
		}
	}

	__proto._uniform_samplerCube=function(one,value){
		var gl=WebGL.mainContext;
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]==null){
			uploadedValue[0]=this._curActTexIndex;
			gl.uniform1i(one.location,this._curActTexIndex);
			gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_CUBE_MAP*/0x8513,value);
			this._curActTexIndex++;
			return 1;
			}else {
			gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_CUBE_MAP*/0x8513,value);
			return 0;
		}
	}

	__proto._noSetValue=function(one){
		console.log("no....:"+one.name);
	}

	//throw new Error("upload shader err,must set value:"+one.name);
	__proto.uploadOne=function(name,value){
		this.activeResource();
		WebGLContext.UseProgram(this._program);
		var one=this._paramsMap[name];
		one.fun.call(this,one,value);
	}

	__proto.uploadTexture2D=function(value){
		Stat.shaderCall++;
		var gl=WebGL.mainContext;
		gl.activeTexture(/*laya.webgl.WebGLContext.TEXTURE0*/0x84C0);
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
	}

	/**
	*提交shader到GPU
	*@param shaderValue
	*/
	__proto.upload=function(shaderValue,params){
		BaseShader.activeShader=BaseShader.bindShader=this;
		this._lastUseFrameCount===Stat.loopCount || this.activeResource();
		WebGLContext.UseProgram(this._program);
		if (this._reCompile){
			params=this._params;
			this._reCompile=false;
			}else {
			params=params || this._params;
		};
		var gl=WebGL.mainContext;
		var one,value,n=params.length,shaderCall=0;
		for (var i=0;i < n;i++){
			one=params[i];
			if ((value=shaderValue[one.name])!==null)
				shaderCall+=one.fun.call(this,one,value);
		}
		Stat.shaderCall+=shaderCall;
	}

	/**
	*按数组的定义提交
	*@param shaderValue 数组格式[name,value,...]
	*/
	__proto.uploadArray=function(shaderValue,length,_bufferUsage){
		BaseShader.activeShader=this;
		BaseShader.bindShader=this;
		this.activeResource();
		WebGLContext.UseProgram(this._program);
		var params=this._params,value;
		var one,shaderCall=0;
		for (var i=length-2;i >=0;i-=2){
			one=this._paramsMap[shaderValue[i]];
			if (!one)
				continue ;
			value=shaderValue[i+1];
			if (value !=null){
				_bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();
				shaderCall+=one.fun.call(this,one,value);
			}
		}
		Stat.shaderCall+=shaderCall;
	}

	/**
	*得到编译后的变量及相关预定义
	*@return
	*/
	__proto.getParams=function(){
		return this._params;
	}

	Shader.getShader=function(name){
		return Shader.sharders[name];
	}

	Shader.create=function(vs,ps,saveName,nameMap){
		return new Shader(vs,ps,saveName,nameMap);
	}

	Shader.withCompile=function(nameID,define,shaderName,createShader){
		if (shaderName && Shader.sharders[shaderName])
			return Shader.sharders[shaderName];
		var pre=Shader._preCompileShader[0.0002 *nameID];
		if (!pre)
			throw new Error("withCompile shader err!"+nameID);
		return pre.createShader(define,shaderName,createShader);
	}

	Shader.withCompile2D=function(nameID,mainID,define,shaderName,createShader){
		if (shaderName && Shader.sharders[shaderName])
			return Shader.sharders[shaderName];
		var pre=Shader._preCompileShader[0.0002 *nameID+mainID];
		if (!pre)
			throw new Error("withCompile shader err!"+nameID+" "+mainID);
		return pre.createShader(define,shaderName,createShader);
	}

	Shader.addInclude=function(fileName,txt){
		ShaderCompile.addInclude(fileName,txt);
	}

	Shader.preCompile=function(nameID,vs,ps,nameMap){
		var id=0.0002 *nameID;
		Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
	}

	Shader.preCompile2D=function(nameID,mainID,vs,ps,nameMap){
		var id=0.0002 *nameID+mainID;
		Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
	}

	Shader._createShader=function(gl,str,type){
		var shader=gl.createShader(type);
		gl.shaderSource(shader,str);
		gl.compileShader(shader);
		return shader;
	}

	Shader._count=0;
	Shader._preCompileShader={};
	Shader.SHADERNAME2ID=0.0002;
	__static(Shader,
	['_TEXTURES',function(){return this._TEXTURES=[ /*laya.webgl.WebGLContext.TEXTURE0*/0x84C0,/*laya.webgl.WebGLContext.TEXTURE1*/0x84C1,/*laya.webgl.WebGLContext.TEXTURE2*/0x84C2,/*laya.webgl.WebGLContext.TEXTURE3*/0x84C3,/*laya.webgl.WebGLContext.TEXTURE4*/0x84C4,/*laya.webgl.WebGLContext.TEXTURE5*/0x84C5,/*laya.webgl.WebGLContext.TEXTURE6*/0x84C6,,/*laya.webgl.WebGLContext.TEXTURE7*/0x84C7,/*laya.webgl.WebGLContext.TEXTURE8*/0x84C8];},'nameKey',function(){return this.nameKey=new StringKey();},'sharders',function(){return this.sharders=(Shader.sharders=[],Shader.sharders.length=0x20,Shader.sharders);}
	]);
	return Shader;
})(BaseShader)


//class laya.webgl.utils.Buffer2D extends laya.webgl.utils.Buffer
var Buffer2D=(function(_super){
	function Buffer2D(){
		this._maxsize=0;
		this._upload=true;
		this._uploadSize=0;
		Buffer2D.__super.call(this);
		this.lock=true;
	}

	__class(Buffer2D,'laya.webgl.utils.Buffer2D',_super);
	var __proto=Buffer2D.prototype;
	__proto._bufferData=function(){
		this._maxsize=Math.max(this._maxsize,this._byteLength);
		if (Stat.loopCount % 30==0){
			if (this._buffer.byteLength > (this._maxsize+64)){
				this.memorySize=this._buffer.byteLength;
				this._buffer=this._buffer.slice(0,this._maxsize+64);
				this._checkArrayUse();
			}
			this._maxsize=this._byteLength;
		}
		if (this._uploadSize < this._buffer.byteLength){
			this._uploadSize=this._buffer.byteLength;
			Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
			this.memorySize=this._uploadSize;
		}
		Buffer._gl.bufferSubData(this._bufferType,0,this._buffer);
	}

	__proto._bufferSubData=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		this._maxsize=Math.max(this._maxsize,this._byteLength);
		if (Stat.loopCount % 30==0){
			if (this._buffer.byteLength > (this._maxsize+64)){
				this.memorySize=this._buffer.byteLength;
				this._buffer=this._buffer.slice(0,this._maxsize+64);
				this._checkArrayUse();
			}
			this._maxsize=this._byteLength;
		}
		if (this._uploadSize < this._buffer.byteLength){
			this._uploadSize=this._buffer.byteLength;
			Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
			this.memorySize=this._uploadSize;
		}
		if (dataStart || dataLength){
			var subBuffer=this._buffer.slice(dataStart,dataLength);
			Buffer._gl.bufferSubData(this._bufferType,offset,subBuffer);
			}else {
			Buffer._gl.bufferSubData(this._bufferType,offset,this._buffer);
		}
	}

	__proto._checkArrayUse=function(){}
	__proto._bind_upload=function(){
		if (!this._upload)
			return false;
		this._upload=false;
		this._bind();
		this._bufferData();
		return true;
	}

	__proto._bind_subUpload=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		if (!this._upload)
			return false;
		this._upload=false;
		this._bind();
		this._bufferSubData(offset,dataStart,dataLength);
		return true;
	}

	__proto._resizeBuffer=function(nsz,copy){
		if (nsz < this._buffer.byteLength)
			return this;
		this.memorySize=nsz;
		if (copy && this._buffer && this._buffer.byteLength > 0){
			var newbuffer=new ArrayBuffer(nsz);
			var n=new Uint8Array(newbuffer);
			n.set(new Uint8Array(this._buffer),0);
			this._buffer=newbuffer;
		}else
		this._buffer=new ArrayBuffer(nsz);
		this._checkArrayUse();
		this._upload=true;
		return this;
	}

	__proto.append=function(data){
		this._upload=true;
		var byteLen=0,n;
		byteLen=data.byteLength;
		if ((data instanceof Uint8Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Uint8Array(this._buffer,this._byteLength);
			}else if ((data instanceof Uint16Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Uint16Array(this._buffer,this._byteLength);
			}else if ((data instanceof Float32Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Float32Array(this._buffer,this._byteLength);
		}
		n.set(data,0);
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.appendEx=function(data,type){
		this._upload=true;
		var byteLen=0,n;
		byteLen=data.byteLength;
		this._resizeBuffer(this._byteLength+byteLen,true);
		n=new type(this._buffer,this._byteLength);
		n.set(data,0);
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.appendEx2=function(data,type,dataLen,perDataLen){
		(perDataLen===void 0)&& (perDataLen=1);
		this._upload=true;
		var byteLen=0,n;
		byteLen=dataLen*perDataLen;
		this._resizeBuffer(this._byteLength+byteLen,true);
		n=new type(this._buffer,this._byteLength);
		var i=0;
		for (i=0;i < dataLen;i++){
			n[i]=data[i];
		}
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.getBuffer=function(){
		return this._buffer;
	}

	__proto.setNeedUpload=function(){
		this._upload=true;
	}

	__proto.getNeedUpload=function(){
		return this._upload;
	}

	__proto.upload=function(){
		var scuess=this._bind_upload();
		Buffer._gl.bindBuffer(this._bufferType,null);
		Buffer._bindActive[this._bufferType]=null;
		BaseShader.activeShader=null
		return scuess;
	}

	__proto.subUpload=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		var scuess=this._bind_subUpload();
		Buffer._gl.bindBuffer(this._bufferType,null);
		Buffer._bindActive[this._bufferType]=null;
		BaseShader.activeShader=null
		return scuess;
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		this._upload=true;
		this._uploadSize=0;
	}

	__proto.clear=function(){
		this._byteLength=0;
		this._upload=true;
	}

	__getset(0,__proto,'bufferLength',function(){
		return this._buffer.byteLength;
	});

	__getset(0,__proto,'byteLength',null,function(value){
		if (this._byteLength===value)
			return;
		value <=this._buffer.byteLength || (this._resizeBuffer(value *2+256,true));
		this._byteLength=value;
	});

	Buffer2D.__int__=function(gl){
		IndexBuffer2D.QuadrangleIB=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		GlUtils.fillIBQuadrangle(IndexBuffer2D.QuadrangleIB,16);
	}

	Buffer2D.FLOAT32=4;
	Buffer2D.SHORT=2;
	return Buffer2D;
})(Buffer)


//class laya.webgl.shader.d2.value.GlowSV extends laya.webgl.shader.d2.value.TextureSV
var GlowSV=(function(_super){
	function GlowSV(args){
		this.u_blurX=false;
		this.u_color=null;
		this.u_offset=null;
		this.u_strength=NaN;
		this.u_texW=0;
		this.u_texH=0;
		GlowSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.FILTERGLOW*/0x08| /*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01);
	}

	__class(GlowSV,'laya.webgl.shader.d2.value.GlowSV',_super);
	var __proto=GlowSV.prototype;
	__proto.setValue=function(vo){
		_super.prototype.setValue.call(this,vo);
	}

	__proto.clear=function(){
		_super.prototype.clear.call(this);
	}

	return GlowSV;
})(TextureSV)


//class laya.webgl.shader.d2.value.TextSV extends laya.webgl.shader.d2.value.TextureSV
var TextSV=(function(_super){
	function TextSV(args){
		TextSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40);
		this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40);
	}

	__class(TextSV,'laya.webgl.shader.d2.value.TextSV',_super);
	var __proto=TextSV.prototype;
	__proto.release=function(){
		TextSV.pool[TextSV._length++]=this;
		this.clear();
	}

	__proto.clear=function(){
		_super.prototype.clear.call(this);
	}

	TextSV.create=function(){
		if (TextSV._length)return TextSV.pool[--TextSV._length];
		else return new TextSV(null);
	}

	TextSV.pool=[];
	TextSV._length=0;
	return TextSV;
})(TextureSV)


//class laya.webgl.shader.d2.Shader2X extends laya.webgl.shader.Shader
var Shader2X=(function(_super){
	function Shader2X(vs,ps,saveName,nameMap){
		this._params2dQuick1=null;
		this._params2dQuick2=null;
		this._shaderValueWidth=NaN;
		this._shaderValueHeight=NaN;
		Shader2X.__super.call(this,vs,ps,saveName,nameMap);
	}

	__class(Shader2X,'laya.webgl.shader.d2.Shader2X',_super);
	var __proto=Shader2X.prototype;
	__proto.upload2dQuick1=function(shaderValue){
		this.upload(shaderValue,this._params2dQuick1 || this._make2dQuick1());
	}

	__proto._make2dQuick1=function(){
		if (!this._params2dQuick1){
			this.activeResource();
			this._params2dQuick1=[];
			var params=this._params,one;
			for (var i=0,n=params.length;i < n;i++){
				one=params[i];
				if (!Render.isFlash && (one.name==="size" || one.name==="position" || one.name==="texcoord"))continue ;
				this._params2dQuick1.push(one);
			}
		}
		return this._params2dQuick1;
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		this._params2dQuick1=null;
		this._params2dQuick2=null;
	}

	__proto.upload2dQuick2=function(shaderValue){
		this.upload(shaderValue,this._params2dQuick2 || this._make2dQuick2());
	}

	__proto._make2dQuick2=function(){
		if (!this._params2dQuick2){
			this.activeResource();
			this._params2dQuick2=[];
			var params=this._params,one;
			for (var i=0,n=params.length;i < n;i++){
				one=params[i];
				if (!Render.isFlash && (one.name==="size"))continue ;
				this._params2dQuick2.push(one);
			}
		}
		return this._params2dQuick2;
	}

	Shader2X.create=function(vs,ps,saveName,nameMap){
		return new Shader2X(vs,ps,saveName,nameMap);
	}

	return Shader2X;
})(Shader)


//class laya.webgl.utils.IndexBuffer2D extends laya.webgl.utils.Buffer2D
var IndexBuffer2D=(function(_super){
	function IndexBuffer2D(bufferUsage){
		this._uint8Array=null;
		this._uint16Array=null;
		(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		IndexBuffer2D.__super.call(this);
		this._bufferUsage=bufferUsage;
		this._bufferType=/*laya.webgl.WebGLContext.ELEMENT_ARRAY_BUFFER*/0x8893;
		Render.isFlash || (this._buffer=new ArrayBuffer(8));
	}

	__class(IndexBuffer2D,'laya.webgl.utils.IndexBuffer2D',_super);
	var __proto=IndexBuffer2D.prototype;
	__proto._checkArrayUse=function(){
		this._uint8Array && (this._uint8Array=new Uint8Array(this._buffer));
		this._uint16Array && (this._uint16Array=new Uint16Array(this._buffer));
	}

	__proto.getUint8Array=function(){
		return this._uint8Array || (this._uint8Array=new Uint8Array(this._buffer));
	}

	__proto.getUint16Array=function(){
		return this._uint16Array || (this._uint16Array=new Uint16Array(this._buffer));
	}

	__proto.destory=function(){
		this._uint16Array=null;
		this._uint8Array=null;
		this._buffer=null;
	}

	IndexBuffer2D.QuadrangleIB=null;
	IndexBuffer2D.create=function(bufferUsage){
		(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		return new IndexBuffer2D(bufferUsage);
	}

	return IndexBuffer2D;
})(Buffer2D)


//class laya.webgl.utils.VertexBuffer2D extends laya.webgl.utils.Buffer2D
var VertexBuffer2D=(function(_super){
	function VertexBuffer2D(vertexStride,bufferUsage){
		this._floatArray32=null;
		this._vertexStride=0;
		VertexBuffer2D.__super.call(this);
		this._vertexStride=vertexStride;
		this._bufferUsage=bufferUsage;
		this._bufferType=/*laya.webgl.WebGLContext.ARRAY_BUFFER*/0x8892;
		Render.isFlash || (this._buffer=new ArrayBuffer(8));
		this.getFloat32Array();
	}

	__class(VertexBuffer2D,'laya.webgl.utils.VertexBuffer2D',_super);
	var __proto=VertexBuffer2D.prototype;
	__proto.getFloat32Array=function(){
		return this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
	}

	__proto.bind=function(ibBuffer){
		(ibBuffer)&& (ibBuffer._bind());
		this._bind();
	}

	__proto.insertData=function(data,pos){
		var vbdata=this.getFloat32Array();
		vbdata.set(data,pos);
		this._upload=true;
	}

	__proto.bind_upload=function(ibBuffer){
		(ibBuffer._bind_upload())|| (ibBuffer._bind());
		(this._bind_upload())|| (this._bind());
	}

	__proto._checkArrayUse=function(){
		this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		var enableAtributes=Buffer._enableAtributes;
		for (var i=0;i < 10;i++){
			WebGL.mainContext.disableVertexAttribArray(i);
			enableAtributes[i]=null;
		}
	}

	//}
	__proto.destory=function(){
		this._byteLength=0;
		this._upload=true;
		this._buffer=null;
		this._floatArray32=null;
	}

	__getset(0,__proto,'vertexStride',function(){
		return this._vertexStride;
	});

	VertexBuffer2D.create=function(vertexStride,bufferUsage){
		(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		return new VertexBuffer2D(vertexStride,bufferUsage);
	}

	return VertexBuffer2D;
})(Buffer2D)


//class laya.webgl.resource.WebGLImage extends laya.resource.HTMLImage
var WebGLImage=(function(_super){
	function WebGLImage(data,def,format,mipmap){
		/**@private */
		this._format=0;
		/**@private */
		this._mipmap=false;
		/***是否创建私有Source,值为false时不根据src创建私有WebGLTexture,同时销毁时也只清空source=null,不调用WebGL.mainContext.deleteTexture类似函数，调用资源激活前有效*/
		this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		this._enableMerageInAtlas=false;
		/**是否使用重复模式纹理寻址*/
		this.repeat=false;
		/**@private */
		this._image=null;
		/**缩小过滤器*/
		this.minFifter=0;
		/**放大过滤器*/
		this.magFifter=0;
		(format===void 0)&& (format=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(mipmap===void 0)&& (mipmap=true);
		WebGLImage.__super.call(this,data,def);
		this._format=format;
		this._mipmap=mipmap;
		this.repeat=false;
		this.minFifter=-1;
		this.magFifter=-1;
		if ((typeof data=='string')){
			this._url=data;
			this._src=data;
			this._image=new Browser.window.Image();
			if (def){
				def.onload && (this.onload=def.onload);
				def.onerror && (this.onerror=def.onerror);
				def.onCreate && def.onCreate(this);
			}
			this._image.crossOrigin=(data && (data.indexOf("data:")==0))? null :"";
			(data)&& (this._image.src=data);
			}else if ((data instanceof ArrayBuffer)){
			this._src=def;
			this._url=this._src;
			var readData=new Byte(data);
			var magicNumber=readData.readUTFBytes(4);
			var version=readData.readUTFBytes(2);
			var dataType=readData.getInt16();
			readData.endian=/*laya.utils.Byte.BIG_ENDIAN*/"bigEndian";
			this._w=readData.getInt16();
			this._h=readData.getInt16();
			var originalWidth=readData.getInt16();
			var originalHeight=readData.getInt16();
			this._image=new Uint8Array(data,readData.pos);
			this._format=WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
			}else {
			this._src=def;
			this._url=this._src;
			this._image=data["source"] || data;
			this.onresize();
		}
		this._$5__enableMerageInAtlas=true;
	}

	__class(WebGLImage,'laya.webgl.resource.WebGLImage',_super);
	var __proto=WebGLImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	__proto._init_=function(src,def){}
	__proto._createWebGlTexture=function(){
		if (!this._image){
			throw "create GLTextur err:no data:"+this._image;
		};
		var gl=WebGL.mainContext;
		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		switch (this._format){
			case /*laya.webgl.WebGLContext.RGBA*/0x1908:
				gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._image);
				break ;
			case WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL:
				gl.compressedTexImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,this._w,this._h,0,this._image);
				break ;
			}
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		var minFifter=this.minFifter;
		var magFifter=this.magFifter;
		var repeat=this.repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
		var isPot=Arith.isPOT(this._w,this._h);
		if (isPot){
			if (this.mipmap)
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
			else
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
			this.mipmap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		}
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this._image.onload=null;
		this._image=null;
		if (isPot)
			this.memorySize=this._w *this._h *4 *(1+1 / 3);
		else
		this.memorySize=this._w *this._h *4;
		this._recreateLock=false;
	}

	/***重新创建资源，如果异步创建中被强制释放再创建，则需等待释放完成后再重新加载创建。*/
	__proto.recreateResource=function(){
		var _$this=this;
		if (this._src==null || this._src==="")
			return;
		this._needReleaseAgain=false;
		if (!this._image){
			this._recreateLock=true;
			var _this=this;
			this._image=new Browser.window.Image();
			this._image.crossOrigin=this._src.indexOf("data:")==0 ? null :"";
			this._image.onload=function (){
				if (_this._needReleaseAgain){
					_this._needReleaseAgain=false;
					_this._image.onload=null;
					_this._image=null;
					return;
				}
				(!(_this._allowMerageInAtlas && _this._enableMerageInAtlas))? (_this._createWebGlTexture()):(_$this.memorySize=0,_$this._recreateLock=false);
				_this.completeCreate();
			};
			this._image.src=this._src;
			}else {
			if (this._recreateLock){
				return;
			}
			(!(this._allowMerageInAtlas && this._$5__enableMerageInAtlas))? (this._createWebGlTexture()):(this.memorySize=0,this._recreateLock=false);
			this.completeCreate();
		}
	}

	/***销毁资源*/
	__proto.disposeResource=function(){
		if (this._recreateLock){
			this._needReleaseAgain=true;
		}
		if (this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this._image=null;
			this.memorySize=0;
		}
	}

	/***调整尺寸*/
	__proto.onresize=function(){
		this._w=this._image.width;
		this._h=this._image.height;
		(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
	}

	__proto.clearAtlasSource=function(){
		this._image=null;
	}

	/**
	*获取纹理格式。
	*/
	__getset(0,__proto,'format',function(){
		return this._format;
	});

	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._$5__enableMerageInAtlas;
		},function(value){
		this._$5__enableMerageInAtlas=value;
	});

	/**
	*获取是否具有mipmap。
	*/
	__getset(0,__proto,'mipmap',function(){
		return this._mipmap;
	});

	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});

	__getset(0,__proto,'atlasSource',function(){
		return this._image;
	});

	/***
	*设置onload函数
	*@param value onload函数
	*/
	__getset(0,__proto,'onload',null,function(value){
		var _$this=this;
		this._onload=value;
		this._image && (this._image.onload=this._onload !=null ? (function(){
			_$this.onresize();
			_$this._onload();
		}):null);
	});

	/***
	*设置onerror函数
	*@param value onerror函数
	*/
	__getset(0,__proto,'onerror',null,function(value){
		var _$this=this;
		this._onerror=value;
		this._image && (this._image.onerror=this._onerror !=null ? (function(){
			_$this._onerror()
		}):null);
	});

	return WebGLImage;
})(HTMLImage)


	Laya.__init([DrawText,AtlasGrid,WebGLContext2D,ShaderCompile]);
})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,Event=laya.events.Event,EventDispatcher=laya.events.EventDispatcher;
	var HTMLImage=laya.resource.HTMLImage,Handler=laya.utils.Handler,Input=laya.display.Input,Loader=laya.net.Loader;
	var Matrix=laya.maths.Matrix,Render=laya.renders.Render,RunDriver=laya.utils.RunDriver,Sound=laya.media.Sound;
	var SoundChannel=laya.media.SoundChannel,SoundManager=laya.media.SoundManager,Stage=laya.display.Stage,URL=laya.net.URL;
	var Utils=laya.utils.Utils;
//class laya.wx.mini.MiniAdpter
var MiniAdpter=(function(){
	function MiniAdpter(){}
	__class(MiniAdpter,'laya.wx.mini.MiniAdpter');
	MiniAdpter.getJson=function(data){
		return JSON.parse(data);
	}

	MiniAdpter.init=function(isPosMsg,isSon){
		(isPosMsg===void 0)&& (isPosMsg=false);
		(isSon===void 0)&& (isSon=false);
		if (MiniAdpter._inited)return;
		MiniAdpter.window=/*__JS__ */window;
		if(MiniAdpter.window.navigator.userAgent.indexOf('MiniGame')<0)return;
		MiniAdpter._inited=true;
		MiniAdpter.isZiYu=isSon;
		MiniAdpter.isPosMsgYu=isPosMsg;
		MiniAdpter.EnvConfig={};
		if(!MiniAdpter.isZiYu){
			MiniFileMgr.setNativeFileDir("/layaairGame");
			MiniFileMgr.existDir(MiniFileMgr.fileNativeDir,Handler.create(MiniAdpter,MiniAdpter.onMkdirCallBack));
		}
		MiniAdpter.window.focus=function (){
		};
		Laya['getUrlPath']=function (){
		};
		MiniAdpter.window.logtime=function (str){
		};
		MiniAdpter.window.alertTimeLog=function (str){
		};
		MiniAdpter.window.resetShareInfo=function (){
		};
		MiniAdpter.window.CanvasRenderingContext2D=function (){
		};
		MiniAdpter.window.CanvasRenderingContext2D.prototype=MiniAdpter.window.wx.createCanvas().getContext('2d').__proto__;
		MiniAdpter.window.document.body.appendChild=function (){
		};
		MiniAdpter.EnvConfig.pixelRatioInt=0;
		RunDriver.getPixelRatio=MiniAdpter.pixelRatio;
		MiniAdpter._preCreateElement=Browser.createElement;
		Browser["createElement"]=MiniAdpter.createElement;
		RunDriver.createShaderCondition=MiniAdpter.createShaderCondition;
		Utils.parseXMLFromString=MiniAdpter.parseXMLFromString;
		Input['_createInputElement']=MiniInput['_createInputElement'];
		MiniAdpter.EnvConfig.load=Loader.prototype.load;
		Loader.prototype.load=MiniLoader.prototype.load;
		Loader.prototype._loadImage=MiniImage.prototype._loadImage;
		if(MiniAdpter.isZiYu && isPosMsg){
			/*__JS__ */wx.onMessage(function(message){
				if(message['isLoad']){
					MiniFileMgr.ziyuFileData[message.url]=message.data;
				}
			});
		}
	}

	MiniAdpter.onMkdirCallBack=function(errorCode,data){
		if (!errorCode)
			MiniFileMgr.filesListObj=JSON.parse(data.data);
	}

	MiniAdpter.pixelRatio=function(){
		if (!MiniAdpter.EnvConfig.pixelRatioInt){
			try {
				var systemInfo=/*__JS__ */wx.getSystemInfoSync();
				MiniAdpter.EnvConfig.pixelRatioInt=systemInfo.pixelRatio;
				systemInfo=systemInfo;
				return systemInfo.pixelRatio;
			}catch (error){}
		}
		return MiniAdpter.EnvConfig.pixelRatioInt;
	}

	MiniAdpter.createElement=function(type){
		if (type=="canvas"){
			var _source;
			if (MiniAdpter.idx==1){
				if(MiniAdpter.isZiYu){
					_source=/*__JS__ */sharedCanvas;
					_source.style={};
					}else{
					_source=/*__JS__ */window.canvas;
				}
				}else {
				_source=/*__JS__ */window.wx.createCanvas();
			}
			MiniAdpter.idx++;
			return _source;
			}else if (type=="textarea" || type=="input"){
			return MiniAdpter.onCreateInput(type);
			}else if (type=="div"){
			var node=MiniAdpter._preCreateElement(type);
			node.contains=function (value){
				return null
			};
			node.removeChild=function (value){
			};
			return node;
			}else {
			return MiniAdpter._preCreateElement(type);
		}
	}

	MiniAdpter.onCreateInput=function(type){
		var node=MiniAdpter._preCreateElement(type);
		node.focus=MiniInput.wxinputFocus;
		node.blur=MiniInput.wxinputblur;
		node.style={};
		node.value=0;
		node.parentElement={};
		node.placeholder={};
		node.type={};
		node.setColor=function (value){
		};
		node.setType=function (value){
		};
		node.setFontFace=function (value){
		};
		node.addEventListener=function (value){
		};
		node.contains=function (value){
			return null
		};
		node.removeChild=function (value){
		};
		return node;
	}

	MiniAdpter.createShaderCondition=function(conditionScript){
		var _$this=this;
		var func=function (){
			var abc=conditionScript;
			return _$this[conditionScript.replace("this.","")];
		}
		return func;
	}

	MiniAdpter.EnvConfig=null;
	MiniAdpter.window=null;
	MiniAdpter._preCreateElement=null;
	MiniAdpter._inited=false;
	MiniAdpter.wxRequest=null;
	MiniAdpter.systemInfo=null;
	MiniAdpter.version="0.0.1";
	MiniAdpter.isZiYu=false;
	MiniAdpter.isPosMsgYu=false;
	MiniAdpter.parseXMLFromString=function(value){
		var rst;
		var Parser;
		value=value.replace(/>\s+</g,'><');
		try {
			/*__JS__ */rst=(new window.Parser.DOMParser()).parseFromString(value,'text/xml');
			}catch (error){
			throw "需要引入xml解析库文件";
		}
		return rst;
	}

	MiniAdpter.idx=1;
	return MiniAdpter;
})()


//class laya.wx.mini.MiniImage
var MiniImage=(function(){
	function MiniImage(){}
	__class(MiniImage,'laya.wx.mini.MiniImage');
	var __proto=MiniImage.prototype;
	__proto._loadImage=function(url){
		var thisLoader=this;
		var isTransformUrl=false;
		if (url.indexOf("layaNativeDir/")==-1){
			isTransformUrl=true;
			url=URL.formatURL(url);
		}
		if (!MiniFileMgr.getFileInfo(url)){
			if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1)
				MiniFileMgr.downImg(url,new Handler(MiniImage,MiniImage.onDownImgCallBack,[url,thisLoader]),url);
			else
			MiniImage.onCreateImage(url,thisLoader,true);
			}else {
			MiniImage.onCreateImage(url,thisLoader,!isTransformUrl);
		}
	}

	MiniImage.onDownImgCallBack=function(sourceUrl,thisLoader,errorCode){
		if (!errorCode)
			MiniImage.onCreateImage(sourceUrl,thisLoader);
		else {
			thisLoader.onError(null);
		}
	}

	MiniImage.onCreateImage=function(sourceUrl,thisLoader,isLocal){
		(isLocal===void 0)&& (isLocal=false);
		var fileNativeUrl;
		if (!isLocal){
			var fileObj=MiniFileMgr.getFileInfo(sourceUrl);
			var fileMd5Name=fileObj.md5;
			fileNativeUrl=MiniFileMgr.getFileNativePath(fileMd5Name);
			}else {
			fileNativeUrl=sourceUrl;
		}
		if (thisLoader.imgCache==null)
			thisLoader.imgCache={};
		var image;
		function clear (){
			image.onload=null;
			image.onerror=null;
			delete thisLoader.imgCache[sourceUrl]
		};
		var onload=function (){
			clear();
			thisLoader.onLoaded(image);
		};
		var onerror=function (){
			clear();
			thisLoader.event(/*laya.events.Event.ERROR*/"error","Load image failed");
		}
		if (thisLoader._type=="nativeimage"){
			image=new Browser.window.Image();
			image.crossOrigin="";
			image.onload=onload;
			image.onerror=onerror;
			image.src=fileNativeUrl;
			thisLoader.imgCache[sourceUrl]=image;
			}else {
			new HTMLImage.create(fileNativeUrl,{onload:onload,onerror:onerror,onCreate:function (img){
					image=img;
					thisLoader.imgCache[sourceUrl]=img;
			}});
		}
	}

	return MiniImage;
})()


//class laya.wx.mini.MiniInput
var MiniInput=(function(){
	function MiniInput(){}
	__class(MiniInput,'laya.wx.mini.MiniInput');
	MiniInput._createInputElement=function(){
		Input['_initInput'](Input['area']=Browser.createElement("textarea"));
		Input['_initInput'](Input['input']=Browser.createElement("input"));
		Input['inputContainer']=Browser.createElement("div");
		Input['inputContainer'].style.position="absolute";
		Input['inputContainer'].style.zIndex=1E5;
		Browser.container.appendChild(Input['inputContainer']);
		Input['inputContainer'].setPos=function (x,y){Input['inputContainer'].style.left=x+'px';Input['inputContainer'].style.top=y+'px';};
		Laya.stage.on("resize",null,MiniInput._onStageResize);
		/*__JS__ */wx.onWindowResize && /*__JS__ */wx.onWindowResize(function(res){
			/*__JS__ */window.dispatchEvent && /*__JS__ */window.dispatchEvent("resize");
		});
		SoundManager._soundClass=MiniSound;
		SoundManager._musicClass=MiniSound;
	}

	MiniInput._onStageResize=function(){
		var ts=Laya.stage._canvasTransform.identity();
		ts.scale((Browser.width / Render.canvas.width / RunDriver.getPixelRatio()),Browser.height / Render.canvas.height / RunDriver.getPixelRatio());
	}

	MiniInput.wxinputFocus=function(e){
		var _inputTarget=Input['inputElement'].target;
		if (_inputTarget && !_inputTarget.editable){
			return;
		}
		MiniAdpter.window.wx.offKeyboardConfirm();
		MiniAdpter.window.wx.offKeyboardInput();
		MiniAdpter.window.wx.showKeyboard({defaultValue:_inputTarget.text,maxLength:_inputTarget.maxChars,multiple:_inputTarget.multiline,confirmHold:true,confirmType:'done',success:function (res){
				},fail:function (res){
		}});
		MiniAdpter.window.wx.onKeyboardConfirm(function(res){
			var str=res ? res.value :"";
			_inputTarget.text=str;
			_inputTarget.event(/*laya.events.Event.INPUT*/"input");
			laya.wx.mini.MiniInput.inputEnter();
		})
		MiniAdpter.window.wx.onKeyboardInput(function(res){
			var str=res ? res.value :"";
			if (!_inputTarget.multiline){
				if (str.indexOf("\n")!=-1){
					laya.wx.mini.MiniInput.inputEnter();
					return;
				}
			}
			_inputTarget.text=str;
			_inputTarget.event(/*laya.events.Event.INPUT*/"input");
		});
	}

	MiniInput.inputEnter=function(){
		Input['inputElement'].target.focus=false;
	}

	MiniInput.wxinputblur=function(){
		MiniInput.hideKeyboard();
	}

	MiniInput.hideKeyboard=function(){
		MiniAdpter.window.wx.offKeyboardConfirm();
		MiniAdpter.window.wx.offKeyboardInput();
		MiniAdpter.window.wx.hideKeyboard({success:function (res){
				console.log('隐藏键盘')
				},fail:function (res){
				console.log("隐藏键盘出错:"+(res ? res.errMsg :""));
		}});
	}

	return MiniInput;
})()


//class laya.wx.mini.MiniLoader
var MiniLoader=(function(){
	function MiniLoader(){}
	__class(MiniLoader,'laya.wx.mini.MiniLoader');
	var __proto=MiniLoader.prototype;
	/**
	*
	*@param url
	*@param type
	*@param cache
	*@param group
	*@param ignoreCache
	*/
	__proto.load=function(url,type,cache,group,ignoreCache){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		var thisLoader=this;
		thisLoader._url=url;
		if (url.indexOf("data:image")===0)thisLoader._type=type=/*laya.net.Loader.IMAGE*/"image";
		else {
			thisLoader._type=type || (type=thisLoader.getTypeFromUrl(url));
		}
		thisLoader._cache=cache;
		thisLoader._data=null;
		var encoding="ascii";
		if (url.indexOf(".fnt")!=-1){
			encoding="utf8";
			}else if (type=="arraybuffer"){
			encoding="";
		};
		var urlType=Utils.getFileExtension(url);
		if ((MiniLoader._fileTypeArr.indexOf(urlType)!=-1)){
			MiniAdpter.EnvConfig.load.call(this,url,type,cache,group,ignoreCache);
			}else {
			if (!MiniFileMgr.getFileInfo(url)){
				if (url.indexOf("layaNativeDir/")!=-1){
					if(MiniAdpter.isZiYu){
						var fileData=MiniFileMgr.ziyuFileData[url];
						thisLoader.onLoaded(fileData);
						return;
						}else{
						MiniFileMgr.read(url,encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]));
						return;
					}
				}
				if (URL.rootPath=="")
					var fileNativeUrl=url;
				else
				fileNativeUrl=url.split(URL.rootPath)[0];
				if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1){
					MiniAdpter.EnvConfig.load.call(thisLoader,url,type,cache,group,ignoreCache);
					}else {
					MiniFileMgr.readFile(fileNativeUrl,encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]),url);
				}
				}else {
				MiniAdpter.EnvConfig.load.call(this,url,type,cache,group,ignoreCache);
			}
		}
	}

	/**
	*清理资源
	*@param url
	*@param forceDispose
	*/
	__proto.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		var thisLoader=this;
		thisLoader.clearRes(url,forceDispose);
		var fileObj=MiniFileMgr.getFileInfo(url);
		if (fileObj && (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1)){
			var fileMd5Name=fileObj.md5;
			var fileNativeUrl=MiniFileMgr.getFileNativePath(fileMd5Name);
			MiniFileMgr.remove(fileNativeUrl);
		}
	}

	MiniLoader.onReadNativeCallBack=function(encoding,url,type,cache,group,ignoreCache,thisLoader,errorCode,data){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		(errorCode===void 0)&& (errorCode=0);
		if (!errorCode){
			var tempData;
			if (type==/*laya.net.Loader.JSON*/"json" || type==/*laya.net.Loader.ATLAS*/"atlas"){
				tempData=MiniAdpter.getJson(data.data);
				}else if (type==/*laya.net.Loader.XML*/"xml"){
				tempData=Utils.parseXMLFromString(data.data);
				}else {
				tempData=data.data;
			}
			thisLoader.onLoaded(tempData);
			if(!MiniAdpter.isZiYu &&MiniAdpter.isPosMsgYu && type !=/*laya.net.Loader.BUFFER*/"arraybuffer"){
				/*__JS__ */wx.postMessage({url:url,data:tempData,isLoad:true});
			}
			}else if (errorCode==1){
			MiniAdpter.EnvConfig.load.call(thisLoader,url,type,cache,group,ignoreCache);
		}
	}

	__static(MiniLoader,
	['_fileTypeArr',function(){return this._fileTypeArr=['png','jpg','bmp','jpeg','gif'];}
	]);
	return MiniLoader;
})()


//class laya.wx.mini.MiniFileMgr extends laya.events.EventDispatcher
var MiniFileMgr=(function(_super){
	function MiniFileMgr(){
		MiniFileMgr.__super.call(this);;
	}

	__class(MiniFileMgr,'laya.wx.mini.MiniFileMgr',_super);
	MiniFileMgr.isLoadFile=function(type){
		return MiniFileMgr._fileTypeArr.indexOf(type)!=-1 ? true :false;
	}

	MiniFileMgr.getFileInfo=function(fileUrl){
		var fileNativePath=fileUrl.split("?")[0];
		var fileObj=MiniFileMgr.filesListObj[fileNativePath];
		if (fileObj==null)
			return null;
		else
		return fileObj;
		return null;
	}

	MiniFileMgr.onFileUpdate=function(tempFilePath,readyUrl){
		var temp=tempFilePath.split("/");
		var tempFileName=temp[temp.length-1];
		var fileObj=MiniFileMgr.getFileInfo(readyUrl);
		if (fileObj==null)
			MiniFileMgr.onSaveFile(readyUrl,tempFileName);
		else {
			if (fileObj.readyUrl !=readyUrl)
				MiniFileMgr.remove(tempFileName,readyUrl);
		}
	}

	MiniFileMgr.exits=function(fileName,callBack){
		var nativeFileName=MiniFileMgr.getFileNativePath(fileName);
		MiniFileMgr.fs.getFileInfo({filePath:nativeFileName,success:function (data){
				callBack !=null && callBack.runWith([0,data]);
				},fail:function (data){
				callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.read=function(filePath,encoding,callBack,readyUrl){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		var fileUrl;
		if(readyUrl!=""){
			fileUrl=MiniFileMgr.getFileNativePath(filePath)
			}else{
			fileUrl=filePath;
		}
		MiniFileMgr.fs.readFile({filePath:fileUrl,encoding:encoding,success:function (data){
				callBack !=null && callBack.runWith([0,data]);
				},fail:function (data){
				if (data && readyUrl !="")
					MiniFileMgr.down(readyUrl,encoding,callBack,readyUrl);
				else
				callBack !=null && callBack.runWith([1]);
		}});
	}

	MiniFileMgr.readNativeFile=function(filePath,callBack){
		MiniFileMgr.fs.readFile({filePath:filePath,encoding:"",success:function (data){
				callBack !=null && callBack.runWith([0]);
				},fail:function (data){
				callBack !=null && callBack.runWith([1]);
		}});
	}

	MiniFileMgr.down=function(fileUrl,encoding,callBack,readyUrl){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		var savePath=MiniFileMgr.getFileNativePath(readyUrl);
		var downloadTask=MiniFileMgr.wxdown({url:fileUrl,filePath:savePath,success:function (data){
				if (data.statusCode===200)
					MiniFileMgr.readFile(data.filePath,encoding,callBack,readyUrl);
				},fail:function (data){
				callBack !=null && callBack.runWith([1,data]);
		}});
		downloadTask.onProgressUpdate(function(data){
			callBack !=null && callBack.runWith([2,data.progress]);
		});
	}

	MiniFileMgr.readFile=function(filePath,encoding,callBack,readyUrl){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		MiniFileMgr.fs.readFile({filePath:filePath,encoding:encoding,success:function (data){
				if (filePath.indexOf("http://")!=-1 || filePath.indexOf("https://")!=-1)
					MiniFileMgr.onFileUpdate(filePath,readyUrl);
				callBack !=null && callBack.runWith([0,data]);
				},fail:function (data){
				if (data)
					callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.downImg=function(fileUrl,callBack,readyUrl){
		(readyUrl===void 0)&& (readyUrl="");
		var downloadTask=MiniFileMgr.wxdown({url:fileUrl,success:function (data){
				if (data.statusCode===200){
					MiniFileMgr.copyFile(data.tempFilePath,readyUrl,callBack);
				}
				},fail:function (data){
				callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.copyFile=function(tempFilePath,readyUrl,callBack){
		var temp=tempFilePath.split("/");
		var tempFileName=temp[temp.length-1];
		var fileurlkey=readyUrl.split("?")[0];
		var fileObj=MiniFileMgr.getFileInfo(readyUrl);
		var saveFilePath=MiniFileMgr.getFileNativePath(tempFileName);
		MiniFileMgr.fs.copyFile({srcPath:tempFilePath,destPath:saveFilePath,success:function (data){
				if (!fileObj){
					MiniFileMgr.onSaveFile(readyUrl,tempFileName);
					callBack !=null && callBack.runWith([0]);
					}else {
					if (fileObj.readyUrl !=readyUrl)
						MiniFileMgr.remove(tempFileName,readyUrl,callBack);
				}
				},fail:function (data){
				callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.getFileNativePath=function(fileName){
		return laya.wx.mini.MiniFileMgr.fileNativeDir+"/"+fileName;
	}

	MiniFileMgr.remove=function(tempFileName,readyUrl,callBack){
		(readyUrl===void 0)&& (readyUrl="");
		var fileObj=MiniFileMgr.getFileInfo(readyUrl);
		var deleteFileUrl=MiniFileMgr.getFileNativePath(fileObj.md5);
		Laya.loader.clearRes(fileObj.readyUrl);
		MiniFileMgr.fs.unlink({filePath:deleteFileUrl,success:function (data){
				if (readyUrl !="")
					MiniFileMgr.onSaveFile(readyUrl,tempFileName);
				callBack !=null && callBack.runWith([0]);
				},fail:function (data){
		}});
	}

	MiniFileMgr.onSaveFile=function(readyUrl,md5Name){
		var fileurlkey=readyUrl.split("?")[0];
		MiniFileMgr.filesListObj[fileurlkey]={md5:md5Name,readyUrl:readyUrl};
		MiniFileMgr.fs.writeFile({filePath:MiniFileMgr.fileNativeDir+"/"+MiniFileMgr.fileListName,encoding:'utf8',data:JSON.stringify(MiniFileMgr.filesListObj),success:function (data){
				},fail:function (data){
		}});
	}

	MiniFileMgr.existDir=function(dirPath,callBack){
		MiniFileMgr.fs.mkdir({dirPath:dirPath,success:function (data){
				callBack !=null && callBack.runWith([0,{data:JSON.stringify({})}]);
				},fail:function (data){
				if (data.errMsg.indexOf("file already exists")!=-1)
					MiniFileMgr.readSync(MiniFileMgr.fileListName,"utf8",callBack);
				else
				callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.readSync=function(filePath,encoding,callBack,readyUrl){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		var fileUrl=MiniFileMgr.getFileNativePath(filePath);
		var filesListStr
		try{
			filesListStr=MiniFileMgr.fs.readFileSync(fileUrl,encoding);
			callBack !=null && callBack.runWith([0,{data:filesListStr}]);
		}
		catch(error){
			callBack !=null && callBack.runWith([1]);
		}
	}

	MiniFileMgr.setNativeFileDir=function(value){
		MiniFileMgr.fileNativeDir=/*__JS__ */wx.env.USER_DATA_PATH+value;
	}

	MiniFileMgr.filesListObj={};
	MiniFileMgr.fileNativeDir=null;
	MiniFileMgr.fileListName="layaairfiles.txt";
	MiniFileMgr.ziyuFileData={};
	__static(MiniFileMgr,
	['_fileTypeArr',function(){return this._fileTypeArr=['json','ani','xml','sk','txt','atlas','swf','part','fnt','proto','lh','lav','lani','lmat','lm','ltc'];},'fs',function(){return this.fs=/*__JS__ */wx.getFileSystemManager();},'wxdown',function(){return this.wxdown=/*__JS__ */wx.downloadFile;}
	]);
	return MiniFileMgr;
})(EventDispatcher)


//class laya.wx.mini.MiniSound extends laya.events.EventDispatcher
var MiniSound=(function(_super){
	function MiniSound(){
		this._sound=null;
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		MiniSound.__super.call(this);
		this._sound=MiniSound._createSound();
	}

	__class(MiniSound,'laya.wx.mini.MiniSound',_super);
	var __proto=MiniSound.prototype;
	/**
	*加载声音。
	*@param url 地址。
	*
	*/
	__proto.load=function(url){
		var _$this=this;
		url=URL.formatURL(url);
		this.url=url;
		if (MiniSound._audioCache[url]){
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		this._sound.src=url;
		this._sound.onCanplay(onCanPlay);
		var me=this;
		function onCanPlay (){
			_clearSound();
			me.loaded=true;
			me.event(/*laya.events.Event.COMPLETE*/"complete");
			MiniSound._audioCache[me.url]=me;
		}
		this._sound.onError(onError);
		function onError (){
			_clearSound();
			me.event(/*laya.events.Event.ERROR*/"error");
		}
		function _clearSound (){
			_$this._sound.onCanplay(null);
			_$this._sound.onError(null);
		}
	}

	/**
	*播放声音。
	*@param startTime 开始时间,单位秒
	*@param loops 循环次数,0表示一直循环
	*@return 声道 SoundChannel 对象。
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		var tSound;
		if (this.url==SoundManager._tMusic){
			if (!MiniSound._musicAudio)MiniSound._musicAudio=MiniSound._createSound();
			tSound=MiniSound._musicAudio;
			}else {
			tSound=MiniSound._createSound();
		}
		tSound.src=this.url;
		var channel=new MiniSoundChannel(tSound);
		channel.url=this.url;
		channel.loops=loops;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	/**
	*释放声音资源。
	*
	*/
	__proto.dispose=function(){
		var ad=MiniSound._audioCache[this.url];
		if (ad){
			ad.src="";
			delete MiniSound._audioCache[this.url];
		}
	}

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return this._sound.duration;
	});

	MiniSound._createSound=function(){
		MiniSound._id++;
		return MiniAdpter.window.wx.createInnerAudioContext();
	}

	MiniSound._musicAudio=null;
	MiniSound._id=0;
	MiniSound._audioCache={};
	return MiniSound;
})(EventDispatcher)


/**
*@private
*wxaudio 方式播放声音的音轨控制
*/
//class laya.wx.mini.MiniSoundChannel extends laya.media.SoundChannel
var MiniSoundChannel=(function(_super){
	function MiniSoundChannel(audio){
		this._audio=null;
		this._onEnd=null;
		MiniSoundChannel.__super.call(this);
		this._audio=audio;
		this._onEnd=Utils.bind(this.__onEnd,this);
		audio.onEnded(this._onEnd);
	}

	__class(MiniSoundChannel,'laya.wx.mini.MiniSoundChannel',_super);
	var __proto=MiniSoundChannel.prototype;
	__proto.__onEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	/**
	*播放
	*/
	__proto.play=function(){
		this.isStopped=false;
		SoundManager.addChannel(this);
		this._audio.play();
	}

	/**
	*停止播放
	*
	*/
	__proto.stop=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if (!this._audio)
			return;
		this._audio.stop();
		this._audio.onEnded(null);
		this._audio=null;
	}

	__proto.pause=function(){
		this.isStopped=true;
		this._audio.pause();
	}

	__proto.resume=function(){
		if (!this._audio)
			return;
		this.isStopped=false;
		SoundManager.addChannel(this);
		this._audio.play();
	}

	/**
	*当前播放到的位置
	*@return
	*
	*/
	__getset(0,__proto,'position',function(){
		if (!this._audio)
			return 0;
		return this._audio.currentTime;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		if (!this._audio)
			return 0;
		return this._audio.duration;
	});

	/**
	*设置音量
	*@param v
	*
	*/
	/**
	*获取音量
	*@return
	*
	*/
	__getset(0,__proto,'volume',function(){
		return 1;
		},function(v){
	});

	return MiniSoundChannel;
})(SoundChannel)



})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}
/*
 * Copyright (c) 2015 cannon.js Authors
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
!function (e) {
    // if ("object" == typeof exports && "undefined" != typeof module)
    //   module.exports = e();
    // else if ("function" == typeof define && false)
    //   define([], e);
    // else {
    var f;
    "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self),
        f.CANNON = e()
    // }
}(function () {
    var define, module, exports;
    return (function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    throw new Error("Cannot find module '" + o + "'")
                }
                var f = n[o] = {
                    exports: {}
                };
                t[o][0].call(f.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e)
                }, f, f.exports, e, t, n, r)
            }
            return n[o].exports
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s
    }
    )({
        1: [function (_dereq_, module, exports) {
            module.exports = {
                "name": "cannon",
                "version": "0.6.2",
                "description": "A lightweight 3D physics engine written in JavaScript.",
                "homepage": "https://github.com/schteppe/cannon.js",
                "author": "Stefan Hedman <schteppe@gmail.com> (http://steffe.se)",
                "keywords": [
                    "cannon.js",
                    "cannon",
                    "physics",
                    "engine",
                    "3d"
                ],
                "main": "./build/cannon.js",
                "engines": {
                    "node": "*"
                },
                "repository": {
                    "type": "git",
                    "url": "https://github.com/schteppe/cannon.js.git"
                },
                "bugs": {
                    "url": "https://github.com/schteppe/cannon.js/issues"
                },
                "licenses": [
                    {
                        "type": "MIT"
                    }
                ],
                "devDependencies": {
                    "jshint": "latest",
                    "uglify-js": "latest",
                    "nodeunit": "^0.9.0",
                    "grunt": "~0.4.0",
                    "grunt-contrib-jshint": "~0.1.1",
                    "grunt-contrib-nodeunit": "^0.4.1",
                    "grunt-contrib-concat": "~0.1.3",
                    "grunt-contrib-uglify": "^0.5.1",
                    "grunt-browserify": "^2.1.4",
                    "grunt-contrib-yuidoc": "^0.5.2",
                    "browserify": "*"
                },
                "dependencies": {}
            }

        }, {}], 2: [function (_dereq_, module, exports) {
            // Export classes
            module.exports = {
                version: _dereq_('../package.json').version,

                AABB: _dereq_('./collision/AABB'),
                ArrayCollisionMatrix: _dereq_('./collision/ArrayCollisionMatrix'),
                Body: _dereq_('./objects/Body'),
                Box: _dereq_('./shapes/Box'),
                Broadphase: _dereq_('./collision/Broadphase'),
                Constraint: _dereq_('./constraints/Constraint'),
                ContactEquation: _dereq_('./equations/ContactEquation'),
                Narrowphase: _dereq_('./world/Narrowphase'),
                ConeTwistConstraint: _dereq_('./constraints/ConeTwistConstraint'),
                ContactMaterial: _dereq_('./material/ContactMaterial'),
                ConvexPolyhedron: _dereq_('./shapes/ConvexPolyhedron'),
                Cylinder: _dereq_('./shapes/Cylinder'),
                DistanceConstraint: _dereq_('./constraints/DistanceConstraint'),
                Equation: _dereq_('./equations/Equation'),
                EventTarget: _dereq_('./utils/EventTarget'),
                FrictionEquation: _dereq_('./equations/FrictionEquation'),
                GSSolver: _dereq_('./solver/GSSolver'),
                GridBroadphase: _dereq_('./collision/GridBroadphase'),
                Heightfield: _dereq_('./shapes/Heightfield'),
                HingeConstraint: _dereq_('./constraints/HingeConstraint'),
                LockConstraint: _dereq_('./constraints/LockConstraint'),
                Mat3: _dereq_('./math/Mat3'),
                Material: _dereq_('./material/Material'),
                NaiveBroadphase: _dereq_('./collision/NaiveBroadphase'),
                ObjectCollisionMatrix: _dereq_('./collision/ObjectCollisionMatrix'),
                Pool: _dereq_('./utils/Pool'),
                Particle: _dereq_('./shapes/Particle'),
                Plane: _dereq_('./shapes/Plane'),
                PointToPointConstraint: _dereq_('./constraints/PointToPointConstraint'),
                Quaternion: _dereq_('./math/Quaternion'),
                Ray: _dereq_('./collision/Ray'),
                RaycastVehicle: _dereq_('./objects/RaycastVehicle'),
                RaycastResult: _dereq_('./collision/RaycastResult'),
                RigidVehicle: _dereq_('./objects/RigidVehicle'),
                RotationalEquation: _dereq_('./equations/RotationalEquation'),
                RotationalMotorEquation: _dereq_('./equations/RotationalMotorEquation'),
                SAPBroadphase: _dereq_('./collision/SAPBroadphase'),
                SPHSystem: _dereq_('./objects/SPHSystem'),
                Shape: _dereq_('./shapes/Shape'),
                Solver: _dereq_('./solver/Solver'),
                Sphere: _dereq_('./shapes/Sphere'),
                SplitSolver: _dereq_('./solver/SplitSolver'),
                Spring: _dereq_('./objects/Spring'),
                Trimesh: _dereq_('./shapes/Trimesh'),
                Vec3: _dereq_('./math/Vec3'),
                Vec3Pool: _dereq_('./utils/Vec3Pool'),
                World: _dereq_('./world/World'),
            };

        }, { "../package.json": 1, "./collision/AABB": 3, "./collision/ArrayCollisionMatrix": 4, "./collision/Broadphase": 5, "./collision/GridBroadphase": 6, "./collision/NaiveBroadphase": 7, "./collision/ObjectCollisionMatrix": 8, "./collision/Ray": 9, "./collision/RaycastResult": 10, "./collision/SAPBroadphase": 11, "./constraints/ConeTwistConstraint": 12, "./constraints/Constraint": 13, "./constraints/DistanceConstraint": 14, "./constraints/HingeConstraint": 15, "./constraints/LockConstraint": 16, "./constraints/PointToPointConstraint": 17, "./equations/ContactEquation": 19, "./equations/Equation": 20, "./equations/FrictionEquation": 21, "./equations/RotationalEquation": 22, "./equations/RotationalMotorEquation": 23, "./material/ContactMaterial": 24, "./material/Material": 25, "./math/Mat3": 27, "./math/Quaternion": 28, "./math/Vec3": 30, "./objects/Body": 31, "./objects/RaycastVehicle": 32, "./objects/RigidVehicle": 33, "./objects/SPHSystem": 34, "./objects/Spring": 35, "./shapes/Box": 37, "./shapes/ConvexPolyhedron": 38, "./shapes/Cylinder": 39, "./shapes/Heightfield": 40, "./shapes/Particle": 41, "./shapes/Plane": 42, "./shapes/Shape": 43, "./shapes/Sphere": 44, "./shapes/Trimesh": 45, "./solver/GSSolver": 46, "./solver/Solver": 47, "./solver/SplitSolver": 48, "./utils/EventTarget": 49, "./utils/Pool": 51, "./utils/Vec3Pool": 54, "./world/Narrowphase": 55, "./world/World": 56 }], 3: [function (_dereq_, module, exports) {
            var Vec3 = _dereq_('../math/Vec3');
            var Utils = _dereq_('../utils/Utils');

            module.exports = AABB;

            /**
             * Axis aligned bounding box class.
             * @class AABB
             * @constructor
             * @param {Object} [options]
             * @param {Vec3}   [options.upperBound]
             * @param {Vec3}   [options.lowerBound]
             */
            function AABB(options) {
                options = options || {};

                /**
                 * The lower bound of the bounding box.
                 * @property lowerBound
                 * @type {Vec3}
                 */
                this.lowerBound = new Vec3();
                if (options.lowerBound) {
                    this.lowerBound.copy(options.lowerBound);
                }

                /**
                 * The upper bound of the bounding box.
                 * @property upperBound
                 * @type {Vec3}
                 */
                this.upperBound = new Vec3();
                if (options.upperBound) {
                    this.upperBound.copy(options.upperBound);
                }
            }

            var tmp = new Vec3();

            /**
             * Set the AABB bounds from a set of points.
             * @method setFromPoints
             * @param {Array} points An array of Vec3's.
             * @param {Vec3} position
             * @param {Quaternion} quaternion
             * @param {number} skinSize
             * @return {AABB} The self object
             */
            AABB.prototype.setFromPoints = function (points, position, quaternion, skinSize) {
                var l = this.lowerBound,
                    u = this.upperBound,
                    q = quaternion;

                // Set to the first point
                l.copy(points[0]);
                if (q) {
                    q.vmult(l, l);
                }
                u.copy(l);

                for (var i = 1; i < points.length; i++) {
                    var p = points[i];

                    if (q) {
                        q.vmult(p, tmp);
                        p = tmp;
                    }

                    if (p.x > u.x) { u.x = p.x; }
                    if (p.x < l.x) { l.x = p.x; }
                    if (p.y > u.y) { u.y = p.y; }
                    if (p.y < l.y) { l.y = p.y; }
                    if (p.z > u.z) { u.z = p.z; }
                    if (p.z < l.z) { l.z = p.z; }
                }

                // Add offset
                if (position) {
                    position.vadd(l, l);
                    position.vadd(u, u);
                }

                if (skinSize) {
                    l.x -= skinSize;
                    l.y -= skinSize;
                    l.z -= skinSize;
                    u.x += skinSize;
                    u.y += skinSize;
                    u.z += skinSize;
                }

                return this;
            };

            /**
             * Copy bounds from an AABB to this AABB
             * @method copy
             * @param  {AABB} aabb Source to copy from
             * @return {AABB} The this object, for chainability
             */
            AABB.prototype.copy = function (aabb) {
                this.lowerBound.copy(aabb.lowerBound);
                this.upperBound.copy(aabb.upperBound);
                return this;
            };

            /**
             * Clone an AABB
             * @method clone
             */
            AABB.prototype.clone = function () {
                return new AABB().copy(this);
            };

            /**
             * Extend this AABB so that it covers the given AABB too.
             * @method extend
             * @param  {AABB} aabb
             */
            AABB.prototype.extend = function (aabb) {
                // Extend lower bound
                var l = aabb.lowerBound.x;
                if (this.lowerBound.x > l) {
                    this.lowerBound.x = l;
                }

                // Upper
                var u = aabb.upperBound.x;
                if (this.upperBound.x < u) {
                    this.upperBound.x = u;
                }

                // Extend lower bound
                var l = aabb.lowerBound.y;
                if (this.lowerBound.y > l) {
                    this.lowerBound.y = l;
                }

                // Upper
                var u = aabb.upperBound.y;
                if (this.upperBound.y < u) {
                    this.upperBound.y = u;
                }

                // Extend lower bound
                var l = aabb.lowerBound.z;
                if (this.lowerBound.z > l) {
                    this.lowerBound.z = l;
                }

                // Upper
                var u = aabb.upperBound.z;
                if (this.upperBound.z < u) {
                    this.upperBound.z = u;
                }
            };

            /**
             * Returns true if the given AABB overlaps this AABB.
             * @method overlaps
             * @param  {AABB} aabb
             * @return {Boolean}
             */
            AABB.prototype.overlaps = function (aabb) {
                var l1 = this.lowerBound,
                    u1 = this.upperBound,
                    l2 = aabb.lowerBound,
                    u2 = aabb.upperBound;

                //      l2        u2
                //      |---------|
                // |--------|
                // l1       u1

                return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&
                    ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&
                    ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));
            };

            /**
             * Returns true if the given AABB is fully contained in this AABB.
             * @method contains
             * @param {AABB} aabb
             * @return {Boolean}
             */
            AABB.prototype.contains = function (aabb) {
                var l1 = this.lowerBound,
                    u1 = this.upperBound,
                    l2 = aabb.lowerBound,
                    u2 = aabb.upperBound;

                //      l2        u2
                //      |---------|
                // |---------------|
                // l1              u1

                return (
                    (l1.x <= l2.x && u1.x >= u2.x) &&
                    (l1.y <= l2.y && u1.y >= u2.y) &&
                    (l1.z <= l2.z && u1.z >= u2.z)
                );
            };

            /**
             * @method getCorners
             * @param {Vec3} a
             * @param {Vec3} b
             * @param {Vec3} c
             * @param {Vec3} d
             * @param {Vec3} e
             * @param {Vec3} f
             * @param {Vec3} g
             * @param {Vec3} h
             */
            AABB.prototype.getCorners = function (a, b, c, d, e, f, g, h) {
                var l = this.lowerBound,
                    u = this.upperBound;

                a.copy(l);
                b.set(u.x, l.y, l.z);
                c.set(u.x, u.y, l.z);
                d.set(l.x, u.y, u.z);
                e.set(u.x, l.y, l.z);
                f.set(l.x, u.y, l.z);
                g.set(l.x, l.y, u.z);
                h.copy(u);
            };

            var transformIntoFrame_corners = [
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3()
            ];

            /**
             * Get the representation of an AABB in another frame.
             * @method toLocalFrame
             * @param  {Transform} frame
             * @param  {AABB} target
             * @return {AABB} The "target" AABB object.
             */
            AABB.prototype.toLocalFrame = function (frame, target) {

                var corners = transformIntoFrame_corners;
                var a = corners[0];
                var b = corners[1];
                var c = corners[2];
                var d = corners[3];
                var e = corners[4];
                var f = corners[5];
                var g = corners[6];
                var h = corners[7];

                // Get corners in current frame
                this.getCorners(a, b, c, d, e, f, g, h);

                // Transform them to new local frame
                for (var i = 0; i !== 8; i++) {
                    var corner = corners[i];
                    frame.pointToLocal(corner, corner);
                }

                return target.setFromPoints(corners);
            };

            /**
             * Get the representation of an AABB in the global frame.
             * @method toWorldFrame
             * @param  {Transform} frame
             * @param  {AABB} target
             * @return {AABB} The "target" AABB object.
             */
            AABB.prototype.toWorldFrame = function (frame, target) {

                var corners = transformIntoFrame_corners;
                var a = corners[0];
                var b = corners[1];
                var c = corners[2];
                var d = corners[3];
                var e = corners[4];
                var f = corners[5];
                var g = corners[6];
                var h = corners[7];

                // Get corners in current frame
                this.getCorners(a, b, c, d, e, f, g, h);

                // Transform them to new local frame
                for (var i = 0; i !== 8; i++) {
                    var corner = corners[i];
                    frame.pointToWorld(corner, corner);
                }

                return target.setFromPoints(corners);
            };

        }, { "../math/Vec3": 30, "../utils/Utils": 53 }], 4: [function (_dereq_, module, exports) {
            module.exports = ArrayCollisionMatrix;

            /**
             * Collision "matrix". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step
             * @class ArrayCollisionMatrix
             * @constructor
             */
            function ArrayCollisionMatrix() {

                /**
                 * The matrix storage
                 * @property matrix
                 * @type {Array}
                 */
                this.matrix = [];
            }

            /**
             * Get an element
             * @method get
             * @param  {Number} i
             * @param  {Number} j
             * @return {Number}
             */
            ArrayCollisionMatrix.prototype.get = function (i, j) {
                i = i.index;
                j = j.index;
                if (j > i) {
                    var temp = j;
                    j = i;
                    i = temp;
                }
                return this.matrix[(i * (i + 1) >> 1) + j - 1];
            };

            /**
             * Set an element
             * @method set
             * @param {Number} i
             * @param {Number} j
             * @param {Number} value
             */
            ArrayCollisionMatrix.prototype.set = function (i, j, value) {
                i = i.index;
                j = j.index;
                if (j > i) {
                    var temp = j;
                    j = i;
                    i = temp;
                }
                this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;
            };

            /**
             * Sets all elements to zero
             * @method reset
             */
            ArrayCollisionMatrix.prototype.reset = function () {
                for (var i = 0, l = this.matrix.length; i !== l; i++) {
                    this.matrix[i] = 0;
                }
            };

            /**
             * Sets the max number of objects
             * @method setNumObjects
             * @param {Number} n
             */
            ArrayCollisionMatrix.prototype.setNumObjects = function (n) {
                this.matrix.length = n * (n - 1) >> 1;
            };

        }, {}], 5: [function (_dereq_, module, exports) {
            var Body = _dereq_('../objects/Body');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Shape = _dereq_('../shapes/Shape');
            var Plane = _dereq_('../shapes/Plane');

            module.exports = Broadphase;

            /**
             * Base class for broadphase implementations
             * @class Broadphase
             * @constructor
             * @author schteppe
             */
            function Broadphase() {
                /**
                * The world to search for collisions in.
                * @property world
                * @type {World}
                */
                this.world = null;

                /**
                 * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.
                 * @property useBoundingBoxes
                 * @type {Boolean}
                 */
                this.useBoundingBoxes = false;

                /**
                 * Set to true if the objects in the world moved.
                 * @property {Boolean} dirty
                 */
                this.dirty = true;
            }

            /**
             * Get the collision pairs from the world
             * @method collisionPairs
             * @param {World} world The world to search in
             * @param {Array} p1 Empty array to be filled with body objects
             * @param {Array} p2 Empty array to be filled with body objects
             */
            Broadphase.prototype.collisionPairs = function (world, p1, p2) {
                throw new Error("collisionPairs not implemented for this BroadPhase class!");
            };

            /**
             * Check if a body pair needs to be intersection tested at all.
             * @method needBroadphaseCollision
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @return {bool}
             */
            var Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;
            Broadphase.prototype.needBroadphaseCollision = function (bodyA, bodyB) {

                // Check collision filter masks
                if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {
                    return false;
                }

                // Check types
                if (((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) &&
                    ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {
                    // Both bodies are static, kinematic or sleeping. Skip.
                    return false;
                }

                return true;
            };

            /**
             * Check if the bounding volumes of two bodies intersect.
             * @method intersectionTest
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {array} pairs1
             * @param {array} pairs2
              */
            Broadphase.prototype.intersectionTest = function (bodyA, bodyB, pairs1, pairs2) {
                if (this.useBoundingBoxes) {
                    this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);
                } else {
                    this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);
                }
            };

            /**
             * Check if the bounding spheres of two bodies are intersecting.
             * @method doBoundingSphereBroadphase
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Array} pairs1 bodyA is appended to this array if intersection
             * @param {Array} pairs2 bodyB is appended to this array if intersection
             */
            var Broadphase_collisionPairs_r = new Vec3(), // Temp objects
                Broadphase_collisionPairs_normal = new Vec3(),
                Broadphase_collisionPairs_quat = new Quaternion(),
                Broadphase_collisionPairs_relpos = new Vec3();
            Broadphase.prototype.doBoundingSphereBroadphase = function (bodyA, bodyB, pairs1, pairs2) {
                var r = Broadphase_collisionPairs_r;
                bodyB.position.vsub(bodyA.position, r);
                var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);
                var norm2 = r.norm2();
                if (norm2 < boundingRadiusSum2) {
                    pairs1.push(bodyA);
                    pairs2.push(bodyB);
                }
            };

            /**
             * Check if the bounding boxes of two bodies are intersecting.
             * @method doBoundingBoxBroadphase
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Array} pairs1
             * @param {Array} pairs2
             */
            Broadphase.prototype.doBoundingBoxBroadphase = function (bodyA, bodyB, pairs1, pairs2) {
                if (bodyA.aabbNeedsUpdate) {
                    bodyA.computeAABB();
                }
                if (bodyB.aabbNeedsUpdate) {
                    bodyB.computeAABB();
                }

                // Check AABB / AABB
                if (bodyA.aabb.overlaps(bodyB.aabb)) {
                    pairs1.push(bodyA);
                    pairs2.push(bodyB);
                }
            };

            /**
             * Removes duplicate pairs from the pair arrays.
             * @method makePairsUnique
             * @param {Array} pairs1
             * @param {Array} pairs2
             */
            var Broadphase_makePairsUnique_temp = { keys: [] },
                Broadphase_makePairsUnique_p1 = [],
                Broadphase_makePairsUnique_p2 = [];
            Broadphase.prototype.makePairsUnique = function (pairs1, pairs2) {
                var t = Broadphase_makePairsUnique_temp,
                    p1 = Broadphase_makePairsUnique_p1,
                    p2 = Broadphase_makePairsUnique_p2,
                    N = pairs1.length;

                for (var i = 0; i !== N; i++) {
                    p1[i] = pairs1[i];
                    p2[i] = pairs2[i];
                }

                pairs1.length = 0;
                pairs2.length = 0;

                for (var i = 0; i !== N; i++) {
                    var id1 = p1[i].id,
                        id2 = p2[i].id;
                    var key = id1 < id2 ? id1 + "," + id2 : id2 + "," + id1;
                    t[key] = i;
                    t.keys.push(key);
                }

                for (var i = 0; i !== t.keys.length; i++) {
                    var key = t.keys.pop(),
                        pairIndex = t[key];
                    pairs1.push(p1[pairIndex]);
                    pairs2.push(p2[pairIndex]);
                    delete t[key];
                }
            };

            /**
             * To be implemented by subcasses
             * @method setWorld
             * @param {World} world
             */
            Broadphase.prototype.setWorld = function (world) {
            };

            /**
             * Check if the bounding spheres of two bodies overlap.
             * @method boundingSphereCheck
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @return {boolean}
             */
            var bsc_dist = new Vec3();
            Broadphase.boundingSphereCheck = function (bodyA, bodyB) {
                var dist = bsc_dist;
                bodyA.position.vsub(bodyB.position, dist);
                return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius, 2) > dist.norm2();
            };

            /**
             * Returns all the bodies within the AABB.
             * @method aabbQuery
             * @param  {World} world
             * @param  {AABB} aabb
             * @param  {array} result An array to store resulting bodies in.
             * @return {array}
             */
            Broadphase.prototype.aabbQuery = function (world, aabb, result) {
                console.warn('.aabbQuery is not implemented in this Broadphase subclass.');
                return [];
            };
        }, { "../math/Quaternion": 28, "../math/Vec3": 30, "../objects/Body": 31, "../shapes/Plane": 42, "../shapes/Shape": 43 }], 6: [function (_dereq_, module, exports) {
            module.exports = GridBroadphase;

            var Broadphase = _dereq_('./Broadphase');
            var Vec3 = _dereq_('../math/Vec3');
            var Shape = _dereq_('../shapes/Shape');

            /**
             * Axis aligned uniform grid broadphase.
             * @class GridBroadphase
             * @constructor
             * @extends Broadphase
             * @todo Needs support for more than just planes and spheres.
             * @param {Vec3} aabbMin
             * @param {Vec3} aabbMax
             * @param {Number} nx Number of boxes along x
             * @param {Number} ny Number of boxes along y
             * @param {Number} nz Number of boxes along z
             */
            function GridBroadphase(aabbMin, aabbMax, nx, ny, nz) {
                Broadphase.apply(this);
                this.nx = nx || 10;
                this.ny = ny || 10;
                this.nz = nz || 10;
                this.aabbMin = aabbMin || new Vec3(100, 100, 100);
                this.aabbMax = aabbMax || new Vec3(-100, -100, -100);
                var nbins = this.nx * this.ny * this.nz;
                if (nbins <= 0) {
                    throw "GridBroadphase: Each dimension's n must be >0";
                }
                this.bins = [];
                this.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow
                this.bins.length = nbins;
                this.binLengths.length = nbins;
                for (var i = 0; i < nbins; i++) {
                    this.bins[i] = [];
                    this.binLengths[i] = 0;
                }
            }
            GridBroadphase.prototype = new Broadphase();
            GridBroadphase.prototype.constructor = GridBroadphase;

            /**
             * Get all the collision pairs in the physics world
             * @method collisionPairs
             * @param {World} world
             * @param {Array} pairs1
             * @param {Array} pairs2
             */
            var GridBroadphase_collisionPairs_d = new Vec3();
            var GridBroadphase_collisionPairs_binPos = new Vec3();
            GridBroadphase.prototype.collisionPairs = function (world, pairs1, pairs2) {
                var N = world.numObjects(),
                    bodies = world.bodies;

                var max = this.aabbMax,
                    min = this.aabbMin,
                    nx = this.nx,
                    ny = this.ny,
                    nz = this.nz;

                var xstep = ny * nz;
                var ystep = nz;
                var zstep = 1;

                var xmax = max.x,
                    ymax = max.y,
                    zmax = max.z,
                    xmin = min.x,
                    ymin = min.y,
                    zmin = min.z;

                var xmult = nx / (xmax - xmin),
                    ymult = ny / (ymax - ymin),
                    zmult = nz / (zmax - zmin);

                var binsizeX = (xmax - xmin) / nx,
                    binsizeY = (ymax - ymin) / ny,
                    binsizeZ = (zmax - zmin) / nz;

                var binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;

                var types = Shape.types;
                var SPHERE = types.SPHERE,
                    PLANE = types.PLANE,
                    BOX = types.BOX,
                    COMPOUND = types.COMPOUND,
                    CONVEXPOLYHEDRON = types.CONVEXPOLYHEDRON;

                var bins = this.bins,
                    binLengths = this.binLengths,
                    Nbins = this.bins.length;

                // Reset bins
                for (var i = 0; i !== Nbins; i++) {
                    binLengths[i] = 0;
                }

                var ceil = Math.ceil;
                var min = Math.min;
                var max = Math.max;

                function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {
                    var xoff0 = ((x0 - xmin) * xmult) | 0,
                        yoff0 = ((y0 - ymin) * ymult) | 0,
                        zoff0 = ((z0 - zmin) * zmult) | 0,
                        xoff1 = ceil((x1 - xmin) * xmult),
                        yoff1 = ceil((y1 - ymin) * ymult),
                        zoff1 = ceil((z1 - zmin) * zmult);

                    if (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }
                    if (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }
                    if (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }
                    if (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }
                    if (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }
                    if (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }

                    xoff0 *= xstep;
                    yoff0 *= ystep;
                    zoff0 *= zstep;
                    xoff1 *= xstep;
                    yoff1 *= ystep;
                    zoff1 *= zstep;

                    for (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {
                        for (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {
                            for (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {
                                var idx = xoff + yoff + zoff;
                                bins[idx][binLengths[idx]++] = bi;
                            }
                        }
                    }
                }

                // Put all bodies into the bins
                for (var i = 0; i !== N; i++) {
                    var bi = bodies[i];
                    var si = bi.shape;

                    switch (si.type) {
                        case SPHERE:
                            // Put in bin
                            // check if overlap with other bins
                            var x = bi.position.x,
                                y = bi.position.y,
                                z = bi.position.z;
                            var r = si.radius;

                            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);
                            break;

                        case PLANE:
                            if (si.worldNormalNeedsUpdate) {
                                si.computeWorldNormal(bi.quaternion);
                            }
                            var planeNormal = si.worldNormal;

                            //Relative position from origin of plane object to the first bin
                            //Incremented as we iterate through the bins
                            var xreset = xmin + binsizeX * 0.5 - bi.position.x,
                                yreset = ymin + binsizeY * 0.5 - bi.position.y,
                                zreset = zmin + binsizeZ * 0.5 - bi.position.z;

                            var d = GridBroadphase_collisionPairs_d;
                            d.set(xreset, yreset, zreset);

                            for (var xi = 0, xoff = 0; xi !== nx; xi++ , xoff += xstep, d.y = yreset, d.x += binsizeX) {
                                for (var yi = 0, yoff = 0; yi !== ny; yi++ , yoff += ystep, d.z = zreset, d.y += binsizeY) {
                                    for (var zi = 0, zoff = 0; zi !== nz; zi++ , zoff += zstep, d.z += binsizeZ) {
                                        if (d.dot(planeNormal) < binRadius) {
                                            var idx = xoff + yoff + zoff;
                                            bins[idx][binLengths[idx]++] = bi;
                                        }
                                    }
                                }
                            }
                            break;

                        default:
                            if (bi.aabbNeedsUpdate) {
                                bi.computeAABB();
                            }

                            addBoxToBins(
                                bi.aabb.lowerBound.x,
                                bi.aabb.lowerBound.y,
                                bi.aabb.lowerBound.z,
                                bi.aabb.upperBound.x,
                                bi.aabb.upperBound.y,
                                bi.aabb.upperBound.z,
                                bi);
                            break;
                    }
                }

                // Check each bin
                for (var i = 0; i !== Nbins; i++) {
                    var binLength = binLengths[i];
                    //Skip bins with no potential collisions
                    if (binLength > 1) {
                        var bin = bins[i];

                        // Do N^2 broadphase inside
                        for (var xi = 0; xi !== binLength; xi++) {
                            var bi = bin[xi];
                            for (var yi = 0; yi !== xi; yi++) {
                                var bj = bin[yi];
                                if (this.needBroadphaseCollision(bi, bj)) {
                                    this.intersectionTest(bi, bj, pairs1, pairs2);
                                }
                            }
                        }
                    }
                }

                //	for (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {
                //		console.log("layer "+zi);
                //		for (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {
                //			var row = '';
                //			for (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {
                //				var idx = xoff + yoff + zoff;
                //				row += ' ' + binLengths[idx];
                //			}
                //			console.log(row);
                //		}
                //	}

                this.makePairsUnique(pairs1, pairs2);
            };

        }, { "../math/Vec3": 30, "../shapes/Shape": 43, "./Broadphase": 5 }], 7: [function (_dereq_, module, exports) {
            module.exports = NaiveBroadphase;

            var Broadphase = _dereq_('./Broadphase');
            var AABB = _dereq_('./AABB');

            /**
             * Naive broadphase implementation, used in lack of better ones.
             * @class NaiveBroadphase
             * @constructor
             * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)
             * @extends Broadphase
             */
            function NaiveBroadphase() {
                Broadphase.apply(this);
            }
            NaiveBroadphase.prototype = new Broadphase();
            NaiveBroadphase.prototype.constructor = NaiveBroadphase;

            /**
             * Get all the collision pairs in the physics world
             * @method collisionPairs
             * @param {World} world
             * @param {Array} pairs1
             * @param {Array} pairs2
             */
            NaiveBroadphase.prototype.collisionPairs = function (world, pairs1, pairs2) {
                var bodies = world.bodies,
                    n = bodies.length,
                    i, j, bi, bj;

                // Naive N^2 ftw!
                for (i = 0; i !== n; i++) {
                    for (j = 0; j !== i; j++) {

                        bi = bodies[i];
                        bj = bodies[j];

                        if (!this.needBroadphaseCollision(bi, bj)) {
                            continue;
                        }

                        this.intersectionTest(bi, bj, pairs1, pairs2);
                    }
                }
            };

            var tmpAABB = new AABB();

            /**
             * Returns all the bodies within an AABB.
             * @method aabbQuery
             * @param  {World} world
             * @param  {AABB} aabb
             * @param {array} result An array to store resulting bodies in.
             * @return {array}
             */
            NaiveBroadphase.prototype.aabbQuery = function (world, aabb, result) {
                result = result || [];

                for (var i = 0; i < world.bodies.length; i++) {
                    var b = world.bodies[i];

                    if (b.aabbNeedsUpdate) {
                        b.computeAABB();
                    }

                    // Ugly hack until Body gets aabb
                    if (b.aabb.overlaps(aabb)) {
                        result.push(b);
                    }
                }

                return result;
            };
        }, { "./AABB": 3, "./Broadphase": 5 }], 8: [function (_dereq_, module, exports) {
            module.exports = ObjectCollisionMatrix;

            /**
             * Records what objects are colliding with each other
             * @class ObjectCollisionMatrix
             * @constructor
             */
            function ObjectCollisionMatrix() {

                /**
                 * The matrix storage
                 * @property matrix
                 * @type {Object}
                 */
                this.matrix = {};
            }

            /**
             * @method get
             * @param  {Number} i
             * @param  {Number} j
             * @return {Number}
             */
            ObjectCollisionMatrix.prototype.get = function (i, j) {
                i = i.id;
                j = j.id;
                if (j > i) {
                    var temp = j;
                    j = i;
                    i = temp;
                }
                return i + '-' + j in this.matrix;
            };

            /**
             * @method set
             * @param  {Number} i
             * @param  {Number} j
             * @param {Number} value
             */
            ObjectCollisionMatrix.prototype.set = function (i, j, value) {
                i = i.id;
                j = j.id;
                if (j > i) {
                    var temp = j;
                    j = i;
                    i = temp;
                }
                if (value) {
                    this.matrix[i + '-' + j] = true;
                }
                else {
                    delete this.matrix[i + '-' + j];
                }
            };

            /**
             * Empty the matrix
             * @method reset
             */
            ObjectCollisionMatrix.prototype.reset = function () {
                this.matrix = {};
            };

            /**
             * Set max number of objects
             * @method setNumObjects
             * @param {Number} n
             */
            ObjectCollisionMatrix.prototype.setNumObjects = function (n) {
            };

        }, {}], 9: [function (_dereq_, module, exports) {
            module.exports = Ray;

            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Transform = _dereq_('../math/Transform');
            var ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');
            var Box = _dereq_('../shapes/Box');
            var RaycastResult = _dereq_('../collision/RaycastResult');
            var Shape = _dereq_('../shapes/Shape');
            var AABB = _dereq_('../collision/AABB');

            /**
             * A line in 3D space that intersects bodies and return points.
             * @class Ray
             * @constructor
             * @param {Vec3} from
             * @param {Vec3} to
             */
            function Ray(from, to) {
                /**
                 * @property {Vec3} from
                 */
                this.from = from ? from.clone() : new Vec3();

                /**
                 * @property {Vec3} to
                 */
                this.to = to ? to.clone() : new Vec3();

                /**
                 * @private
                 * @property {Vec3} _direction
                 */
                this._direction = new Vec3();

                /**
                 * The precision of the ray. Used when checking parallelity etc.
                 * @property {Number} precision
                 */
                this.precision = 0.0001;

                /**
                 * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.
                 * @property {Boolean} checkCollisionResponse
                 */
                this.checkCollisionResponse = true;

                /**
                 * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.
                 * @property {Boolean} skipBackfaces
                 */
                this.skipBackfaces = false;

                /**
                 * @property {number} collisionFilterMask
                 * @default -1
                 */
                this.collisionFilterMask = -1;

                /**
                 * @property {number} collisionFilterGroup
                 * @default -1
                 */
                this.collisionFilterGroup = -1;

                /**
                 * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.
                 * @property {number} mode
                 */
                this.mode = Ray.ANY;

                /**
                 * Current result object.
                 * @property {RaycastResult} result
                 */
                this.result = new RaycastResult();

                /**
                 * Will be set to true during intersectWorld() if the ray hit anything.
                 * @property {Boolean} hasHit
                 */
                this.hasHit = false;

                /**
                 * Current, user-provided result callback. Will be used if mode is Ray.ALL.
                 * @property {Function} callback
                 */
                this.callback = function (result) { };
            }
            Ray.prototype.constructor = Ray;

            Ray.CLOSEST = 1;
            Ray.ANY = 2;
            Ray.ALL = 4;

            var tmpAABB = new AABB();
            var tmpArray = [];

            /**
             * Do itersection against all bodies in the given World.
             * @method intersectWorld
             * @param  {World} world
             * @param  {object} options
             * @return {Boolean} True if the ray hit anything, otherwise false.
             */
            Ray.prototype.intersectWorld = function (world, options) {
                this.mode = options.mode || Ray.ANY;
                this.result = options.result || new RaycastResult();
                this.skipBackfaces = !!options.skipBackfaces;
                this.collisionFilterMask = typeof (options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;
                this.collisionFilterGroup = typeof (options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;
                if (options.from) {
                    this.from.copy(options.from);
                }
                if (options.to) {
                    this.to.copy(options.to);
                }
                this.callback = options.callback || function () { };
                this.hasHit = false;

                this.result.reset();
                this._updateDirection();

                this.getAABB(tmpAABB);
                tmpArray.length = 0;
                world.broadphase.aabbQuery(world, tmpAABB, tmpArray);
                this.intersectBodies(tmpArray);

                return this.hasHit;
            };

            var v1 = new Vec3(),
                v2 = new Vec3();

            /*
             * As per "Barycentric Technique" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division
             */
            Ray.pointInTriangle = pointInTriangle;
            function pointInTriangle(p, a, b, c) {
                c.vsub(a, v0);
                b.vsub(a, v1);
                p.vsub(a, v2);

                var dot00 = v0.dot(v0);
                var dot01 = v0.dot(v1);
                var dot02 = v0.dot(v2);
                var dot11 = v1.dot(v1);
                var dot12 = v1.dot(v2);

                var u, v;

                return ((u = dot11 * dot02 - dot01 * dot12) >= 0) &&
                    ((v = dot00 * dot12 - dot01 * dot02) >= 0) &&
                    (u + v < (dot00 * dot11 - dot01 * dot01));
            }

            /**
             * Shoot a ray at a body, get back information about the hit.
             * @method intersectBody
             * @private
             * @param {Body} body
             * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.
             */
            var intersectBody_xi = new Vec3();
            var intersectBody_qi = new Quaternion();
            Ray.prototype.intersectBody = function (body, result) {
                if (result) {
                    this.result = result;
                    this._updateDirection();
                }
                var checkCollisionResponse = this.checkCollisionResponse;

                if (checkCollisionResponse && !body.collisionResponse) {
                    return;
                }

                if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {
                    return;
                }

                var xi = intersectBody_xi;
                var qi = intersectBody_qi;

                for (var i = 0, N = body.shapes.length; i < N; i++) {
                    var shape = body.shapes[i];

                    if (checkCollisionResponse && !shape.collisionResponse) {
                        continue; // Skip
                    }

                    body.quaternion.mult(body.shapeOrientations[i], qi);
                    body.quaternion.vmult(body.shapeOffsets[i], xi);
                    xi.vadd(body.position, xi);

                    this.intersectShape(
                        shape,
                        qi,
                        xi,
                        body
                    );

                    if (this.result._shouldStop) {
                        break;
                    }
                }
            };

            /**
             * @method intersectBodies
             * @param {Array} bodies An array of Body objects.
             * @param {RaycastResult} [result] Deprecated
             */
            Ray.prototype.intersectBodies = function (bodies, result) {
                if (result) {
                    this.result = result;
                    this._updateDirection();
                }

                for (var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i++) {
                    this.intersectBody(bodies[i]);
                }
            };

            /**
             * Updates the _direction vector.
             * @private
             * @method _updateDirection
             */
            Ray.prototype._updateDirection = function () {
                this.to.vsub(this.from, this._direction);
                this._direction.normalize();
            };

            /**
             * @method intersectShape
             * @private
             * @param {Shape} shape
             * @param {Quaternion} quat
             * @param {Vec3} position
             * @param {Body} body
             */
            Ray.prototype.intersectShape = function (shape, quat, position, body) {
                var from = this.from;


                // Checking boundingSphere
                var distance = distanceFromIntersection(from, this._direction, position);
                if (distance > shape.boundingSphereRadius) {
                    return;
                }

                var intersectMethod = this[shape.type];
                if (intersectMethod) {
                    intersectMethod.call(this, shape, quat, position, body);
                }
            };

            var vector = new Vec3();
            var normal = new Vec3();
            var intersectPoint = new Vec3();

            var a = new Vec3();
            var b = new Vec3();
            var c = new Vec3();
            var d = new Vec3();

            var tmpRaycastResult = new RaycastResult();

            /**
             * @method intersectBox
             * @private
             * @param  {Shape} shape
             * @param  {Quaternion} quat
             * @param  {Vec3} position
             * @param  {Body} body
             */
            Ray.prototype.intersectBox = function (shape, quat, position, body) {
                return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);
            };
            Ray.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;

            /**
             * @method intersectPlane
             * @private
             * @param  {Shape} shape
             * @param  {Quaternion} quat
             * @param  {Vec3} position
             * @param  {Body} body
             */
            Ray.prototype.intersectPlane = function (shape, quat, position, body) {
                var from = this.from;
                var to = this.to;
                var direction = this._direction;

                // Get plane normal
                var worldNormal = new Vec3(0, 0, 1);
                quat.vmult(worldNormal, worldNormal);

                var len = new Vec3();
                from.vsub(position, len);
                var planeToFrom = len.dot(worldNormal);
                to.vsub(position, len);
                var planeToTo = len.dot(worldNormal);

                if (planeToFrom * planeToTo > 0) {
                    // "from" and "to" are on the same side of the plane... bail out
                    return;
                }

                if (from.distanceTo(to) < planeToFrom) {
                    return;
                }

                var n_dot_dir = worldNormal.dot(direction);

                if (Math.abs(n_dot_dir) < this.precision) {
                    // No intersection
                    return;
                }

                var planePointToFrom = new Vec3();
                var dir_scaled_with_t = new Vec3();
                var hitPointWorld = new Vec3();

                from.vsub(position, planePointToFrom);
                var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;
                direction.scale(t, dir_scaled_with_t);
                from.vadd(dir_scaled_with_t, hitPointWorld);

                this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);
            };
            Ray.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;

            /**
             * Get the world AABB of the ray.
             * @method getAABB
             * @param  {AABB} aabb
             */
            Ray.prototype.getAABB = function (result) {
                var to = this.to;
                var from = this.from;
                result.lowerBound.x = Math.min(to.x, from.x);
                result.lowerBound.y = Math.min(to.y, from.y);
                result.lowerBound.z = Math.min(to.z, from.z);
                result.upperBound.x = Math.max(to.x, from.x);
                result.upperBound.y = Math.max(to.y, from.y);
                result.upperBound.z = Math.max(to.z, from.z);
            };

            var intersectConvexOptions = {
                faceList: [0]
            };

            /**
             * @method intersectHeightfield
             * @private
             * @param  {Shape} shape
             * @param  {Quaternion} quat
             * @param  {Vec3} position
             * @param  {Body} body
             */
            Ray.prototype.intersectHeightfield = function (shape, quat, position, body) {
                var data = shape.data,
                    w = shape.elementSize,
                    worldPillarOffset = new Vec3();

                // Convert the ray to local heightfield coordinates
                var localRay = new Ray(this.from, this.to);
                Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);
                Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);

                // Get the index of the data points to test against
                var index = [];
                var iMinX = null;
                var iMinY = null;
                var iMaxX = null;
                var iMaxY = null;

                var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);
                if (inside) {
                    iMinX = index[0];
                    iMinY = index[1];
                    iMaxX = index[0];
                    iMaxY = index[1];
                }
                inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);
                if (inside) {
                    if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }
                    if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }
                    if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }
                    if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }
                }

                if (iMinX === null) {
                    return;
                }

                var minMax = [];
                shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
                var min = minMax[0];
                var max = minMax[1];

                // // Bail out if the ray can't touch the bounding box
                // // TODO
                // var aabb = new AABB();
                // this.getAABB(aabb);
                // if(aabb.intersects()){
                //     return;
                // }

                for (var i = iMinX; i <= iMaxX; i++) {
                    for (var j = iMinY; j <= iMaxY; j++) {

                        if (this.result._shouldStop) {
                            return;
                        }

                        // Lower triangle
                        shape.getConvexTrianglePillar(i, j, false);
                        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);
                        this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);

                        if (this.result._shouldStop) {
                            return;
                        }

                        // Upper triangle
                        shape.getConvexTrianglePillar(i, j, true);
                        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);
                        this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);
                    }
                }
            };
            Ray.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;

            var Ray_intersectSphere_intersectionPoint = new Vec3();
            var Ray_intersectSphere_normal = new Vec3();

            /**
             * @method intersectSphere
             * @private
             * @param  {Shape} shape
             * @param  {Quaternion} quat
             * @param  {Vec3} position
             * @param  {Body} body
             */
            Ray.prototype.intersectSphere = function (shape, quat, position, body) {
                var from = this.from,
                    to = this.to,
                    r = shape.radius;

                var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);
                var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));
                var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);

                var delta = Math.pow(b, 2) - 4 * a * c;

                var intersectionPoint = Ray_intersectSphere_intersectionPoint;
                var normal = Ray_intersectSphere_normal;

                if (delta < 0) {
                    // No intersection
                    return;

                } else if (delta === 0) {
                    // single intersection point
                    from.lerp(to, delta, intersectionPoint);

                    intersectionPoint.vsub(position, normal);
                    normal.normalize();

                    this.reportIntersection(normal, intersectionPoint, shape, body, -1);

                } else {
                    var d1 = (- b - Math.sqrt(delta)) / (2 * a);
                    var d2 = (- b + Math.sqrt(delta)) / (2 * a);

                    if (d1 >= 0 && d1 <= 1) {
                        from.lerp(to, d1, intersectionPoint);
                        intersectionPoint.vsub(position, normal);
                        normal.normalize();
                        this.reportIntersection(normal, intersectionPoint, shape, body, -1);
                    }

                    if (this.result._shouldStop) {
                        return;
                    }

                    if (d2 >= 0 && d2 <= 1) {
                        from.lerp(to, d2, intersectionPoint);
                        intersectionPoint.vsub(position, normal);
                        normal.normalize();
                        this.reportIntersection(normal, intersectionPoint, shape, body, -1);
                    }
                }
            };
            Ray.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;


            var intersectConvex_normal = new Vec3();
            var intersectConvex_minDistNormal = new Vec3();
            var intersectConvex_minDistIntersect = new Vec3();
            var intersectConvex_vector = new Vec3();

            /**
             * @method intersectConvex
             * @private
             * @param  {Shape} shape
             * @param  {Quaternion} quat
             * @param  {Vec3} position
             * @param  {Body} body
             * @param {object} [options]
             * @param {array} [options.faceList]
             */
            Ray.prototype.intersectConvex = function intersectConvex(
                shape,
                quat,
                position,
                body,
                options
            ) {
                var minDistNormal = intersectConvex_minDistNormal;
                var normal = intersectConvex_normal;
                var vector = intersectConvex_vector;
                var minDistIntersect = intersectConvex_minDistIntersect;
                var faceList = (options && options.faceList) || null;

                // Checking faces
                var faces = shape.faces,
                    vertices = shape.vertices,
                    normals = shape.faceNormals;
                var direction = this._direction;

                var from = this.from;
                var to = this.to;
                var fromToDistance = from.distanceTo(to);

                var minDist = -1;
                var Nfaces = faceList ? faceList.length : faces.length;
                var result = this.result;

                for (var j = 0; !result._shouldStop && j < Nfaces; j++) {
                    var fi = faceList ? faceList[j] : j;

                    var face = faces[fi];
                    var faceNormal = normals[fi];
                    var q = quat;
                    var x = position;

                    // determine if ray intersects the plane of the face
                    // note: this works regardless of the direction of the face normal

                    // Get plane point in world coordinates...
                    vector.copy(vertices[face[0]]);
                    q.vmult(vector, vector);
                    vector.vadd(x, vector);

                    // ...but make it relative to the ray from. We'll fix this later.
                    vector.vsub(from, vector);

                    // Get plane normal
                    q.vmult(faceNormal, normal);

                    // If this dot product is negative, we have something interesting
                    var dot = direction.dot(normal);

                    // Bail out if ray and plane are parallel
                    if (Math.abs(dot) < this.precision) {
                        continue;
                    }

                    // calc distance to plane
                    var scalar = normal.dot(vector) / dot;

                    // if negative distance, then plane is behind ray
                    if (scalar < 0) {
                        continue;
                    }

                    // if (dot < 0) {

                    // Intersection point is from + direction * scalar
                    direction.mult(scalar, intersectPoint);
                    intersectPoint.vadd(from, intersectPoint);

                    // a is the point we compare points b and c with.
                    a.copy(vertices[face[0]]);
                    q.vmult(a, a);
                    x.vadd(a, a);

                    for (var i = 1; !result._shouldStop && i < face.length - 1; i++) {
                        // Transform 3 vertices to world coords
                        b.copy(vertices[face[i]]);
                        c.copy(vertices[face[i + 1]]);
                        q.vmult(b, b);
                        q.vmult(c, c);
                        x.vadd(b, b);
                        x.vadd(c, c);

                        var distance = intersectPoint.distanceTo(from);

                        if (!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {
                            continue;
                        }

                        this.reportIntersection(normal, intersectPoint, shape, body, fi);
                    }
                    // }
                }
            };
            Ray.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;

            var intersectTrimesh_normal = new Vec3();
            var intersectTrimesh_localDirection = new Vec3();
            var intersectTrimesh_localFrom = new Vec3();
            var intersectTrimesh_localTo = new Vec3();
            var intersectTrimesh_worldNormal = new Vec3();
            var intersectTrimesh_worldIntersectPoint = new Vec3();
            var intersectTrimesh_localAABB = new AABB();
            var intersectTrimesh_triangles = [];
            var intersectTrimesh_treeTransform = new Transform();

            /**
             * @method intersectTrimesh
             * @private
             * @param  {Shape} shape
             * @param  {Quaternion} quat
             * @param  {Vec3} position
             * @param  {Body} body
             * @param {object} [options]
             * @todo Optimize by transforming the world to local space first.
             * @todo Use Octree lookup
             */
            Ray.prototype.intersectTrimesh = function intersectTrimesh(
                mesh,
                quat,
                position,
                body,
                options
            ) {
                var normal = intersectTrimesh_normal;
                var triangles = intersectTrimesh_triangles;
                var treeTransform = intersectTrimesh_treeTransform;
                var minDistNormal = intersectConvex_minDistNormal;
                var vector = intersectConvex_vector;
                var minDistIntersect = intersectConvex_minDistIntersect;
                var localAABB = intersectTrimesh_localAABB;
                var localDirection = intersectTrimesh_localDirection;
                var localFrom = intersectTrimesh_localFrom;
                var localTo = intersectTrimesh_localTo;
                var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;
                var worldNormal = intersectTrimesh_worldNormal;
                var faceList = (options && options.faceList) || null;

                // Checking faces
                var indices = mesh.indices,
                    vertices = mesh.vertices,
                    normals = mesh.faceNormals;

                var from = this.from;
                var to = this.to;
                var direction = this._direction;

                var minDist = -1;
                treeTransform.position.copy(position);
                treeTransform.quaternion.copy(quat);

                // Transform ray to local space!
                Transform.vectorToLocalFrame(position, quat, direction, localDirection);
                //body.vectorToLocalFrame(direction, localDirection);
                Transform.pointToLocalFrame(position, quat, from, localFrom);
                //body.pointToLocalFrame(from, localFrom);
                Transform.pointToLocalFrame(position, quat, to, localTo);
                //body.pointToLocalFrame(to, localTo);
                var fromToDistanceSquared = localFrom.distanceSquared(localTo);

                mesh.tree.rayQuery(this, treeTransform, triangles);

                for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {
                    var trianglesIndex = triangles[i];

                    mesh.getNormal(trianglesIndex, normal);

                    // determine if ray intersects the plane of the face
                    // note: this works regardless of the direction of the face normal

                    // Get plane point in world coordinates...
                    mesh.getVertex(indices[trianglesIndex * 3], a);

                    // ...but make it relative to the ray from. We'll fix this later.
                    a.vsub(localFrom, vector);

                    // Get plane normal
                    // quat.vmult(normal, normal);

                    // If this dot product is negative, we have something interesting
                    var dot = localDirection.dot(normal);

                    // Bail out if ray and plane are parallel
                    // if (Math.abs( dot ) < this.precision){
                    //     continue;
                    // }

                    // calc distance to plane
                    var scalar = normal.dot(vector) / dot;

                    // if negative distance, then plane is behind ray
                    if (scalar < 0) {
                        continue;
                    }

                    // Intersection point is from + direction * scalar
                    localDirection.scale(scalar, intersectPoint);
                    intersectPoint.vadd(localFrom, intersectPoint);

                    // Get triangle vertices
                    mesh.getVertex(indices[trianglesIndex * 3 + 1], b);
                    mesh.getVertex(indices[trianglesIndex * 3 + 2], c);

                    var squaredDistance = intersectPoint.distanceSquared(localFrom);

                    if (!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {
                        continue;
                    }

                    // transform intersectpoint and normal to world
                    Transform.vectorToWorldFrame(quat, normal, worldNormal);
                    //body.vectorToWorldFrame(normal, worldNormal);
                    Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);
                    //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);
                    this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);
                }
                triangles.length = 0;
            };
            Ray.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;


            /**
             * @method reportIntersection
             * @private
             * @param  {Vec3} normal
             * @param  {Vec3} hitPointWorld
             * @param  {Shape} shape
             * @param  {Body} body
             * @return {boolean} True if the intersections should continue
             */
            Ray.prototype.reportIntersection = function (normal, hitPointWorld, shape, body, hitFaceIndex) {
                var from = this.from;
                var to = this.to;
                var distance = from.distanceTo(hitPointWorld);
                var result = this.result;

                // Skip back faces?
                if (this.skipBackfaces && normal.dot(this._direction) > 0) {
                    return;
                }

                result.hitFaceIndex = typeof (hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;

                switch (this.mode) {
                    case Ray.ALL:
                        this.hasHit = true;
                        result.set(
                            from,
                            to,
                            normal,
                            hitPointWorld,
                            shape,
                            body,
                            distance
                        );
                        result.hasHit = true;
                        this.callback(result);
                        break;

                    case Ray.CLOSEST:

                        // Store if closer than current closest
                        if (distance < result.distance || !result.hasHit) {
                            this.hasHit = true;
                            result.hasHit = true;
                            result.set(
                                from,
                                to,
                                normal,
                                hitPointWorld,
                                shape,
                                body,
                                distance
                            );
                        }
                        break;

                    case Ray.ANY:

                        // Report and stop.
                        this.hasHit = true;
                        result.hasHit = true;
                        result.set(
                            from,
                            to,
                            normal,
                            hitPointWorld,
                            shape,
                            body,
                            distance
                        );
                        result._shouldStop = true;
                        break;
                }
            };

            var v0 = new Vec3(),
                intersect = new Vec3();
            function distanceFromIntersection(from, direction, position) {

                // v0 is vector from from to position
                position.vsub(from, v0);
                var dot = v0.dot(direction);

                // intersect = direction*dot + from
                direction.mult(dot, intersect);
                intersect.vadd(from, intersect);

                var distance = position.distanceTo(intersect);

                return distance;
            }


        }, { "../collision/AABB": 3, "../collision/RaycastResult": 10, "../math/Quaternion": 28, "../math/Transform": 29, "../math/Vec3": 30, "../shapes/Box": 37, "../shapes/ConvexPolyhedron": 38, "../shapes/Shape": 43 }], 10: [function (_dereq_, module, exports) {
            var Vec3 = _dereq_('../math/Vec3');

            module.exports = RaycastResult;

            /**
             * Storage for Ray casting data.
             * @class RaycastResult
             * @constructor
             */
            function RaycastResult() {

                /**
                 * @property {Vec3} rayFromWorld
                 */
                this.rayFromWorld = new Vec3();

                /**
                 * @property {Vec3} rayToWorld
                 */
                this.rayToWorld = new Vec3();

                /**
                 * @property {Vec3} hitNormalWorld
                 */
                this.hitNormalWorld = new Vec3();

                /**
                 * @property {Vec3} hitPointWorld
                 */
                this.hitPointWorld = new Vec3();

                /**
                 * @property {boolean} hasHit
                 */
                this.hasHit = false;

                /**
                 * The hit shape, or null.
                 * @property {Shape} shape
                 */
                this.shape = null;

                /**
                 * The hit body, or null.
                 * @property {Body} body
                 */
                this.body = null;

                /**
                 * The index of the hit triangle, if the hit shape was a trimesh.
                 * @property {number} hitFaceIndex
                 * @default -1
                 */
                this.hitFaceIndex = -1;

                /**
                 * Distance to the hit. Will be set to -1 if there was no hit.
                 * @property {number} distance
                 * @default -1
                 */
                this.distance = -1;

                /**
                 * If the ray should stop traversing the bodies.
                 * @private
                 * @property {Boolean} _shouldStop
                 * @default false
                 */
                this._shouldStop = false;
            }

            /**
             * Reset all result data.
             * @method reset
             */
            RaycastResult.prototype.reset = function () {
                this.rayFromWorld.setZero();
                this.rayToWorld.setZero();
                this.hitNormalWorld.setZero();
                this.hitPointWorld.setZero();
                this.hasHit = false;
                this.shape = null;
                this.body = null;
                this.hitFaceIndex = -1;
                this.distance = -1;
                this._shouldStop = false;
            };

            /**
             * @method abort
             */
            RaycastResult.prototype.abort = function () {
                this._shouldStop = true;
            };

            /**
             * @method set
             * @param {Vec3} rayFromWorld
             * @param {Vec3} rayToWorld
             * @param {Vec3} hitNormalWorld
             * @param {Vec3} hitPointWorld
             * @param {Shape} shape
             * @param {Body} body
             * @param {number} distance
             */
            RaycastResult.prototype.set = function (
                rayFromWorld,
                rayToWorld,
                hitNormalWorld,
                hitPointWorld,
                shape,
                body,
                distance
            ) {
                this.rayFromWorld.copy(rayFromWorld);
                this.rayToWorld.copy(rayToWorld);
                this.hitNormalWorld.copy(hitNormalWorld);
                this.hitPointWorld.copy(hitPointWorld);
                this.shape = shape;
                this.body = body;
                this.distance = distance;
            };
        }, { "../math/Vec3": 30 }], 11: [function (_dereq_, module, exports) {
            var Shape = _dereq_('../shapes/Shape');
            var Broadphase = _dereq_('../collision/Broadphase');

            module.exports = SAPBroadphase;

            /**
             * Sweep and prune broadphase along one axis.
             *
             * @class SAPBroadphase
             * @constructor
             * @param {World} [world]
             * @extends Broadphase
             */
            function SAPBroadphase(world) {
                Broadphase.apply(this);

                /**
                 * List of bodies currently in the broadphase.
                 * @property axisList
                 * @type {Array}
                 */
                this.axisList = [];

                /**
                 * The world to search in.
                 * @property world
                 * @type {World}
                 */
                this.world = null;

                /**
                 * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.
                 * @property axisIndex
                 * @type {Number}
                 */
                this.axisIndex = 0;

                var axisList = this.axisList;

                this._addBodyHandler = function (e) {
                    axisList.push(e.body);
                };

                this._removeBodyHandler = function (e) {
                    var idx = axisList.indexOf(e.body);
                    if (idx !== -1) {
                        axisList.splice(idx, 1);
                    }
                };

                if (world) {
                    this.setWorld(world);
                }
            }
            SAPBroadphase.prototype = new Broadphase();

            /**
             * Change the world
             * @method setWorld
             * @param  {World} world
             */
            SAPBroadphase.prototype.setWorld = function (world) {
                // Clear the old axis array
                this.axisList.length = 0;

                // Add all bodies from the new world
                for (var i = 0; i < world.bodies.length; i++) {
                    this.axisList.push(world.bodies[i]);
                }

                // Remove old handlers, if any
                world.removeEventListener("addBody", this._addBodyHandler);
                world.removeEventListener("removeBody", this._removeBodyHandler);

                // Add handlers to update the list of bodies.
                world.addEventListener("addBody", this._addBodyHandler);
                world.addEventListener("removeBody", this._removeBodyHandler);

                this.world = world;
                this.dirty = true;
            };

            /**
             * @static
             * @method insertionSortX
             * @param  {Array} a
             * @return {Array}
             */
            SAPBroadphase.insertionSortX = function (a) {
                for (var i = 1, l = a.length; i < l; i++) {
                    var v = a[i];
                    for (var j = i - 1; j >= 0; j--) {
                        if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {
                            break;
                        }
                        a[j + 1] = a[j];
                    }
                    a[j + 1] = v;
                }
                return a;
            };

            /**
             * @static
             * @method insertionSortY
             * @param  {Array} a
             * @return {Array}
             */
            SAPBroadphase.insertionSortY = function (a) {
                for (var i = 1, l = a.length; i < l; i++) {
                    var v = a[i];
                    for (var j = i - 1; j >= 0; j--) {
                        if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {
                            break;
                        }
                        a[j + 1] = a[j];
                    }
                    a[j + 1] = v;
                }
                return a;
            };

            /**
             * @static
             * @method insertionSortZ
             * @param  {Array} a
             * @return {Array}
             */
            SAPBroadphase.insertionSortZ = function (a) {
                for (var i = 1, l = a.length; i < l; i++) {
                    var v = a[i];
                    for (var j = i - 1; j >= 0; j--) {
                        if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {
                            break;
                        }
                        a[j + 1] = a[j];
                    }
                    a[j + 1] = v;
                }
                return a;
            };

            /**
             * Collect all collision pairs
             * @method collisionPairs
             * @param  {World} world
             * @param  {Array} p1
             * @param  {Array} p2
             */
            SAPBroadphase.prototype.collisionPairs = function (world, p1, p2) {
                var bodies = this.axisList,
                    N = bodies.length,
                    axisIndex = this.axisIndex,
                    i, j;

                if (this.dirty) {
                    this.sortList();
                    this.dirty = false;
                }

                // Look through the list
                for (i = 0; i !== N; i++) {
                    var bi = bodies[i];

                    for (j = i + 1; j < N; j++) {
                        var bj = bodies[j];

                        if (!this.needBroadphaseCollision(bi, bj)) {
                            continue;
                        }

                        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {
                            break;
                        }

                        this.intersectionTest(bi, bj, p1, p2);
                    }
                }
            };

            SAPBroadphase.prototype.sortList = function () {
                var axisList = this.axisList;
                var axisIndex = this.axisIndex;
                var N = axisList.length;

                // Update AABBs
                for (var i = 0; i !== N; i++) {
                    var bi = axisList[i];
                    if (bi.aabbNeedsUpdate) {
                        bi.computeAABB();
                    }
                }

                // Sort the list
                if (axisIndex === 0) {
                    SAPBroadphase.insertionSortX(axisList);
                } else if (axisIndex === 1) {
                    SAPBroadphase.insertionSortY(axisList);
                } else if (axisIndex === 2) {
                    SAPBroadphase.insertionSortZ(axisList);
                }
            };

            /**
             * Check if the bounds of two bodies overlap, along the given SAP axis.
             * @static
             * @method checkBounds
             * @param  {Body} bi
             * @param  {Body} bj
             * @param  {Number} axisIndex
             * @return {Boolean}
             */
            SAPBroadphase.checkBounds = function (bi, bj, axisIndex) {
                var biPos;
                var bjPos;

                if (axisIndex === 0) {
                    biPos = bi.position.x;
                    bjPos = bj.position.x;
                } else if (axisIndex === 1) {
                    biPos = bi.position.y;
                    bjPos = bj.position.y;
                } else if (axisIndex === 2) {
                    biPos = bi.position.z;
                    bjPos = bj.position.z;
                }

                var ri = bi.boundingRadius,
                    rj = bj.boundingRadius,
                    boundA1 = biPos - ri,
                    boundA2 = biPos + ri,
                    boundB1 = bjPos - rj,
                    boundB2 = bjPos + rj;

                return boundB1 < boundA2;
            };

            /**
             * Computes the variance of the body positions and estimates the best
             * axis to use. Will automatically set property .axisIndex.
             * @method autoDetectAxis
             */
            SAPBroadphase.prototype.autoDetectAxis = function () {
                var sumX = 0,
                    sumX2 = 0,
                    sumY = 0,
                    sumY2 = 0,
                    sumZ = 0,
                    sumZ2 = 0,
                    bodies = this.axisList,
                    N = bodies.length,
                    invN = 1 / N;

                for (var i = 0; i !== N; i++) {
                    var b = bodies[i];

                    var centerX = b.position.x;
                    sumX += centerX;
                    sumX2 += centerX * centerX;

                    var centerY = b.position.y;
                    sumY += centerY;
                    sumY2 += centerY * centerY;

                    var centerZ = b.position.z;
                    sumZ += centerZ;
                    sumZ2 += centerZ * centerZ;
                }

                var varianceX = sumX2 - sumX * sumX * invN,
                    varianceY = sumY2 - sumY * sumY * invN,
                    varianceZ = sumZ2 - sumZ * sumZ * invN;

                if (varianceX > varianceY) {
                    if (varianceX > varianceZ) {
                        this.axisIndex = 0;
                    } else {
                        this.axisIndex = 2;
                    }
                } else if (varianceY > varianceZ) {
                    this.axisIndex = 1;
                } else {
                    this.axisIndex = 2;
                }
            };

            /**
             * Returns all the bodies within an AABB.
             * @method aabbQuery
             * @param  {World} world
             * @param  {AABB} aabb
             * @param {array} result An array to store resulting bodies in.
             * @return {array}
             */
            SAPBroadphase.prototype.aabbQuery = function (world, aabb, result) {
                result = result || [];

                if (this.dirty) {
                    this.sortList();
                    this.dirty = false;
                }

                var axisIndex = this.axisIndex, axis = 'x';
                if (axisIndex === 1) { axis = 'y'; }
                if (axisIndex === 2) { axis = 'z'; }

                var axisList = this.axisList;
                var lower = aabb.lowerBound[axis];
                var upper = aabb.upperBound[axis];
                for (var i = 0; i < axisList.length; i++) {
                    var b = axisList[i];

                    if (b.aabbNeedsUpdate) {
                        b.computeAABB();
                    }

                    if (b.aabb.overlaps(aabb)) {
                        result.push(b);
                    }
                }

                return result;
            };
        }, { "../collision/Broadphase": 5, "../shapes/Shape": 43 }], 12: [function (_dereq_, module, exports) {
            module.exports = ConeTwistConstraint;

            var Constraint = _dereq_('./Constraint');
            var PointToPointConstraint = _dereq_('./PointToPointConstraint');
            var ConeEquation = _dereq_('../equations/ConeEquation');
            var RotationalEquation = _dereq_('../equations/RotationalEquation');
            var ContactEquation = _dereq_('../equations/ContactEquation');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * @class ConeTwistConstraint
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {object} [options]
             * @param {Vec3} [options.pivotA]
             * @param {Vec3} [options.pivotB]
             * @param {Vec3} [options.axisA]
             * @param {Vec3} [options.axisB]
             * @param {Number} [options.maxForce=1e6]
             * @extends PointToPointConstraint
             */
            function ConeTwistConstraint(bodyA, bodyB, options) {
                options = options || {};
                var maxForce = typeof (options.maxForce) !== 'undefined' ? options.maxForce : 1e6;

                // Set pivot point in between
                var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
                var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
                this.axisA = options.axisA ? options.axisA.clone() : new Vec3();
                this.axisB = options.axisB ? options.axisB.clone() : new Vec3();

                PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);

                this.collideConnected = !!options.collideConnected;

                this.angle = typeof (options.angle) !== 'undefined' ? options.angle : 0;

                /**
                 * @property {ConeEquation} coneEquation
                 */
                var c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);

                /**
                 * @property {RotationalEquation} twistEquation
                 */
                var t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);
                this.twistAngle = typeof (options.twistAngle) !== 'undefined' ? options.twistAngle : 0;

                // Make the cone equation push the bodies toward the cone axis, not outward
                c.maxForce = 0;
                c.minForce = -maxForce;

                // Make the twist equation add torque toward the initial position
                t.maxForce = 0;
                t.minForce = -maxForce;

                this.equations.push(c, t);
            }
            ConeTwistConstraint.prototype = new PointToPointConstraint();
            ConeTwistConstraint.constructor = ConeTwistConstraint;

            var ConeTwistConstraint_update_tmpVec1 = new Vec3();
            var ConeTwistConstraint_update_tmpVec2 = new Vec3();

            ConeTwistConstraint.prototype.update = function () {
                var bodyA = this.bodyA,
                    bodyB = this.bodyB,
                    cone = this.coneEquation,
                    twist = this.twistEquation;

                PointToPointConstraint.prototype.update.call(this);

                // Update the axes to the cone constraint
                bodyA.vectorToWorldFrame(this.axisA, cone.axisA);
                bodyB.vectorToWorldFrame(this.axisB, cone.axisB);

                // Update the world axes in the twist constraint
                this.axisA.tangents(twist.axisA, twist.axisA);
                bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);

                this.axisB.tangents(twist.axisB, twist.axisB);
                bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);

                cone.angle = this.angle;
                twist.maxAngle = this.twistAngle;
            };


        }, { "../equations/ConeEquation": 18, "../equations/ContactEquation": 19, "../equations/RotationalEquation": 22, "../math/Vec3": 30, "./Constraint": 13, "./PointToPointConstraint": 17 }], 13: [function (_dereq_, module, exports) {
            module.exports = Constraint;

            var Utils = _dereq_('../utils/Utils');

            /**
             * Constraint base class
             * @class Constraint
             * @author schteppe
             * @constructor
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {object} [options]
             * @param {boolean} [options.collideConnected=true]
             * @param {boolean} [options.wakeUpBodies=true]
             */
            function Constraint(bodyA, bodyB, options) {
                options = Utils.defaults(options, {
                    collideConnected: true,
                    wakeUpBodies: true,
                });

                /**
                 * Equations to be solved in this constraint
                 * @property equations
                 * @type {Array}
                 */
                this.equations = [];

                /**
                 * @property {Body} bodyA
                 */
                this.bodyA = bodyA;

                /**
                 * @property {Body} bodyB
                 */
                this.bodyB = bodyB;

                /**
                 * @property {Number} id
                 */
                this.id = Constraint.idCounter++;

                /**
                 * Set to true if you want the bodies to collide when they are connected.
                 * @property collideConnected
                 * @type {boolean}
                 */
                this.collideConnected = options.collideConnected;

                if (options.wakeUpBodies) {
                    if (bodyA) {
                        bodyA.wakeUp();
                    }
                    if (bodyB) {
                        bodyB.wakeUp();
                    }
                }
            }

            /**
             * Update all the equations with data.
             * @method update
             */
            Constraint.prototype.update = function () {
                throw new Error("method update() not implmemented in this Constraint subclass!");
            };

            /**
             * Enables all equations in the constraint.
             * @method enable
             */
            Constraint.prototype.enable = function () {
                var eqs = this.equations;
                for (var i = 0; i < eqs.length; i++) {
                    eqs[i].enabled = true;
                }
            };

            /**
             * Disables all equations in the constraint.
             * @method disable
             */
            Constraint.prototype.disable = function () {
                var eqs = this.equations;
                for (var i = 0; i < eqs.length; i++) {
                    eqs[i].enabled = false;
                }
            };

            Constraint.idCounter = 0;

        }, { "../utils/Utils": 53 }], 14: [function (_dereq_, module, exports) {
            module.exports = DistanceConstraint;

            var Constraint = _dereq_('./Constraint');
            var ContactEquation = _dereq_('../equations/ContactEquation');

            /**
             * Constrains two bodies to be at a constant distance from each others center of mass.
             * @class DistanceConstraint
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB
             * @param {Number} [maxForce=1e6]
             * @extends Constraint
             */
            function DistanceConstraint(bodyA, bodyB, distance, maxForce) {
                Constraint.call(this, bodyA, bodyB);

                if (typeof (distance) === "undefined") {
                    distance = bodyA.position.distanceTo(bodyB.position);
                }

                if (typeof (maxForce) === "undefined") {
                    maxForce = 1e6;
                }

                /**
                 * @property {number} distance
                 */
                this.distance = distance;

                /**
                 * @property {ContactEquation} distanceEquation
                 */
                var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);
                this.equations.push(eq);

                // Make it bidirectional
                eq.minForce = -maxForce;
                eq.maxForce = maxForce;
            }
            DistanceConstraint.prototype = new Constraint();

            DistanceConstraint.prototype.update = function () {
                var bodyA = this.bodyA;
                var bodyB = this.bodyB;
                var eq = this.distanceEquation;
                var halfDist = this.distance * 0.5;
                var normal = eq.ni;

                bodyB.position.vsub(bodyA.position, normal);
                normal.normalize();
                normal.mult(halfDist, eq.ri);
                normal.mult(-halfDist, eq.rj);
            };
        }, { "../equations/ContactEquation": 19, "./Constraint": 13 }], 15: [function (_dereq_, module, exports) {
            module.exports = HingeConstraint;

            var Constraint = _dereq_('./Constraint');
            var PointToPointConstraint = _dereq_('./PointToPointConstraint');
            var RotationalEquation = _dereq_('../equations/RotationalEquation');
            var RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');
            var ContactEquation = _dereq_('../equations/ContactEquation');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.
             * @class HingeConstraint
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {object} [options]
             * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.
             * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.
             * @param {Vec3} [options.pivotB]
             * @param {Vec3} [options.axisB]
             * @param {Number} [options.maxForce=1e6]
             * @extends PointToPointConstraint
             */
            function HingeConstraint(bodyA, bodyB, options) {
                options = options || {};
                var maxForce = typeof (options.maxForce) !== 'undefined' ? options.maxForce : 1e6;
                var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
                var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();

                PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);

                /**
                 * Rotation axis, defined locally in bodyA.
                 * @property {Vec3} axisA
                 */
                var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
                axisA.normalize();

                /**
                 * Rotation axis, defined locally in bodyB.
                 * @property {Vec3} axisB
                 */
                var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);
                axisB.normalize();

                /**
                 * @property {RotationalEquation} rotationalEquation1
                 */
                var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);

                /**
                 * @property {RotationalEquation} rotationalEquation2
                 */
                var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);

                /**
                 * @property {RotationalMotorEquation} motorEquation
                 */
                var motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);
                motor.enabled = false; // Not enabled by default

                // Equations to be fed to the solver
                this.equations.push(
                    r1, // rotational1
                    r2, // rotational2
                    motor
                );
            }
            HingeConstraint.prototype = new PointToPointConstraint();
            HingeConstraint.constructor = HingeConstraint;

            /**
             * @method enableMotor
             */
            HingeConstraint.prototype.enableMotor = function () {
                this.motorEquation.enabled = true;
            };

            /**
             * @method disableMotor
             */
            HingeConstraint.prototype.disableMotor = function () {
                this.motorEquation.enabled = false;
            };

            /**
             * @method setMotorSpeed
             * @param {number} speed
             */
            HingeConstraint.prototype.setMotorSpeed = function (speed) {
                this.motorEquation.targetVelocity = speed;
            };

            /**
             * @method setMotorMaxForce
             * @param {number} maxForce
             */
            HingeConstraint.prototype.setMotorMaxForce = function (maxForce) {
                this.motorEquation.maxForce = maxForce;
                this.motorEquation.minForce = -maxForce;
            };

            var HingeConstraint_update_tmpVec1 = new Vec3();
            var HingeConstraint_update_tmpVec2 = new Vec3();

            HingeConstraint.prototype.update = function () {
                var bodyA = this.bodyA,
                    bodyB = this.bodyB,
                    motor = this.motorEquation,
                    r1 = this.rotationalEquation1,
                    r2 = this.rotationalEquation2,
                    worldAxisA = HingeConstraint_update_tmpVec1,
                    worldAxisB = HingeConstraint_update_tmpVec2;

                var axisA = this.axisA;
                var axisB = this.axisB;

                PointToPointConstraint.prototype.update.call(this);

                // Get world axes
                bodyA.quaternion.vmult(axisA, worldAxisA);
                bodyB.quaternion.vmult(axisB, worldAxisB);

                worldAxisA.tangents(r1.axisA, r2.axisA);
                r1.axisB.copy(worldAxisB);
                r2.axisB.copy(worldAxisB);

                if (this.motorEquation.enabled) {
                    bodyA.quaternion.vmult(this.axisA, motor.axisA);
                    bodyB.quaternion.vmult(this.axisB, motor.axisB);
                }
            };


        }, { "../equations/ContactEquation": 19, "../equations/RotationalEquation": 22, "../equations/RotationalMotorEquation": 23, "../math/Vec3": 30, "./Constraint": 13, "./PointToPointConstraint": 17 }], 16: [function (_dereq_, module, exports) {
            module.exports = LockConstraint;

            var Constraint = _dereq_('./Constraint');
            var PointToPointConstraint = _dereq_('./PointToPointConstraint');
            var RotationalEquation = _dereq_('../equations/RotationalEquation');
            var RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');
            var ContactEquation = _dereq_('../equations/ContactEquation');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * Lock constraint. Will remove all degrees of freedom between the bodies.
             * @class LockConstraint
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {object} [options]
             * @param {Number} [options.maxForce=1e6]
             * @extends PointToPointConstraint
             */
            function LockConstraint(bodyA, bodyB, options) {
                options = options || {};
                var maxForce = typeof (options.maxForce) !== 'undefined' ? options.maxForce : 1e6;

                // Set pivot point in between
                var pivotA = new Vec3();
                var pivotB = new Vec3();
                var halfWay = new Vec3();
                bodyA.position.vadd(bodyB.position, halfWay);
                halfWay.scale(0.5, halfWay);
                bodyB.pointToLocalFrame(halfWay, pivotB);
                bodyA.pointToLocalFrame(halfWay, pivotA);
                PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);

                /**
                 * @property {RotationalEquation} rotationalEquation1
                 */
                var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);

                /**
                 * @property {RotationalEquation} rotationalEquation2
                 */
                var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);

                /**
                 * @property {RotationalEquation} rotationalEquation3
                 */
                var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);

                this.equations.push(r1, r2, r3);
            }
            LockConstraint.prototype = new PointToPointConstraint();
            LockConstraint.constructor = LockConstraint;

            var LockConstraint_update_tmpVec1 = new Vec3();
            var LockConstraint_update_tmpVec2 = new Vec3();

            LockConstraint.prototype.update = function () {
                var bodyA = this.bodyA,
                    bodyB = this.bodyB,
                    motor = this.motorEquation,
                    r1 = this.rotationalEquation1,
                    r2 = this.rotationalEquation2,
                    r3 = this.rotationalEquation3,
                    worldAxisA = LockConstraint_update_tmpVec1,
                    worldAxisB = LockConstraint_update_tmpVec2;

                PointToPointConstraint.prototype.update.call(this);

                bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);
                bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);

                bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);
                bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);

                bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);
                bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);
            };


        }, { "../equations/ContactEquation": 19, "../equations/RotationalEquation": 22, "../equations/RotationalMotorEquation": 23, "../math/Vec3": 30, "./Constraint": 13, "./PointToPointConstraint": 17 }], 17: [function (_dereq_, module, exports) {
            module.exports = PointToPointConstraint;

            var Constraint = _dereq_('./Constraint');
            var ContactEquation = _dereq_('../equations/ContactEquation');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * Connects two bodies at given offset points.
             * @class PointToPointConstraint
             * @extends Constraint
             * @constructor
             * @param {Body} bodyA
             * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.
             * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.
             * @param {Vec3} pivotB See pivotA.
             * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.
             *
             * @example
             *     var bodyA = new Body({ mass: 1 });
             *     var bodyB = new Body({ mass: 1 });
             *     bodyA.position.set(-1, 0, 0);
             *     bodyB.position.set(1, 0, 0);
             *     bodyA.addShape(shapeA);
             *     bodyB.addShape(shapeB);
             *     world.addBody(bodyA);
             *     world.addBody(bodyB);
             *     var localPivotA = new Vec3(1, 0, 0);
             *     var localPivotB = new Vec3(-1, 0, 0);
             *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);
             *     world.addConstraint(constraint);
             */
            function PointToPointConstraint(bodyA, pivotA, bodyB, pivotB, maxForce) {
                Constraint.call(this, bodyA, bodyB);

                maxForce = typeof (maxForce) !== 'undefined' ? maxForce : 1e6;

                /**
                 * Pivot, defined locally in bodyA.
                 * @property {Vec3} pivotA
                 */
                this.pivotA = pivotA ? pivotA.clone() : new Vec3();

                /**
                 * Pivot, defined locally in bodyB.
                 * @property {Vec3} pivotB
                 */
                this.pivotB = pivotB ? pivotB.clone() : new Vec3();

                /**
                 * @property {ContactEquation} equationX
                 */
                var x = this.equationX = new ContactEquation(bodyA, bodyB);

                /**
                 * @property {ContactEquation} equationY
                 */
                var y = this.equationY = new ContactEquation(bodyA, bodyB);

                /**
                 * @property {ContactEquation} equationZ
                 */
                var z = this.equationZ = new ContactEquation(bodyA, bodyB);

                // Equations to be fed to the solver
                this.equations.push(x, y, z);

                // Make the equations bidirectional
                x.minForce = y.minForce = z.minForce = -maxForce;
                x.maxForce = y.maxForce = z.maxForce = maxForce;

                x.ni.set(1, 0, 0);
                y.ni.set(0, 1, 0);
                z.ni.set(0, 0, 1);
            }
            PointToPointConstraint.prototype = new Constraint();

            PointToPointConstraint.prototype.update = function () {
                var bodyA = this.bodyA;
                var bodyB = this.bodyB;
                var x = this.equationX;
                var y = this.equationY;
                var z = this.equationZ;

                // Rotate the pivots to world space
                bodyA.quaternion.vmult(this.pivotA, x.ri);
                bodyB.quaternion.vmult(this.pivotB, x.rj);

                y.ri.copy(x.ri);
                y.rj.copy(x.rj);
                z.ri.copy(x.ri);
                z.rj.copy(x.rj);
            };
        }, { "../equations/ContactEquation": 19, "../math/Vec3": 30, "./Constraint": 13 }], 18: [function (_dereq_, module, exports) {
            module.exports = ConeEquation;

            var Vec3 = _dereq_('../math/Vec3');
            var Mat3 = _dereq_('../math/Mat3');
            var Equation = _dereq_('./Equation');

            /**
             * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.
             * @class ConeEquation
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Vec3} [options.axisA] Local axis in A
             * @param {Vec3} [options.axisB] Local axis in B
             * @param {Vec3} [options.angle] The "cone angle" to keep
             * @param {number} [options.maxForce=1e6]
             * @extends Equation
             */
            function ConeEquation(bodyA, bodyB, options) {
                options = options || {};
                var maxForce = typeof (options.maxForce) !== 'undefined' ? options.maxForce : 1e6;

                Equation.call(this, bodyA, bodyB, -maxForce, maxForce);

                this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
                this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);

                /**
                 * The cone angle to keep
                 * @property {number} angle
                 */
                this.angle = typeof (options.angle) !== 'undefined' ? options.angle : 0;
            }

            ConeEquation.prototype = new Equation();
            ConeEquation.prototype.constructor = ConeEquation;

            var tmpVec1 = new Vec3();
            var tmpVec2 = new Vec3();

            ConeEquation.prototype.computeB = function (h) {
                var a = this.a,
                    b = this.b,

                    ni = this.axisA,
                    nj = this.axisB,

                    nixnj = tmpVec1,
                    njxni = tmpVec2,

                    GA = this.jacobianElementA,
                    GB = this.jacobianElementB;

                // Caluclate cross products
                ni.cross(nj, nixnj);
                nj.cross(ni, njxni);

                // The angle between two vector is:
                // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b

                // g = a * b
                // gdot = (b x a) * wi + (a x b) * wj
                // G = [0 bxa 0 axb]
                // W = [vi wi vj wj]
                GA.rotational.copy(njxni);
                GB.rotational.copy(nixnj);

                var g = Math.cos(this.angle) - ni.dot(nj),
                    GW = this.computeGW(),
                    GiMf = this.computeGiMf();

                var B = - g * a - GW * b - h * GiMf;

                return B;
            };


        }, { "../math/Mat3": 27, "../math/Vec3": 30, "./Equation": 20 }], 19: [function (_dereq_, module, exports) {
            module.exports = ContactEquation;

            var Equation = _dereq_('./Equation');
            var Vec3 = _dereq_('../math/Vec3');
            var Mat3 = _dereq_('../math/Mat3');

            /**
             * Contact/non-penetration constraint equation
             * @class ContactEquation
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @extends Equation
             */
            function ContactEquation(bodyA, bodyB, maxForce) {
                maxForce = typeof (maxForce) !== 'undefined' ? maxForce : 1e6;
                Equation.call(this, bodyA, bodyB, 0, maxForce);

                /**
                 * @property restitution
                 * @type {Number}
                 */
                this.restitution = 0.0; // "bounciness": u1 = -e*u0

                /**
                 * World-oriented vector that goes from the center of bi to the contact point.
                 * @property {Vec3} ri
                 */
                this.ri = new Vec3();

                /**
                 * World-oriented vector that starts in body j position and goes to the contact point.
                 * @property {Vec3} rj
                 */
                this.rj = new Vec3();

                /**
                 * Contact normal, pointing out of body i.
                 * @property {Vec3} ni
                 */
                this.ni = new Vec3();
            }

            ContactEquation.prototype = new Equation();
            ContactEquation.prototype.constructor = ContactEquation;

            var ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors
            var ContactEquation_computeB_temp2 = new Vec3();
            var ContactEquation_computeB_temp3 = new Vec3();
            ContactEquation.prototype.computeB = function (h) {
                var a = this.a,
                    b = this.b,
                    bi = this.bi,
                    bj = this.bj,
                    ri = this.ri,
                    rj = this.rj,
                    rixn = ContactEquation_computeB_temp1,
                    rjxn = ContactEquation_computeB_temp2,

                    vi = bi.velocity,
                    wi = bi.angularVelocity,
                    fi = bi.force,
                    taui = bi.torque,

                    vj = bj.velocity,
                    wj = bj.angularVelocity,
                    fj = bj.force,
                    tauj = bj.torque,

                    penetrationVec = ContactEquation_computeB_temp3,

                    GA = this.jacobianElementA,
                    GB = this.jacobianElementB,

                    n = this.ni;

                // Caluclate cross products
                ri.cross(n, rixn);
                rj.cross(n, rjxn);

                // g = xj+rj -(xi+ri)
                // G = [ -ni  -rixn  ni  rjxn ]
                n.negate(GA.spatial);
                rixn.negate(GA.rotational);
                GB.spatial.copy(n);
                GB.rotational.copy(rjxn);

                // Calculate the penetration vector
                penetrationVec.copy(bj.position);
                penetrationVec.vadd(rj, penetrationVec);
                penetrationVec.vsub(bi.position, penetrationVec);
                penetrationVec.vsub(ri, penetrationVec);

                var g = n.dot(penetrationVec);

                // Compute iteration
                var ePlusOne = this.restitution + 1;
                var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);
                var GiMf = this.computeGiMf();

                var B = - g * a - GW * b - h * GiMf;

                return B;
            };

            var ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();
            var ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();
            var ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();
            var ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();
            var ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();

            /**
             * Get the current relative velocity in the contact point.
             * @method getImpactVelocityAlongNormal
             * @return {number}
             */
            ContactEquation.prototype.getImpactVelocityAlongNormal = function () {
                var vi = ContactEquation_getImpactVelocityAlongNormal_vi;
                var vj = ContactEquation_getImpactVelocityAlongNormal_vj;
                var xi = ContactEquation_getImpactVelocityAlongNormal_xi;
                var xj = ContactEquation_getImpactVelocityAlongNormal_xj;
                var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;

                this.bi.position.vadd(this.ri, xi);
                this.bj.position.vadd(this.rj, xj);

                this.bi.getVelocityAtWorldPoint(xi, vi);
                this.bj.getVelocityAtWorldPoint(xj, vj);

                vi.vsub(vj, relVel);

                return this.ni.dot(relVel);
            };


        }, { "../math/Mat3": 27, "../math/Vec3": 30, "./Equation": 20 }], 20: [function (_dereq_, module, exports) {
            module.exports = Equation;

            var JacobianElement = _dereq_('../math/JacobianElement'),
                Vec3 = _dereq_('../math/Vec3');

            /**
             * Equation base class
             * @class Equation
             * @constructor
             * @author schteppe
             * @param {Body} bi
             * @param {Body} bj
             * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.
             * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.
             */
            function Equation(bi, bj, minForce, maxForce) {
                this.id = Equation.id++;

                /**
                 * @property {number} minForce
                 */
                this.minForce = typeof (minForce) === "undefined" ? -1e6 : minForce;

                /**
                 * @property {number} maxForce
                 */
                this.maxForce = typeof (maxForce) === "undefined" ? 1e6 : maxForce;

                /**
                 * @property bi
                 * @type {Body}
                 */
                this.bi = bi;

                /**
                 * @property bj
                 * @type {Body}
                 */
                this.bj = bj;

                /**
                 * SPOOK parameter
                 * @property {number} a
                 */
                this.a = 0.0;

                /**
                 * SPOOK parameter
                 * @property {number} b
                 */
                this.b = 0.0;

                /**
                 * SPOOK parameter
                 * @property {number} eps
                 */
                this.eps = 0.0;

                /**
                 * @property {JacobianElement} jacobianElementA
                 */
                this.jacobianElementA = new JacobianElement();

                /**
                 * @property {JacobianElement} jacobianElementB
                 */
                this.jacobianElementB = new JacobianElement();

                /**
                 * @property {boolean} enabled
                 * @default true
                 */
                this.enabled = true;

                // Set typical spook params
                this.setSpookParams(1e7, 4, 1 / 60);
            }
            Equation.prototype.constructor = Equation;

            Equation.id = 0;

            /**
             * Recalculates a,b,eps.
             * @method setSpookParams
             */
            Equation.prototype.setSpookParams = function (stiffness, relaxation, timeStep) {
                var d = relaxation,
                    k = stiffness,
                    h = timeStep;
                this.a = 4.0 / (h * (1 + 4 * d));
                this.b = (4.0 * d) / (1 + 4 * d);
                this.eps = 4.0 / (h * h * k * (1 + 4 * d));
            };

            /**
             * Computes the RHS of the SPOOK equation
             * @method computeB
             * @return {Number}
             */
            Equation.prototype.computeB = function (a, b, h) {
                var GW = this.computeGW(),
                    Gq = this.computeGq(),
                    GiMf = this.computeGiMf();
                return - Gq * a - GW * b - GiMf * h;
            };

            /**
             * Computes G*q, where q are the generalized body coordinates
             * @method computeGq
             * @return {Number}
             */
            Equation.prototype.computeGq = function () {
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB,
                    bi = this.bi,
                    bj = this.bj,
                    xi = bi.position,
                    xj = bj.position;
                return GA.spatial.dot(xi) + GB.spatial.dot(xj);
            };

            var zero = new Vec3();

            /**
             * Computes G*W, where W are the body velocities
             * @method computeGW
             * @return {Number}
             */
            Equation.prototype.computeGW = function () {
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB,
                    bi = this.bi,
                    bj = this.bj,
                    vi = bi.velocity,
                    vj = bj.velocity,
                    wi = bi.angularVelocity || zero,
                    wj = bj.angularVelocity || zero;
                return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
            };


            /**
             * Computes G*Wlambda, where W are the body velocities
             * @method computeGWlambda
             * @return {Number}
             */
            Equation.prototype.computeGWlambda = function () {
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB,
                    bi = this.bi,
                    bj = this.bj,
                    vi = bi.vlambda,
                    vj = bj.vlambda,
                    wi = bi.wlambda || zero,
                    wj = bj.wlambda || zero;
                return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
            };

            /**
             * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
             * @method computeGiMf
             * @return {Number}
             */
            var iMfi = new Vec3(),
                iMfj = new Vec3(),
                invIi_vmult_taui = new Vec3(),
                invIj_vmult_tauj = new Vec3();
            Equation.prototype.computeGiMf = function () {
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB,
                    bi = this.bi,
                    bj = this.bj,
                    fi = bi.force,
                    ti = bi.torque,
                    fj = bj.force,
                    tj = bj.torque,
                    invMassi = bi.invMassSolve,
                    invMassj = bj.invMassSolve;

                if (bi.invInertiaWorldSolve) { bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui); }
                else { invIi_vmult_taui.set(0, 0, 0); }
                if (bj.invInertiaWorldSolve) { bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj); }
                else { invIj_vmult_tauj.set(0, 0, 0); }

                fi.mult(invMassi, iMfi);
                fj.mult(invMassj, iMfj);

                return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);
            };

            /**
             * Computes G*inv(M)*G'
             * @method computeGiMGt
             * @return {Number}
             */
            var tmp = new Vec3();
            Equation.prototype.computeGiMGt = function () {
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB,
                    bi = this.bi,
                    bj = this.bj,
                    invMassi = bi.invMassSolve,
                    invMassj = bj.invMassSolve,
                    invIi = bi.invInertiaWorldSolve,
                    invIj = bj.invInertiaWorldSolve,
                    result = invMassi + invMassj;

                if (invIi) {
                    invIi.vmult(GA.rotational, tmp);
                    result += tmp.dot(GA.rotational);
                }

                if (invIj) {
                    invIj.vmult(GB.rotational, tmp);
                    result += tmp.dot(GB.rotational);
                }

                return result;
            };

            var addToWlambda_temp = new Vec3(),
                addToWlambda_Gi = new Vec3(),
                addToWlambda_Gj = new Vec3(),
                addToWlambda_ri = new Vec3(),
                addToWlambda_rj = new Vec3(),
                addToWlambda_Mdiag = new Vec3();

            /**
             * Add constraint velocity to the bodies.
             * @method addToWlambda
             * @param {Number} deltalambda
             */
            Equation.prototype.addToWlambda = function (deltalambda) {
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB,
                    bi = this.bi,
                    bj = this.bj,
                    temp = addToWlambda_temp;


                // Add to linear velocity
                // v_lambda += inv(M) * delta_lamba * G



                GA.spatial.mult(bi.invMassSolve * deltalambda, temp);

                if (bi.gameType == 1 && bj.gameType == 2) {
                    //console.log(bi.vlambda, temp);
                    temp.x = 0;
                    temp.y = 0;
                }

                bi.vlambda.vadd(temp, bi.vlambda);



                GB.spatial.mult(bj.invMassSolve * deltalambda, temp);
                bj.vlambda.vadd(temp, bj.vlambda);

                // Add to angular velocity
                if (bi.invInertiaWorldSolve) {
                    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);
                    temp.mult(deltalambda, temp);
                    bi.wlambda.vadd(temp, bi.wlambda);
                }

                if (bj.invInertiaWorldSolve) {
                    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);
                    temp.mult(deltalambda, temp);
                    bj.wlambda.vadd(temp, bj.wlambda);
                }
            };

            /**
             * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps
             * @method computeInvC
             * @param  {Number} eps
             * @return {Number}
             */
            Equation.prototype.computeC = function () {
                return this.computeGiMGt() + this.eps;
            };

        }, { "../math/JacobianElement": 26, "../math/Vec3": 30 }], 21: [function (_dereq_, module, exports) {
            module.exports = FrictionEquation;

            var Equation = _dereq_('./Equation');
            var Vec3 = _dereq_('../math/Vec3');
            var Mat3 = _dereq_('../math/Mat3');

            /**
             * Constrains the slipping in a contact along a tangent
             * @class FrictionEquation
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g
             * @extends Equation
             */
            function FrictionEquation(bodyA, bodyB, slipForce) {
                Equation.call(this, bodyA, bodyB, -slipForce, slipForce);
                this.ri = new Vec3();
                this.rj = new Vec3();
                this.t = new Vec3(); // tangent
            }

            FrictionEquation.prototype = new Equation();
            FrictionEquation.prototype.constructor = FrictionEquation;

            var FrictionEquation_computeB_temp1 = new Vec3();
            var FrictionEquation_computeB_temp2 = new Vec3();
            FrictionEquation.prototype.computeB = function (h) {
                var a = this.a,
                    b = this.b,
                    bi = this.bi,
                    bj = this.bj,
                    ri = this.ri,
                    rj = this.rj,
                    rixt = FrictionEquation_computeB_temp1,
                    rjxt = FrictionEquation_computeB_temp2,
                    t = this.t;

                // Caluclate cross products
                ri.cross(t, rixt);
                rj.cross(t, rjxt);

                // G = [-t -rixt t rjxt]
                // And remember, this is a pure velocity constraint, g is always zero!
                var GA = this.jacobianElementA,
                    GB = this.jacobianElementB;
                t.negate(GA.spatial);
                rixt.negate(GA.rotational);
                GB.spatial.copy(t);
                GB.rotational.copy(rjxt);

                var GW = this.computeGW();
                var GiMf = this.computeGiMf();

                var B = - GW * b - h * GiMf;

                return B;
            };

        }, { "../math/Mat3": 27, "../math/Vec3": 30, "./Equation": 20 }], 22: [function (_dereq_, module, exports) {
            module.exports = RotationalEquation;

            var Vec3 = _dereq_('../math/Vec3');
            var Mat3 = _dereq_('../math/Mat3');
            var Equation = _dereq_('./Equation');

            /**
             * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.
             * @class RotationalEquation
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Vec3} [options.axisA]
             * @param {Vec3} [options.axisB]
             * @param {number} [options.maxForce]
             * @extends Equation
             */
            function RotationalEquation(bodyA, bodyB, options) {
                options = options || {};
                var maxForce = typeof (options.maxForce) !== 'undefined' ? options.maxForce : 1e6;

                Equation.call(this, bodyA, bodyB, -maxForce, maxForce);

                this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
                this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);

                this.maxAngle = Math.PI / 2;
            }

            RotationalEquation.prototype = new Equation();
            RotationalEquation.prototype.constructor = RotationalEquation;

            var tmpVec1 = new Vec3();
            var tmpVec2 = new Vec3();

            RotationalEquation.prototype.computeB = function (h) {
                var a = this.a,
                    b = this.b,

                    ni = this.axisA,
                    nj = this.axisB,

                    nixnj = tmpVec1,
                    njxni = tmpVec2,

                    GA = this.jacobianElementA,
                    GB = this.jacobianElementB;

                // Caluclate cross products
                ni.cross(nj, nixnj);
                nj.cross(ni, njxni);

                // g = ni * nj
                // gdot = (nj x ni) * wi + (ni x nj) * wj
                // G = [0 njxni 0 nixnj]
                // W = [vi wi vj wj]
                GA.rotational.copy(njxni);
                GB.rotational.copy(nixnj);

                var g = Math.cos(this.maxAngle) - ni.dot(nj),
                    GW = this.computeGW(),
                    GiMf = this.computeGiMf();

                var B = - g * a - GW * b - h * GiMf;

                return B;
            };


        }, { "../math/Mat3": 27, "../math/Vec3": 30, "./Equation": 20 }], 23: [function (_dereq_, module, exports) {
            module.exports = RotationalMotorEquation;

            var Vec3 = _dereq_('../math/Vec3');
            var Mat3 = _dereq_('../math/Mat3');
            var Equation = _dereq_('./Equation');

            /**
             * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.
             * @class RotationalMotorEquation
             * @constructor
             * @author schteppe
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Number} maxForce
             * @extends Equation
             */
            function RotationalMotorEquation(bodyA, bodyB, maxForce) {
                maxForce = typeof (maxForce) !== 'undefined' ? maxForce : 1e6;
                Equation.call(this, bodyA, bodyB, -maxForce, maxForce);

                /**
                 * World oriented rotational axis
                 * @property {Vec3} axisA
                 */
                this.axisA = new Vec3();

                /**
                 * World oriented rotational axis
                 * @property {Vec3} axisB
                 */
                this.axisB = new Vec3(); // World oriented rotational axis

                /**
                 * Motor velocity
                 * @property {Number} targetVelocity
                 */
                this.targetVelocity = 0;
            }

            RotationalMotorEquation.prototype = new Equation();
            RotationalMotorEquation.prototype.constructor = RotationalMotorEquation;

            RotationalMotorEquation.prototype.computeB = function (h) {
                var a = this.a,
                    b = this.b,
                    bi = this.bi,
                    bj = this.bj,

                    axisA = this.axisA,
                    axisB = this.axisB,

                    GA = this.jacobianElementA,
                    GB = this.jacobianElementB;

                // g = 0
                // gdot = axisA * wi - axisB * wj
                // gdot = G * W = G * [vi wi vj wj]
                // =>
                // G = [0 axisA 0 -axisB]

                GA.rotational.copy(axisA);
                axisB.negate(GB.rotational);

                var GW = this.computeGW() - this.targetVelocity,
                    GiMf = this.computeGiMf();

                var B = - GW * b - h * GiMf;

                return B;
            };

        }, { "../math/Mat3": 27, "../math/Vec3": 30, "./Equation": 20 }], 24: [function (_dereq_, module, exports) {
            var Utils = _dereq_('../utils/Utils');

            module.exports = ContactMaterial;

            /**
             * Defines what happens when two materials meet.
             * @class ContactMaterial
             * @constructor
             * @param {Material} m1
             * @param {Material} m2
             * @param {object} [options]
             * @param {Number} [options.friction=0.3]
             * @param {Number} [options.restitution=0.3]
             * @param {number} [options.contactEquationStiffness=1e7]
             * @param {number} [options.contactEquationRelaxation=3]
             * @param {number} [options.frictionEquationStiffness=1e7]
             * @param {Number} [options.frictionEquationRelaxation=3]
             */
            function ContactMaterial(m1, m2, options) {
                options = Utils.defaults(options, {
                    friction: 0.3,
                    restitution: 0.3,
                    contactEquationStiffness: 1e7,
                    contactEquationRelaxation: 3,
                    frictionEquationStiffness: 1e7,
                    frictionEquationRelaxation: 3
                });

                /**
                 * Identifier of this material
                 * @property {Number} id
                 */
                this.id = ContactMaterial.idCounter++;

                /**
                 * Participating materials
                 * @property {Array} materials
                 * @todo  Should be .materialA and .materialB instead
                 */
                this.materials = [m1, m2];

                /**
                 * Friction coefficient
                 * @property {Number} friction
                 */
                this.friction = options.friction;

                /**
                 * Restitution coefficient
                 * @property {Number} restitution
                 */
                this.restitution = options.restitution;

                /**
                 * Stiffness of the produced contact equations
                 * @property {Number} contactEquationStiffness
                 */
                this.contactEquationStiffness = options.contactEquationStiffness;

                /**
                 * Relaxation time of the produced contact equations
                 * @property {Number} contactEquationRelaxation
                 */
                this.contactEquationRelaxation = options.contactEquationRelaxation;

                /**
                 * Stiffness of the produced friction equations
                 * @property {Number} frictionEquationStiffness
                 */
                this.frictionEquationStiffness = options.frictionEquationStiffness;

                /**
                 * Relaxation time of the produced friction equations
                 * @property {Number} frictionEquationRelaxation
                 */
                this.frictionEquationRelaxation = options.frictionEquationRelaxation;
            }

            ContactMaterial.idCounter = 0;

        }, { "../utils/Utils": 53 }], 25: [function (_dereq_, module, exports) {
            module.exports = Material;

            /**
             * Defines a physics material.
             * @class Material
             * @constructor
             * @param {object} [options]
             * @author schteppe
             */
            function Material(options) {
                var name = '';
                options = options || {};

                // Backwards compatibility fix
                if (typeof (options) === 'string') {
                    name = options;
                    options = {};
                } else if (typeof (options) === 'object') {
                    name = '';
                }

                /**
                 * @property name
                 * @type {String}
                 */
                this.name = name;

                /**
                 * material id.
                 * @property id
                 * @type {number}
                 */
                this.id = Material.idCounter++;

                /**
                 * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.
                 * @property {number} friction
                 */
                this.friction = typeof (options.friction) !== 'undefined' ? options.friction : -1;

                /**
                 * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.
                 * @property {number} restitution
                 */
                this.restitution = typeof (options.restitution) !== 'undefined' ? options.restitution : -1;
            }

            Material.idCounter = 0;

        }, {}], 26: [function (_dereq_, module, exports) {
            module.exports = JacobianElement;

            var Vec3 = _dereq_('./Vec3');

            /**
             * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.
             * @class JacobianElement
             * @constructor
             */
            function JacobianElement() {

                /**
                 * @property {Vec3} spatial
                 */
                this.spatial = new Vec3();

                /**
                 * @property {Vec3} rotational
                 */
                this.rotational = new Vec3();
            }

            /**
             * Multiply with other JacobianElement
             * @method multiplyElement
             * @param  {JacobianElement} element
             * @return {Number}
             */
            JacobianElement.prototype.multiplyElement = function (element) {
                return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);
            };

            /**
             * Multiply with two vectors
             * @method multiplyVectors
             * @param  {Vec3} spatial
             * @param  {Vec3} rotational
             * @return {Number}
             */
            JacobianElement.prototype.multiplyVectors = function (spatial, rotational) {
                return spatial.dot(this.spatial) + rotational.dot(this.rotational);
            };

        }, { "./Vec3": 30 }], 27: [function (_dereq_, module, exports) {
            module.exports = Mat3;

            var Vec3 = _dereq_('./Vec3');

            /**
             * A 3x3 matrix.
             * @class Mat3
             * @constructor
             * @param array elements Array of nine elements. Optional.
             * @author schteppe / http://github.com/schteppe
             */
            function Mat3(elements) {
                /**
                 * A vector of length 9, containing all matrix elements
                 * @property {Array} elements
                 */
                if (elements) {
                    this.elements = elements;
                } else {
                    this.elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];
                }
            }

            /**
             * Sets the matrix to identity
             * @method identity
             * @todo Should perhaps be renamed to setIdentity() to be more clear.
             * @todo Create another function that immediately creates an identity matrix eg. eye()
             */
            Mat3.prototype.identity = function () {
                var e = this.elements;
                e[0] = 1;
                e[1] = 0;
                e[2] = 0;

                e[3] = 0;
                e[4] = 1;
                e[5] = 0;

                e[6] = 0;
                e[7] = 0;
                e[8] = 1;
            };

            /**
             * Set all elements to zero
             * @method setZero
             */
            Mat3.prototype.setZero = function () {
                var e = this.elements;
                e[0] = 0;
                e[1] = 0;
                e[2] = 0;
                e[3] = 0;
                e[4] = 0;
                e[5] = 0;
                e[6] = 0;
                e[7] = 0;
                e[8] = 0;
            };

            /**
             * Sets the matrix diagonal elements from a Vec3
             * @method setTrace
             * @param {Vec3} vec3
             */
            Mat3.prototype.setTrace = function (vec3) {
                var e = this.elements;
                e[0] = vec3.x;
                e[4] = vec3.y;
                e[8] = vec3.z;
            };

            /**
             * Gets the matrix diagonal elements
             * @method getTrace
             * @return {Vec3}
             */
            Mat3.prototype.getTrace = function (target) {
                var target = target || new Vec3();
                var e = this.elements;
                target.x = e[0];
                target.y = e[4];
                target.z = e[8];
            };

            /**
             * Matrix-Vector multiplication
             * @method vmult
             * @param {Vec3} v The vector to multiply with
             * @param {Vec3} target Optional, target to save the result in.
             */
            Mat3.prototype.vmult = function (v, target) {
                target = target || new Vec3();

                var e = this.elements,
                    x = v.x,
                    y = v.y,
                    z = v.z;
                target.x = e[0] * x + e[1] * y + e[2] * z;
                target.y = e[3] * x + e[4] * y + e[5] * z;
                target.z = e[6] * x + e[7] * y + e[8] * z;

                return target;
            };

            /**
             * Matrix-scalar multiplication
             * @method smult
             * @param {Number} s
             */
            Mat3.prototype.smult = function (s) {
                for (var i = 0; i < this.elements.length; i++) {
                    this.elements[i] *= s;
                }
            };

            /**
             * Matrix multiplication
             * @method mmult
             * @param {Mat3} m Matrix to multiply with from left side.
             * @return {Mat3} The result.
             */
            Mat3.prototype.mmult = function (m, target) {
                var r = target || new Mat3();
                for (var i = 0; i < 3; i++) {
                    for (var j = 0; j < 3; j++) {
                        var sum = 0.0;
                        for (var k = 0; k < 3; k++) {
                            sum += m.elements[i + k * 3] * this.elements[k + j * 3];
                        }
                        r.elements[i + j * 3] = sum;
                    }
                }
                return r;
            };

            /**
             * Scale each column of the matrix
             * @method scale
             * @param {Vec3} v
             * @return {Mat3} The result.
             */
            Mat3.prototype.scale = function (v, target) {
                target = target || new Mat3();
                var e = this.elements,
                    t = target.elements;
                for (var i = 0; i !== 3; i++) {
                    t[3 * i + 0] = v.x * e[3 * i + 0];
                    t[3 * i + 1] = v.y * e[3 * i + 1];
                    t[3 * i + 2] = v.z * e[3 * i + 2];
                }
                return target;
            };

            /**
             * Solve Ax=b
             * @method solve
             * @param {Vec3} b The right hand side
             * @param {Vec3} target Optional. Target vector to save in.
             * @return {Vec3} The solution x
             * @todo should reuse arrays
             */
            Mat3.prototype.solve = function (b, target) {
                target = target || new Vec3();

                // Construct equations
                var nr = 3; // num rows
                var nc = 4; // num cols
                var eqns = [];
                for (var i = 0; i < nr * nc; i++) {
                    eqns.push(0);
                }
                var i, j;
                for (i = 0; i < 3; i++) {
                    for (j = 0; j < 3; j++) {
                        eqns[i + nc * j] = this.elements[i + 3 * j];
                    }
                }
                eqns[3 + 4 * 0] = b.x;
                eqns[3 + 4 * 1] = b.y;
                eqns[3 + 4 * 2] = b.z;

                // Compute right upper triangular version of the matrix - Gauss elimination
                var n = 3, k = n, np;
                var kp = 4; // num rows
                var p, els;
                do {
                    i = k - n;
                    if (eqns[i + nc * i] === 0) {
                        // the pivot is null, swap lines
                        for (j = i + 1; j < k; j++) {
                            if (eqns[i + nc * j] !== 0) {
                                np = kp;
                                do {  // do ligne( i ) = ligne( i ) + ligne( k )
                                    p = kp - np;
                                    eqns[p + nc * i] += eqns[p + nc * j];
                                } while (--np);
                                break;
                            }
                        }
                    }
                    if (eqns[i + nc * i] !== 0) {
                        for (j = i + 1; j < k; j++) {
                            var multiplier = eqns[i + nc * j] / eqns[i + nc * i];
                            np = kp;
                            do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )
                                p = kp - np;
                                eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
                            } while (--np);
                        }
                    }
                } while (--n);

                // Get the solution
                target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];
                target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];
                target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];

                if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {
                    throw "Could not solve equation! Got x=[" + target.toString() + "], b=[" + b.toString() + "], A=[" + this.toString() + "]";
                }

                return target;
            };

            /**
             * Get an element in the matrix by index. Index starts at 0, not 1!!!
             * @method e
             * @param {Number} row
             * @param {Number} column
             * @param {Number} value Optional. If provided, the matrix element will be set to this value.
             * @return {Number}
             */
            Mat3.prototype.e = function (row, column, value) {
                if (value === undefined) {
                    return this.elements[column + 3 * row];
                } else {
                    // Set value
                    this.elements[column + 3 * row] = value;
                }
            };

            /**
             * Copy another matrix into this matrix object.
             * @method copy
             * @param {Mat3} source
             * @return {Mat3} this
             */
            Mat3.prototype.copy = function (source) {
                for (var i = 0; i < source.elements.length; i++) {
                    this.elements[i] = source.elements[i];
                }
                return this;
            };

            /**
             * Returns a string representation of the matrix.
             * @method toString
             * @return string
             */
            Mat3.prototype.toString = function () {
                var r = "";
                var sep = ",";
                for (var i = 0; i < 9; i++) {
                    r += this.elements[i] + sep;
                }
                return r;
            };

            /**
             * reverse the matrix
             * @method reverse
             * @param {Mat3} target Optional. Target matrix to save in.
             * @return {Mat3} The solution x
             */
            Mat3.prototype.reverse = function (target) {

                target = target || new Mat3();

                // Construct equations
                var nr = 3; // num rows
                var nc = 6; // num cols
                var eqns = [];
                for (var i = 0; i < nr * nc; i++) {
                    eqns.push(0);
                }
                var i, j;
                for (i = 0; i < 3; i++) {
                    for (j = 0; j < 3; j++) {
                        eqns[i + nc * j] = this.elements[i + 3 * j];
                    }
                }
                eqns[3 + 6 * 0] = 1;
                eqns[3 + 6 * 1] = 0;
                eqns[3 + 6 * 2] = 0;
                eqns[4 + 6 * 0] = 0;
                eqns[4 + 6 * 1] = 1;
                eqns[4 + 6 * 2] = 0;
                eqns[5 + 6 * 0] = 0;
                eqns[5 + 6 * 1] = 0;
                eqns[5 + 6 * 2] = 1;

                // Compute right upper triangular version of the matrix - Gauss elimination
                var n = 3, k = n, np;
                var kp = nc; // num rows
                var p;
                do {
                    i = k - n;
                    if (eqns[i + nc * i] === 0) {
                        // the pivot is null, swap lines
                        for (j = i + 1; j < k; j++) {
                            if (eqns[i + nc * j] !== 0) {
                                np = kp;
                                do { // do line( i ) = line( i ) + line( k )
                                    p = kp - np;
                                    eqns[p + nc * i] += eqns[p + nc * j];
                                } while (--np);
                                break;
                            }
                        }
                    }
                    if (eqns[i + nc * i] !== 0) {
                        for (j = i + 1; j < k; j++) {
                            var multiplier = eqns[i + nc * j] / eqns[i + nc * i];
                            np = kp;
                            do { // do line( k ) = line( k ) - multiplier * line( i )
                                p = kp - np;
                                eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
                            } while (--np);
                        }
                    }
                } while (--n);

                // eliminate the upper left triangle of the matrix
                i = 2;
                do {
                    j = i - 1;
                    do {
                        var multiplier = eqns[i + nc * j] / eqns[i + nc * i];
                        np = nc;
                        do {
                            p = nc - np;
                            eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
                        } while (--np);
                    } while (j--);
                } while (--i);

                // operations on the diagonal
                i = 2;
                do {
                    var multiplier = 1 / eqns[i + nc * i];
                    np = nc;
                    do {
                        p = nc - np;
                        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;
                    } while (--np);
                } while (i--);

                i = 2;
                do {
                    j = 2;
                    do {
                        p = eqns[nr + j + nc * i];
                        if (isNaN(p) || p === Infinity) {
                            throw "Could not reverse! A=[" + this.toString() + "]";
                        }
                        target.e(i, j, p);
                    } while (j--);
                } while (i--);

                return target;
            };

            /**
             * Set the matrix from a quaterion
             * @method setRotationFromQuaternion
             * @param {Quaternion} q
             */
            Mat3.prototype.setRotationFromQuaternion = function (q) {
                var x = q.x, y = q.y, z = q.z, w = q.w,
                    x2 = x + x, y2 = y + y, z2 = z + z,
                    xx = x * x2, xy = x * y2, xz = x * z2,
                    yy = y * y2, yz = y * z2, zz = z * z2,
                    wx = w * x2, wy = w * y2, wz = w * z2,
                    e = this.elements;

                e[3 * 0 + 0] = 1 - (yy + zz);
                e[3 * 0 + 1] = xy - wz;
                e[3 * 0 + 2] = xz + wy;

                e[3 * 1 + 0] = xy + wz;
                e[3 * 1 + 1] = 1 - (xx + zz);
                e[3 * 1 + 2] = yz - wx;

                e[3 * 2 + 0] = xz - wy;
                e[3 * 2 + 1] = yz + wx;
                e[3 * 2 + 2] = 1 - (xx + yy);

                return this;
            };

            /**
             * Transpose the matrix
             * @method transpose
             * @param  {Mat3} target Where to store the result.
             * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.
             */
            Mat3.prototype.transpose = function (target) {
                target = target || new Mat3();

                var Mt = target.elements,
                    M = this.elements;

                for (var i = 0; i !== 3; i++) {
                    for (var j = 0; j !== 3; j++) {
                        Mt[3 * i + j] = M[3 * j + i];
                    }
                }

                return target;
            };

        }, { "./Vec3": 30 }], 28: [function (_dereq_, module, exports) {
            module.exports = Quaternion;

            var Vec3 = _dereq_('./Vec3');

            /**
             * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.
             * @class Quaternion
             * @constructor
             * @param {Number} x Multiplier of the imaginary basis vector i.
             * @param {Number} y Multiplier of the imaginary basis vector j.
             * @param {Number} z Multiplier of the imaginary basis vector k.
             * @param {Number} w Multiplier of the real part.
             * @see http://en.wikipedia.org/wiki/Quaternion
             */
            function Quaternion(x, y, z, w) {
                /**
                 * @property {Number} x
                 */
                this.x = x !== undefined ? x : 0;

                /**
                 * @property {Number} y
                 */
                this.y = y !== undefined ? y : 0;

                /**
                 * @property {Number} z
                 */
                this.z = z !== undefined ? z : 0;

                /**
                 * The multiplier of the real quaternion basis vector.
                 * @property {Number} w
                 */
                this.w = w !== undefined ? w : 1;
            }

            /**
             * Set the value of the quaternion.
             * @method set
             * @param {Number} x
             * @param {Number} y
             * @param {Number} z
             * @param {Number} w
             */
            Quaternion.prototype.set = function (x, y, z, w) {
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
            };

            /**
             * Convert to a readable format
             * @method toString
             * @return string
             */
            Quaternion.prototype.toString = function () {
                return this.x + "," + this.y + "," + this.z + "," + this.w;
            };

            /**
             * Convert to an Array
             * @method toArray
             * @return Array
             */
            Quaternion.prototype.toArray = function () {
                return [this.x, this.y, this.z, this.w];
            };

            /**
             * Set the quaternion components given an axis and an angle.
             * @method setFromAxisAngle
             * @param {Vec3} axis
             * @param {Number} angle in radians
             */
            Quaternion.prototype.setFromAxisAngle = function (axis, angle) {
                var s = Math.sin(angle * 0.5);
                this.x = axis.x * s;
                this.y = axis.y * s;
                this.z = axis.z * s;
                this.w = Math.cos(angle * 0.5);
            };

            /**
             * Converts the quaternion to axis/angle representation.
             * @method toAxisAngle
             * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.
             * @return Array An array, first elemnt is the axis and the second is the angle in radians.
             */
            Quaternion.prototype.toAxisAngle = function (targetAxis) {
                targetAxis = targetAxis || new Vec3();
                this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised
                var angle = 2 * Math.acos(this.w);
                var s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.
                if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt
                    // if s close to zero then direction of axis not important
                    targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;
                    targetAxis.y = this.y;
                    targetAxis.z = this.z;
                } else {
                    targetAxis.x = this.x / s; // normalise axis
                    targetAxis.y = this.y / s;
                    targetAxis.z = this.z / s;
                }
                return [targetAxis, angle];
            };

            var sfv_t1 = new Vec3(),
                sfv_t2 = new Vec3();

            /**
             * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.
             * @method setFromVectors
             * @param {Vec3} u
             * @param {Vec3} v
             */
            Quaternion.prototype.setFromVectors = function (u, v) {
                if (u.isAntiparallelTo(v)) {
                    var t1 = sfv_t1;
                    var t2 = sfv_t2;

                    u.tangents(t1, t2);
                    this.setFromAxisAngle(t1, Math.PI);
                } else {
                    var a = u.cross(v);
                    this.x = a.x;
                    this.y = a.y;
                    this.z = a.z;
                    this.w = Math.sqrt(Math.pow(u.norm(), 2) * Math.pow(v.norm(), 2)) + u.dot(v);
                    this.normalize();
                }
            };

            /**
             * Quaternion multiplication
             * @method mult
             * @param {Quaternion} q
             * @param {Quaternion} target Optional.
             * @return {Quaternion}
             */
            var Quaternion_mult_va = new Vec3();
            var Quaternion_mult_vb = new Vec3();
            var Quaternion_mult_vaxvb = new Vec3();
            Quaternion.prototype.mult = function (q, target) {
                target = target || new Quaternion();
                var w = this.w,
                    va = Quaternion_mult_va,
                    vb = Quaternion_mult_vb,
                    vaxvb = Quaternion_mult_vaxvb;

                va.set(this.x, this.y, this.z);
                vb.set(q.x, q.y, q.z);
                target.w = w * q.w - va.dot(vb);
                va.cross(vb, vaxvb);

                target.x = w * vb.x + q.w * va.x + vaxvb.x;
                target.y = w * vb.y + q.w * va.y + vaxvb.y;
                target.z = w * vb.z + q.w * va.z + vaxvb.z;

                return target;
            };

            /**
             * Get the inverse quaternion rotation.
             * @method inverse
             * @param {Quaternion} target
             * @return {Quaternion}
             */
            Quaternion.prototype.inverse = function (target) {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                target = target || new Quaternion();

                this.conjugate(target);
                var inorm2 = 1 / (x * x + y * y + z * z + w * w);
                target.x *= inorm2;
                target.y *= inorm2;
                target.z *= inorm2;
                target.w *= inorm2;

                return target;
            };

            /**
             * Get the quaternion conjugate
             * @method conjugate
             * @param {Quaternion} target
             * @return {Quaternion}
             */
            Quaternion.prototype.conjugate = function (target) {
                target = target || new Quaternion();

                target.x = -this.x;
                target.y = -this.y;
                target.z = -this.z;
                target.w = this.w;

                return target;
            };

            /**
             * Normalize the quaternion. Note that this changes the values of the quaternion.
             * @method normalize
             */
            Quaternion.prototype.normalize = function () {
                var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
                if (l === 0) {
                    this.x = 0;
                    this.y = 0;
                    this.z = 0;
                    this.w = 0;
                } else {
                    l = 1 / l;
                    this.x *= l;
                    this.y *= l;
                    this.z *= l;
                    this.w *= l;
                }
            };

            /**
             * Approximation of quaternion normalization. Works best when quat is already almost-normalized.
             * @method normalizeFast
             * @see http://jsperf.com/fast-quaternion-normalization
             * @author unphased, https://github.com/unphased
             */
            Quaternion.prototype.normalizeFast = function () {
                var f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;
                if (f === 0) {
                    this.x = 0;
                    this.y = 0;
                    this.z = 0;
                    this.w = 0;
                } else {
                    this.x *= f;
                    this.y *= f;
                    this.z *= f;
                    this.w *= f;
                }
            };

            /**
             * Multiply the quaternion by a vector
             * @method vmult
             * @param {Vec3} v
             * @param {Vec3} target Optional
             * @return {Vec3}
             */
            Quaternion.prototype.vmult = function (v, target) {
                target = target || new Vec3();

                var x = v.x,
                    y = v.y,
                    z = v.z;

                var qx = this.x,
                    qy = this.y,
                    qz = this.z,
                    qw = this.w;

                // q*v
                var ix = qw * x + qy * z - qz * y,
                    iy = qw * y + qz * x - qx * z,
                    iz = qw * z + qx * y - qy * x,
                    iw = -qx * x - qy * y - qz * z;

                target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

                return target;
            };

            /**
             * Copies value of source to this quaternion.
             * @method copy
             * @param {Quaternion} source
             * @return {Quaternion} this
             */
            Quaternion.prototype.copy = function (source) {
                this.x = source.x;
                this.y = source.y;
                this.z = source.z;
                this.w = source.w;
                return this;
            };

            /**
             * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm
             * @method toEuler
             * @param {Vec3} target
             * @param string order Three-character string e.g. "YZX", which also is default.
             */
            Quaternion.prototype.toEuler = function (target, order) {
                order = order || "YZX";

                var heading, attitude, bank;
                var x = this.x, y = this.y, z = this.z, w = this.w;

                switch (order) {
                    case "YZX":
                        var test = x * y + z * w;
                        if (test > 0.499) { // singularity at north pole
                            heading = 2 * Math.atan2(x, w);
                            attitude = Math.PI / 2;
                            bank = 0;
                        }
                        if (test < -0.499) { // singularity at south pole
                            heading = -2 * Math.atan2(x, w);
                            attitude = - Math.PI / 2;
                            bank = 0;
                        }
                        if (isNaN(heading)) {
                            var sqx = x * x;
                            var sqy = y * y;
                            var sqz = z * z;
                            heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading
                            attitude = Math.asin(2 * test); // attitude
                            bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank
                        }
                        break;
                    default:
                        throw new Error("Euler order " + order + " not supported yet.");
                }

                target.y = heading;
                target.z = attitude;
                target.x = bank;
            };

            /**
             * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m
             * @method setFromEuler
             * @param {Number} x
             * @param {Number} y
             * @param {Number} z
             * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination
             */
            Quaternion.prototype.setFromEuler = function (x, y, z, order) {
                order = order || "XYZ";

                var c1 = Math.cos(x / 2);
                var c2 = Math.cos(y / 2);
                var c3 = Math.cos(z / 2);
                var s1 = Math.sin(x / 2);
                var s2 = Math.sin(y / 2);
                var s3 = Math.sin(z / 2);

                if (order === 'XYZ') {

                    this.x = s1 * c2 * c3 + c1 * s2 * s3;
                    this.y = c1 * s2 * c3 - s1 * c2 * s3;
                    this.z = c1 * c2 * s3 + s1 * s2 * c3;
                    this.w = c1 * c2 * c3 - s1 * s2 * s3;

                } else if (order === 'YXZ') {

                    this.x = s1 * c2 * c3 + c1 * s2 * s3;
                    this.y = c1 * s2 * c3 - s1 * c2 * s3;
                    this.z = c1 * c2 * s3 - s1 * s2 * c3;
                    this.w = c1 * c2 * c3 + s1 * s2 * s3;

                } else if (order === 'ZXY') {

                    this.x = s1 * c2 * c3 - c1 * s2 * s3;
                    this.y = c1 * s2 * c3 + s1 * c2 * s3;
                    this.z = c1 * c2 * s3 + s1 * s2 * c3;
                    this.w = c1 * c2 * c3 - s1 * s2 * s3;

                } else if (order === 'ZYX') {

                    this.x = s1 * c2 * c3 - c1 * s2 * s3;
                    this.y = c1 * s2 * c3 + s1 * c2 * s3;
                    this.z = c1 * c2 * s3 - s1 * s2 * c3;
                    this.w = c1 * c2 * c3 + s1 * s2 * s3;

                } else if (order === 'YZX') {

                    this.x = s1 * c2 * c3 + c1 * s2 * s3;
                    this.y = c1 * s2 * c3 + s1 * c2 * s3;
                    this.z = c1 * c2 * s3 - s1 * s2 * c3;
                    this.w = c1 * c2 * c3 - s1 * s2 * s3;

                } else if (order === 'XZY') {

                    this.x = s1 * c2 * c3 - c1 * s2 * s3;
                    this.y = c1 * s2 * c3 - s1 * c2 * s3;
                    this.z = c1 * c2 * s3 + s1 * s2 * c3;
                    this.w = c1 * c2 * c3 + s1 * s2 * s3;

                }

                return this;

            };

            Quaternion.prototype.clone = function () {
                return new Quaternion(this.x, this.y, this.z, this.w);
            };
        }, { "./Vec3": 30 }], 29: [function (_dereq_, module, exports) {
            var Vec3 = _dereq_('./Vec3');
            var Quaternion = _dereq_('./Quaternion');

            module.exports = Transform;

            /**
             * @class Transform
             * @constructor
             */
            function Transform(options) {
                options = options || {};

                /**
                 * @property {Vec3} position
                 */
                this.position = new Vec3();
                if (options.position) {
                    this.position.copy(options.position);
                }

                /**
                 * @property {Quaternion} quaternion
                 */
                this.quaternion = new Quaternion();
                if (options.quaternion) {
                    this.quaternion.copy(options.quaternion);
                }
            }

            var tmpQuat = new Quaternion();

            /**
             * @static
             * @method pointToLocaFrame
             * @param {Vec3} position
             * @param {Quaternion} quaternion
             * @param {Vec3} worldPoint
             * @param {Vec3} result
             */
            Transform.pointToLocalFrame = function (position, quaternion, worldPoint, result) {
                var result = result || new Vec3();
                worldPoint.vsub(position, result);
                quaternion.conjugate(tmpQuat);
                tmpQuat.vmult(result, result);
                return result;
            };

            /**
             * Get a global point in local transform coordinates.
             * @method pointToLocal
             * @param  {Vec3} point
             * @param  {Vec3} result
             * @return {Vec3} The "result" vector object
             */
            Transform.prototype.pointToLocal = function (worldPoint, result) {
                return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);
            };

            /**
             * @static
             * @method pointToWorldFrame
             * @param {Vec3} position
             * @param {Vec3} quaternion
             * @param {Vec3} localPoint
             * @param {Vec3} result
             */
            Transform.pointToWorldFrame = function (position, quaternion, localPoint, result) {
                var result = result || new Vec3();
                quaternion.vmult(localPoint, result);
                result.vadd(position, result);
                return result;
            };

            /**
             * Get a local point in global transform coordinates.
             * @method pointToWorld
             * @param  {Vec3} point
             * @param  {Vec3} result
             * @return {Vec3} The "result" vector object
             */
            Transform.prototype.pointToWorld = function (localPoint, result) {
                return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);
            };


            Transform.prototype.vectorToWorldFrame = function (localVector, result) {
                var result = result || new Vec3();
                this.quaternion.vmult(localVector, result);
                return result;
            };

            Transform.vectorToWorldFrame = function (quaternion, localVector, result) {
                quaternion.vmult(localVector, result);
                return result;
            };

            Transform.vectorToLocalFrame = function (position, quaternion, worldVector, result) {
                var result = result || new Vec3();
                quaternion.w *= -1;
                quaternion.vmult(worldVector, result);
                quaternion.w *= -1;
                return result;
            };

        }, { "./Quaternion": 28, "./Vec3": 30 }], 30: [function (_dereq_, module, exports) {
            module.exports = Vec3;

            var Mat3 = _dereq_('./Mat3');

            /**
             * 3-dimensional vector
             * @class Vec3
             * @constructor
             * @param {Number} x
             * @param {Number} y
             * @param {Number} z
             * @author schteppe
             * @example
             *     var v = new Vec3(1, 2, 3);
             *     console.log('x=' + v.x); // x=1
             */
            function Vec3(x, y, z) {
                /**
                 * @property x
                 * @type {Number}
                 */
                this.x = x || 0.0;

                /**
                 * @property y
                 * @type {Number}
                 */
                this.y = y || 0.0;

                /**
                 * @property z
                 * @type {Number}
                 */
                this.z = z || 0.0;
            }

            /**
             * @static
             * @property {Vec3} ZERO
             */
            Vec3.ZERO = new Vec3(0, 0, 0);

            /**
             * @static
             * @property {Vec3} UNIT_X
             */
            Vec3.UNIT_X = new Vec3(1, 0, 0);

            /**
             * @static
             * @property {Vec3} UNIT_Y
             */
            Vec3.UNIT_Y = new Vec3(0, 1, 0);

            /**
             * @static
             * @property {Vec3} UNIT_Z
             */
            Vec3.UNIT_Z = new Vec3(0, 0, 1);

            /**
             * Vector cross product
             * @method cross
             * @param {Vec3} v
             * @param {Vec3} target Optional. Target to save in.
             * @return {Vec3}
             */
            Vec3.prototype.cross = function (v, target) {
                var vx = v.x, vy = v.y, vz = v.z, x = this.x, y = this.y, z = this.z;
                target = target || new Vec3();

                target.x = (y * vz) - (z * vy);
                target.y = (z * vx) - (x * vz);
                target.z = (x * vy) - (y * vx);

                return target;
            };

            /**
             * Set the vectors' 3 elements
             * @method set
             * @param {Number} x
             * @param {Number} y
             * @param {Number} z
             * @return Vec3
             */
            Vec3.prototype.set = function (x, y, z) {
                this.x = x;
                this.y = y;
                this.z = z;
                return this;
            };

            /**
             * Set all components of the vector to zero.
             * @method setZero
             */
            Vec3.prototype.setZero = function () {
                this.x = this.y = this.z = 0;
            };

            /**
             * Vector addition
             * @method vadd
             * @param {Vec3} v
             * @param {Vec3} target Optional.
             * @return {Vec3}
             */
            Vec3.prototype.vadd = function (v, target) {
                if (target) {
                    target.x = v.x + this.x;
                    target.y = v.y + this.y;
                    target.z = v.z + this.z;
                } else {
                    return new Vec3(this.x + v.x,
                        this.y + v.y,
                        this.z + v.z);
                }
            };

            /**
             * Vector subtraction
             * @method vsub
             * @param {Vec3} v
             * @param {Vec3} target Optional. Target to save in.
             * @return {Vec3}
             */
            Vec3.prototype.vsub = function (v, target) {
                if (target) {
                    target.x = this.x - v.x;
                    target.y = this.y - v.y;
                    target.z = this.z - v.z;
                } else {
                    return new Vec3(this.x - v.x,
                        this.y - v.y,
                        this.z - v.z);
                }
            };

            /**
             * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c
             * @method crossmat
             * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf
             * @return {Mat3}
             */
            Vec3.prototype.crossmat = function () {
                return new Mat3([0, -this.z, this.y,
                    this.z, 0, -this.x,
                    -this.y, this.x, 0]);
            };

            /**
             * Normalize the vector. Note that this changes the values in the vector.
             * @method normalize
             * @return {Number} Returns the norm of the vector
             */
            Vec3.prototype.normalize = function () {
                var x = this.x, y = this.y, z = this.z;
                var n = Math.sqrt(x * x + y * y + z * z);
                if (n > 0.0) {
                    var invN = 1 / n;
                    this.x *= invN;
                    this.y *= invN;
                    this.z *= invN;
                } else {
                    // Make something up
                    this.x = 0;
                    this.y = 0;
                    this.z = 0;
                }
                return n;
            };

            /**
             * Get the version of this vector that is of length 1.
             * @method unit
             * @param {Vec3} target Optional target to save in
             * @return {Vec3} Returns the unit vector
             */
            Vec3.prototype.unit = function (target) {
                target = target || new Vec3();
                var x = this.x, y = this.y, z = this.z;
                var ninv = Math.sqrt(x * x + y * y + z * z);
                if (ninv > 0.0) {
                    ninv = 1.0 / ninv;
                    target.x = x * ninv;
                    target.y = y * ninv;
                    target.z = z * ninv;
                } else {
                    target.x = 1;
                    target.y = 0;
                    target.z = 0;
                }
                return target;
            };

            /**
             * Get the length of the vector
             * @method norm
             * @return {Number}
             * @deprecated Use .length() instead
             */
            Vec3.prototype.norm = function () {
                var x = this.x, y = this.y, z = this.z;
                return Math.sqrt(x * x + y * y + z * z);
            };

            /**
             * Get the length of the vector
             * @method length
             * @return {Number}
             */
            Vec3.prototype.length = Vec3.prototype.norm;

            /**
             * Get the squared length of the vector
             * @method norm2
             * @return {Number}
             * @deprecated Use .lengthSquared() instead.
             */
            Vec3.prototype.norm2 = function () {
                return this.dot(this);
            };

            /**
             * Get the squared length of the vector.
             * @method lengthSquared
             * @return {Number}
             */
            Vec3.prototype.lengthSquared = Vec3.prototype.norm2;

            /**
             * Get distance from this point to another point
             * @method distanceTo
             * @param  {Vec3} p
             * @return {Number}
             */
            Vec3.prototype.distanceTo = function (p) {
                var x = this.x, y = this.y, z = this.z;
                var px = p.x, py = p.y, pz = p.z;
                return Math.sqrt((px - x) * (px - x) +
                    (py - y) * (py - y) +
                    (pz - z) * (pz - z));
            };

            /**
             * Get squared distance from this point to another point
             * @method distanceSquared
             * @param  {Vec3} p
             * @return {Number}
             */
            Vec3.prototype.distanceSquared = function (p) {
                var x = this.x, y = this.y, z = this.z;
                var px = p.x, py = p.y, pz = p.z;
                return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);
            };

            /**
             * Multiply all the components of the vector with a scalar.
             * @deprecated Use .scale instead
             * @method mult
             * @param {Number} scalar
             * @param {Vec3} target The vector to save the result in.
             * @return {Vec3}
             * @deprecated Use .scale() instead
             */
            Vec3.prototype.mult = function (scalar, target) {
                target = target || new Vec3();
                var x = this.x,
                    y = this.y,
                    z = this.z;
                target.x = scalar * x;
                target.y = scalar * y;
                target.z = scalar * z;
                return target;
            };

            /**
             * Multiply the vector with a scalar.
             * @method scale
             * @param {Number} scalar
             * @param {Vec3} target
             * @return {Vec3}
             */
            Vec3.prototype.scale = Vec3.prototype.mult;

            /**
             * Calculate dot product
             * @method dot
             * @param {Vec3} v
             * @return {Number}
             */
            Vec3.prototype.dot = function (v) {
                return this.x * v.x + this.y * v.y + this.z * v.z;
            };

            /**
             * @method isZero
             * @return bool
             */
            Vec3.prototype.isZero = function () {
                return this.x === 0 && this.y === 0 && this.z === 0;
            };

            /**
             * Make the vector point in the opposite direction.
             * @method negate
             * @param {Vec3} target Optional target to save in
             * @return {Vec3}
             */
            Vec3.prototype.negate = function (target) {
                target = target || new Vec3();
                target.x = -this.x;
                target.y = -this.y;
                target.z = -this.z;
                return target;
            };

            /**
             * Compute two artificial tangents to the vector
             * @method tangents
             * @param {Vec3} t1 Vector object to save the first tangent in
             * @param {Vec3} t2 Vector object to save the second tangent in
             */
            var Vec3_tangents_n = new Vec3();
            var Vec3_tangents_randVec = new Vec3();
            Vec3.prototype.tangents = function (t1, t2) {
                var norm = this.norm();
                if (norm > 0.0) {
                    var n = Vec3_tangents_n;
                    var inorm = 1 / norm;
                    n.set(this.x * inorm, this.y * inorm, this.z * inorm);
                    var randVec = Vec3_tangents_randVec;
                    if (Math.abs(n.x) < 0.9) {
                        randVec.set(1, 0, 0);
                        n.cross(randVec, t1);
                    } else {
                        randVec.set(0, 1, 0);
                        n.cross(randVec, t1);
                    }
                    n.cross(t1, t2);
                } else {
                    // The normal length is zero, make something up
                    t1.set(1, 0, 0);
                    t2.set(0, 1, 0);
                }
            };

            /**
             * Converts to a more readable format
             * @method toString
             * @return string
             */
            Vec3.prototype.toString = function () {
                return this.x + "," + this.y + "," + this.z;
            };

            /**
             * Converts to an array
             * @method toArray
             * @return Array
             */
            Vec3.prototype.toArray = function () {
                return [this.x, this.y, this.z];
            };

            /**
             * Copies value of source to this vector.
             * @method copy
             * @param {Vec3} source
             * @return {Vec3} this
             */
            Vec3.prototype.copy = function (source) {
                this.x = source.x;
                this.y = source.y;
                this.z = source.z;
                return this;
            };


            /**
             * Do a linear interpolation between two vectors
             * @method lerp
             * @param {Vec3} v
             * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.
             * @param {Vec3} target
             */
            Vec3.prototype.lerp = function (v, t, target) {
                var x = this.x, y = this.y, z = this.z;
                target.x = x + (v.x - x) * t;
                target.y = y + (v.y - y) * t;
                target.z = z + (v.z - z) * t;
            };

            /**
             * Check if a vector equals is almost equal to another one.
             * @method almostEquals
             * @param {Vec3} v
             * @param {Number} precision
             * @return bool
             */
            Vec3.prototype.almostEquals = function (v, precision) {
                if (precision === undefined) {
                    precision = 1e-6;
                }
                if (Math.abs(this.x - v.x) > precision ||
                    Math.abs(this.y - v.y) > precision ||
                    Math.abs(this.z - v.z) > precision) {
                    return false;
                }
                return true;
            };

            /**
             * Check if a vector is almost zero
             * @method almostZero
             * @param {Number} precision
             */
            Vec3.prototype.almostZero = function (precision) {
                if (precision === undefined) {
                    precision = 1e-6;
                }
                if (Math.abs(this.x) > precision ||
                    Math.abs(this.y) > precision ||
                    Math.abs(this.z) > precision) {
                    return false;
                }
                return true;
            };

            var antip_neg = new Vec3();

            /**
             * Check if the vector is anti-parallel to another vector.
             * @method isAntiparallelTo
             * @param  {Vec3}  v
             * @param  {Number}  precision Set to zero for exact comparisons
             * @return {Boolean}
             */
            Vec3.prototype.isAntiparallelTo = function (v, precision) {
                this.negate(antip_neg);
                return antip_neg.almostEquals(v, precision);
            };

            /**
             * Clone the vector
             * @method clone
             * @return {Vec3}
             */
            Vec3.prototype.clone = function () {
                return new Vec3(this.x, this.y, this.z);
            };
        }, { "./Mat3": 27 }], 31: [function (_dereq_, module, exports) {
            module.exports = Body;

            var EventTarget = _dereq_('../utils/EventTarget');
            var Shape = _dereq_('../shapes/Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Mat3 = _dereq_('../math/Mat3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Material = _dereq_('../material/Material');
            var AABB = _dereq_('../collision/AABB');
            var Box = _dereq_('../shapes/Box');

            /**
             * Base class for all body types.
             * @class Body
             * @constructor
             * @extends EventTarget
             * @param {object} [options]
             * @param {Vec3} [options.position]
             * @param {Vec3} [options.velocity]
             * @param {Vec3} [options.angularVelocity]
             * @param {Quaternion} [options.quaternion]
             * @param {number} [options.mass]
             * @param {Material} [options.material]
             * @param {number} [options.type]
             * @param {number} [options.linearDamping=0.01]
             * @param {number} [options.angularDamping=0.01]
             * @param {boolean} [options.allowSleep=true]
             * @param {number} [options.sleepSpeedLimit=0.1]
             * @param {number} [options.sleepTimeLimit=1]
             * @param {number} [options.collisionFilterGroup=1]
             * @param {number} [options.collisionFilterMask=1]
             * @param {boolean} [options.fixedRotation=false]
             * @param {Body} [options.shape]
             * @example
             *     var body = new Body({
             *         mass: 1
             *     });
             *     var shape = new Sphere(1);
             *     body.addShape(shape);
             *     world.add(body);
             */
            function Body(options) {
                options = options || {};

                EventTarget.apply(this);

                this.id = Body.idCounter++;

                //this.ignoreGravity = false;

                //this.hasCollision = false;

                this.name = "";

                this.gameType = 0;

                /**
                 * Reference to the world the body is living in
                 * @property world
                 * @type {World}
                 */
                this.world = null;

                /**
                 * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, "this" will refer to this Body object.
                 * @property preStep
                 * @type {Function}
                 * @deprecated Use World events instead
                 */
                this.preStep = null;

                /**
                 * Callback function that is used AFTER stepping the system. Inside the function, "this" will refer to this Body object.
                 * @property postStep
                 * @type {Function}
                 * @deprecated Use World events instead
                 */
                this.postStep = null;

                this.vlambda = new Vec3();

                /**
                 * @property {Number} collisionFilterGroup
                 */
                this.collisionFilterGroup = typeof (options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;

                /**
                 * @property {Number} collisionFilterMask
                 */
                this.collisionFilterMask = typeof (options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;

                /**
                 * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
                 * @property {Number} collisionResponse
                 */
                this.collisionResponse = true;

                /**
                 * @property position
                 * @type {Vec3}
                 */
                this.position = new Vec3();

                if (options.position) {
                    this.position.copy(options.position);
                }

                /**
                 * @property {Vec3} previousPosition
                 */
                this.previousPosition = new Vec3();

                /**
                 * Initial position of the body
                 * @property initPosition
                 * @type {Vec3}
                 */
                this.initPosition = new Vec3();

                /**
                 * @property velocity
                 * @type {Vec3}
                 */
                this.velocity = new Vec3();

                if (options.velocity) {
                    this.velocity.copy(options.velocity);
                }

                /**
                 * @property initVelocity
                 * @type {Vec3}
                 */
                this.initVelocity = new Vec3();

                /**
                 * Linear force on the body
                 * @property force
                 * @type {Vec3}
                 */
                this.force = new Vec3();

                var mass = typeof (options.mass) === 'number' ? options.mass : 0;

                /**
                 * @property mass
                 * @type {Number}
                 * @default 0
                 */
                this.mass = mass;

                /**
                 * @property invMass
                 * @type {Number}
                 */
                this.invMass = mass > 0 ? 1.0 / mass : 0;

                /**
                 * @property material
                 * @type {Material}
                 */
                this.material = options.material || null;

                /**
                 * @property linearDamping
                 * @type {Number}
                 */
                this.linearDamping = typeof (options.linearDamping) === 'number' ? options.linearDamping : 0.01;

                /**
                 * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.
                 * @property type
                 * @type {Number}
                 */
                this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);
                if (typeof (options.type) === typeof (Body.STATIC)) {
                    this.type = options.type;
                }

                /**
                 * If true, the body will automatically fall to sleep.
                 * @property allowSleep
                 * @type {Boolean}
                 * @default true
                 */
                this.allowSleep = typeof (options.allowSleep) !== 'undefined' ? options.allowSleep : true;

                /**
                 * Current sleep state.
                 * @property sleepState
                 * @type {Number}
                 */
                this.sleepState = 0;

                /**
                 * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.
                 * @property sleepSpeedLimit
                 * @type {Number}
                 * @default 0.1
                 */
                this.sleepSpeedLimit = typeof (options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;

                /**
                 * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.
                 * @property sleepTimeLimit
                 * @type {Number}
                 * @default 1
                 */
                this.sleepTimeLimit = typeof (options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;

                this.timeLastSleepy = 0;

                this._wakeUpAfterNarrowphase = false;


                /**
                 * Rotational force on the body, around center of mass
                 * @property {Vec3} torque
                 */
                this.torque = new Vec3();

                /**
                 * Orientation of the body
                 * @property quaternion
                 * @type {Quaternion}
                 */
                this.quaternion = new Quaternion();

                if (options.quaternion) {
                    this.quaternion.copy(options.quaternion);
                }

                /**
                 * @property initQuaternion
                 * @type {Quaternion}
                 */
                this.initQuaternion = new Quaternion();

                /**
                 * @property angularVelocity
                 * @type {Vec3}
                 */
                this.angularVelocity = new Vec3();

                if (options.angularVelocity) {
                    this.angularVelocity.copy(options.angularVelocity);
                }

                /**
                 * @property initAngularVelocity
                 * @type {Vec3}
                 */
                this.initAngularVelocity = new Vec3();

                this.interpolatedPosition = new Vec3();
                this.interpolatedQuaternion = new Quaternion();

                /**
                 * @property shapes
                 * @type {array}
                 */
                this.shapes = [];

                /**
                 * @property shapeOffsets
                 * @type {array}
                 */
                this.shapeOffsets = [];

                /**
                 * @property shapeOrientations
                 * @type {array}
                 */
                this.shapeOrientations = [];

                /**
                 * @property inertia
                 * @type {Vec3}
                 */
                this.inertia = new Vec3();

                /**
                 * @property {Vec3} invInertia
                 */
                this.invInertia = new Vec3();

                /**
                 * @property {Mat3} invInertiaWorld
                 */
                this.invInertiaWorld = new Mat3();

                this.invMassSolve = 0;

                /**
                 * @property {Vec3} invInertiaSolve
                 */
                this.invInertiaSolve = new Vec3();

                /**
                 * @property {Mat3} invInertiaWorldSolve
                 */
                this.invInertiaWorldSolve = new Mat3();

                /**
                 * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.
                 * @property {Boolean} fixedRotation
                 * @default false
                 */
                this.fixedRotation = typeof (options.fixedRotation) !== "undefined" ? options.fixedRotation : false;

                /**
                 * @property {Number} angularDamping
                 */
                this.angularDamping = typeof (options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;

                /**
                 * @property aabb
                 * @type {AABB}
                 */
                this.aabb = new AABB();

                /**
                 * Indicates if the AABB needs to be updated before use.
                 * @property aabbNeedsUpdate
                 * @type {Boolean}
                 */
                this.aabbNeedsUpdate = true;

                this.wlambda = new Vec3();

                if (options.shape) {
                    this.addShape(options.shape);
                }

                this.updateMassProperties();
            }
            Body.prototype = new EventTarget();
            Body.prototype.constructor = Body;

            /**
             * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.
             * @static
             * @property DYNAMIC
             * @type {Number}
             */
            Body.DYNAMIC = 1;

            /**
             * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.
             * @static
             * @property STATIC
             * @type {Number}
             */
            Body.STATIC = 2;

            /**
             * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.
             * @static
             * @property KINEMATIC
             * @type {Number}
             */
            Body.KINEMATIC = 4;



            /**
             * @static
             * @property AWAKE
             * @type {number}
             */
            Body.AWAKE = 0;

            /**
             * @static
             * @property SLEEPY
             * @type {number}
             */
            Body.SLEEPY = 1;

            /**
             * @static
             * @property SLEEPING
             * @type {number}
             */
            Body.SLEEPING = 2;

            Body.idCounter = 0;

            /**
             * Wake the body up.
             * @method wakeUp
             */
            Body.prototype.wakeUp = function () {
                var s = this.sleepState;
                this.sleepState = 0;
                if (s === Body.SLEEPING) {
                    this.dispatchEvent({ type: "wakeup" });
                }
            };

            /**
             * Force body sleep
             * @method sleep
             */
            Body.prototype.sleep = function () {
                this.sleepState = Body.SLEEPING;
                this.velocity.set(0, 0, 0);
                this.angularVelocity.set(0, 0, 0);
            };

            Body.sleepyEvent = {
                type: "sleepy"
            };

            Body.sleepEvent = {
                type: "sleep"
            };

            /**
             * Called every timestep to update internal sleep timer and change sleep state if needed.
             * @method sleepTick
             * @param {Number} time The world time in seconds
             */
            Body.prototype.sleepTick = function (time) {
                if (this.allowSleep) {
                    var sleepState = this.sleepState;
                    var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();
                    var speedLimitSquared = Math.pow(this.sleepSpeedLimit, 2);
                    if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {
                        this.sleepState = Body.SLEEPY; // Sleepy
                        this.timeLastSleepy = time;
                        this.dispatchEvent(Body.sleepyEvent);
                    } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {
                        this.wakeUp(); // Wake up
                    } else if (sleepState === Body.SLEEPY && (time - this.timeLastSleepy) > this.sleepTimeLimit) {
                        this.sleep(); // Sleeping
                        this.dispatchEvent(Body.sleepEvent);
                    }
                }
            };

            /**
             * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate "solve mass".
             * @method updateSolveMassProperties
             */
            Body.prototype.updateSolveMassProperties = function () {
                if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {
                    this.invMassSolve = 0;
                    this.invInertiaSolve.setZero();
                    this.invInertiaWorldSolve.setZero();
                } else {
                    this.invMassSolve = this.invMass;
                    this.invInertiaSolve.copy(this.invInertia);
                    this.invInertiaWorldSolve.copy(this.invInertiaWorld);
                }
            };

            /**
             * Convert a world point to local body frame.
             * @method pointToLocalFrame
             * @param  {Vec3} worldPoint
             * @param  {Vec3} result
             * @return {Vec3}
             */
            Body.prototype.pointToLocalFrame = function (worldPoint, result) {
                var result = result || new Vec3();
                worldPoint.vsub(this.position, result);
                this.quaternion.conjugate().vmult(result, result);
                return result;
            };

            /**
             * Convert a world vector to local body frame.
             * @method vectorToLocalFrame
             * @param  {Vec3} worldPoint
             * @param  {Vec3} result
             * @return {Vec3}
             */
            Body.prototype.vectorToLocalFrame = function (worldVector, result) {
                var result = result || new Vec3();
                this.quaternion.conjugate().vmult(worldVector, result);
                return result;
            };

            /**
             * Convert a local body point to world frame.
             * @method pointToWorldFrame
             * @param  {Vec3} localPoint
             * @param  {Vec3} result
             * @return {Vec3}
             */
            Body.prototype.pointToWorldFrame = function (localPoint, result) {
                var result = result || new Vec3();
                this.quaternion.vmult(localPoint, result);
                result.vadd(this.position, result);
                return result;
            };

            /**
             * Convert a local body point to world frame.
             * @method vectorToWorldFrame
             * @param  {Vec3} localVector
             * @param  {Vec3} result
             * @return {Vec3}
             */
            Body.prototype.vectorToWorldFrame = function (localVector, result) {
                var result = result || new Vec3();
                this.quaternion.vmult(localVector, result);
                return result;
            };

            var tmpVec = new Vec3();
            var tmpQuat = new Quaternion();

            /**
             * Add a shape to the body with a local offset and orientation.
             * @method addShape
             * @param {Shape} shape
             * @param {Vec3} offset
             * @param {Quaternion} quaternion
             * @return {Body} The body object, for chainability.
             */
            Body.prototype.addShape = function (shape, _offset, _orientation) {
                var offset = new Vec3();
                var orientation = new Quaternion();

                if (_offset) {
                    offset.copy(_offset);
                }
                if (_orientation) {
                    orientation.copy(_orientation);
                }

                this.shapes.push(shape);
                this.shapeOffsets.push(offset);
                this.shapeOrientations.push(orientation);
                this.updateMassProperties();
                this.updateBoundingRadius();

                this.aabbNeedsUpdate = true;

                return this;
            };

            /**
             * Update the bounding radius of the body. Should be done if any of the shapes are changed.
             * @method updateBoundingRadius
             */
            Body.prototype.updateBoundingRadius = function () {
                var shapes = this.shapes,
                    shapeOffsets = this.shapeOffsets,
                    N = shapes.length,
                    radius = 0;

                for (var i = 0; i !== N; i++) {
                    var shape = shapes[i];
                    shape.updateBoundingSphereRadius();
                    var offset = shapeOffsets[i].norm(),
                        r = shape.boundingSphereRadius;
                    if (offset + r > radius) {
                        radius = offset + r;
                    }
                }

                this.boundingRadius = radius;
            };

            var computeAABB_shapeAABB = new AABB();

            /**
             * Updates the .aabb
             * @method computeAABB
             * @todo rename to updateAABB()
             */
            Body.prototype.computeAABB = function () {
                var shapes = this.shapes,
                    shapeOffsets = this.shapeOffsets,
                    shapeOrientations = this.shapeOrientations,
                    N = shapes.length,
                    offset = tmpVec,
                    orientation = tmpQuat,
                    bodyQuat = this.quaternion,
                    aabb = this.aabb,
                    shapeAABB = computeAABB_shapeAABB;

                for (var i = 0; i !== N; i++) {
                    var shape = shapes[i];

                    // Get shape world quaternion
                    shapeOrientations[i].mult(bodyQuat, orientation);

                    // Get shape world position
                    orientation.vmult(shapeOffsets[i], offset);
                    offset.vadd(this.position, offset);

                    // vec2.rotate(offset, shapeOffsets[i], bodyAngle);
                    // vec2.add(offset, offset, this.position);

                    // Get shape AABB
                    shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);

                    if (i === 0) {
                        aabb.copy(shapeAABB);
                    } else {
                        aabb.extend(shapeAABB);
                    }
                }

                this.aabbNeedsUpdate = false;
            };

            var uiw_m1 = new Mat3(),
                uiw_m2 = new Mat3(),
                uiw_m3 = new Mat3();

            /**
             * Update .inertiaWorld and .invInertiaWorld
             * @method updateInertiaWorld
             */
            Body.prototype.updateInertiaWorld = function (force) {
                var I = this.invInertia;
                if (I.x === I.y && I.y === I.z && !force) {
                    // If inertia M = s*I, where I is identity and s a scalar, then
                    //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M
                    // where R is the rotation matrix.
                    // In other words, we don't have to transform the inertia if all
                    // inertia diagonal entries are equal.
                } else {
                    var m1 = uiw_m1,
                        m2 = uiw_m2,
                        m3 = uiw_m3;
                    m1.setRotationFromQuaternion(this.quaternion);
                    m1.transpose(m2);
                    m1.scale(I, m1);
                    m1.mmult(m2, this.invInertiaWorld);
                    //m3.getTrace(this.invInertiaWorld);
                }

                /*
                this.quaternion.vmult(this.inertia,this.inertiaWorld);
                this.quaternion.vmult(this.invInertia,this.invInertiaWorld);
                */
            };

            /**
             * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.
             * @method applyForce
             * @param  {Vec3} force The amount of force to add.
             * @param  {Vec3} worldPoint A world point to apply the force on.
             */
            var Body_applyForce_r = new Vec3();
            var Body_applyForce_rotForce = new Vec3();
            Body.prototype.applyForce = function (force, worldPoint) {
                if (this.type !== Body.DYNAMIC) {
                    return;
                }

                // Compute point position relative to the body center
                var r = Body_applyForce_r;
                worldPoint.vsub(this.position, r);

                // Compute produced rotational force
                var rotForce = Body_applyForce_rotForce;
                r.cross(force, rotForce);

                // Add linear force
                this.force.vadd(force, this.force);

                // Add rotational force
                this.torque.vadd(rotForce, this.torque);
            };

            /**
             * Apply force to a local point in the body.
             * @method applyLocalForce
             * @param  {Vec3} force The force vector to apply, defined locally in the body frame.
             * @param  {Vec3} localPoint A local point in the body to apply the force on.
             */
            var Body_applyLocalForce_worldForce = new Vec3();
            var Body_applyLocalForce_worldPoint = new Vec3();
            Body.prototype.applyLocalForce = function (localForce, localPoint) {
                if (this.type !== Body.DYNAMIC) {
                    return;
                }

                var worldForce = Body_applyLocalForce_worldForce;
                var worldPoint = Body_applyLocalForce_worldPoint;

                // Transform the force vector to world space
                this.vectorToWorldFrame(localForce, worldForce);
                this.pointToWorldFrame(localPoint, worldPoint);

                this.applyForce(worldForce, worldPoint);
            };

            /**
             * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
             * @method applyImpulse
             * @param  {Vec3} impulse The amount of impulse to add.
             * @param  {Vec3} worldPoint A world point to apply the force on.
             */
            var Body_applyImpulse_r = new Vec3();
            var Body_applyImpulse_velo = new Vec3();
            var Body_applyImpulse_rotVelo = new Vec3();
            Body.prototype.applyImpulse = function (impulse, worldPoint) {
                if (this.type !== Body.DYNAMIC) {
                    return;
                }

                // Compute point position relative to the body center
                var r = Body_applyImpulse_r;
                worldPoint.vsub(this.position, r);

                // Compute produced central impulse velocity
                var velo = Body_applyImpulse_velo;
                velo.copy(impulse);
                velo.mult(this.invMass, velo);

                // Add linear impulse
                this.velocity.vadd(velo, this.velocity);

                // Compute produced rotational impulse velocity
                var rotVelo = Body_applyImpulse_rotVelo;
                r.cross(impulse, rotVelo);

                /*
                rotVelo.x *= this.invInertia.x;
                rotVelo.y *= this.invInertia.y;
                rotVelo.z *= this.invInertia.z;
                */
                this.invInertiaWorld.vmult(rotVelo, rotVelo);

                // Add rotational Impulse
                this.angularVelocity.vadd(rotVelo, this.angularVelocity);
            };

            /**
             * Apply locally-defined impulse to a local point in the body.
             * @method applyLocalImpulse
             * @param  {Vec3} force The force vector to apply, defined locally in the body frame.
             * @param  {Vec3} localPoint A local point in the body to apply the force on.
             */
            var Body_applyLocalImpulse_worldImpulse = new Vec3();
            var Body_applyLocalImpulse_worldPoint = new Vec3();
            Body.prototype.applyLocalImpulse = function (localImpulse, localPoint) {
                if (this.type !== Body.DYNAMIC) {
                    return;
                }

                var worldImpulse = Body_applyLocalImpulse_worldImpulse;
                var worldPoint = Body_applyLocalImpulse_worldPoint;

                // Transform the force vector to world space
                this.vectorToWorldFrame(localImpulse, worldImpulse);
                this.pointToWorldFrame(localPoint, worldPoint);

                this.applyImpulse(worldImpulse, worldPoint);
            };

            var Body_updateMassProperties_halfExtents = new Vec3();

            /**
             * Should be called whenever you change the body shape or mass.
             * @method updateMassProperties
             */
            Body.prototype.updateMassProperties = function () {
                var halfExtents = Body_updateMassProperties_halfExtents;

                this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;
                var I = this.inertia;
                var fixed = this.fixedRotation;

                // Approximate with AABB box
                this.computeAABB();
                halfExtents.set(
                    (this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2,
                    (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2,
                    (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2
                );
                Box.calculateInertia(halfExtents, this.mass, I);

                this.invInertia.set(
                    I.x > 0 && !fixed ? 1.0 / I.x : 0,
                    I.y > 0 && !fixed ? 1.0 / I.y : 0,
                    I.z > 0 && !fixed ? 1.0 / I.z : 0
                );
                this.updateInertiaWorld(true);
            };

            /**
             * Get world velocity of a point in the body.
             * @method getVelocityAtWorldPoint
             * @param  {Vec3} worldPoint
             * @param  {Vec3} result
             * @return {Vec3} The result vector.
             */
            Body.prototype.getVelocityAtWorldPoint = function (worldPoint, result) {
                var r = new Vec3();
                worldPoint.vsub(this.position, r);
                this.angularVelocity.cross(r, result);
                this.velocity.vadd(result, result);
                return result;
            };

        }, { "../collision/AABB": 3, "../material/Material": 25, "../math/Mat3": 27, "../math/Quaternion": 28, "../math/Vec3": 30, "../shapes/Box": 37, "../shapes/Shape": 43, "../utils/EventTarget": 49 }], 32: [function (_dereq_, module, exports) {
            var Body = _dereq_('./Body');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var RaycastResult = _dereq_('../collision/RaycastResult');
            var Ray = _dereq_('../collision/Ray');
            var WheelInfo = _dereq_('../objects/WheelInfo');

            module.exports = RaycastVehicle;

            /**
             * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.
             * @class RaycastVehicle
             * @constructor
             * @param {object} [options]
             * @param {Body} [options.chassisBody] The car chassis body.
             * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2
             * @param {integer} [options.indexLeftAxis]
             * @param {integer} [options.indexUpAxis]
             */
            function RaycastVehicle(options) {

                /**
                 * @property {Body} chassisBody
                 */
                this.chassisBody = options.chassisBody;

                /**
                 * An array of WheelInfo objects.
                 * @property {array} wheelInfos
                 */
                this.wheelInfos = [];

                /**
                 * Will be set to true if the car is sliding.
                 * @property {boolean} sliding
                 */
                this.sliding = false;

                /**
                 * @property {World} world
                 */
                this.world = null;

                /**
                 * Index of the right axis, 0=x, 1=y, 2=z
                 * @property {integer} indexRightAxis
                 * @default 1
                 */
                this.indexRightAxis = typeof (options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;

                /**
                 * Index of the forward axis, 0=x, 1=y, 2=z
                 * @property {integer} indexForwardAxis
                 * @default 0
                 */
                this.indexForwardAxis = typeof (options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;

                /**
                 * Index of the up axis, 0=x, 1=y, 2=z
                 * @property {integer} indexUpAxis
                 * @default 2
                 */
                this.indexUpAxis = typeof (options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;
            }

            var tmpVec1 = new Vec3();
            var tmpVec2 = new Vec3();
            var tmpVec3 = new Vec3();
            var tmpVec4 = new Vec3();
            var tmpVec5 = new Vec3();
            var tmpVec6 = new Vec3();
            var tmpRay = new Ray();

            /**
             * Add a wheel. For information about the options, see WheelInfo.
             * @method addWheel
             * @param {object} [options]
             */
            RaycastVehicle.prototype.addWheel = function (options) {
                options = options || {};

                var info = new WheelInfo(options);
                var index = this.wheelInfos.length;
                this.wheelInfos.push(info);

                return index;
            };

            /**
             * Set the steering value of a wheel.
             * @method setSteeringValue
             * @param {number} value
             * @param {integer} wheelIndex
             */
            RaycastVehicle.prototype.setSteeringValue = function (value, wheelIndex) {
                var wheel = this.wheelInfos[wheelIndex];
                wheel.steering = value;
            };

            var torque = new Vec3();

            /**
             * Set the wheel force to apply on one of the wheels each time step
             * @method applyEngineForce
             * @param  {number} value
             * @param  {integer} wheelIndex
             */
            RaycastVehicle.prototype.applyEngineForce = function (value, wheelIndex) {
                this.wheelInfos[wheelIndex].engineForce = value;
            };

            /**
             * Set the braking force of a wheel
             * @method setBrake
             * @param {number} brake
             * @param {integer} wheelIndex
             */
            RaycastVehicle.prototype.setBrake = function (brake, wheelIndex) {
                this.wheelInfos[wheelIndex].brake = brake;
            };

            /**
             * Add the vehicle including its constraints to the world.
             * @method addToWorld
             * @param {World} world
             */
            RaycastVehicle.prototype.addToWorld = function (world) {
                var constraints = this.constraints;
                world.add(this.chassisBody);
                var that = this;
                this.preStepCallback = function () {
                    that.updateVehicle(world.dt);
                };
                world.addEventListener('preStep', this.preStepCallback);
                this.world = world;
            };

            /**
             * Get one of the wheel axles, world-oriented.
             * @private
             * @method getVehicleAxisWorld
             * @param  {integer} axisIndex
             * @param  {Vec3} result
             */
            RaycastVehicle.prototype.getVehicleAxisWorld = function (axisIndex, result) {
                result.set(
                    axisIndex === 0 ? 1 : 0,
                    axisIndex === 1 ? 1 : 0,
                    axisIndex === 2 ? 1 : 0
                );
                this.chassisBody.vectorToWorldFrame(result, result);
            };

            RaycastVehicle.prototype.updateVehicle = function (timeStep) {
                var wheelInfos = this.wheelInfos;
                var numWheels = wheelInfos.length;
                var chassisBody = this.chassisBody;

                for (var i = 0; i < numWheels; i++) {
                    this.updateWheelTransform(i);
                }

                this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();

                var forwardWorld = new Vec3();
                this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);

                if (forwardWorld.dot(chassisBody.velocity) < 0) {
                    this.currentVehicleSpeedKmHour *= -1;
                }

                // simulate suspension
                for (var i = 0; i < numWheels; i++) {
                    this.castRay(wheelInfos[i]);
                }

                this.updateSuspension(timeStep);

                var impulse = new Vec3();
                var relpos = new Vec3();
                for (var i = 0; i < numWheels; i++) {
                    //apply suspension force
                    var wheel = wheelInfos[i];
                    var suspensionForce = wheel.suspensionForce;
                    if (suspensionForce > wheel.maxSuspensionForce) {
                        suspensionForce = wheel.maxSuspensionForce;
                    }
                    wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);

                    wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);
                    chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);
                }

                this.updateFriction(timeStep);

                var hitNormalWorldScaledWithProj = new Vec3();
                var fwd = new Vec3();
                var vel = new Vec3();
                for (i = 0; i < numWheels; i++) {
                    var wheel = wheelInfos[i];
                    //var relpos = new Vec3();
                    //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);
                    chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);

                    // Hack to get the rotation in the correct direction
                    var m = 1;
                    switch (this.indexUpAxis) {
                        case 1:
                            m = -1;
                            break;
                    }

                    if (wheel.isInContact) {

                        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);
                        var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);
                        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);

                        fwd.vsub(hitNormalWorldScaledWithProj, fwd);

                        var proj2 = fwd.dot(vel);
                        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;
                    }

                    if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {
                        // Apply custom rotation when accelerating and sliding
                        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;
                    }

                    // Lock wheels
                    if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {
                        wheel.deltaRotation = 0;
                    }

                    wheel.rotation += wheel.deltaRotation; // Use the old value
                    wheel.deltaRotation *= 0.99; // damping of rotation when not in contact
                }
            };

            RaycastVehicle.prototype.updateSuspension = function (deltaTime) {
                var chassisBody = this.chassisBody;
                var chassisMass = chassisBody.mass;
                var wheelInfos = this.wheelInfos;
                var numWheels = wheelInfos.length;

                for (var w_it = 0; w_it < numWheels; w_it++) {
                    var wheel = wheelInfos[w_it];

                    if (wheel.isInContact) {
                        var force;

                        // Spring
                        var susp_length = wheel.suspensionRestLength;
                        var current_length = wheel.suspensionLength;
                        var length_diff = (susp_length - current_length);

                        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;

                        // Damper
                        var projected_rel_vel = wheel.suspensionRelativeVelocity;
                        var susp_damping;
                        if (projected_rel_vel < 0) {
                            susp_damping = wheel.dampingCompression;
                        } else {
                            susp_damping = wheel.dampingRelaxation;
                        }
                        force -= susp_damping * projected_rel_vel;

                        wheel.suspensionForce = force * chassisMass;
                        if (wheel.suspensionForce < 0) {
                            wheel.suspensionForce = 0;
                        }
                    } else {
                        wheel.suspensionForce = 0;
                    }
                }
            };

            /**
             * Remove the vehicle including its constraints from the world.
             * @method removeFromWorld
             * @param {World} world
             */
            RaycastVehicle.prototype.removeFromWorld = function (world) {
                var constraints = this.constraints;
                world.remove(this.chassisBody);
                world.removeEventListener('preStep', this.preStepCallback);
                this.world = null;
            };

            var castRay_rayvector = new Vec3();
            var castRay_target = new Vec3();
            RaycastVehicle.prototype.castRay = function (wheel) {
                var rayvector = castRay_rayvector;
                var target = castRay_target;

                this.updateWheelTransformWorld(wheel);
                var chassisBody = this.chassisBody;

                var depth = -1;

                var raylen = wheel.suspensionRestLength + wheel.radius;

                wheel.directionWorld.scale(raylen, rayvector);
                var source = wheel.chassisConnectionPointWorld;
                source.vadd(rayvector, target);
                var raycastResult = wheel.raycastResult;

                var param = 0;

                raycastResult.reset();
                // Turn off ray collision with the chassis temporarily
                var oldState = chassisBody.collisionResponse;
                chassisBody.collisionResponse = false;

                // Cast ray against world
                this.world.rayTest(source, target, raycastResult);
                chassisBody.collisionResponse = oldState;

                var object = raycastResult.body;

                wheel.raycastResult.groundObject = 0;

                if (object) {
                    depth = raycastResult.distance;
                    wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;
                    wheel.isInContact = true;

                    var hitDistance = raycastResult.distance;
                    wheel.suspensionLength = hitDistance - wheel.radius;

                    // clamp on max suspension travel
                    var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;
                    var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;
                    if (wheel.suspensionLength < minSuspensionLength) {
                        wheel.suspensionLength = minSuspensionLength;
                    }
                    if (wheel.suspensionLength > maxSuspensionLength) {
                        wheel.suspensionLength = maxSuspensionLength;
                        wheel.raycastResult.reset();
                    }

                    var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);

                    var chassis_velocity_at_contactPoint = new Vec3();
                    chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);

                    var projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);

                    if (denominator >= -0.1) {
                        wheel.suspensionRelativeVelocity = 0;
                        wheel.clippedInvContactDotSuspension = 1 / 0.1;
                    } else {
                        var inv = -1 / denominator;
                        wheel.suspensionRelativeVelocity = projVel * inv;
                        wheel.clippedInvContactDotSuspension = inv;
                    }

                } else {

                    //put wheel info as in rest position
                    wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;
                    wheel.suspensionRelativeVelocity = 0.0;
                    wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);
                    wheel.clippedInvContactDotSuspension = 1.0;
                }

                return depth;
            };

            RaycastVehicle.prototype.updateWheelTransformWorld = function (wheel) {
                wheel.isInContact = false;
                var chassisBody = this.chassisBody;
                chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);
                chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);
                chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);
            };


            /**
             * Update one of the wheel transform.
             * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.
             * @method updateWheelTransform
             * @param {integer} wheelIndex The wheel index to update.
             */
            RaycastVehicle.prototype.updateWheelTransform = function (wheelIndex) {
                var up = tmpVec4;
                var right = tmpVec5;
                var fwd = tmpVec6;

                var wheel = this.wheelInfos[wheelIndex];
                this.updateWheelTransformWorld(wheel);

                wheel.directionLocal.scale(-1, up);
                right.copy(wheel.axleLocal);
                up.cross(right, fwd);
                fwd.normalize();
                right.normalize();

                // Rotate around steering over the wheelAxle
                var steering = wheel.steering;
                var steeringOrn = new Quaternion();
                steeringOrn.setFromAxisAngle(up, steering);

                var rotatingOrn = new Quaternion();
                rotatingOrn.setFromAxisAngle(right, wheel.rotation);

                // World rotation of the wheel
                var q = wheel.worldTransform.quaternion;
                this.chassisBody.quaternion.mult(steeringOrn, q);
                q.mult(rotatingOrn, q);

                q.normalize();

                // world position of the wheel
                var p = wheel.worldTransform.position;
                p.copy(wheel.directionWorld);
                p.scale(wheel.suspensionLength, p);
                p.vadd(wheel.chassisConnectionPointWorld, p);
            };

            var directions = [
                new Vec3(1, 0, 0),
                new Vec3(0, 1, 0),
                new Vec3(0, 0, 1)
            ];

            /**
             * Get the world transform of one of the wheels
             * @method getWheelTransformWorld
             * @param  {integer} wheelIndex
             * @return {Transform}
             */
            RaycastVehicle.prototype.getWheelTransformWorld = function (wheelIndex) {
                return this.wheelInfos[wheelIndex].worldTransform;
            };


            var updateFriction_surfNormalWS_scaled_proj = new Vec3();
            var updateFriction_axle = [];
            var updateFriction_forwardWS = [];
            var sideFrictionStiffness2 = 1;
            RaycastVehicle.prototype.updateFriction = function (timeStep) {
                var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;

                //calculate the impulse, so that the wheels don't move sidewards
                var wheelInfos = this.wheelInfos;
                var numWheels = wheelInfos.length;
                var chassisBody = this.chassisBody;
                var forwardWS = updateFriction_forwardWS;
                var axle = updateFriction_axle;

                var numWheelsOnGround = 0;

                for (var i = 0; i < numWheels; i++) {
                    var wheel = wheelInfos[i];

                    var groundObject = wheel.raycastResult.body;
                    if (groundObject) {
                        numWheelsOnGround++;
                    }

                    wheel.sideImpulse = 0;
                    wheel.forwardImpulse = 0;
                    if (!forwardWS[i]) {
                        forwardWS[i] = new Vec3();
                    }
                    if (!axle[i]) {
                        axle[i] = new Vec3();
                    }
                }

                for (var i = 0; i < numWheels; i++) {
                    var wheel = wheelInfos[i];

                    var groundObject = wheel.raycastResult.body;

                    if (groundObject) {
                        var axlei = axle[i];
                        var wheelTrans = this.getWheelTransformWorld(i);

                        // Get world axle
                        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);

                        var surfNormalWS = wheel.raycastResult.hitNormalWorld;
                        var proj = axlei.dot(surfNormalWS);
                        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);
                        axlei.vsub(surfNormalWS_scaled_proj, axlei);
                        axlei.normalize();

                        surfNormalWS.cross(axlei, forwardWS[i]);
                        forwardWS[i].normalize();

                        wheel.sideImpulse = resolveSingleBilateral(
                            chassisBody,
                            wheel.raycastResult.hitPointWorld,
                            groundObject,
                            wheel.raycastResult.hitPointWorld,
                            axlei
                        );

                        wheel.sideImpulse *= sideFrictionStiffness2;
                    }
                }

                var sideFactor = 1;
                var fwdFactor = 0.5;

                this.sliding = false;
                for (var i = 0; i < numWheels; i++) {
                    var wheel = wheelInfos[i];
                    var groundObject = wheel.raycastResult.body;

                    var rollingFriction = 0;

                    wheel.slipInfo = 1;
                    if (groundObject) {
                        var defaultRollingFrictionImpulse = 0;
                        var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;

                        // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);
                        // rollingFriction = calcRollingFriction(contactPt);
                        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);

                        rollingFriction += wheel.engineForce * timeStep;

                        // rollingFriction = 0;
                        var factor = maxImpulse / rollingFriction;
                        wheel.slipInfo *= factor;
                    }

                    //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)

                    wheel.forwardImpulse = 0;
                    wheel.skidInfo = 1;

                    if (groundObject) {
                        wheel.skidInfo = 1;

                        var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;
                        var maximpSide = maximp;

                        var maximpSquared = maximp * maximpSide;

                        wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;

                        var x = wheel.forwardImpulse * fwdFactor;
                        var y = wheel.sideImpulse * sideFactor;

                        var impulseSquared = x * x + y * y;

                        wheel.sliding = false;
                        if (impulseSquared > maximpSquared) {
                            this.sliding = true;
                            wheel.sliding = true;

                            var factor = maximp / Math.sqrt(impulseSquared);

                            wheel.skidInfo *= factor;
                        }
                    }
                }

                if (this.sliding) {
                    for (var i = 0; i < numWheels; i++) {
                        var wheel = wheelInfos[i];
                        if (wheel.sideImpulse !== 0) {
                            if (wheel.skidInfo < 1) {
                                wheel.forwardImpulse *= wheel.skidInfo;
                                wheel.sideImpulse *= wheel.skidInfo;
                            }
                        }
                    }
                }

                // apply the impulses
                for (var i = 0; i < numWheels; i++) {
                    var wheel = wheelInfos[i];

                    var rel_pos = new Vec3();
                    //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);
                    // cannons applyimpulse is using world coord for the position
                    rel_pos.copy(wheel.raycastResult.hitPointWorld);

                    if (wheel.forwardImpulse !== 0) {
                        var impulse = new Vec3();
                        forwardWS[i].scale(wheel.forwardImpulse, impulse);
                        chassisBody.applyImpulse(impulse, rel_pos);
                    }

                    if (wheel.sideImpulse !== 0) {
                        var groundObject = wheel.raycastResult.body;

                        var rel_pos2 = new Vec3();
                        //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);
                        rel_pos2.copy(wheel.raycastResult.hitPointWorld);
                        var sideImp = new Vec3();
                        axle[i].scale(wheel.sideImpulse, sideImp);

                        // Scale the relative position in the up direction with rollInfluence.
                        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).
                        chassisBody.pointToLocalFrame(rel_pos, rel_pos);
                        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;
                        chassisBody.pointToWorldFrame(rel_pos, rel_pos);
                        chassisBody.applyImpulse(sideImp, rel_pos);

                        //apply friction impulse on the ground
                        sideImp.scale(-1, sideImp);
                        groundObject.applyImpulse(sideImp, rel_pos2);
                    }
                }
            };

            var calcRollingFriction_vel1 = new Vec3();
            var calcRollingFriction_vel2 = new Vec3();
            var calcRollingFriction_vel = new Vec3();

            function calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {
                var j1 = 0;
                var contactPosWorld = frictionPosWorld;

                // var rel_pos1 = new Vec3();
                // var rel_pos2 = new Vec3();
                var vel1 = calcRollingFriction_vel1;
                var vel2 = calcRollingFriction_vel2;
                var vel = calcRollingFriction_vel;
                // contactPosWorld.vsub(body0.position, rel_pos1);
                // contactPosWorld.vsub(body1.position, rel_pos2);

                body0.getVelocityAtWorldPoint(contactPosWorld, vel1);
                body1.getVelocityAtWorldPoint(contactPosWorld, vel2);
                vel1.vsub(vel2, vel);

                var vrel = frictionDirectionWorld.dot(vel);

                var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);
                var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);
                var relaxation = 1;
                var jacDiagABInv = relaxation / (denom0 + denom1);

                // calculate j that moves us to zero relative velocity
                j1 = -vrel * jacDiagABInv;

                if (maxImpulse < j1) {
                    j1 = maxImpulse;
                }
                if (j1 < -maxImpulse) {
                    j1 = -maxImpulse;
                }

                return j1;
            }

            var computeImpulseDenominator_r0 = new Vec3();
            var computeImpulseDenominator_c0 = new Vec3();
            var computeImpulseDenominator_vec = new Vec3();
            var computeImpulseDenominator_m = new Vec3();
            function computeImpulseDenominator(body, pos, normal) {
                var r0 = computeImpulseDenominator_r0;
                var c0 = computeImpulseDenominator_c0;
                var vec = computeImpulseDenominator_vec;
                var m = computeImpulseDenominator_m;

                pos.vsub(body.position, r0);
                r0.cross(normal, c0);
                body.invInertiaWorld.vmult(c0, m);
                m.cross(r0, vec);

                return body.invMass + normal.dot(vec);
            }


            var resolveSingleBilateral_vel1 = new Vec3();
            var resolveSingleBilateral_vel2 = new Vec3();
            var resolveSingleBilateral_vel = new Vec3();

            //bilateral constraint between two dynamic objects
            function resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse) {
                var normalLenSqr = normal.norm2();
                if (normalLenSqr > 1.1) {
                    return 0; // no impulse
                }
                // var rel_pos1 = new Vec3();
                // var rel_pos2 = new Vec3();
                // pos1.vsub(body1.position, rel_pos1);
                // pos2.vsub(body2.position, rel_pos2);

                var vel1 = resolveSingleBilateral_vel1;
                var vel2 = resolveSingleBilateral_vel2;
                var vel = resolveSingleBilateral_vel;
                body1.getVelocityAtWorldPoint(pos1, vel1);
                body2.getVelocityAtWorldPoint(pos2, vel2);

                vel1.vsub(vel2, vel);

                var rel_vel = normal.dot(vel);

                var contactDamping = 0.2;
                var massTerm = 1 / (body1.invMass + body2.invMass);
                var impulse = - contactDamping * rel_vel * massTerm;

                return impulse;
            }
        }, { "../collision/Ray": 9, "../collision/RaycastResult": 10, "../math/Quaternion": 28, "../math/Vec3": 30, "../objects/WheelInfo": 36, "./Body": 31 }], 33: [function (_dereq_, module, exports) {
            var Body = _dereq_('./Body');
            var Sphere = _dereq_('../shapes/Sphere');
            var Box = _dereq_('../shapes/Box');
            var Vec3 = _dereq_('../math/Vec3');
            var HingeConstraint = _dereq_('../constraints/HingeConstraint');

            module.exports = RigidVehicle;

            /**
             * Simple vehicle helper class with spherical rigid body wheels.
             * @class RigidVehicle
             * @constructor
             * @param {Body} [options.chassisBody]
             */
            function RigidVehicle(options) {
                this.wheelBodies = [];

                /**
                 * @property coordinateSystem
                 * @type {Vec3}
                 */
                this.coordinateSystem = typeof (options.coordinateSystem) === 'undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();

                /**
                 * @property {Body} chassisBody
                 */
                this.chassisBody = options.chassisBody;

                if (!this.chassisBody) {
                    // No chassis body given. Create it!
                    var chassisShape = new Box(new Vec3(5, 2, 0.5));
                    this.chassisBody = new Body(1, chassisShape);
                }

                /**
                 * @property constraints
                 * @type {Array}
                 */
                this.constraints = [];

                this.wheelAxes = [];
                this.wheelForces = [];
            }

            /**
             * Add a wheel
             * @method addWheel
             * @param {object} options
             * @param {boolean} [options.isFrontWheel]
             * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.
             * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.
             * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.
             * @param {Body} [options.body] The wheel body.
             */
            RigidVehicle.prototype.addWheel = function (options) {
                options = options || {};
                var wheelBody = options.body;
                if (!wheelBody) {
                    wheelBody = new Body(1, new Sphere(1.2));
                }
                this.wheelBodies.push(wheelBody);
                this.wheelForces.push(0);

                // Position constrain wheels
                var zero = new Vec3();
                var position = typeof (options.position) !== 'undefined' ? options.position.clone() : new Vec3();

                // Set position locally to the chassis
                var worldPosition = new Vec3();
                this.chassisBody.pointToWorldFrame(position, worldPosition);
                wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);

                // Constrain wheel
                var axis = typeof (options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);
                this.wheelAxes.push(axis);

                var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {
                    pivotA: position,
                    axisA: axis,
                    pivotB: Vec3.ZERO,
                    axisB: axis,
                    collideConnected: false
                });
                this.constraints.push(hingeConstraint);

                return this.wheelBodies.length - 1;
            };

            /**
             * Set the steering value of a wheel.
             * @method setSteeringValue
             * @param {number} value
             * @param {integer} wheelIndex
             * @todo check coordinateSystem
             */
            RigidVehicle.prototype.setSteeringValue = function (value, wheelIndex) {
                // Set angle of the hinge axis
                var axis = this.wheelAxes[wheelIndex];

                var c = Math.cos(value),
                    s = Math.sin(value),
                    x = axis.x,
                    y = axis.y;
                this.constraints[wheelIndex].axisA.set(
                    c * x - s * y,
                    s * x + c * y,
                    0
                );
            };

            /**
             * Set the target rotational speed of the hinge constraint.
             * @method setMotorSpeed
             * @param {number} value
             * @param {integer} wheelIndex
             */
            RigidVehicle.prototype.setMotorSpeed = function (value, wheelIndex) {
                var hingeConstraint = this.constraints[wheelIndex];
                hingeConstraint.enableMotor();
                hingeConstraint.motorTargetVelocity = value;
            };

            /**
             * Set the target rotational speed of the hinge constraint.
             * @method disableMotor
             * @param {number} value
             * @param {integer} wheelIndex
             */
            RigidVehicle.prototype.disableMotor = function (wheelIndex) {
                var hingeConstraint = this.constraints[wheelIndex];
                hingeConstraint.disableMotor();
            };

            var torque = new Vec3();

            /**
             * Set the wheel force to apply on one of the wheels each time step
             * @method setWheelForce
             * @param  {number} value
             * @param  {integer} wheelIndex
             */
            RigidVehicle.prototype.setWheelForce = function (value, wheelIndex) {
                this.wheelForces[wheelIndex] = value;
            };

            /**
             * Apply a torque on one of the wheels.
             * @method applyWheelForce
             * @param  {number} value
             * @param  {integer} wheelIndex
             */
            RigidVehicle.prototype.applyWheelForce = function (value, wheelIndex) {
                var axis = this.wheelAxes[wheelIndex];
                var wheelBody = this.wheelBodies[wheelIndex];
                var bodyTorque = wheelBody.torque;

                axis.scale(value, torque);
                wheelBody.vectorToWorldFrame(torque, torque);
                bodyTorque.vadd(torque, bodyTorque);
            };

            /**
             * Add the vehicle including its constraints to the world.
             * @method addToWorld
             * @param {World} world
             */
            RigidVehicle.prototype.addToWorld = function (world) {
                var constraints = this.constraints;
                var bodies = this.wheelBodies.concat([this.chassisBody]);

                for (var i = 0; i < bodies.length; i++) {
                    world.add(bodies[i]);
                }

                for (var i = 0; i < constraints.length; i++) {
                    world.addConstraint(constraints[i]);
                }

                world.addEventListener('preStep', this._update.bind(this));
            };

            RigidVehicle.prototype._update = function () {
                var wheelForces = this.wheelForces;
                for (var i = 0; i < wheelForces.length; i++) {
                    this.applyWheelForce(wheelForces[i], i);
                }
            };

            /**
             * Remove the vehicle including its constraints from the world.
             * @method removeFromWorld
             * @param {World} world
             */
            RigidVehicle.prototype.removeFromWorld = function (world) {
                var constraints = this.constraints;
                var bodies = this.wheelBodies.concat([this.chassisBody]);

                for (var i = 0; i < bodies.length; i++) {
                    world.remove(bodies[i]);
                }

                for (var i = 0; i < constraints.length; i++) {
                    world.removeConstraint(constraints[i]);
                }
            };

            var worldAxis = new Vec3();

            /**
             * Get current rotational velocity of a wheel
             * @method getWheelSpeed
             * @param {integer} wheelIndex
             */
            RigidVehicle.prototype.getWheelSpeed = function (wheelIndex) {
                var axis = this.wheelAxes[wheelIndex];
                var wheelBody = this.wheelBodies[wheelIndex];
                var w = wheelBody.angularVelocity;
                this.chassisBody.vectorToWorldFrame(axis, worldAxis);
                return w.dot(worldAxis);
            };

        }, { "../constraints/HingeConstraint": 15, "../math/Vec3": 30, "../shapes/Box": 37, "../shapes/Sphere": 44, "./Body": 31 }], 34: [function (_dereq_, module, exports) {
            module.exports = SPHSystem;

            var Shape = _dereq_('../shapes/Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Particle = _dereq_('../shapes/Particle');
            var Body = _dereq_('../objects/Body');
            var Material = _dereq_('../material/Material');

            /**
             * Smoothed-particle hydrodynamics system
             * @class SPHSystem
             * @constructor
             */
            function SPHSystem() {
                this.particles = [];

                /**
                 * Density of the system (kg/m3).
                 * @property {number} density
                 */
                this.density = 1;

                /**
                 * Distance below which two particles are considered to be neighbors.
                 * It should be adjusted so there are about 15-20 neighbor particles within this radius.
                 * @property {number} smoothingRadius
                 */
                this.smoothingRadius = 1;
                this.speedOfSound = 1;

                /**
                 * Viscosity of the system.
                 * @property {number} viscosity
                 */
                this.viscosity = 0.01;
                this.eps = 0.000001;

                // Stuff Computed per particle
                this.pressures = [];
                this.densities = [];
                this.neighbors = [];
            }

            /**
             * Add a particle to the system.
             * @method add
             * @param {Body} particle
             */
            SPHSystem.prototype.add = function (particle) {
                this.particles.push(particle);
                if (this.neighbors.length < this.particles.length) {
                    this.neighbors.push([]);
                }
            };

            /**
             * Remove a particle from the system.
             * @method remove
             * @param {Body} particle
             */
            SPHSystem.prototype.remove = function (particle) {
                var idx = this.particles.indexOf(particle);
                if (idx !== -1) {
                    this.particles.splice(idx, 1);
                    if (this.neighbors.length > this.particles.length) {
                        this.neighbors.pop();
                    }
                }
            };

            /**
             * Get neighbors within smoothing volume, save in the array neighbors
             * @method getNeighbors
             * @param {Body} particle
             * @param {Array} neighbors
             */
            var SPHSystem_getNeighbors_dist = new Vec3();
            SPHSystem.prototype.getNeighbors = function (particle, neighbors) {
                var N = this.particles.length,
                    id = particle.id,
                    R2 = this.smoothingRadius * this.smoothingRadius,
                    dist = SPHSystem_getNeighbors_dist;
                for (var i = 0; i !== N; i++) {
                    var p = this.particles[i];
                    p.position.vsub(particle.position, dist);
                    if (id !== p.id && dist.norm2() < R2) {
                        neighbors.push(p);
                    }
                }
            };

            // Temp vectors for calculation
            var SPHSystem_update_dist = new Vec3(),
                SPHSystem_update_a_pressure = new Vec3(),
                SPHSystem_update_a_visc = new Vec3(),
                SPHSystem_update_gradW = new Vec3(),
                SPHSystem_update_r_vec = new Vec3(),
                SPHSystem_update_u = new Vec3(); // Relative velocity
            SPHSystem.prototype.update = function () {
                var N = this.particles.length,
                    dist = SPHSystem_update_dist,
                    cs = this.speedOfSound,
                    eps = this.eps;

                for (var i = 0; i !== N; i++) {
                    var p = this.particles[i]; // Current particle
                    var neighbors = this.neighbors[i];

                    // Get neighbors
                    neighbors.length = 0;
                    this.getNeighbors(p, neighbors);
                    neighbors.push(this.particles[i]); // Add current too
                    var numNeighbors = neighbors.length;

                    // Accumulate density for the particle
                    var sum = 0.0;
                    for (var j = 0; j !== numNeighbors; j++) {

                        //printf("Current particle has position %f %f %f\n",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());
                        p.position.vsub(neighbors[j].position, dist);
                        var len = dist.norm();

                        var weight = this.w(len);
                        sum += neighbors[j].mass * weight;
                    }

                    // Save
                    this.densities[i] = sum;
                    this.pressures[i] = cs * cs * (this.densities[i] - this.density);
                }

                // Add forces

                // Sum to these accelerations
                var a_pressure = SPHSystem_update_a_pressure;
                var a_visc = SPHSystem_update_a_visc;
                var gradW = SPHSystem_update_gradW;
                var r_vec = SPHSystem_update_r_vec;
                var u = SPHSystem_update_u;

                for (var i = 0; i !== N; i++) {

                    var particle = this.particles[i];

                    a_pressure.set(0, 0, 0);
                    a_visc.set(0, 0, 0);

                    // Init vars
                    var Pij;
                    var nabla;
                    var Vij;

                    // Sum up for all other neighbors
                    var neighbors = this.neighbors[i];
                    var numNeighbors = neighbors.length;

                    //printf("Neighbors: ");
                    for (var j = 0; j !== numNeighbors; j++) {

                        var neighbor = neighbors[j];
                        //printf("%d ",nj);

                        // Get r once for all..
                        particle.position.vsub(neighbor.position, r_vec);
                        var r = r_vec.norm();

                        // Pressure contribution
                        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));
                        this.gradw(r_vec, gradW);
                        // Add to pressure acceleration
                        gradW.mult(Pij, gradW);
                        a_pressure.vadd(gradW, a_pressure);

                        // Viscosity contribution
                        neighbor.velocity.vsub(particle.velocity, u);
                        u.mult(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);
                        nabla = this.nablaw(r);
                        u.mult(nabla, u);
                        // Add to viscosity acceleration
                        a_visc.vadd(u, a_visc);
                    }

                    // Calculate force
                    a_visc.mult(particle.mass, a_visc);
                    a_pressure.mult(particle.mass, a_pressure);

                    // Add force to particles
                    particle.force.vadd(a_visc, particle.force);
                    particle.force.vadd(a_pressure, particle.force);
                }
            };

            // Calculate the weight using the W(r) weightfunction
            SPHSystem.prototype.w = function (r) {
                // 315
                var h = this.smoothingRadius;
                return 315.0 / (64.0 * Math.PI * Math.pow(h, 9)) * Math.pow(h * h - r * r, 3);
            };

            // calculate gradient of the weight function
            SPHSystem.prototype.gradw = function (rVec, resultVec) {
                var r = rVec.norm(),
                    h = this.smoothingRadius;
                rVec.mult(945.0 / (32.0 * Math.PI * Math.pow(h, 9)) * Math.pow((h * h - r * r), 2), resultVec);
            };

            // Calculate nabla(W)
            SPHSystem.prototype.nablaw = function (r) {
                var h = this.smoothingRadius;
                var nabla = 945.0 / (32.0 * Math.PI * Math.pow(h, 9)) * (h * h - r * r) * (7 * r * r - 3 * h * h);
                return nabla;
            };

        }, { "../material/Material": 25, "../math/Quaternion": 28, "../math/Vec3": 30, "../objects/Body": 31, "../shapes/Particle": 41, "../shapes/Shape": 43 }], 35: [function (_dereq_, module, exports) {
            var Vec3 = _dereq_('../math/Vec3');

            module.exports = Spring;

            /**
             * A spring, connecting two bodies.
             *
             * @class Spring
             * @constructor
             * @param {Body} bodyA
             * @param {Body} bodyB
             * @param {Object} [options]
             * @param {number} [options.restLength]   A number > 0. Default: 1
             * @param {number} [options.stiffness]    A number >= 0. Default: 100
             * @param {number} [options.damping]      A number >= 0. Default: 1
             * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.
             * @param {Vec3}  [options.worldAnchorB]
             * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.
             * @param {Vec3}  [options.localAnchorB]
             */
            function Spring(bodyA, bodyB, options) {
                options = options || {};

                /**
                 * Rest length of the spring.
                 * @property restLength
                 * @type {number}
                 */
                this.restLength = typeof (options.restLength) === "number" ? options.restLength : 1;

                /**
                 * Stiffness of the spring.
                 * @property stiffness
                 * @type {number}
                 */
                this.stiffness = options.stiffness || 100;

                /**
                 * Damping of the spring.
                 * @property damping
                 * @type {number}
                 */
                this.damping = options.damping || 1;

                /**
                 * First connected body.
                 * @property bodyA
                 * @type {Body}
                 */
                this.bodyA = bodyA;

                /**
                 * Second connected body.
                 * @property bodyB
                 * @type {Body}
                 */
                this.bodyB = bodyB;

                /**
                 * Anchor for bodyA in local bodyA coordinates.
                 * @property localAnchorA
                 * @type {Vec3}
                 */
                this.localAnchorA = new Vec3();

                /**
                 * Anchor for bodyB in local bodyB coordinates.
                 * @property localAnchorB
                 * @type {Vec3}
                 */
                this.localAnchorB = new Vec3();

                if (options.localAnchorA) {
                    this.localAnchorA.copy(options.localAnchorA);
                }
                if (options.localAnchorB) {
                    this.localAnchorB.copy(options.localAnchorB);
                }
                if (options.worldAnchorA) {
                    this.setWorldAnchorA(options.worldAnchorA);
                }
                if (options.worldAnchorB) {
                    this.setWorldAnchorB(options.worldAnchorB);
                }
            }

            /**
             * Set the anchor point on body A, using world coordinates.
             * @method setWorldAnchorA
             * @param {Vec3} worldAnchorA
             */
            Spring.prototype.setWorldAnchorA = function (worldAnchorA) {
                this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);
            };

            /**
             * Set the anchor point on body B, using world coordinates.
             * @method setWorldAnchorB
             * @param {Vec3} worldAnchorB
             */
            Spring.prototype.setWorldAnchorB = function (worldAnchorB) {
                this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);
            };

            /**
             * Get the anchor point on body A, in world coordinates.
             * @method getWorldAnchorA
             * @param {Vec3} result The vector to store the result in.
             */
            Spring.prototype.getWorldAnchorA = function (result) {
                this.bodyA.pointToWorldFrame(this.localAnchorA, result);
            };

            /**
             * Get the anchor point on body B, in world coordinates.
             * @method getWorldAnchorB
             * @param {Vec3} result The vector to store the result in.
             */
            Spring.prototype.getWorldAnchorB = function (result) {
                this.bodyB.pointToWorldFrame(this.localAnchorB, result);
            };

            var applyForce_r = new Vec3(),
                applyForce_r_unit = new Vec3(),
                applyForce_u = new Vec3(),
                applyForce_f = new Vec3(),
                applyForce_worldAnchorA = new Vec3(),
                applyForce_worldAnchorB = new Vec3(),
                applyForce_ri = new Vec3(),
                applyForce_rj = new Vec3(),
                applyForce_ri_x_f = new Vec3(),
                applyForce_rj_x_f = new Vec3(),
                applyForce_tmp = new Vec3();

            /**
             * Apply the spring force to the connected bodies.
             * @method applyForce
             */
            Spring.prototype.applyForce = function () {
                var k = this.stiffness,
                    d = this.damping,
                    l = this.restLength,
                    bodyA = this.bodyA,
                    bodyB = this.bodyB,
                    r = applyForce_r,
                    r_unit = applyForce_r_unit,
                    u = applyForce_u,
                    f = applyForce_f,
                    tmp = applyForce_tmp;

                var worldAnchorA = applyForce_worldAnchorA,
                    worldAnchorB = applyForce_worldAnchorB,
                    ri = applyForce_ri,
                    rj = applyForce_rj,
                    ri_x_f = applyForce_ri_x_f,
                    rj_x_f = applyForce_rj_x_f;

                // Get world anchors
                this.getWorldAnchorA(worldAnchorA);
                this.getWorldAnchorB(worldAnchorB);

                // Get offset points
                worldAnchorA.vsub(bodyA.position, ri);
                worldAnchorB.vsub(bodyB.position, rj);

                // Compute distance vector between world anchor points
                worldAnchorB.vsub(worldAnchorA, r);
                var rlen = r.norm();
                r_unit.copy(r);
                r_unit.normalize();

                // Compute relative velocity of the anchor points, u
                bodyB.velocity.vsub(bodyA.velocity, u);
                // Add rotational velocity

                bodyB.angularVelocity.cross(rj, tmp);
                u.vadd(tmp, u);
                bodyA.angularVelocity.cross(ri, tmp);
                u.vsub(tmp, u);

                // F = - k * ( x - L ) - D * ( u )
                r_unit.mult(-k * (rlen - l) - d * u.dot(r_unit), f);

                // Add forces to bodies
                bodyA.force.vsub(f, bodyA.force);
                bodyB.force.vadd(f, bodyB.force);

                // Angular force
                ri.cross(f, ri_x_f);
                rj.cross(f, rj_x_f);
                bodyA.torque.vsub(ri_x_f, bodyA.torque);
                bodyB.torque.vadd(rj_x_f, bodyB.torque);
            };

        }, { "../math/Vec3": 30 }], 36: [function (_dereq_, module, exports) {
            var Vec3 = _dereq_('../math/Vec3');
            var Transform = _dereq_('../math/Transform');
            var RaycastResult = _dereq_('../collision/RaycastResult');
            var Utils = _dereq_('../utils/Utils');

            module.exports = WheelInfo;

            /**
             * @class WheelInfo
             * @constructor
             * @param {Object} [options]
             *
             * @param {Vec3} [options.chassisConnectionPointLocal]
             * @param {Vec3} [options.chassisConnectionPointWorld]
             * @param {Vec3} [options.directionLocal]
             * @param {Vec3} [options.directionWorld]
             * @param {Vec3} [options.axleLocal]
             * @param {Vec3} [options.axleWorld]
             * @param {number} [options.suspensionRestLength=1]
             * @param {number} [options.suspensionMaxLength=2]
             * @param {number} [options.radius=1]
             * @param {number} [options.suspensionStiffness=100]
             * @param {number} [options.dampingCompression=10]
             * @param {number} [options.dampingRelaxation=10]
             * @param {number} [options.frictionSlip=10000]
             * @param {number} [options.steering=0]
             * @param {number} [options.rotation=0]
             * @param {number} [options.deltaRotation=0]
             * @param {number} [options.rollInfluence=0.01]
             * @param {number} [options.maxSuspensionForce]
             * @param {boolean} [options.isFrontWheel=true]
             * @param {number} [options.clippedInvContactDotSuspension=1]
             * @param {number} [options.suspensionRelativeVelocity=0]
             * @param {number} [options.suspensionForce=0]
             * @param {number} [options.skidInfo=0]
             * @param {number} [options.suspensionLength=0]
             * @param {number} [options.maxSuspensionTravel=1]
             * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]
             * @param {number} [options.customSlidingRotationalSpeed=-0.1]
             */
            function WheelInfo(options) {
                options = Utils.defaults(options, {
                    chassisConnectionPointLocal: new Vec3(),
                    chassisConnectionPointWorld: new Vec3(),
                    directionLocal: new Vec3(),
                    directionWorld: new Vec3(),
                    axleLocal: new Vec3(),
                    axleWorld: new Vec3(),
                    suspensionRestLength: 1,
                    suspensionMaxLength: 2,
                    radius: 1,
                    suspensionStiffness: 100,
                    dampingCompression: 10,
                    dampingRelaxation: 10,
                    frictionSlip: 10000,
                    steering: 0,
                    rotation: 0,
                    deltaRotation: 0,
                    rollInfluence: 0.01,
                    maxSuspensionForce: Number.MAX_VALUE,
                    isFrontWheel: true,
                    clippedInvContactDotSuspension: 1,
                    suspensionRelativeVelocity: 0,
                    suspensionForce: 0,
                    skidInfo: 0,
                    suspensionLength: 0,
                    maxSuspensionTravel: 1,
                    useCustomSlidingRotationalSpeed: false,
                    customSlidingRotationalSpeed: -0.1
                });

                /**
                 * Max travel distance of the suspension, in meters.
                 * @property {number} maxSuspensionTravel
                 */
                this.maxSuspensionTravel = options.maxSuspensionTravel;

                /**
                 * Speed to apply to the wheel rotation when the wheel is sliding.
                 * @property {number} customSlidingRotationalSpeed
                 */
                this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;

                /**
                 * If the customSlidingRotationalSpeed should be used.
                 * @property {Boolean} useCustomSlidingRotationalSpeed
                 */
                this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;

                /**
                 * @property {Boolean} sliding
                 */
                this.sliding = false;

                /**
                 * Connection point, defined locally in the chassis body frame.
                 * @property {Vec3} chassisConnectionPointLocal
                 */
                this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();

                /**
                 * @property {Vec3} chassisConnectionPointWorld
                 */
                this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();

                /**
                 * @property {Vec3} directionLocal
                 */
                this.directionLocal = options.directionLocal.clone();

                /**
                 * @property {Vec3} directionWorld
                 */
                this.directionWorld = options.directionWorld.clone();

                /**
                 * @property {Vec3} axleLocal
                 */
                this.axleLocal = options.axleLocal.clone();

                /**
                 * @property {Vec3} axleWorld
                 */
                this.axleWorld = options.axleWorld.clone();

                /**
                 * @property {number} suspensionRestLength
                 */
                this.suspensionRestLength = options.suspensionRestLength;

                /**
                 * @property {number} suspensionMaxLength
                 */
                this.suspensionMaxLength = options.suspensionMaxLength;

                /**
                 * @property {number} radius
                 */
                this.radius = options.radius;

                /**
                 * @property {number} suspensionStiffness
                 */
                this.suspensionStiffness = options.suspensionStiffness;

                /**
                 * @property {number} dampingCompression
                 */
                this.dampingCompression = options.dampingCompression;

                /**
                 * @property {number} dampingRelaxation
                 */
                this.dampingRelaxation = options.dampingRelaxation;

                /**
                 * @property {number} frictionSlip
                 */
                this.frictionSlip = options.frictionSlip;

                /**
                 * @property {number} steering
                 */
                this.steering = 0;

                /**
                 * Rotation value, in radians.
                 * @property {number} rotation
                 */
                this.rotation = 0;

                /**
                 * @property {number} deltaRotation
                 */
                this.deltaRotation = 0;

                /**
                 * @property {number} rollInfluence
                 */
                this.rollInfluence = options.rollInfluence;

                /**
                 * @property {number} maxSuspensionForce
                 */
                this.maxSuspensionForce = options.maxSuspensionForce;

                /**
                 * @property {number} engineForce
                 */
                this.engineForce = 0;

                /**
                 * @property {number} brake
                 */
                this.brake = 0;

                /**
                 * @property {number} isFrontWheel
                 */
                this.isFrontWheel = options.isFrontWheel;

                /**
                 * @property {number} clippedInvContactDotSuspension
                 */
                this.clippedInvContactDotSuspension = 1;

                /**
                 * @property {number} suspensionRelativeVelocity
                 */
                this.suspensionRelativeVelocity = 0;

                /**
                 * @property {number} suspensionForce
                 */
                this.suspensionForce = 0;

                /**
                 * @property {number} skidInfo
                 */
                this.skidInfo = 0;

                /**
                 * @property {number} suspensionLength
                 */
                this.suspensionLength = 0;

                /**
                 * @property {number} sideImpulse
                 */
                this.sideImpulse = 0;

                /**
                 * @property {number} forwardImpulse
                 */
                this.forwardImpulse = 0;

                /**
                 * The result from raycasting
                 * @property {RaycastResult} raycastResult
                 */
                this.raycastResult = new RaycastResult();

                /**
                 * Wheel world transform
                 * @property {Transform} worldTransform
                 */
                this.worldTransform = new Transform();

                /**
                 * @property {boolean} isInContact
                 */
                this.isInContact = false;
            }

            var chassis_velocity_at_contactPoint = new Vec3();
            var relpos = new Vec3();
            var chassis_velocity_at_contactPoint = new Vec3();
            WheelInfo.prototype.updateWheel = function (chassis) {
                var raycastResult = this.raycastResult;

                if (this.isInContact) {
                    var project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);
                    raycastResult.hitPointWorld.vsub(chassis.position, relpos);
                    chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);
                    var projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);
                    if (project >= -0.1) {
                        this.suspensionRelativeVelocity = 0.0;
                        this.clippedInvContactDotSuspension = 1.0 / 0.1;
                    } else {
                        var inv = -1 / project;
                        this.suspensionRelativeVelocity = projVel * inv;
                        this.clippedInvContactDotSuspension = inv;
                    }

                } else {
                    // Not in contact : position wheel in a nice (rest length) position
                    raycastResult.suspensionLength = this.suspensionRestLength;
                    this.suspensionRelativeVelocity = 0.0;
                    raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);
                    this.clippedInvContactDotSuspension = 1.0;
                }
            };
        }, { "../collision/RaycastResult": 10, "../math/Transform": 29, "../math/Vec3": 30, "../utils/Utils": 53 }], 37: [function (_dereq_, module, exports) {
            module.exports = Box;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var ConvexPolyhedron = _dereq_('./ConvexPolyhedron');

            /**
             * A 3d box shape.
             * @class Box
             * @constructor
             * @param {Vec3} halfExtents
             * @author schteppe
             * @extends Shape
             */
            function Box(halfExtents) {
                Shape.call(this);

                this.type = Shape.types.BOX;

                /**
                 * @property halfExtents
                 * @type {Vec3}
                 */
                this.halfExtents = halfExtents;

                /**
                 * Used by the contact generator to make contacts with other convex polyhedra for example
                 * @property convexPolyhedronRepresentation
                 * @type {ConvexPolyhedron}
                 */
                this.convexPolyhedronRepresentation = null;

                this.updateConvexPolyhedronRepresentation();
                this.updateBoundingSphereRadius();
            }
            Box.prototype = new Shape();
            Box.prototype.constructor = Box;

            /**
             * Updates the local convex polyhedron representation used for some collisions.
             * @method updateConvexPolyhedronRepresentation
             */
            Box.prototype.updateConvexPolyhedronRepresentation = function () {
                var sx = this.halfExtents.x;
                var sy = this.halfExtents.y;
                var sz = this.halfExtents.z;
                var V = Vec3;

                var vertices = [
                    new V(-sx, -sy, -sz),
                    new V(sx, -sy, -sz),
                    new V(sx, sy, -sz),
                    new V(-sx, sy, -sz),
                    new V(-sx, -sy, sz),
                    new V(sx, -sy, sz),
                    new V(sx, sy, sz),
                    new V(-sx, sy, sz)
                ];

                var indices = [
                    [3, 2, 1, 0], // -z
                    [4, 5, 6, 7], // +z
                    [5, 4, 0, 1], // -y
                    [2, 3, 7, 6], // +y
                    [0, 4, 7, 3], // -x
                    [1, 2, 6, 5], // +x
                ];

                var axes = [
                    new V(0, 0, 1),
                    new V(0, 1, 0),
                    new V(1, 0, 0)
                ];

                var h = new ConvexPolyhedron(vertices, indices);
                this.convexPolyhedronRepresentation = h;
                h.material = this.material;
            };

            /**
             * @method calculateLocalInertia
             * @param  {Number} mass
             * @param  {Vec3} target
             * @return {Vec3}
             */
            Box.prototype.calculateLocalInertia = function (mass, target) {
                target = target || new Vec3();
                Box.calculateInertia(this.halfExtents, mass, target);
                return target;
            };

            Box.calculateInertia = function (halfExtents, mass, target) {
                var e = halfExtents;
                target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);
                target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);
                target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);
            };

            /**
             * Get the box 6 side normals
             * @method getSideNormals
             * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.
             * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.
             * @return {array}
             */
            Box.prototype.getSideNormals = function (sixTargetVectors, quat) {
                var sides = sixTargetVectors;
                var ex = this.halfExtents;
                sides[0].set(ex.x, 0, 0);
                sides[1].set(0, ex.y, 0);
                sides[2].set(0, 0, ex.z);
                sides[3].set(-ex.x, 0, 0);
                sides[4].set(0, -ex.y, 0);
                sides[5].set(0, 0, -ex.z);

                if (quat !== undefined) {
                    for (var i = 0; i !== sides.length; i++) {
                        quat.vmult(sides[i], sides[i]);
                    }
                }

                return sides;
            };

            Box.prototype.volume = function () {
                return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
            };

            Box.prototype.updateBoundingSphereRadius = function () {
                this.boundingSphereRadius = this.halfExtents.norm();
            };

            var worldCornerTempPos = new Vec3();
            var worldCornerTempNeg = new Vec3();
            Box.prototype.forEachWorldCorner = function (pos, quat, callback) {

                var e = this.halfExtents;
                var corners = [[e.x, e.y, e.z],
                [-e.x, e.y, e.z],
                [-e.x, -e.y, e.z],
                [-e.x, -e.y, -e.z],
                [e.x, -e.y, -e.z],
                [e.x, e.y, -e.z],
                [-e.x, e.y, -e.z],
                [e.x, -e.y, e.z]];
                for (var i = 0; i < corners.length; i++) {
                    worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);
                    quat.vmult(worldCornerTempPos, worldCornerTempPos);
                    pos.vadd(worldCornerTempPos, worldCornerTempPos);
                    callback(worldCornerTempPos.x,
                        worldCornerTempPos.y,
                        worldCornerTempPos.z);
                }
            };

            var worldCornersTemp = [
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3(),
                new Vec3()
            ];
            Box.prototype.calculateWorldAABB = function (pos, quat, min, max) {

                var e = this.halfExtents;
                worldCornersTemp[0].set(e.x, e.y, e.z);
                worldCornersTemp[1].set(-e.x, e.y, e.z);
                worldCornersTemp[2].set(-e.x, -e.y, e.z);
                worldCornersTemp[3].set(-e.x, -e.y, -e.z);
                worldCornersTemp[4].set(e.x, -e.y, -e.z);
                worldCornersTemp[5].set(e.x, e.y, -e.z);
                worldCornersTemp[6].set(-e.x, e.y, -e.z);
                worldCornersTemp[7].set(e.x, -e.y, e.z);

                var wc = worldCornersTemp[0];
                quat.vmult(wc, wc);
                pos.vadd(wc, wc);
                max.copy(wc);
                min.copy(wc);
                for (var i = 1; i < 8; i++) {
                    var wc = worldCornersTemp[i];
                    quat.vmult(wc, wc);
                    pos.vadd(wc, wc);
                    var x = wc.x;
                    var y = wc.y;
                    var z = wc.z;
                    if (x > max.x) {
                        max.x = x;
                    }
                    if (y > max.y) {
                        max.y = y;
                    }
                    if (z > max.z) {
                        max.z = z;
                    }

                    if (x < min.x) {
                        min.x = x;
                    }
                    if (y < min.y) {
                        min.y = y;
                    }
                    if (z < min.z) {
                        min.z = z;
                    }
                }

                // Get each axis max
                // min.set(Infinity,Infinity,Infinity);
                // max.set(-Infinity,-Infinity,-Infinity);
                // this.forEachWorldCorner(pos,quat,function(x,y,z){
                //     if(x > max.x){
                //         max.x = x;
                //     }
                //     if(y > max.y){
                //         max.y = y;
                //     }
                //     if(z > max.z){
                //         max.z = z;
                //     }

                //     if(x < min.x){
                //         min.x = x;
                //     }
                //     if(y < min.y){
                //         min.y = y;
                //     }
                //     if(z < min.z){
                //         min.z = z;
                //     }
                // });
            };

        }, { "../math/Vec3": 30, "./ConvexPolyhedron": 38, "./Shape": 43 }], 38: [function (_dereq_, module, exports) {
            module.exports = ConvexPolyhedron;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Transform = _dereq_('../math/Transform');

            /**
             * A set of polygons describing a convex shape.
             * @class ConvexPolyhedron
             * @constructor
             * @extends Shape
             * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained
             * in the same 3D plane), instead these should be merged into one polygon.
             *
             * @param {array} points An array of Vec3's
             * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.
             *
             * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)
             * @author schteppe / https://github.com/schteppe
             * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/
             * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp
             *
             * @todo Move the clipping functions to ContactGenerator?
             * @todo Automatically merge coplanar polygons in constructor.
             */
            function ConvexPolyhedron(points, faces, uniqueAxes) {
                var that = this;
                Shape.call(this);
                this.type = Shape.types.CONVEXPOLYHEDRON;

                /**
                 * Array of Vec3
                 * @property vertices
                 * @type {Array}
                 */
                this.vertices = points || [];

                this.worldVertices = []; // World transformed version of .vertices
                this.worldVerticesNeedsUpdate = true;

                /**
                 * Array of integer arrays, indicating which vertices each face consists of
                 * @property faces
                 * @type {Array}
                 */
                this.faces = faces || [];

                /**
                 * Array of Vec3
                 * @property faceNormals
                 * @type {Array}
                 */
                this.faceNormals = [];
                this.computeNormals();

                this.worldFaceNormalsNeedsUpdate = true;
                this.worldFaceNormals = []; // World transformed version of .faceNormals

                /**
                 * Array of Vec3
                 * @property uniqueEdges
                 * @type {Array}
                 */
                this.uniqueEdges = [];

                /**
                 * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.
                 * @property {Array} uniqueAxes
                 */
                this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;

                this.computeEdges();
                this.updateBoundingSphereRadius();
            }
            ConvexPolyhedron.prototype = new Shape();
            ConvexPolyhedron.prototype.constructor = ConvexPolyhedron;

            var computeEdges_tmpEdge = new Vec3();
            /**
             * Computes uniqueEdges
             * @method computeEdges
             */
            ConvexPolyhedron.prototype.computeEdges = function () {
                var faces = this.faces;
                var vertices = this.vertices;
                var nv = vertices.length;
                var edges = this.uniqueEdges;

                edges.length = 0;

                var edge = computeEdges_tmpEdge;

                for (var i = 0; i !== faces.length; i++) {
                    var face = faces[i];
                    var numVertices = face.length;
                    for (var j = 0; j !== numVertices; j++) {
                        var k = (j + 1) % numVertices;
                        vertices[face[j]].vsub(vertices[face[k]], edge);
                        edge.normalize();
                        var found = false;
                        for (var p = 0; p !== edges.length; p++) {
                            if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {
                                found = true;
                                break;
                            }
                        }

                        if (!found) {
                            edges.push(edge.clone());
                        }
                    }
                }
            };

            /**
             * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.
             * @method computeNormals
             */
            ConvexPolyhedron.prototype.computeNormals = function () {
                this.faceNormals.length = this.faces.length;

                // Generate normals
                for (var i = 0; i < this.faces.length; i++) {

                    // Check so all vertices exists for this face
                    for (var j = 0; j < this.faces[i].length; j++) {
                        if (!this.vertices[this.faces[i][j]]) {
                            throw new Error("Vertex " + this.faces[i][j] + " not found!");
                        }
                    }

                    var n = this.faceNormals[i] || new Vec3();
                    this.getFaceNormal(i, n);
                    n.negate(n);
                    this.faceNormals[i] = n;
                    var vertex = this.vertices[this.faces[i][0]];
                    if (n.dot(vertex) < 0) {
                        //console.error(".faceNormals[" + i + "] = Vec3("+n.toString()+") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");
                        //for(var j=0; j<this.faces[i].length; j++){
                        //    console.warn(".vertices["+this.faces[i][j]+"] = Vec3("+this.vertices[this.faces[i][j]].toString()+")");
                        //}
                    }
                }
            };

            /**
             * Get face normal given 3 vertices
             * @static
             * @method getFaceNormal
             * @param {Vec3} va
             * @param {Vec3} vb
             * @param {Vec3} vc
             * @param {Vec3} target
             */
            var cb = new Vec3();
            var ab = new Vec3();
            ConvexPolyhedron.computeNormal = function (va, vb, vc, target) {
                vb.vsub(va, ab);
                vc.vsub(vb, cb);
                cb.cross(ab, target);
                if (!target.isZero()) {
                    target.normalize();
                }
            };

            /**
             * Compute the normal of a face from its vertices
             * @method getFaceNormal
             * @param  {Number} i
             * @param  {Vec3} target
             */
            ConvexPolyhedron.prototype.getFaceNormal = function (i, target) {
                var f = this.faces[i];
                var va = this.vertices[f[0]];
                var vb = this.vertices[f[1]];
                var vc = this.vertices[f[2]];
                return ConvexPolyhedron.computeNormal(va, vb, vc, target);
            };

            /**
             * @method clipAgainstHull
             * @param {Vec3} posA
             * @param {Quaternion} quatA
             * @param {ConvexPolyhedron} hullB
             * @param {Vec3} posB
             * @param {Quaternion} quatB
             * @param {Vec3} separatingNormal
             * @param {Number} minDist Clamp distance
             * @param {Number} maxDist
             * @param {array} result The an array of contact point objects, see clipFaceAgainstHull
             * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp
             */
            var cah_WorldNormal = new Vec3();
            ConvexPolyhedron.prototype.clipAgainstHull = function (posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {
                var WorldNormal = cah_WorldNormal;
                var hullA = this;
                var curMaxDist = maxDist;
                var closestFaceB = -1;
                var dmax = -Number.MAX_VALUE;
                for (var face = 0; face < hullB.faces.length; face++) {
                    WorldNormal.copy(hullB.faceNormals[face]);
                    quatB.vmult(WorldNormal, WorldNormal);
                    //posB.vadd(WorldNormal,WorldNormal);
                    var d = WorldNormal.dot(separatingNormal);
                    if (d > dmax) {
                        dmax = d;
                        closestFaceB = face;
                    }
                }
                var worldVertsB1 = [];
                var polyB = hullB.faces[closestFaceB];
                var numVertices = polyB.length;
                for (var e0 = 0; e0 < numVertices; e0++) {
                    var b = hullB.vertices[polyB[e0]];
                    var worldb = new Vec3();
                    worldb.copy(b);
                    quatB.vmult(worldb, worldb);
                    posB.vadd(worldb, worldb);
                    worldVertsB1.push(worldb);
                }

                if (closestFaceB >= 0) {
                    this.clipFaceAgainstHull(separatingNormal,
                        posA,
                        quatA,
                        worldVertsB1,
                        minDist,
                        maxDist,
                        result);
                }
            };

            /**
             * Find the separating axis between this hull and another
             * @method findSeparatingAxis
             * @param {ConvexPolyhedron} hullB
             * @param {Vec3} posA
             * @param {Quaternion} quatA
             * @param {Vec3} posB
             * @param {Quaternion} quatB
             * @param {Vec3} target The target vector to save the axis in
             * @return {bool} Returns false if a separation is found, else true
             */
            var fsa_faceANormalWS3 = new Vec3(),
                fsa_Worldnormal1 = new Vec3(),
                fsa_deltaC = new Vec3(),
                fsa_worldEdge0 = new Vec3(),
                fsa_worldEdge1 = new Vec3(),
                fsa_Cross = new Vec3();
            ConvexPolyhedron.prototype.findSeparatingAxis = function (hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {
                var faceANormalWS3 = fsa_faceANormalWS3,
                    Worldnormal1 = fsa_Worldnormal1,
                    deltaC = fsa_deltaC,
                    worldEdge0 = fsa_worldEdge0,
                    worldEdge1 = fsa_worldEdge1,
                    Cross = fsa_Cross;

                var dmin = Number.MAX_VALUE;
                var hullA = this;
                var curPlaneTests = 0;

                if (!hullA.uniqueAxes) {

                    var numFacesA = faceListA ? faceListA.length : hullA.faces.length;

                    // Test face normals from hullA
                    for (var i = 0; i < numFacesA; i++) {
                        var fi = faceListA ? faceListA[i] : i;

                        // Get world face normal
                        faceANormalWS3.copy(hullA.faceNormals[fi]);
                        quatA.vmult(faceANormalWS3, faceANormalWS3);

                        var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);
                        if (d === false) {
                            return false;
                        }

                        if (d < dmin) {
                            dmin = d;
                            target.copy(faceANormalWS3);
                        }
                    }

                } else {

                    // Test unique axes
                    for (var i = 0; i !== hullA.uniqueAxes.length; i++) {

                        // Get world axis
                        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);

                        var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);
                        if (d === false) {
                            return false;
                        }

                        if (d < dmin) {
                            dmin = d;
                            target.copy(faceANormalWS3);
                        }
                    }
                }

                if (!hullB.uniqueAxes) {

                    // Test face normals from hullB
                    var numFacesB = faceListB ? faceListB.length : hullB.faces.length;
                    for (var i = 0; i < numFacesB; i++) {

                        var fi = faceListB ? faceListB[i] : i;

                        Worldnormal1.copy(hullB.faceNormals[fi]);
                        quatB.vmult(Worldnormal1, Worldnormal1);
                        curPlaneTests++;
                        var d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);
                        if (d === false) {
                            return false;
                        }

                        if (d < dmin) {
                            dmin = d;
                            target.copy(Worldnormal1);
                        }
                    }
                } else {

                    // Test unique axes in B
                    for (var i = 0; i !== hullB.uniqueAxes.length; i++) {
                        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);

                        curPlaneTests++;
                        var d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);
                        if (d === false) {
                            return false;
                        }

                        if (d < dmin) {
                            dmin = d;
                            target.copy(Worldnormal1);
                        }
                    }
                }

                // Test edges
                for (var e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {

                    // Get world edge
                    quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);

                    for (var e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {

                        // Get world edge 2
                        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);
                        worldEdge0.cross(worldEdge1, Cross);

                        if (!Cross.almostZero()) {
                            Cross.normalize();
                            var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);
                            if (dist === false) {
                                return false;
                            }
                            if (dist < dmin) {
                                dmin = dist;
                                target.copy(Cross);
                            }
                        }
                    }
                }

                posB.vsub(posA, deltaC);
                if ((deltaC.dot(target)) > 0.0) {
                    target.negate(target);
                }

                return true;
            };

            var maxminA = [], maxminB = [];

            /**
             * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.
             * @method testSepAxis
             * @param {Vec3} axis
             * @param {ConvexPolyhedron} hullB
             * @param {Vec3} posA
             * @param {Quaternion} quatA
             * @param {Vec3} posB
             * @param {Quaternion} quatB
             * @return {number} The overlap depth, or FALSE if no penetration.
             */
            ConvexPolyhedron.prototype.testSepAxis = function (axis, hullB, posA, quatA, posB, quatB) {
                var hullA = this;
                ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);
                ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);
                var maxA = maxminA[0];
                var minA = maxminA[1];
                var maxB = maxminB[0];
                var minB = maxminB[1];
                if (maxA < minB || maxB < minA) {
                    return false; // Separated
                }
                var d0 = maxA - minB;
                var d1 = maxB - minA;
                var depth = d0 < d1 ? d0 : d1;
                return depth;
            };

            var cli_aabbmin = new Vec3(),
                cli_aabbmax = new Vec3();

            /**
             * @method calculateLocalInertia
             * @param  {Number} mass
             * @param  {Vec3} target
             */
            ConvexPolyhedron.prototype.calculateLocalInertia = function (mass, target) {
                // Approximate with box inertia
                // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
                this.computeLocalAABB(cli_aabbmin, cli_aabbmax);
                var x = cli_aabbmax.x - cli_aabbmin.x,
                    y = cli_aabbmax.y - cli_aabbmin.y,
                    z = cli_aabbmax.z - cli_aabbmin.z;
                target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);
                target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);
                target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);
            };

            /**
             * @method getPlaneConstantOfFace
             * @param  {Number} face_i Index of the face
             * @return {Number}
             */
            ConvexPolyhedron.prototype.getPlaneConstantOfFace = function (face_i) {
                var f = this.faces[face_i];
                var n = this.faceNormals[face_i];
                var v = this.vertices[f[0]];
                var c = -n.dot(v);
                return c;
            };

            /**
             * Clip a face against a hull.
             * @method clipFaceAgainstHull
             * @param {Vec3} separatingNormal
             * @param {Vec3} posA
             * @param {Quaternion} quatA
             * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.
             * @param {Number} minDist Distance clamping
             * @param {Number} maxDist
             * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.
             */
            var cfah_faceANormalWS = new Vec3(),
                cfah_edge0 = new Vec3(),
                cfah_WorldEdge0 = new Vec3(),
                cfah_worldPlaneAnormal1 = new Vec3(),
                cfah_planeNormalWS1 = new Vec3(),
                cfah_worldA1 = new Vec3(),
                cfah_localPlaneNormal = new Vec3(),
                cfah_planeNormalWS = new Vec3();
            ConvexPolyhedron.prototype.clipFaceAgainstHull = function (separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {
                var faceANormalWS = cfah_faceANormalWS,
                    edge0 = cfah_edge0,
                    WorldEdge0 = cfah_WorldEdge0,
                    worldPlaneAnormal1 = cfah_worldPlaneAnormal1,
                    planeNormalWS1 = cfah_planeNormalWS1,
                    worldA1 = cfah_worldA1,
                    localPlaneNormal = cfah_localPlaneNormal,
                    planeNormalWS = cfah_planeNormalWS;

                var hullA = this;
                var worldVertsB2 = [];
                var pVtxIn = worldVertsB1;
                var pVtxOut = worldVertsB2;
                // Find the face with normal closest to the separating axis
                var closestFaceA = -1;
                var dmin = Number.MAX_VALUE;
                for (var face = 0; face < hullA.faces.length; face++) {
                    faceANormalWS.copy(hullA.faceNormals[face]);
                    quatA.vmult(faceANormalWS, faceANormalWS);
                    //posA.vadd(faceANormalWS,faceANormalWS);
                    var d = faceANormalWS.dot(separatingNormal);
                    if (d < dmin) {
                        dmin = d;
                        closestFaceA = face;
                    }
                }
                if (closestFaceA < 0) {
                    // console.log("--- did not find any closest face... ---");
                    return;
                }
                //console.log("closest A: ",closestFaceA);
                // Get the face and construct connected faces
                var polyA = hullA.faces[closestFaceA];
                polyA.connectedFaces = [];
                for (var i = 0; i < hullA.faces.length; i++) {
                    for (var j = 0; j < hullA.faces[i].length; j++) {
                        if (polyA.indexOf(hullA.faces[i][j]) !== -1 /* Sharing a vertex*/ && i !== closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i) === -1 /* Not already added */) {
                            polyA.connectedFaces.push(i);
                        }
                    }
                }
                // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face
                var numContacts = pVtxIn.length;
                var numVerticesA = polyA.length;
                var res = [];
                for (var e0 = 0; e0 < numVerticesA; e0++) {
                    var a = hullA.vertices[polyA[e0]];
                    var b = hullA.vertices[polyA[(e0 + 1) % numVerticesA]];
                    a.vsub(b, edge0);
                    WorldEdge0.copy(edge0);
                    quatA.vmult(WorldEdge0, WorldEdge0);
                    posA.vadd(WorldEdge0, WorldEdge0);
                    worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);
                    quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);
                    posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);
                    WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);
                    planeNormalWS1.negate(planeNormalWS1);
                    worldA1.copy(a);
                    quatA.vmult(worldA1, worldA1);
                    posA.vadd(worldA1, worldA1);
                    var planeEqWS1 = -worldA1.dot(planeNormalWS1);
                    var planeEqWS;
                    if (true) {
                        var otherFace = polyA.connectedFaces[e0];
                        localPlaneNormal.copy(this.faceNormals[otherFace]);
                        var localPlaneEq = this.getPlaneConstantOfFace(otherFace);

                        planeNormalWS.copy(localPlaneNormal);
                        quatA.vmult(planeNormalWS, planeNormalWS);
                        //posA.vadd(planeNormalWS,planeNormalWS);
                        var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);
                    } else {
                        planeNormalWS.copy(planeNormalWS1);
                        planeEqWS = planeEqWS1;
                    }

                    // Clip face against our constructed plane
                    this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);

                    // Throw away all clipped points, but save the reamining until next clip
                    while (pVtxIn.length) {
                        pVtxIn.shift();
                    }
                    while (pVtxOut.length) {
                        pVtxIn.push(pVtxOut.shift());
                    }
                }

                //console.log("Resulting points after clip:",pVtxIn);

                // only keep contact points that are behind the witness face
                localPlaneNormal.copy(this.faceNormals[closestFaceA]);

                var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);
                planeNormalWS.copy(localPlaneNormal);
                quatA.vmult(planeNormalWS, planeNormalWS);

                var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);
                for (var i = 0; i < pVtxIn.length; i++) {
                    var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???
                    /*console.log("depth calc from normal=",planeNormalWS.toString()," and constant "+planeEqWS+" and vertex ",pVtxIn[i].toString()," gives "+depth);*/
                    if (depth <= minDist) {
                        console.log("clamped: depth=" + depth + " to minDist=" + (minDist + ""));
                        depth = minDist;
                    }

                    if (depth <= maxDist) {
                        var point = pVtxIn[i];
                        if (depth <= 0) {
                            /*console.log("Got contact point ",point.toString(),
                              ", depth=",depth,
                              "contact normal=",separatingNormal.toString(),
                              "plane",planeNormalWS.toString(),
                              "planeConstant",planeEqWS);*/
                            var p = {
                                point: point,
                                normal: planeNormalWS,
                                depth: depth,
                            };
                            result.push(p);
                        }
                    }
                }
            };

            /**
             * Clip a face in a hull against the back of a plane.
             * @method clipFaceAgainstPlane
             * @param {Array} inVertices
             * @param {Array} outVertices
             * @param {Vec3} planeNormal
             * @param {Number} planeConstant The constant in the mathematical plane equation
             */
            ConvexPolyhedron.prototype.clipFaceAgainstPlane = function (inVertices, outVertices, planeNormal, planeConstant) {
                var n_dot_first, n_dot_last;
                var numVerts = inVertices.length;

                if (numVerts < 2) {
                    return outVertices;
                }

                var firstVertex = inVertices[inVertices.length - 1],
                    lastVertex = inVertices[0];

                n_dot_first = planeNormal.dot(firstVertex) + planeConstant;

                for (var vi = 0; vi < numVerts; vi++) {
                    lastVertex = inVertices[vi];
                    n_dot_last = planeNormal.dot(lastVertex) + planeConstant;
                    if (n_dot_first < 0) {
                        if (n_dot_last < 0) {
                            // Start < 0, end < 0, so output lastVertex
                            var newv = new Vec3();
                            newv.copy(lastVertex);
                            outVertices.push(newv);
                        } else {
                            // Start < 0, end >= 0, so output intersection
                            var newv = new Vec3();
                            firstVertex.lerp(lastVertex,
                                n_dot_first / (n_dot_first - n_dot_last),
                                newv);
                            outVertices.push(newv);
                        }
                    } else {
                        if (n_dot_last < 0) {
                            // Start >= 0, end < 0 so output intersection and end
                            var newv = new Vec3();
                            firstVertex.lerp(lastVertex,
                                n_dot_first / (n_dot_first - n_dot_last),
                                newv);
                            outVertices.push(newv);
                            outVertices.push(lastVertex);
                        }
                    }
                    firstVertex = lastVertex;
                    n_dot_first = n_dot_last;
                }
                return outVertices;
            };

            // Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.
            ConvexPolyhedron.prototype.computeWorldVertices = function (position, quat) {
                var N = this.vertices.length;
                while (this.worldVertices.length < N) {
                    this.worldVertices.push(new Vec3());
                }

                var verts = this.vertices,
                    worldVerts = this.worldVertices;
                for (var i = 0; i !== N; i++) {
                    quat.vmult(verts[i], worldVerts[i]);
                    position.vadd(worldVerts[i], worldVerts[i]);
                }

                this.worldVerticesNeedsUpdate = false;
            };

            var computeLocalAABB_worldVert = new Vec3();
            ConvexPolyhedron.prototype.computeLocalAABB = function (aabbmin, aabbmax) {
                var n = this.vertices.length,
                    vertices = this.vertices,
                    worldVert = computeLocalAABB_worldVert;

                aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
                aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);

                for (var i = 0; i < n; i++) {
                    var v = vertices[i];
                    if (v.x < aabbmin.x) {
                        aabbmin.x = v.x;
                    } else if (v.x > aabbmax.x) {
                        aabbmax.x = v.x;
                    }
                    if (v.y < aabbmin.y) {
                        aabbmin.y = v.y;
                    } else if (v.y > aabbmax.y) {
                        aabbmax.y = v.y;
                    }
                    if (v.z < aabbmin.z) {
                        aabbmin.z = v.z;
                    } else if (v.z > aabbmax.z) {
                        aabbmax.z = v.z;
                    }
                }
            };

            /**
             * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.
             * @method computeWorldFaceNormals
             * @param  {Quaternion} quat
             */
            ConvexPolyhedron.prototype.computeWorldFaceNormals = function (quat) {
                var N = this.faceNormals.length;
                while (this.worldFaceNormals.length < N) {
                    this.worldFaceNormals.push(new Vec3());
                }

                var normals = this.faceNormals,
                    worldNormals = this.worldFaceNormals;
                for (var i = 0; i !== N; i++) {
                    quat.vmult(normals[i], worldNormals[i]);
                }

                this.worldFaceNormalsNeedsUpdate = false;
            };

            /**
             * @method updateBoundingSphereRadius
             */
            ConvexPolyhedron.prototype.updateBoundingSphereRadius = function () {
                // Assume points are distributed with local (0,0,0) as center
                var max2 = 0;
                var verts = this.vertices;
                for (var i = 0, N = verts.length; i !== N; i++) {
                    var norm2 = verts[i].norm2();
                    if (norm2 > max2) {
                        max2 = norm2;
                    }
                }
                this.boundingSphereRadius = Math.sqrt(max2);
            };

            var tempWorldVertex = new Vec3();

            /**
             * @method calculateWorldAABB
             * @param {Vec3}        pos
             * @param {Quaternion}  quat
             * @param {Vec3}        min
             * @param {Vec3}        max
             */
            ConvexPolyhedron.prototype.calculateWorldAABB = function (pos, quat, min, max) {
                var n = this.vertices.length, verts = this.vertices;
                var minx, miny, minz, maxx, maxy, maxz;
                for (var i = 0; i < n; i++) {
                    tempWorldVertex.copy(verts[i]);
                    quat.vmult(tempWorldVertex, tempWorldVertex);
                    pos.vadd(tempWorldVertex, tempWorldVertex);
                    var v = tempWorldVertex;
                    if (v.x < minx || minx === undefined) {
                        minx = v.x;
                    } else if (v.x > maxx || maxx === undefined) {
                        maxx = v.x;
                    }

                    if (v.y < miny || miny === undefined) {
                        miny = v.y;
                    } else if (v.y > maxy || maxy === undefined) {
                        maxy = v.y;
                    }

                    if (v.z < minz || minz === undefined) {
                        minz = v.z;
                    } else if (v.z > maxz || maxz === undefined) {
                        maxz = v.z;
                    }
                }
                min.set(minx, miny, minz);
                max.set(maxx, maxy, maxz);
            };

            /**
             * Get approximate convex volume
             * @method volume
             * @return {Number}
             */
            ConvexPolyhedron.prototype.volume = function () {
                return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
            };

            /**
             * Get an average of all the vertices positions
             * @method getAveragePointLocal
             * @param  {Vec3} target
             * @return {Vec3}
             */
            ConvexPolyhedron.prototype.getAveragePointLocal = function (target) {
                target = target || new Vec3();
                var n = this.vertices.length,
                    verts = this.vertices;
                for (var i = 0; i < n; i++) {
                    target.vadd(verts[i], target);
                }
                target.mult(1 / n, target);
                return target;
            };

            /**
             * Transform all local points. Will change the .vertices
             * @method transformAllPoints
             * @param  {Vec3} offset
             * @param  {Quaternion} quat
             */
            ConvexPolyhedron.prototype.transformAllPoints = function (offset, quat) {
                var n = this.vertices.length,
                    verts = this.vertices;

                // Apply rotation
                if (quat) {
                    // Rotate vertices
                    for (var i = 0; i < n; i++) {
                        var v = verts[i];
                        quat.vmult(v, v);
                    }
                    // Rotate face normals
                    for (var i = 0; i < this.faceNormals.length; i++) {
                        var v = this.faceNormals[i];
                        quat.vmult(v, v);
                    }
                    /*
                    // Rotate edges
                    for(var i=0; i<this.uniqueEdges.length; i++){
                        var v = this.uniqueEdges[i];
                        quat.vmult(v,v);
                    }*/
                }

                // Apply offset
                if (offset) {
                    for (var i = 0; i < n; i++) {
                        var v = verts[i];
                        v.vadd(offset, v);
                    }
                }
            };

            /**
             * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.
             * @method pointIsInside
             * @param  {Vec3} p      A point given in local coordinates
             * @return {Boolean}
             */
            var ConvexPolyhedron_pointIsInside = new Vec3();
            var ConvexPolyhedron_vToP = new Vec3();
            var ConvexPolyhedron_vToPointInside = new Vec3();
            ConvexPolyhedron.prototype.pointIsInside = function (p) {
                var n = this.vertices.length,
                    verts = this.vertices,
                    faces = this.faces,
                    normals = this.faceNormals;
                var positiveResult = null;
                var N = this.faces.length;
                var pointInside = ConvexPolyhedron_pointIsInside;
                this.getAveragePointLocal(pointInside);
                for (var i = 0; i < N; i++) {
                    var numVertices = this.faces[i].length;
                    var n = normals[i];
                    var v = verts[faces[i][0]]; // We only need one point in the face

                    // This dot product determines which side of the edge the point is
                    var vToP = ConvexPolyhedron_vToP;
                    p.vsub(v, vToP);
                    var r1 = n.dot(vToP);

                    var vToPointInside = ConvexPolyhedron_vToPointInside;
                    pointInside.vsub(v, vToPointInside);
                    var r2 = n.dot(vToPointInside);

                    if ((r1 < 0 && r2 > 0) || (r1 > 0 && r2 < 0)) {
                        return false; // Encountered some other sign. Exit.
                    } else {
                    }
                }

                // If we got here, all dot products were of the same sign.
                return positiveResult ? 1 : -1;
            };

            /**
             * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.
             * @static
             * @method project
             * @param {ConvexPolyhedron} hull
             * @param {Vec3} axis
             * @param {Vec3} pos
             * @param {Quaternion} quat
             * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.
             */
            var project_worldVertex = new Vec3();
            var project_localAxis = new Vec3();
            var project_localOrigin = new Vec3();
            ConvexPolyhedron.project = function (hull, axis, pos, quat, result) {
                var n = hull.vertices.length,
                    worldVertex = project_worldVertex,
                    localAxis = project_localAxis,
                    max = 0,
                    min = 0,
                    localOrigin = project_localOrigin,
                    vs = hull.vertices;

                localOrigin.setZero();

                // Transform the axis to local
                Transform.vectorToLocalFrame(pos, quat, axis, localAxis);
                Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);
                var add = localOrigin.dot(localAxis);

                min = max = vs[0].dot(localAxis);

                for (var i = 1; i < n; i++) {
                    var val = vs[i].dot(localAxis);

                    if (val > max) {
                        max = val;
                    }

                    if (val < min) {
                        min = val;
                    }
                }

                min -= add;
                max -= add;

                if (min > max) {
                    // Inconsistent - swap
                    var temp = min;
                    min = max;
                    max = temp;
                }
                // Output
                result[0] = max;
                result[1] = min;
            };

        }, { "../math/Quaternion": 28, "../math/Transform": 29, "../math/Vec3": 30, "./Shape": 43 }], 39: [function (_dereq_, module, exports) {
            module.exports = Cylinder;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var ConvexPolyhedron = _dereq_('./ConvexPolyhedron');

            /**
             * @class Cylinder
             * @constructor
             * @extends ConvexPolyhedron
             * @author schteppe / https://github.com/schteppe
             * @param {Number} radiusTop
             * @param {Number} radiusBottom
             * @param {Number} height
             * @param {Number} numSegments The number of segments to build the cylinder out of
             */
            function Cylinder(radiusTop, radiusBottom, height, numSegments) {
                var N = numSegments,
                    verts = [],
                    axes = [],
                    faces = [],
                    bottomface = [],
                    topface = [],
                    cos = Math.cos,
                    sin = Math.sin;

                // First bottom point
                verts.push(new Vec3(radiusBottom * cos(0),
                    radiusBottom * sin(0),
                    -height * 0.5));
                bottomface.push(0);

                // First top point
                verts.push(new Vec3(radiusTop * cos(0),
                    radiusTop * sin(0),
                    height * 0.5));
                topface.push(1);

                for (var i = 0; i < N; i++) {
                    var theta = 2 * Math.PI / N * (i + 1);
                    var thetaN = 2 * Math.PI / N * (i + 0.5);
                    if (i < N - 1) {
                        // Bottom
                        verts.push(new Vec3(radiusBottom * cos(theta),
                            radiusBottom * sin(theta),
                            -height * 0.5));
                        bottomface.push(2 * i + 2);
                        // Top
                        verts.push(new Vec3(radiusTop * cos(theta),
                            radiusTop * sin(theta),
                            height * 0.5));
                        topface.push(2 * i + 3);

                        // Face
                        faces.push([2 * i + 2, 2 * i + 3, 2 * i + 1, 2 * i]);
                    } else {
                        faces.push([0, 1, 2 * i + 1, 2 * i]); // Connect
                    }

                    // Axis: we can cut off half of them if we have even number of segments
                    if (N % 2 === 1 || i < N / 2) {
                        axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));
                    }
                }
                faces.push(topface);
                axes.push(new Vec3(0, 0, 1));

                // Reorder bottom face
                var temp = [];
                for (var i = 0; i < bottomface.length; i++) {
                    temp.push(bottomface[bottomface.length - i - 1]);
                }
                faces.push(temp);

                this.type = Shape.types.CONVEXPOLYHEDRON;
                ConvexPolyhedron.call(this, verts, faces, axes);
            }

            Cylinder.prototype = new ConvexPolyhedron();

        }, { "../math/Quaternion": 28, "../math/Vec3": 30, "./ConvexPolyhedron": 38, "./Shape": 43 }], 40: [function (_dereq_, module, exports) {
            var Shape = _dereq_('./Shape');
            var ConvexPolyhedron = _dereq_('./ConvexPolyhedron');
            var Vec3 = _dereq_('../math/Vec3');
            var Utils = _dereq_('../utils/Utils');

            module.exports = Heightfield;

            /**
             * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.
             * @class Heightfield
             * @extends Shape
             * @constructor
             * @param {Array} data An array of Y values that will be used to construct the terrain.
             * @param {object} options
             * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.
             * @param {Number} [options.maxValue] Maximum value.
             * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.
             * @todo Should be possible to use along all axes, not just y
             *
             * @example
             *     // Generate some height data (y-values).
             *     var data = [];
             *     for(var i = 0; i < 1000; i++){
             *         var y = 0.5 * Math.cos(0.2 * i);
             *         data.push(y);
             *     }
             *
             *     // Create the heightfield shape
             *     var heightfieldShape = new Heightfield(data, {
             *         elementSize: 1 // Distance between the data points in X and Y directions
             *     });
             *     var heightfieldBody = new Body();
             *     heightfieldBody.addShape(heightfieldShape);
             *     world.addBody(heightfieldBody);
             */
            function Heightfield(data, options) {
                options = Utils.defaults(options, {
                    maxValue: null,
                    minValue: null,
                    elementSize: 1
                });

                /**
                 * An array of numbers, or height values, that are spread out along the x axis.
                 * @property {array} data
                 */
                this.data = data;

                /**
                 * Max value of the data
                 * @property {number} maxValue
                 */
                this.maxValue = options.maxValue;

                /**
                 * Max value of the data
                 * @property {number} minValue
                 */
                this.minValue = options.minValue;

                /**
                 * The width of each element
                 * @property {number} elementSize
                 * @todo elementSizeX and Y
                 */
                this.elementSize = options.elementSize;

                if (options.minValue === null) {
                    this.updateMinValue();
                }
                if (options.maxValue === null) {
                    this.updateMaxValue();
                }

                this.cacheEnabled = true;

                Shape.call(this);

                this.pillarConvex = new ConvexPolyhedron();
                this.pillarOffset = new Vec3();

                this.type = Shape.types.HEIGHTFIELD;
                this.updateBoundingSphereRadius();

                // "i_j_isUpper" => { convex: ..., offset: ... }
                // for example:
                // _cachedPillars["0_2_1"]
                this._cachedPillars = {};
            }
            Heightfield.prototype = new Shape();

            /**
             * Call whenever you change the data array.
             * @method update
             */
            Heightfield.prototype.update = function () {
                this._cachedPillars = {};
            };

            /**
             * Update the .minValue property
             * @method updateMinValue
             */
            Heightfield.prototype.updateMinValue = function () {
                var data = this.data;
                var minValue = data[0][0];
                for (var i = 0; i !== data.length; i++) {
                    for (var j = 0; j !== data[i].length; j++) {
                        var v = data[i][j];
                        if (v < minValue) {
                            minValue = v;
                        }
                    }
                }
                this.minValue = minValue;
            };

            /**
             * Update the .maxValue property
             * @method updateMaxValue
             */
            Heightfield.prototype.updateMaxValue = function () {
                var data = this.data;
                var maxValue = data[0][0];
                for (var i = 0; i !== data.length; i++) {
                    for (var j = 0; j !== data[i].length; j++) {
                        var v = data[i][j];
                        if (v > maxValue) {
                            maxValue = v;
                        }
                    }
                }
                this.maxValue = maxValue;
            };

            /**
             * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.
             * @method setHeightValueAtIndex
             * @param {integer} xi
             * @param {integer} yi
             * @param {number} value
             */
            Heightfield.prototype.setHeightValueAtIndex = function (xi, yi, value) {
                var data = this.data;
                data[xi][yi] = value;

                // Invalidate cache
                this.clearCachedConvexTrianglePillar(xi, yi, false);
                if (xi > 0) {
                    this.clearCachedConvexTrianglePillar(xi - 1, yi, true);
                    this.clearCachedConvexTrianglePillar(xi - 1, yi, false);
                }
                if (yi > 0) {
                    this.clearCachedConvexTrianglePillar(xi, yi - 1, true);
                    this.clearCachedConvexTrianglePillar(xi, yi - 1, false);
                }
                if (yi > 0 && xi > 0) {
                    this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);
                }
            };

            /**
             * Get max/min in a rectangle in the matrix data
             * @method getRectMinMax
             * @param  {integer} iMinX
             * @param  {integer} iMinY
             * @param  {integer} iMaxX
             * @param  {integer} iMaxY
             * @param  {array} [result] An array to store the results in.
             * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.
             */
            Heightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {
                result = result || [];

                // Get max and min of the data
                var data = this.data,
                    max = this.minValue; // Set first value
                for (var i = iMinX; i <= iMaxX; i++) {
                    for (var j = iMinY; j <= iMaxY; j++) {
                        var height = data[i][j];
                        if (height > max) {
                            max = height;
                        }
                    }
                }

                result[0] = this.minValue;
                result[1] = max;
            };

            /**
             * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.
             * @method getIndexOfPosition
             * @param  {number} x
             * @param  {number} y
             * @param  {array} result Two-element array
             * @param  {boolean} clamp If the position should be clamped to the heightfield edge.
             * @return {boolean}
             */
            Heightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {

                // Get the index of the data points to test against
                var w = this.elementSize;
                var data = this.data;
                var xi = Math.floor(x / w);
                var yi = Math.floor(y / w);

                result[0] = xi;
                result[1] = yi;

                if (clamp) {
                    // Clamp index to edges
                    if (xi < 0) { xi = 0; }
                    if (yi < 0) { yi = 0; }
                    if (xi >= data.length - 1) { xi = data.length - 1; }
                    if (yi >= data[0].length - 1) { yi = data[0].length - 1; }
                }

                // Bail out if we are out of the terrain
                if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {
                    return false;
                }

                return true;
            };

            Heightfield.prototype.getHeightAt = function (x, y, edgeClamp) {
                var idx = [];
                this.getIndexOfPosition(x, y, idx, edgeClamp);

                // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.
                var minmax = [];
                this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);

                return (minmax[0] + minmax[1]) / 2; // average
            };

            Heightfield.prototype.getCacheConvexTrianglePillarKey = function (xi, yi, getUpperTriangle) {
                return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);
            };

            Heightfield.prototype.getCachedConvexTrianglePillar = function (xi, yi, getUpperTriangle) {
                return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
            };

            Heightfield.prototype.setCachedConvexTrianglePillar = function (xi, yi, getUpperTriangle, convex, offset) {
                this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {
                    convex: convex,
                    offset: offset
                };
            };

            Heightfield.prototype.clearCachedConvexTrianglePillar = function (xi, yi, getUpperTriangle) {
                delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
            };

            /**
             * Get a triangle in the terrain in the form of a triangular convex shape.
             * @method getConvexTrianglePillar
             * @param  {integer} i
             * @param  {integer} j
             * @param  {boolean} getUpperTriangle
             */
            Heightfield.prototype.getConvexTrianglePillar = function (xi, yi, getUpperTriangle) {
                var result = this.pillarConvex;
                var offsetResult = this.pillarOffset;

                if (this.cacheEnabled) {
                    var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);
                    if (data) {
                        this.pillarConvex = data.convex;
                        this.pillarOffset = data.offset;
                        return;
                    }

                    result = new ConvexPolyhedron();
                    offsetResult = new Vec3();

                    this.pillarConvex = result;
                    this.pillarOffset = offsetResult;
                }

                var data = this.data;
                var elementSize = this.elementSize;
                var faces = result.faces;

                // Reuse verts if possible
                result.vertices.length = 6;
                for (var i = 0; i < 6; i++) {
                    if (!result.vertices[i]) {
                        result.vertices[i] = new Vec3();
                    }
                }

                // Reuse faces if possible
                faces.length = 5;
                for (var i = 0; i < 5; i++) {
                    if (!faces[i]) {
                        faces[i] = [];
                    }
                }

                var verts = result.vertices;

                var h = (Math.min(
                    data[xi][yi],
                    data[xi + 1][yi],
                    data[xi][yi + 1],
                    data[xi + 1][yi + 1]
                ) - this.minValue) / 2 + this.minValue;

                if (!getUpperTriangle) {

                    // Center of the triangle pillar - all polygons are given relative to this one
                    offsetResult.set(
                        (xi + 0.25) * elementSize, // sort of center of a triangle
                        (yi + 0.25) * elementSize,
                        h // vertical center
                    );

                    // Top triangle verts
                    verts[0].set(
                        -0.25 * elementSize,
                        -0.25 * elementSize,
                        data[xi][yi] - h
                    );
                    verts[1].set(
                        0.75 * elementSize,
                        -0.25 * elementSize,
                        data[xi + 1][yi] - h
                    );
                    verts[2].set(
                        -0.25 * elementSize,
                        0.75 * elementSize,
                        data[xi][yi + 1] - h
                    );

                    // bottom triangle verts
                    verts[3].set(
                        -0.25 * elementSize,
                        -0.25 * elementSize,
                        -h - 1
                    );
                    verts[4].set(
                        0.75 * elementSize,
                        -0.25 * elementSize,
                        -h - 1
                    );
                    verts[5].set(
                        -0.25 * elementSize,
                        0.75 * elementSize,
                        -h - 1
                    );

                    // top triangle
                    faces[0][0] = 0;
                    faces[0][1] = 1;
                    faces[0][2] = 2;

                    // bottom triangle
                    faces[1][0] = 5;
                    faces[1][1] = 4;
                    faces[1][2] = 3;

                    // -x facing quad
                    faces[2][0] = 0;
                    faces[2][1] = 2;
                    faces[2][2] = 5;
                    faces[2][3] = 3;

                    // -y facing quad
                    faces[3][0] = 1;
                    faces[3][1] = 0;
                    faces[3][2] = 3;
                    faces[3][3] = 4;

                    // +xy facing quad
                    faces[4][0] = 4;
                    faces[4][1] = 5;
                    faces[4][2] = 2;
                    faces[4][3] = 1;


                } else {

                    // Center of the triangle pillar - all polygons are given relative to this one
                    offsetResult.set(
                        (xi + 0.75) * elementSize, // sort of center of a triangle
                        (yi + 0.75) * elementSize,
                        h // vertical center
                    );

                    // Top triangle verts
                    verts[0].set(
                        0.25 * elementSize,
                        0.25 * elementSize,
                        data[xi + 1][yi + 1] - h
                    );
                    verts[1].set(
                        -0.75 * elementSize,
                        0.25 * elementSize,
                        data[xi][yi + 1] - h
                    );
                    verts[2].set(
                        0.25 * elementSize,
                        -0.75 * elementSize,
                        data[xi + 1][yi] - h
                    );

                    // bottom triangle verts
                    verts[3].set(
                        0.25 * elementSize,
                        0.25 * elementSize,
                        - h - 1
                    );
                    verts[4].set(
                        -0.75 * elementSize,
                        0.25 * elementSize,
                        - h - 1
                    );
                    verts[5].set(
                        0.25 * elementSize,
                        -0.75 * elementSize,
                        - h - 1
                    );

                    // Top triangle
                    faces[0][0] = 0;
                    faces[0][1] = 1;
                    faces[0][2] = 2;

                    // bottom triangle
                    faces[1][0] = 5;
                    faces[1][1] = 4;
                    faces[1][2] = 3;

                    // +x facing quad
                    faces[2][0] = 2;
                    faces[2][1] = 5;
                    faces[2][2] = 3;
                    faces[2][3] = 0;

                    // +y facing quad
                    faces[3][0] = 3;
                    faces[3][1] = 4;
                    faces[3][2] = 1;
                    faces[3][3] = 0;

                    // -xy facing quad
                    faces[4][0] = 1;
                    faces[4][1] = 4;
                    faces[4][2] = 5;
                    faces[4][3] = 2;
                }

                result.computeNormals();
                result.computeEdges();
                result.updateBoundingSphereRadius();

                this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);
            };

            Heightfield.prototype.calculateLocalInertia = function (mass, target) {
                target = target || new Vec3();
                target.set(0, 0, 0);
                return target;
            };

            Heightfield.prototype.volume = function () {
                return Number.MAX_VALUE; // The terrain is infinite
            };

            Heightfield.prototype.calculateWorldAABB = function (pos, quat, min, max) {
                // TODO: do it properly
                min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
                max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
            };

            Heightfield.prototype.updateBoundingSphereRadius = function () {
                // Use the bounding box of the min/max values
                var data = this.data,
                    s = this.elementSize;
                this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();
            };

        }, { "../math/Vec3": 30, "../utils/Utils": 53, "./ConvexPolyhedron": 38, "./Shape": 43 }], 41: [function (_dereq_, module, exports) {
            module.exports = Particle;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * Particle shape.
             * @class Particle
             * @constructor
             * @author schteppe
             * @extends Shape
             */
            function Particle() {
                Shape.call(this);

                this.type = Shape.types.PARTICLE;
            }
            Particle.prototype = new Shape();
            Particle.prototype.constructor = Particle;

            /**
             * @method calculateLocalInertia
             * @param  {Number} mass
             * @param  {Vec3} target
             * @return {Vec3}
             */
            Particle.prototype.calculateLocalInertia = function (mass, target) {
                target = target || new Vec3();
                target.set(0, 0, 0);
                return target;
            };

            Particle.prototype.volume = function () {
                return 0;
            };

            Particle.prototype.updateBoundingSphereRadius = function () {
                this.boundingSphereRadius = 0;
            };

            Particle.prototype.calculateWorldAABB = function (pos, quat, min, max) {
                // Get each axis max
                min.copy(pos);
                max.copy(pos);
            };

        }, { "../math/Vec3": 30, "./Shape": 43 }], 42: [function (_dereq_, module, exports) {
            module.exports = Plane;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.
             * @class Plane
             * @constructor
             * @extends Shape
             * @author schteppe
             */
            function Plane() {
                Shape.call(this);
                this.type = Shape.types.PLANE;

                // World oriented normal
                this.worldNormal = new Vec3();
                this.worldNormalNeedsUpdate = true;

                this.boundingSphereRadius = Number.MAX_VALUE;
            }
            Plane.prototype = new Shape();
            Plane.prototype.constructor = Plane;

            Plane.prototype.computeWorldNormal = function (quat) {
                var n = this.worldNormal;
                n.set(0, 0, 1);
                quat.vmult(n, n);
                this.worldNormalNeedsUpdate = false;
            };

            Plane.prototype.calculateLocalInertia = function (mass, target) {
                target = target || new Vec3();
                return target;
            };

            Plane.prototype.volume = function () {
                return Number.MAX_VALUE; // The plane is infinite...
            };

            var tempNormal = new Vec3();
            Plane.prototype.calculateWorldAABB = function (pos, quat, min, max) {
                // The plane AABB is infinite, except if the normal is pointing along any axis
                tempNormal.set(0, 0, 1); // Default plane normal is z
                quat.vmult(tempNormal, tempNormal);
                var maxVal = Number.MAX_VALUE;
                min.set(-maxVal, -maxVal, -maxVal);
                max.set(maxVal, maxVal, maxVal);

                if (tempNormal.x === 1) { max.x = pos.x; }
                if (tempNormal.y === 1) { max.y = pos.y; }
                if (tempNormal.z === 1) { max.z = pos.z; }

                if (tempNormal.x === -1) { min.x = pos.x; }
                if (tempNormal.y === -1) { min.y = pos.y; }
                if (tempNormal.z === -1) { min.z = pos.z; }
            };

            Plane.prototype.updateBoundingSphereRadius = function () {
                this.boundingSphereRadius = Number.MAX_VALUE;
            };
        }, { "../math/Vec3": 30, "./Shape": 43 }], 43: [function (_dereq_, module, exports) {
            module.exports = Shape;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Material = _dereq_('../material/Material');

            /**
             * Base class for shapes
             * @class Shape
             * @constructor
             * @author schteppe
             * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time
             */
            function Shape() {

                /**
                 * Identifyer of the Shape.
                 * @property {number} id
                 */
                this.id = Shape.idCounter++;

                /**
                 * The type of this shape. Must be set to an int > 0 by subclasses.
                 * @property type
                 * @type {Number}
                 * @see Shape.types
                 */
                this.type = 0;

                /**
                 * The local bounding sphere radius of this shape.
                 * @property {Number} boundingSphereRadius
                 */
                this.boundingSphereRadius = 0;

                /**
                 * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
                 * @property {boolean} collisionResponse
                 */
                this.collisionResponse = true;

                /**
                 * @property {Material} material
                 */
                this.material = null;
            }
            Shape.prototype.constructor = Shape;

            /**
             * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius
             * @method updateBoundingSphereRadius
             * @return {Number}
             */
            Shape.prototype.updateBoundingSphereRadius = function () {
                throw "computeBoundingSphereRadius() not implemented for shape type " + this.type;
            };

            /**
             * Get the volume of this shape
             * @method volume
             * @return {Number}
             */
            Shape.prototype.volume = function () {
                throw "volume() not implemented for shape type " + this.type;
            };

            /**
             * Calculates the inertia in the local frame for this shape.
             * @method calculateLocalInertia
             * @return {Vec3}
             * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia
             */
            Shape.prototype.calculateLocalInertia = function (mass, target) {
                throw "calculateLocalInertia() not implemented for shape type " + this.type;
            };

            Shape.idCounter = 0;

            /**
             * The available shape types.
             * @static
             * @property types
             * @type {Object}
             */
            Shape.types = {
                SPHERE: 1,
                PLANE: 2,
                BOX: 4,
                COMPOUND: 8,
                CONVEXPOLYHEDRON: 16,
                HEIGHTFIELD: 32,
                PARTICLE: 64,
                CYLINDER: 128,
                TRIMESH: 256
            };


        }, { "../material/Material": 25, "../math/Quaternion": 28, "../math/Vec3": 30, "./Shape": 43 }], 44: [function (_dereq_, module, exports) {
            module.exports = Sphere;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');

            /**
             * Spherical shape
             * @class Sphere
             * @constructor
             * @extends Shape
             * @param {Number} radius The radius of the sphere, a non-negative number.
             * @author schteppe / http://github.com/schteppe
             */
            function Sphere(radius) {
                Shape.call(this);

                /**
                 * @property {Number} radius
                 */
                this.radius = radius !== undefined ? Number(radius) : 1.0;
                this.type = Shape.types.SPHERE;

                if (this.radius < 0) {
                    throw new Error('The sphere radius cannot be negative.');
                }

                this.updateBoundingSphereRadius();
            }
            Sphere.prototype = new Shape();
            Sphere.prototype.constructor = Sphere;

            Sphere.prototype.calculateLocalInertia = function (mass, target) {
                target = target || new Vec3();
                var I = 2.0 * mass * this.radius * this.radius / 5.0;
                target.x = I;
                target.y = I;
                target.z = I;
                return target;
            };

            Sphere.prototype.volume = function () {
                return 4.0 * Math.PI * this.radius / 3.0;
            };

            Sphere.prototype.updateBoundingSphereRadius = function () {
                this.boundingSphereRadius = this.radius;
            };

            Sphere.prototype.calculateWorldAABB = function (pos, quat, min, max) {
                var r = this.radius;
                var axes = ['x', 'y', 'z'];
                for (var i = 0; i < axes.length; i++) {
                    var ax = axes[i];
                    min[ax] = pos[ax] - r;
                    max[ax] = pos[ax] + r;
                }
            };

        }, { "../math/Vec3": 30, "./Shape": 43 }], 45: [function (_dereq_, module, exports) {
            module.exports = Trimesh;

            var Shape = _dereq_('./Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Transform = _dereq_('../math/Transform');
            var AABB = _dereq_('../collision/AABB');
            var Octree = _dereq_('../utils/Octree');

            /**
             * @class Trimesh
             * @constructor
             * @param {array} vertices
             * @param {array} indices
             * @extends Shape
             * @example
             *     // How to make a mesh with a single triangle
             *     var vertices = [
             *         0, 0, 0, // vertex 0
             *         1, 0, 0, // vertex 1
             *         0, 1, 0  // vertex 2
             *     ];
             *     var indices = [
             *         0, 1, 2  // triangle 0
             *     ];
             *     var trimeshShape = new Trimesh(vertices, indices);
             */
            function Trimesh(vertices, indices) {
                Shape.call(this);
                this.type = Shape.types.TRIMESH;

                /**
                 * @property vertices
                 * @type {Array}
                 */
                this.vertices = new Float32Array(vertices);

                /**
                 * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.
                 * @property indices
                 * @type {Array}
                 */
                this.indices = new Int16Array(indices);

                /**
                 * The normals data.
                 * @property normals
                 * @type {Array}
                 */
                this.normals = new Float32Array(indices.length);

                /**
                 * The local AABB of the mesh.
                 * @property aabb
                 * @type {Array}
                 */
                this.aabb = new AABB();

                /**
                 * References to vertex pairs, making up all unique edges in the trimesh.
                 * @property {array} edges
                 */
                this.edges = null;

                /**
                 * Local scaling of the mesh. Use .setScale() to set it.
                 * @property {Vec3} scale
                 */
                this.scale = new Vec3(1, 1, 1);

                /**
                 * The indexed triangles. Use .updateTree() to update it.
                 * @property {Octree} tree
                 */
                this.tree = new Octree();

                this.updateEdges();
                this.updateNormals();
                this.updateAABB();
                this.updateBoundingSphereRadius();
                this.updateTree();
            }
            Trimesh.prototype = new Shape();
            Trimesh.prototype.constructor = Trimesh;

            var computeNormals_n = new Vec3();

            /**
             * @method updateTree
             */
            Trimesh.prototype.updateTree = function () {
                var tree = this.tree;

                tree.reset();
                tree.aabb.copy(this.aabb);
                var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled
                tree.aabb.lowerBound.x *= 1 / scale.x;
                tree.aabb.lowerBound.y *= 1 / scale.y;
                tree.aabb.lowerBound.z *= 1 / scale.z;
                tree.aabb.upperBound.x *= 1 / scale.x;
                tree.aabb.upperBound.y *= 1 / scale.y;
                tree.aabb.upperBound.z *= 1 / scale.z;

                // Insert all triangles
                var triangleAABB = new AABB();
                var a = new Vec3();
                var b = new Vec3();
                var c = new Vec3();
                var points = [a, b, c];
                for (var i = 0; i < this.indices.length / 3; i++) {
                    //this.getTriangleVertices(i, a, b, c);

                    // Get unscaled triangle verts
                    var i3 = i * 3;
                    this._getUnscaledVertex(this.indices[i3], a);
                    this._getUnscaledVertex(this.indices[i3 + 1], b);
                    this._getUnscaledVertex(this.indices[i3 + 2], c);

                    triangleAABB.setFromPoints(points);
                    tree.insert(triangleAABB, i);
                }
                tree.removeEmptyNodes();
            };

            var unscaledAABB = new AABB();

            /**
             * Get triangles in a local AABB from the trimesh.
             * @method getTrianglesInAABB
             * @param  {AABB} aabb
             * @param  {array} result An array of integers, referencing the queried triangles.
             */
            Trimesh.prototype.getTrianglesInAABB = function (aabb, result) {
                unscaledAABB.copy(aabb);

                // Scale it to local
                var scale = this.scale;
                var isx = scale.x;
                var isy = scale.y;
                var isz = scale.z;
                var l = unscaledAABB.lowerBound;
                var u = unscaledAABB.upperBound;
                l.x /= isx;
                l.y /= isy;
                l.z /= isz;
                u.x /= isx;
                u.y /= isy;
                u.z /= isz;

                return this.tree.aabbQuery(unscaledAABB, result);
            };

            /**
             * @method setScale
             * @param {Vec3} scale
             */
            Trimesh.prototype.setScale = function (scale) {
                var wasUniform = this.scale.x === this.scale.y === this.scale.z;
                var isUniform = scale.x === scale.y === scale.z;

                if (!(wasUniform && isUniform)) {
                    // Non-uniform scaling. Need to update normals.
                    this.updateNormals();
                }
                this.scale.copy(scale);
                this.updateAABB();
                this.updateBoundingSphereRadius();
            };

            /**
             * Compute the normals of the faces. Will save in the .normals array.
             * @method updateNormals
             */
            Trimesh.prototype.updateNormals = function () {
                var n = computeNormals_n;

                // Generate normals
                var normals = this.normals;
                for (var i = 0; i < this.indices.length / 3; i++) {
                    var i3 = i * 3;

                    var a = this.indices[i3],
                        b = this.indices[i3 + 1],
                        c = this.indices[i3 + 2];

                    this.getVertex(a, va);
                    this.getVertex(b, vb);
                    this.getVertex(c, vc);

                    Trimesh.computeNormal(vb, va, vc, n);

                    normals[i3] = n.x;
                    normals[i3 + 1] = n.y;
                    normals[i3 + 2] = n.z;
                }
            };

            /**
             * Update the .edges property
             * @method updateEdges
             */
            Trimesh.prototype.updateEdges = function () {
                var edges = {};
                var add = function (indexA, indexB) {
                    var key = a < b ? a + '_' + b : b + '_' + a;
                    edges[key] = true;
                };
                for (var i = 0; i < this.indices.length / 3; i++) {
                    var i3 = i * 3;
                    var a = this.indices[i3],
                        b = this.indices[i3 + 1],
                        c = this.indices[i3 + 2];
                    add(a, b);
                    add(b, c);
                    add(c, a);
                }
                var keys = Object.keys(edges);
                this.edges = new Int16Array(keys.length * 2);
                for (var i = 0; i < keys.length; i++) {
                    var indices = keys[i].split('_');
                    this.edges[2 * i] = parseInt(indices[0], 10);
                    this.edges[2 * i + 1] = parseInt(indices[1], 10);
                }
            };

            /**
             * Get an edge vertex
             * @method getEdgeVertex
             * @param  {number} edgeIndex
             * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.
             * @param  {Vec3} vertexStore Where to store the result
             */
            Trimesh.prototype.getEdgeVertex = function (edgeIndex, firstOrSecond, vertexStore) {
                var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];
                this.getVertex(vertexIndex, vertexStore);
            };

            var getEdgeVector_va = new Vec3();
            var getEdgeVector_vb = new Vec3();

            /**
             * Get a vector along an edge.
             * @method getEdgeVector
             * @param  {number} edgeIndex
             * @param  {Vec3} vectorStore
             */
            Trimesh.prototype.getEdgeVector = function (edgeIndex, vectorStore) {
                var va = getEdgeVector_va;
                var vb = getEdgeVector_vb;
                this.getEdgeVertex(edgeIndex, 0, va);
                this.getEdgeVertex(edgeIndex, 1, vb);
                vb.vsub(va, vectorStore);
            };

            /**
             * Get face normal given 3 vertices
             * @static
             * @method computeNormal
             * @param {Vec3} va
             * @param {Vec3} vb
             * @param {Vec3} vc
             * @param {Vec3} target
             */
            var cb = new Vec3();
            var ab = new Vec3();
            Trimesh.computeNormal = function (va, vb, vc, target) {
                vb.vsub(va, ab);
                vc.vsub(vb, cb);
                cb.cross(ab, target);
                if (!target.isZero()) {
                    target.normalize();
                }
            };

            var va = new Vec3();
            var vb = new Vec3();
            var vc = new Vec3();

            /**
             * Get vertex i.
             * @method getVertex
             * @param  {number} i
             * @param  {Vec3} out
             * @return {Vec3} The "out" vector object
             */
            Trimesh.prototype.getVertex = function (i, out) {
                var scale = this.scale;
                this._getUnscaledVertex(i, out);
                out.x *= scale.x;
                out.y *= scale.y;
                out.z *= scale.z;
                return out;
            };

            /**
             * Get raw vertex i
             * @private
             * @method _getUnscaledVertex
             * @param  {number} i
             * @param  {Vec3} out
             * @return {Vec3} The "out" vector object
             */
            Trimesh.prototype._getUnscaledVertex = function (i, out) {
                var i3 = i * 3;
                var vertices = this.vertices;
                return out.set(
                    vertices[i3],
                    vertices[i3 + 1],
                    vertices[i3 + 2]
                );
            };

            /**
             * Get a vertex from the trimesh,transformed by the given position and quaternion.
             * @method getWorldVertex
             * @param  {number} i
             * @param  {Vec3} pos
             * @param  {Quaternion} quat
             * @param  {Vec3} out
             * @return {Vec3} The "out" vector object
             */
            Trimesh.prototype.getWorldVertex = function (i, pos, quat, out) {
                this.getVertex(i, out);
                Transform.pointToWorldFrame(pos, quat, out, out);
                return out;
            };

            /**
             * Get the three vertices for triangle i.
             * @method getTriangleVertices
             * @param  {number} i
             * @param  {Vec3} a
             * @param  {Vec3} b
             * @param  {Vec3} c
             */
            Trimesh.prototype.getTriangleVertices = function (i, a, b, c) {
                var i3 = i * 3;
                this.getVertex(this.indices[i3], a);
                this.getVertex(this.indices[i3 + 1], b);
                this.getVertex(this.indices[i3 + 2], c);
            };

            /**
             * Compute the normal of triangle i.
             * @method getNormal
             * @param  {Number} i
             * @param  {Vec3} target
             * @return {Vec3} The "target" vector object
             */
            Trimesh.prototype.getNormal = function (i, target) {
                var i3 = i * 3;
                return target.set(
                    this.normals[i3],
                    this.normals[i3 + 1],
                    this.normals[i3 + 2]
                );
            };

            var cli_aabb = new AABB();

            /**
             * @method calculateLocalInertia
             * @param  {Number} mass
             * @param  {Vec3} target
             * @return {Vec3} The "target" vector object
             */
            Trimesh.prototype.calculateLocalInertia = function (mass, target) {
                // Approximate with box inertia
                // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
                this.computeLocalAABB(cli_aabb);
                var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,
                    y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,
                    z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;
                return target.set(
                    1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z),
                    1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z),
                    1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x)
                );
            };

            var computeLocalAABB_worldVert = new Vec3();

            /**
             * Compute the local AABB for the trimesh
             * @method computeLocalAABB
             * @param  {AABB} aabb
             */
            Trimesh.prototype.computeLocalAABB = function (aabb) {
                var l = aabb.lowerBound,
                    u = aabb.upperBound,
                    n = this.vertices.length,
                    vertices = this.vertices,
                    v = computeLocalAABB_worldVert;

                this.getVertex(0, v);
                l.copy(v);
                u.copy(v);

                for (var i = 0; i !== n; i++) {
                    this.getVertex(i, v);

                    if (v.x < l.x) {
                        l.x = v.x;
                    } else if (v.x > u.x) {
                        u.x = v.x;
                    }

                    if (v.y < l.y) {
                        l.y = v.y;
                    } else if (v.y > u.y) {
                        u.y = v.y;
                    }

                    if (v.z < l.z) {
                        l.z = v.z;
                    } else if (v.z > u.z) {
                        u.z = v.z;
                    }
                }
            };


            /**
             * Update the .aabb property
             * @method updateAABB
             */
            Trimesh.prototype.updateAABB = function () {
                this.computeLocalAABB(this.aabb);
            };

            /**
             * Will update the .boundingSphereRadius property
             * @method updateBoundingSphereRadius
             */
            Trimesh.prototype.updateBoundingSphereRadius = function () {
                // Assume points are distributed with local (0,0,0) as center
                var max2 = 0;
                var vertices = this.vertices;
                var v = new Vec3();
                for (var i = 0, N = vertices.length / 3; i !== N; i++) {
                    this.getVertex(i, v);
                    var norm2 = v.norm2();
                    if (norm2 > max2) {
                        max2 = norm2;
                    }
                }
                this.boundingSphereRadius = Math.sqrt(max2);
            };

            var tempWorldVertex = new Vec3();
            var calculateWorldAABB_frame = new Transform();
            var calculateWorldAABB_aabb = new AABB();

            /**
             * @method calculateWorldAABB
             * @param {Vec3}        pos
             * @param {Quaternion}  quat
             * @param {Vec3}        min
             * @param {Vec3}        max
             */
            Trimesh.prototype.calculateWorldAABB = function (pos, quat, min, max) {
                /*
                var n = this.vertices.length / 3,
                    verts = this.vertices;
                var minx,miny,minz,maxx,maxy,maxz;
            
                var v = tempWorldVertex;
                for(var i=0; i<n; i++){
                    this.getVertex(i, v);
                    quat.vmult(v, v);
                    pos.vadd(v, v);
                    if (v.x < minx || minx===undefined){
                        minx = v.x;
                    } else if(v.x > maxx || maxx===undefined){
                        maxx = v.x;
                    }
            
                    if (v.y < miny || miny===undefined){
                        miny = v.y;
                    } else if(v.y > maxy || maxy===undefined){
                        maxy = v.y;
                    }
            
                    if (v.z < minz || minz===undefined){
                        minz = v.z;
                    } else if(v.z > maxz || maxz===undefined){
                        maxz = v.z;
                    }
                }
                min.set(minx,miny,minz);
                max.set(maxx,maxy,maxz);
                */

                // Faster approximation using local AABB
                var frame = calculateWorldAABB_frame;
                var result = calculateWorldAABB_aabb;
                frame.position = pos;
                frame.quaternion = quat;
                this.aabb.toWorldFrame(frame, result);
                min.copy(result.lowerBound);
                max.copy(result.upperBound);
            };

            /**
             * Get approximate volume
             * @method volume
             * @return {Number}
             */
            Trimesh.prototype.volume = function () {
                return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
            };

            /**
             * Create a Trimesh instance, shaped as a torus.
             * @static
             * @method createTorus
             * @param  {number} [radius=1]
             * @param  {number} [tube=0.5]
             * @param  {number} [radialSegments=8]
             * @param  {number} [tubularSegments=6]
             * @param  {number} [arc=6.283185307179586]
             * @return {Trimesh} A torus
             */
            Trimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {
                radius = radius || 1;
                tube = tube || 0.5;
                radialSegments = radialSegments || 8;
                tubularSegments = tubularSegments || 6;
                arc = arc || Math.PI * 2;

                var vertices = [];
                var indices = [];

                for (var j = 0; j <= radialSegments; j++) {
                    for (var i = 0; i <= tubularSegments; i++) {
                        var u = i / tubularSegments * arc;
                        var v = j / radialSegments * Math.PI * 2;

                        var x = (radius + tube * Math.cos(v)) * Math.cos(u);
                        var y = (radius + tube * Math.cos(v)) * Math.sin(u);
                        var z = tube * Math.sin(v);

                        vertices.push(x, y, z);
                    }
                }

                for (var j = 1; j <= radialSegments; j++) {
                    for (var i = 1; i <= tubularSegments; i++) {
                        var a = (tubularSegments + 1) * j + i - 1;
                        var b = (tubularSegments + 1) * (j - 1) + i - 1;
                        var c = (tubularSegments + 1) * (j - 1) + i;
                        var d = (tubularSegments + 1) * j + i;

                        indices.push(a, b, d);
                        indices.push(b, c, d);
                    }
                }

                return new Trimesh(vertices, indices);
            };

        }, { "../collision/AABB": 3, "../math/Quaternion": 28, "../math/Transform": 29, "../math/Vec3": 30, "../utils/Octree": 50, "./Shape": 43 }], 46: [function (_dereq_, module, exports) {
            module.exports = GSSolver;

            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Solver = _dereq_('./Solver');

            /**
             * Constraint equation Gauss-Seidel solver.
             * @class GSSolver
             * @constructor
             * @todo The spook parameters should be specified for each constraint, not globally.
             * @author schteppe / https://github.com/schteppe
             * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf
             * @extends Solver
             */
            function GSSolver() {
                Solver.call(this);

                /**
                 * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
                 * @property iterations
                 * @type {Number}
                 * @todo write more about solver and iterations in the wiki
                 */
                this.iterations = 10;

                /**
                 * When tolerance is reached, the system is assumed to be converged.
                 * @property tolerance
                 * @type {Number}
                 */
                this.tolerance = 1e-7;
            }
            GSSolver.prototype = new Solver();

            var GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.
            var GSSolver_solve_invCs = [];
            var GSSolver_solve_Bs = [];
            GSSolver.prototype.solve = function (dt, world) {
                var iter = 0,
                    maxIter = this.iterations,
                    tolSquared = this.tolerance * this.tolerance,
                    equations = this.equations,
                    Neq = equations.length,
                    bodies = world.bodies,
                    Nbodies = bodies.length,
                    h = dt,
                    q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;

                // Update solve mass
                if (Neq !== 0) {
                    for (var i = 0; i !== Nbodies; i++) {
                        bodies[i].updateSolveMassProperties();
                    }
                }

                // Things that does not change during iteration can be computed once
                var invCs = GSSolver_solve_invCs,
                    Bs = GSSolver_solve_Bs,
                    lambda = GSSolver_solve_lambda;
                invCs.length = Neq;
                Bs.length = Neq;
                lambda.length = Neq;
                for (var i = 0; i !== Neq; i++) {
                    var c = equations[i];
                    lambda[i] = 0.0;
                    Bs[i] = c.computeB(h);
                    invCs[i] = 1.0 / c.computeC();
                }

                if (Neq !== 0) {

                    // Reset vlambda
                    for (var i = 0; i !== Nbodies; i++) {
                        var b = bodies[i],
                            vlambda = b.vlambda,
                            wlambda = b.wlambda;
                        vlambda.set(0, 0, 0);
                        if (wlambda) {
                            wlambda.set(0, 0, 0);
                        }
                    }

                    // Iterate over equations
                    for (iter = 0; iter !== maxIter; iter++) {

                        // Accumulate the total error for each iteration.
                        deltalambdaTot = 0.0;

                        for (var j = 0; j !== Neq; j++) {

                            var c = equations[j];

                            // Compute iteration
                            B = Bs[j];
                            invC = invCs[j];
                            lambdaj = lambda[j];
                            GWlambda = c.computeGWlambda();
                            deltalambda = invC * (B - GWlambda - c.eps * lambdaj);

                            // Clamp if we are not within the min/max interval
                            if (lambdaj + deltalambda < c.minForce) {
                                deltalambda = c.minForce - lambdaj;
                            } else if (lambdaj + deltalambda > c.maxForce) {
                                deltalambda = c.maxForce - lambdaj;
                            }
                            lambda[j] += deltalambda;

                            deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)

                            c.addToWlambda(deltalambda);
                        }

                        // If the total error is small enough - stop iterate
                        if (deltalambdaTot * deltalambdaTot < tolSquared) {
                            break;
                        }
                    }

                    // Add result to velocity
                    for (var i = 0; i !== Nbodies; i++) {
                        var b = bodies[i],
                            v = b.velocity,
                            w = b.angularVelocity;
                        //console.log("2",v,b.vlambda, w);
                        v.vadd(b.vlambda, v);
                        if (w) {
                            w.vadd(b.wlambda, w);
                        }

                    }
                }

                return iter;
            };

        }, { "../math/Quaternion": 28, "../math/Vec3": 30, "./Solver": 47 }], 47: [function (_dereq_, module, exports) {
            module.exports = Solver;

            /**
             * Constraint equation solver base class.
             * @class Solver
             * @constructor
             * @author schteppe / https://github.com/schteppe
             */
            function Solver() {
                /**
                 * All equations to be solved
                 * @property {Array} equations
                 */
                this.equations = [];
            }

            /**
             * Should be implemented in subclasses!
             * @method solve
             * @param  {Number} dt
             * @param  {World} world
             */
            Solver.prototype.solve = function (dt, world) {
                // Should return the number of iterations done!
                return 0;
            };

            /**
             * Add an equation
             * @method addEquation
             * @param {Equation} eq
             */
            Solver.prototype.addEquation = function (eq) {
                if (eq.enabled) {
                    this.equations.push(eq);
                }
            };

            /**
             * Remove an equation
             * @method removeEquation
             * @param {Equation} eq
             */
            Solver.prototype.removeEquation = function (eq) {
                var eqs = this.equations;
                var i = eqs.indexOf(eq);
                if (i !== -1) {
                    eqs.splice(i, 1);
                }
            };

            /**
             * Add all equations
             * @method removeAllEquations
             */
            Solver.prototype.removeAllEquations = function () {
                this.equations.length = 0;
            };


        }, {}], 48: [function (_dereq_, module, exports) {
            module.exports = SplitSolver;

            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var Solver = _dereq_('./Solver');
            var Body = _dereq_('../objects/Body');

            /**
             * Splits the equations into islands and solves them independently. Can improve performance.
             * @class SplitSolver
             * @constructor
             * @extends Solver
             * @param {Solver} subsolver
             */
            function SplitSolver(subsolver) {
                Solver.call(this);
                this.iterations = 10;
                this.tolerance = 1e-7;
                this.subsolver = subsolver;
                this.nodes = [];
                this.nodePool = [];

                // Create needed nodes, reuse if possible
                while (this.nodePool.length < 128) {
                    this.nodePool.push(this.createNode());
                }
            }
            SplitSolver.prototype = new Solver();

            // Returns the number of subsystems
            var SplitSolver_solve_nodes = []; // All allocated node objects
            var SplitSolver_solve_nodePool = []; // All allocated node objects
            var SplitSolver_solve_eqs = [];   // Temp array
            var SplitSolver_solve_bds = [];   // Temp array
            var SplitSolver_solve_dummyWorld = { bodies: [] }; // Temp object

            var STATIC = Body.STATIC;
            function getUnvisitedNode(nodes) {
                var Nnodes = nodes.length;
                for (var i = 0; i !== Nnodes; i++) {
                    var node = nodes[i];
                    if (!node.visited && !(node.body.type & STATIC)) {
                        return node;
                    }
                }
                return false;
            }

            var queue = [];
            function bfs(root, visitFunc, bds, eqs) {
                queue.push(root);
                root.visited = true;
                visitFunc(root, bds, eqs);
                while (queue.length) {
                    var node = queue.pop();
                    // Loop over unvisited child nodes
                    var child;
                    while ((child = getUnvisitedNode(node.children))) {
                        child.visited = true;
                        visitFunc(child, bds, eqs);
                        queue.push(child);
                    }
                }
            }

            function visitFunc(node, bds, eqs) {
                bds.push(node.body);
                var Neqs = node.eqs.length;
                for (var i = 0; i !== Neqs; i++) {
                    var eq = node.eqs[i];
                    if (eqs.indexOf(eq) === -1) {
                        eqs.push(eq);
                    }
                }
            }

            SplitSolver.prototype.createNode = function () {
                return { body: null, children: [], eqs: [], visited: false };
            };

            /**
             * Solve the subsystems
             * @method solve
             * @param  {Number} dt
             * @param  {World} world
             */
            SplitSolver.prototype.solve = function (dt, world) {
                var nodes = SplitSolver_solve_nodes,
                    nodePool = this.nodePool,
                    bodies = world.bodies,
                    equations = this.equations,
                    Neq = equations.length,
                    Nbodies = bodies.length,
                    subsolver = this.subsolver;

                // Create needed nodes, reuse if possible
                while (nodePool.length < Nbodies) {
                    nodePool.push(this.createNode());
                }
                nodes.length = Nbodies;
                for (var i = 0; i < Nbodies; i++) {
                    nodes[i] = nodePool[i];
                }

                // Reset node values
                for (var i = 0; i !== Nbodies; i++) {
                    var node = nodes[i];
                    node.body = bodies[i];
                    node.children.length = 0;
                    node.eqs.length = 0;
                    node.visited = false;
                }
                for (var k = 0; k !== Neq; k++) {
                    var eq = equations[k],
                        i = bodies.indexOf(eq.bi),
                        j = bodies.indexOf(eq.bj),
                        ni = nodes[i],
                        nj = nodes[j];
                    ni.children.push(nj);
                    ni.eqs.push(eq);
                    nj.children.push(ni);
                    nj.eqs.push(eq);
                }

                var child, n = 0, eqs = SplitSolver_solve_eqs;

                subsolver.tolerance = this.tolerance;
                subsolver.iterations = this.iterations;

                var dummyWorld = SplitSolver_solve_dummyWorld;
                while ((child = getUnvisitedNode(nodes))) {
                    eqs.length = 0;
                    dummyWorld.bodies.length = 0;
                    bfs(child, visitFunc, dummyWorld.bodies, eqs);

                    var Neqs = eqs.length;

                    eqs = eqs.sort(sortById);

                    for (var i = 0; i !== Neqs; i++) {
                        subsolver.addEquation(eqs[i]);
                    }

                    var iter = subsolver.solve(dt, dummyWorld);
                    subsolver.removeAllEquations();
                    n++;
                }

                return n;
            };

            function sortById(a, b) {
                return b.id - a.id;
            }
        }, { "../math/Quaternion": 28, "../math/Vec3": 30, "../objects/Body": 31, "./Solver": 47 }], 49: [function (_dereq_, module, exports) {
            /**
             * Base class for objects that dispatches events.
             * @class EventTarget
             * @constructor
             */
            var EventTarget = function () {

            };

            module.exports = EventTarget;

            EventTarget.prototype = {
                constructor: EventTarget,

                /**
                 * Add an event listener
                 * @method addEventListener
                 * @param  {String} type
                 * @param  {Function} listener
                 * @return {EventTarget} The self object, for chainability.
                 */
                addEventListener: function (type, listener) {
                    if (this._listeners === undefined) { this._listeners = {}; }
                    var listeners = this._listeners;
                    if (listeners[type] === undefined) {
                        listeners[type] = [];
                    }
                    if (listeners[type].indexOf(listener) === - 1) {
                        listeners[type].push(listener);
                    }
                    return this;
                },

                /**
                 * Check if an event listener is added
                 * @method hasEventListener
                 * @param  {String} type
                 * @param  {Function} listener
                 * @return {Boolean}
                 */
                hasEventListener: function (type, listener) {
                    if (this._listeners === undefined) { return false; }
                    var listeners = this._listeners;
                    if (listeners[type] !== undefined && listeners[type].indexOf(listener) !== - 1) {
                        return true;
                    }
                    return false;
                },

                /**
                 * Remove an event listener
                 * @method removeEventListener
                 * @param  {String} type
                 * @param  {Function} listener
                 * @return {EventTarget} The self object, for chainability.
                 */
                removeEventListener: function (type, listener) {
                    if (this._listeners === undefined) { return this; }
                    var listeners = this._listeners;
                    if (listeners[type] === undefined) { return this; }
                    var index = listeners[type].indexOf(listener);
                    if (index !== - 1) {
                        listeners[type].splice(index, 1);
                    }
                    return this;
                },

                /**
                 * Emit an event.
                 * @method dispatchEvent
                 * @param  {Object} event
                 * @param  {String} event.type
                 * @return {EventTarget} The self object, for chainability.
                 */
                dispatchEvent: function (event) {
                    if (this._listeners === undefined) { return this; }
                    var listeners = this._listeners;
                    var listenerArray = listeners[event.type];
                    if (listenerArray !== undefined) {
                        event.target = this;
                        for (var i = 0, l = listenerArray.length; i < l; i++) {
                            listenerArray[i].call(this, event);
                        }
                    }
                    return this;
                }
            };

        }, {}], 50: [function (_dereq_, module, exports) {
            var AABB = _dereq_('../collision/AABB');
            var Vec3 = _dereq_('../math/Vec3');

            module.exports = Octree;

            /**
             * @class OctreeNode
             * @param {object} [options]
             * @param {Octree} [options.root]
             * @param {AABB} [options.aabb]
             */
            function OctreeNode(options) {
                options = options || {};

                /**
                 * The root node
                 * @property {OctreeNode} root
                 */
                this.root = options.root || null;

                /**
                 * Boundary of this node
                 * @property {AABB} aabb
                 */
                this.aabb = options.aabb ? options.aabb.clone() : new AABB();

                /**
                 * Contained data at the current node level.
                 * @property {Array} data
                 */
                this.data = [];

                /**
                 * Children to this node
                 * @property {Array} children
                 */
                this.children = [];
            }

            /**
             * @class Octree
             * @param {AABB} aabb The total AABB of the tree
             * @param {object} [options]
             * @param {number} [options.maxDepth=8]
             * @extends OctreeNode
             */
            function Octree(aabb, options) {
                options = options || {};
                options.root = null;
                options.aabb = aabb;
                OctreeNode.call(this, options);

                /**
                 * Maximum subdivision depth
                 * @property {number} maxDepth
                 */
                this.maxDepth = typeof (options.maxDepth) !== 'undefined' ? options.maxDepth : 8;
            }
            Octree.prototype = new OctreeNode();

            OctreeNode.prototype.reset = function (aabb, options) {
                this.children.length = this.data.length = 0;
            };

            /**
             * Insert data into this node
             * @method insert
             * @param  {AABB} aabb
             * @param  {object} elementData
             * @return {boolean} True if successful, otherwise false
             */
            OctreeNode.prototype.insert = function (aabb, elementData, level) {
                var nodeData = this.data;
                level = level || 0;

                // Ignore objects that do not belong in this node
                if (!this.aabb.contains(aabb)) {
                    return false; // object cannot be added
                }

                var children = this.children;

                if (level < (this.maxDepth || this.root.maxDepth)) {
                    // Subdivide if there are no children yet
                    var subdivided = false;
                    if (!children.length) {
                        this.subdivide();
                        subdivided = true;
                    }

                    // add to whichever node will accept it
                    for (var i = 0; i !== 8; i++) {
                        if (children[i].insert(aabb, elementData, level + 1)) {
                            return true;
                        }
                    }

                    if (subdivided) {
                        // No children accepted! Might as well just remove em since they contain none
                        children.length = 0;
                    }
                }

                // Too deep, or children didnt want it. add it in current node
                nodeData.push(elementData);

                return true;
            };

            var halfDiagonal = new Vec3();

            /**
             * Create 8 equally sized children nodes and put them in the .children array.
             * @method subdivide
             */
            OctreeNode.prototype.subdivide = function () {
                var aabb = this.aabb;
                var l = aabb.lowerBound;
                var u = aabb.upperBound;

                var children = this.children;

                children.push(
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0, 0, 0) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1, 0, 0) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1, 1, 0) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1, 1, 1) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0, 1, 1) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0, 0, 1) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1, 0, 1) }) }),
                    new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0, 1, 0) }) })
                );

                u.vsub(l, halfDiagonal);
                halfDiagonal.scale(0.5, halfDiagonal);

                var root = this.root || this;

                for (var i = 0; i !== 8; i++) {
                    var child = children[i];

                    // Set current node as root
                    child.root = root;

                    // Compute bounds
                    var lowerBound = child.aabb.lowerBound;
                    lowerBound.x *= halfDiagonal.x;
                    lowerBound.y *= halfDiagonal.y;
                    lowerBound.z *= halfDiagonal.z;

                    lowerBound.vadd(l, lowerBound);

                    // Upper bound is always lower bound + halfDiagonal
                    lowerBound.vadd(halfDiagonal, child.aabb.upperBound);
                }
            };

            /**
             * Get all data, potentially within an AABB
             * @method aabbQuery
             * @param  {AABB} aabb
             * @param  {array} result
             * @return {array} The "result" object
             */
            OctreeNode.prototype.aabbQuery = function (aabb, result) {

                var nodeData = this.data;

                // abort if the range does not intersect this node
                // if (!this.aabb.overlaps(aabb)){
                //     return result;
                // }

                // Add objects at this level
                // Array.prototype.push.apply(result, nodeData);

                // Add child data
                // @todo unwrap recursion into a queue / loop, that's faster in JS
                var children = this.children;


                // for (var i = 0, N = this.children.length; i !== N; i++) {
                //     children[i].aabbQuery(aabb, result);
                // }

                var queue = [this];
                while (queue.length) {
                    var node = queue.pop();
                    if (node.aabb.overlaps(aabb)) {
                        Array.prototype.push.apply(result, node.data);
                    }
                    Array.prototype.push.apply(queue, node.children);
                }

                return result;
            };

            var tmpAABB = new AABB();

            /**
             * Get all data, potentially intersected by a ray.
             * @method rayQuery
             * @param  {Ray} ray
             * @param  {Transform} treeTransform
             * @param  {array} result
             * @return {array} The "result" object
             */
            OctreeNode.prototype.rayQuery = function (ray, treeTransform, result) {

                // Use aabb query for now.
                // @todo implement real ray query which needs less lookups
                ray.getAABB(tmpAABB);
                tmpAABB.toLocalFrame(treeTransform, tmpAABB);
                this.aabbQuery(tmpAABB, result);

                return result;
            };

            /**
             * @method removeEmptyNodes
             */
            OctreeNode.prototype.removeEmptyNodes = function () {
                var queue = [this];
                while (queue.length) {
                    var node = queue.pop();
                    for (var i = node.children.length - 1; i >= 0; i--) {
                        if (!node.children[i].data.length) {
                            node.children.splice(i, 1);
                        }
                    }
                    Array.prototype.push.apply(queue, node.children);
                }
            };

        }, { "../collision/AABB": 3, "../math/Vec3": 30 }], 51: [function (_dereq_, module, exports) {
            module.exports = Pool;

            /**
             * For pooling objects that can be reused.
             * @class Pool
             * @constructor
             */
            function Pool() {
                /**
                 * The pooled objects
                 * @property {Array} objects
                 */
                this.objects = [];

                /**
                 * Constructor of the objects
                 * @property {mixed} type
                 */
                this.type = Object;
            }

            /**
             * Release an object after use
             * @method release
             * @param {Object} obj
             */
            Pool.prototype.release = function () {
                var Nargs = arguments.length;
                for (var i = 0; i !== Nargs; i++) {
                    this.objects.push(arguments[i]);
                }
            };

            /**
             * Get an object
             * @method get
             * @return {mixed}
             */
            Pool.prototype.get = function () {
                if (this.objects.length === 0) {
                    return this.constructObject();
                } else {
                    return this.objects.pop();
                }
            };

            /**
             * Construct an object. Should be implmented in each subclass.
             * @method constructObject
             * @return {mixed}
             */
            Pool.prototype.constructObject = function () {
                throw new Error("constructObject() not implemented in this Pool subclass yet!");
            };

        }, {}], 52: [function (_dereq_, module, exports) {
            module.exports = TupleDictionary;

            /**
             * @class TupleDictionary
             * @constructor
             */
            function TupleDictionary() {

                /**
                 * The data storage
                 * @property data
                 * @type {Object}
                 */
                this.data = { keys: [] };
            }

            /**
             * @method get
             * @param  {Number} i
             * @param  {Number} j
             * @return {Number}
             */
            TupleDictionary.prototype.get = function (i, j) {
                if (i > j) {
                    // swap
                    var temp = j;
                    j = i;
                    i = temp;
                }
                return this.data[i + '-' + j];
            };

            /**
             * @method set
             * @param  {Number} i
             * @param  {Number} j
             * @param {Number} value
             */
            TupleDictionary.prototype.set = function (i, j, value) {
                if (i > j) {
                    var temp = j;
                    j = i;
                    i = temp;
                }
                var key = i + '-' + j;

                // Check if key already exists
                if (!this.get(i, j)) {
                    this.data.keys.push(key);
                }

                this.data[key] = value;
            };

            /**
             * @method reset
             */
            TupleDictionary.prototype.reset = function () {
                var data = this.data,
                    keys = data.keys;
                while (keys.length > 0) {
                    var key = keys.pop();
                    delete data[key];
                }
            };

        }, {}], 53: [function (_dereq_, module, exports) {
            function Utils() { }

            module.exports = Utils;

            /**
             * Extend an options object with default values.
             * @static
             * @method defaults
             * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.
             * @param  {object} defaults An object containing default values.
             * @return {object} The modified options object.
             */
            Utils.defaults = function (options, defaults) {
                options = options || {};

                for (var key in defaults) {
                    if (!(key in options)) {
                        options[key] = defaults[key];
                    }
                }

                return options;
            };

        }, {}], 54: [function (_dereq_, module, exports) {
            module.exports = Vec3Pool;

            var Vec3 = _dereq_('../math/Vec3');
            var Pool = _dereq_('./Pool');

            /**
             * @class Vec3Pool
             * @constructor
             * @extends Pool
             */
            function Vec3Pool() {
                Pool.call(this);
                this.type = Vec3;
            }
            Vec3Pool.prototype = new Pool();

            /**
             * Construct a vector
             * @method constructObject
             * @return {Vec3}
             */
            Vec3Pool.prototype.constructObject = function () {
                return new Vec3();
            };

        }, { "../math/Vec3": 30, "./Pool": 51 }], 55: [function (_dereq_, module, exports) {
            module.exports = Narrowphase;

            var AABB = _dereq_('../collision/AABB');
            var Shape = _dereq_('../shapes/Shape');
            var Ray = _dereq_('../collision/Ray');
            var Vec3 = _dereq_('../math/Vec3');
            var Transform = _dereq_('../math/Transform');
            var ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');
            var Quaternion = _dereq_('../math/Quaternion');
            var Solver = _dereq_('../solver/Solver');
            var Vec3Pool = _dereq_('../utils/Vec3Pool');
            var ContactEquation = _dereq_('../equations/ContactEquation');
            var FrictionEquation = _dereq_('../equations/FrictionEquation');

            /**
             * Helper class for the World. Generates ContactEquations.
             * @class Narrowphase
             * @constructor
             * @todo Sphere-ConvexPolyhedron contacts
             * @todo Contact reduction
             * @todo  should move methods to prototype
             */
            function Narrowphase(world) {

                /**
                 * Internal storage of pooled contact points.
                 * @property {Array} contactPointPool
                 */
                this.contactPointPool = [];

                this.frictionEquationPool = [];

                this.result = [];
                this.frictionResult = [];

                /**
                 * Pooled vectors.
                 * @property {Vec3Pool} v3pool
                 */
                this.v3pool = new Vec3Pool();

                this.world = world;
                this.currentContactMaterial = null;

                /**
                 * @property {Boolean} enableFrictionReduction
                 */
                this.enableFrictionReduction = false;
            }

            /**
             * Make a contact object, by using the internal pool or creating a new one.
             * @method createContactEquation
             * @return {ContactEquation}
             */
            Narrowphase.prototype.createContactEquation = function (bi, bj, si, sj, rsi, rsj) {
                var c;
                if (this.contactPointPool.length) {
                    c = this.contactPointPool.pop();
                    c.bi = bi;
                    c.bj = bj;
                } else {
                    c = new ContactEquation(bi, bj);
                }

                c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;

                var cm = this.currentContactMaterial;

                c.restitution = cm.restitution;

                c.setSpookParams(
                    cm.contactEquationStiffness,
                    cm.contactEquationRelaxation,
                    this.world.dt
                );

                var matA = si.material || bi.material;
                var matB = sj.material || bj.material;
                if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {
                    c.restitution = matA.restitution * matB.restitution;
                }

                c.si = rsi || si;
                c.sj = rsj || sj;

                return c;
            };

            Narrowphase.prototype.createFrictionEquationsFromContact = function (contactEquation, outArray) {
                var bodyA = contactEquation.bi;
                var bodyB = contactEquation.bj;
                var shapeA = contactEquation.si;
                var shapeB = contactEquation.sj;

                var world = this.world;
                var cm = this.currentContactMaterial;

                // If friction or restitution were specified in the material, use them
                var friction = cm.friction;
                var matA = shapeA.material || bodyA.material;
                var matB = shapeB.material || bodyB.material;
                if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {
                    friction = matA.friction * matB.friction;
                }

                if (friction > 0) {

                    // Create 2 tangent equations
                    var mug = friction * world.gravity.length();
                    var reducedMass = (bodyA.invMass + bodyB.invMass);
                    if (reducedMass > 0) {
                        reducedMass = 1 / reducedMass;
                    }
                    var pool = this.frictionEquationPool;
                    var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
                    var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);

                    c1.bi = c2.bi = bodyA;
                    c1.bj = c2.bj = bodyB;
                    c1.minForce = c2.minForce = -mug * reducedMass;
                    c1.maxForce = c2.maxForce = mug * reducedMass;

                    // Copy over the relative vectors
                    c1.ri.copy(contactEquation.ri);
                    c1.rj.copy(contactEquation.rj);
                    c2.ri.copy(contactEquation.ri);
                    c2.rj.copy(contactEquation.rj);

                    // Construct tangents
                    contactEquation.ni.tangents(c1.t, c2.t);

                    // Set spook params
                    c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
                    c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);

                    c1.enabled = c2.enabled = contactEquation.enabled;

                    outArray.push(c1, c2);

                    return true;
                }

                return false;
            };

            var averageNormal = new Vec3();
            var averageContactPointA = new Vec3();
            var averageContactPointB = new Vec3();

            // Take the average N latest contact point on the plane.
            Narrowphase.prototype.createFrictionFromAverage = function (numContacts) {
                // The last contactEquation
                var c = this.result[this.result.length - 1];

                // Create the result: two "average" friction equations
                if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {
                    return;
                }

                var f1 = this.frictionResult[this.frictionResult.length - 2];
                var f2 = this.frictionResult[this.frictionResult.length - 1];

                averageNormal.setZero();
                averageContactPointA.setZero();
                averageContactPointB.setZero();

                var bodyA = c.bi;
                var bodyB = c.bj;
                for (var i = 0; i !== numContacts; i++) {
                    c = this.result[this.result.length - 1 - i];
                    if (c.bodyA !== bodyA) {
                        averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);
                        averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);
                        averageContactPointB.vadd(c.rj, averageContactPointB);
                    } else {
                        averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);
                        averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);
                        averageContactPointB.vadd(c.ri, averageContactPointB);
                    }
                }

                var invNumContacts = 1 / numContacts;
                averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);
                averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);
                f2.ri.copy(f1.ri); // Should be the same
                f2.rj.copy(f1.rj);
                averageNormal.normalize();
                averageNormal.tangents(f1.t, f2.t);
                // return eq;
            };


            var tmpVec1 = new Vec3();
            var tmpVec2 = new Vec3();
            var tmpQuat1 = new Quaternion();
            var tmpQuat2 = new Quaternion();

            /**
             * Generate all contacts between a list of body pairs
             * @method getContacts
             * @param {array} p1 Array of body indices
             * @param {array} p2 Array of body indices
             * @param {World} world
             * @param {array} result Array to store generated contacts
             * @param {array} oldcontacts Optional. Array of reusable contact objects
             */
            Narrowphase.prototype.getContacts = function (p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {
                // Save old contact objects
                this.contactPointPool = oldcontacts;
                this.frictionEquationPool = frictionPool;
                this.result = result;
                this.frictionResult = frictionResult;

                var qi = tmpQuat1;
                var qj = tmpQuat2;
                var xi = tmpVec1;
                var xj = tmpVec2;

                for (var k = 0, N = p1.length; k !== N; k++) {

                    // Get current collision bodies
                    var bi = p1[k],
                        bj = p2[k];

                    // Get contact material
                    var bodyContactMaterial = null;
                    if (bi.material && bj.material) {
                        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;
                    }

                    for (var i = 0; i < bi.shapes.length; i++) {
                        bi.quaternion.mult(bi.shapeOrientations[i], qi);
                        bi.quaternion.vmult(bi.shapeOffsets[i], xi);
                        xi.vadd(bi.position, xi);
                        var si = bi.shapes[i];

                        for (var j = 0; j < bj.shapes.length; j++) {

                            // Compute world transform of shapes
                            bj.quaternion.mult(bj.shapeOrientations[j], qj);
                            bj.quaternion.vmult(bj.shapeOffsets[j], xj);
                            xj.vadd(bj.position, xj);
                            var sj = bj.shapes[j];

                            if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
                                continue;
                            }

                            // Get collision material
                            var shapeContactMaterial = null;
                            if (si.material && sj.material) {
                                shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;
                            }

                            this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;

                            // Get contacts
                            var resolver = this[si.type | sj.type];
                            if (resolver) {
                                if (si.type < sj.type) {
                                    resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);
                                } else {
                                    resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);
                                }
                            }
                        }
                    }
                }
            };

            var numWarnings = 0;
            var maxWarnings = 10;

            function warn(msg) {
                if (numWarnings > maxWarnings) {
                    return;
                }

                numWarnings++;

                console.warn(msg);
            }

            Narrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =
                Narrowphase.prototype.boxBox = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    si.convexPolyhedronRepresentation.material = si.material;
                    sj.convexPolyhedronRepresentation.material = sj.material;
                    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
                    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
                    this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj);
                };

            Narrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =
                Narrowphase.prototype.boxConvex = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    si.convexPolyhedronRepresentation.material = si.material;
                    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
                    this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj);
                };

            Narrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =
                Narrowphase.prototype.boxParticle = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    si.convexPolyhedronRepresentation.material = si.material;
                    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
                    this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj);
                };

            /**
             * @method sphereSphere
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.SPHERE] =
                Narrowphase.prototype.sphereSphere = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    // We will have only one contact in this case
                    var r = this.createContactEquation(bi, bj, si, sj);

                    // Contact normal
                    xj.vsub(xi, r.ni);
                    r.ni.normalize();

                    // Contact point locations
                    r.ri.copy(r.ni);
                    r.rj.copy(r.ni);
                    r.ri.mult(si.radius, r.ri);
                    r.rj.mult(-sj.radius, r.rj);

                    r.ri.vadd(xi, r.ri);
                    r.ri.vsub(bi.position, r.ri);

                    r.rj.vadd(xj, r.rj);
                    r.rj.vsub(bj.position, r.rj);

                    this.result.push(r);

                    this.createFrictionEquationsFromContact(r, this.frictionResult);
                };

            /**
             * @method planeTrimesh
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            var planeTrimesh_normal = new Vec3();
            var planeTrimesh_relpos = new Vec3();
            var planeTrimesh_projected = new Vec3();
            Narrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =
                Narrowphase.prototype.planeTrimesh = function (
                    planeShape,
                    trimeshShape,
                    planePos,
                    trimeshPos,
                    planeQuat,
                    trimeshQuat,
                    planeBody,
                    trimeshBody
                ) {
                    // Make contacts!
                    var v = new Vec3();

                    var normal = planeTrimesh_normal;
                    normal.set(0, 0, 1);
                    planeQuat.vmult(normal, normal); // Turn normal according to plane

                    for (var i = 0; i < trimeshShape.vertices.length / 3; i++) {

                        // Get world vertex from trimesh
                        trimeshShape.getVertex(i, v);

                        // Safe up
                        var v2 = new Vec3();
                        v2.copy(v);
                        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);

                        // Check plane side
                        var relpos = planeTrimesh_relpos;
                        v.vsub(planePos, relpos);
                        var dot = normal.dot(relpos);

                        if (dot <= 0.0) {
                            var r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape);

                            r.ni.copy(normal); // Contact normal is the plane normal

                            // Get vertex position projected on plane
                            var projected = planeTrimesh_projected;
                            normal.scale(relpos.dot(normal), projected);
                            v.vsub(projected, projected);

                            // ri is the projected world position minus plane position
                            r.ri.copy(projected);
                            r.ri.vsub(planeBody.position, r.ri);

                            r.rj.copy(v);
                            r.rj.vsub(trimeshBody.position, r.rj);

                            // Store result
                            this.result.push(r);
                            this.createFrictionEquationsFromContact(r, this.frictionResult);
                        }
                    }
                };

            /**
             * @method sphereTrimesh
             * @param  {Shape}      sphereShape
             * @param  {Shape}      trimeshShape
             * @param  {Vec3}       spherePos
             * @param  {Vec3}       trimeshPos
             * @param  {Quaternion} sphereQuat
             * @param  {Quaternion} trimeshQuat
             * @param  {Body}       sphereBody
             * @param  {Body}       trimeshBody
             */
            var sphereTrimesh_normal = new Vec3();
            var sphereTrimesh_relpos = new Vec3();
            var sphereTrimesh_projected = new Vec3();
            var sphereTrimesh_v = new Vec3();
            var sphereTrimesh_v2 = new Vec3();
            var sphereTrimesh_edgeVertexA = new Vec3();
            var sphereTrimesh_edgeVertexB = new Vec3();
            var sphereTrimesh_edgeVector = new Vec3();
            var sphereTrimesh_edgeVectorUnit = new Vec3();
            var sphereTrimesh_localSpherePos = new Vec3();
            var sphereTrimesh_tmp = new Vec3();
            var sphereTrimesh_va = new Vec3();
            var sphereTrimesh_vb = new Vec3();
            var sphereTrimesh_vc = new Vec3();
            var sphereTrimesh_localSphereAABB = new AABB();
            var sphereTrimesh_triangles = [];
            Narrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =
                Narrowphase.prototype.sphereTrimesh = function (
                    sphereShape,
                    trimeshShape,
                    spherePos,
                    trimeshPos,
                    sphereQuat,
                    trimeshQuat,
                    sphereBody,
                    trimeshBody
                ) {

                    var edgeVertexA = sphereTrimesh_edgeVertexA;
                    var edgeVertexB = sphereTrimesh_edgeVertexB;
                    var edgeVector = sphereTrimesh_edgeVector;
                    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;
                    var localSpherePos = sphereTrimesh_localSpherePos;
                    var tmp = sphereTrimesh_tmp;
                    var localSphereAABB = sphereTrimesh_localSphereAABB;
                    var v2 = sphereTrimesh_v2;
                    var relpos = sphereTrimesh_relpos;
                    var triangles = sphereTrimesh_triangles;

                    // Convert sphere position to local in the trimesh
                    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);

                    // Get the aabb of the sphere locally in the trimesh
                    var sphereRadius = sphereShape.radius;
                    localSphereAABB.lowerBound.set(
                        localSpherePos.x - sphereRadius,
                        localSpherePos.y - sphereRadius,
                        localSpherePos.z - sphereRadius
                    );
                    localSphereAABB.upperBound.set(
                        localSpherePos.x + sphereRadius,
                        localSpherePos.y + sphereRadius,
                        localSpherePos.z + sphereRadius
                    );

                    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);
                    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All

                    // Vertices
                    var v = sphereTrimesh_v;
                    var radiusSquared = sphereShape.radius * sphereShape.radius;
                    for (var i = 0; i < triangles.length; i++) {
                        for (var j = 0; j < 3; j++) {

                            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);

                            // Check vertex overlap in sphere
                            v.vsub(localSpherePos, relpos);

                            if (relpos.norm2() <= radiusSquared) {

                                // Safe up
                                v2.copy(v);
                                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);

                                v.vsub(spherePos, relpos);

                                var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);
                                r.ni.copy(relpos);
                                r.ni.normalize();

                                // ri is the vector from sphere center to the sphere surface
                                r.ri.copy(r.ni);
                                r.ri.scale(sphereShape.radius, r.ri);
                                r.ri.vadd(spherePos, r.ri);
                                r.ri.vsub(sphereBody.position, r.ri);

                                r.rj.copy(v);
                                r.rj.vsub(trimeshBody.position, r.rj);

                                // Store result
                                this.result.push(r);
                                this.createFrictionEquationsFromContact(r, this.frictionResult);
                            }
                        }
                    }

                    // Check all edges
                    for (var i = 0; i < triangles.length; i++) {
                        for (var j = 0; j < 3; j++) {

                            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);
                            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j + 1) % 3)], edgeVertexB);
                            edgeVertexB.vsub(edgeVertexA, edgeVector);

                            // Project sphere position to the edge
                            localSpherePos.vsub(edgeVertexB, tmp);
                            var positionAlongEdgeB = tmp.dot(edgeVector);

                            localSpherePos.vsub(edgeVertexA, tmp);
                            var positionAlongEdgeA = tmp.dot(edgeVector);

                            if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {

                                // Now check the orthogonal distance from edge to sphere center
                                localSpherePos.vsub(edgeVertexA, tmp);

                                edgeVectorUnit.copy(edgeVector);
                                edgeVectorUnit.normalize();
                                positionAlongEdgeA = tmp.dot(edgeVectorUnit);

                                edgeVectorUnit.scale(positionAlongEdgeA, tmp);
                                tmp.vadd(edgeVertexA, tmp);

                                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame
                                var dist = tmp.distanceTo(localSpherePos);
                                if (dist < sphereShape.radius) {
                                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);

                                    tmp.vsub(localSpherePos, r.ni);
                                    r.ni.normalize();
                                    r.ni.scale(sphereShape.radius, r.ri);

                                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
                                    tmp.vsub(trimeshBody.position, r.rj);

                                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
                                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);

                                    this.result.push(r);
                                    this.createFrictionEquationsFromContact(r, this.frictionResult);
                                }
                            }
                        }
                    }

                    // Triangle faces
                    var va = sphereTrimesh_va;
                    var vb = sphereTrimesh_vb;
                    var vc = sphereTrimesh_vc;
                    var normal = sphereTrimesh_normal;
                    for (var i = 0, N = triangles.length; i !== N; i++) {
                        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);
                        trimeshShape.getNormal(triangles[i], normal);
                        localSpherePos.vsub(va, tmp);
                        var dist = tmp.dot(normal);
                        normal.scale(dist, tmp);
                        localSpherePos.vsub(tmp, tmp);

                        // tmp is now the sphere position projected to the triangle plane
                        dist = tmp.distanceTo(localSpherePos);
                        if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {
                            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);

                            tmp.vsub(localSpherePos, r.ni);
                            r.ni.normalize();
                            r.ni.scale(sphereShape.radius, r.ri);

                            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
                            tmp.vsub(trimeshBody.position, r.rj);

                            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
                            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);

                            this.result.push(r);
                            this.createFrictionEquationsFromContact(r, this.frictionResult);
                        }
                    }

                    triangles.length = 0;
                };

            var point_on_plane_to_sphere = new Vec3();
            var plane_to_sphere_ortho = new Vec3();

            /**
             * @method spherePlane
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =
                Narrowphase.prototype.spherePlane = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    // We will have one contact in this case
                    var r = this.createContactEquation(bi, bj, si, sj);

                    // Contact normal
                    r.ni.set(0, 0, 1);
                    qj.vmult(r.ni, r.ni);
                    r.ni.negate(r.ni); // body i is the sphere, flip normal
                    r.ni.normalize(); // Needed?

                    // Vector from sphere center to contact point
                    r.ni.mult(si.radius, r.ri);

                    // Project down sphere on plane
                    xi.vsub(xj, point_on_plane_to_sphere);
                    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);
                    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane

                    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {

                        // Make it relative to the body
                        var ri = r.ri;
                        var rj = r.rj;
                        ri.vadd(xi, ri);
                        ri.vsub(bi.position, ri);
                        rj.vadd(xj, rj);
                        rj.vsub(bj.position, rj);

                        this.result.push(r);
                        this.createFrictionEquationsFromContact(r, this.frictionResult);
                    }
                };

            // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html
            var pointInPolygon_edge = new Vec3();
            var pointInPolygon_edge_x_normal = new Vec3();
            var pointInPolygon_vtp = new Vec3();
            function pointInPolygon(verts, normal, p) {
                var positiveResult = null;
                var N = verts.length;
                for (var i = 0; i !== N; i++) {
                    var v = verts[i];

                    // Get edge to the next vertex
                    var edge = pointInPolygon_edge;
                    verts[(i + 1) % (N)].vsub(v, edge);

                    // Get cross product between polygon normal and the edge
                    var edge_x_normal = pointInPolygon_edge_x_normal;
                    //var edge_x_normal = new Vec3();
                    edge.cross(normal, edge_x_normal);

                    // Get vector between point and current vertex
                    var vertex_to_p = pointInPolygon_vtp;
                    p.vsub(v, vertex_to_p);

                    // This dot product determines which side of the edge the point is
                    var r = edge_x_normal.dot(vertex_to_p);

                    // If all such dot products have same sign, we are inside the polygon.
                    if (positiveResult === null || (r > 0 && positiveResult === true) || (r <= 0 && positiveResult === false)) {
                        if (positiveResult === null) {
                            positiveResult = r > 0;
                        }
                        continue;
                    } else {
                        return false; // Encountered some other sign. Exit.
                    }
                }

                // If we got here, all dot products were of the same sign.
                return true;
            }

            var box_to_sphere = new Vec3();
            var sphereBox_ns = new Vec3();
            var sphereBox_ns1 = new Vec3();
            var sphereBox_ns2 = new Vec3();
            var sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
            var sphereBox_sphere_to_corner = new Vec3();
            var sphereBox_side_ns = new Vec3();
            var sphereBox_side_ns1 = new Vec3();
            var sphereBox_side_ns2 = new Vec3();

            /**
             * @method sphereBox
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =
                Narrowphase.prototype.sphereBox = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    var v3pool = this.v3pool;

                    // we refer to the box as body j
                    var sides = sphereBox_sides;
                    xi.vsub(xj, box_to_sphere);
                    sj.getSideNormals(sides, qj);
                    var R = si.radius;
                    var penetrating_sides = [];

                    // Check side (plane) intersections
                    var found = false;

                    // Store the resulting side penetration info
                    var side_ns = sphereBox_side_ns;
                    var side_ns1 = sphereBox_side_ns1;
                    var side_ns2 = sphereBox_side_ns2;
                    var side_h = null;
                    var side_penetrations = 0;
                    var side_dot1 = 0;
                    var side_dot2 = 0;
                    var side_distance = null;
                    for (var idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {
                        // Get the plane side normal (ns)
                        var ns = sphereBox_ns;
                        ns.copy(sides[idx]);

                        var h = ns.norm();
                        ns.normalize();

                        // The normal/distance dot product tells which side of the plane we are
                        var dot = box_to_sphere.dot(ns);

                        if (dot < h + R && dot > 0) {
                            // Intersects plane. Now check the other two dimensions
                            var ns1 = sphereBox_ns1;
                            var ns2 = sphereBox_ns2;
                            ns1.copy(sides[(idx + 1) % 3]);
                            ns2.copy(sides[(idx + 2) % 3]);
                            var h1 = ns1.norm();
                            var h2 = ns2.norm();
                            ns1.normalize();
                            ns2.normalize();
                            var dot1 = box_to_sphere.dot(ns1);
                            var dot2 = box_to_sphere.dot(ns2);
                            if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {
                                var dist = Math.abs(dot - h - R);
                                if (side_distance === null || dist < side_distance) {
                                    side_distance = dist;
                                    side_dot1 = dot1;
                                    side_dot2 = dot2;
                                    side_h = h;
                                    side_ns.copy(ns);
                                    side_ns1.copy(ns1);
                                    side_ns2.copy(ns2);
                                    side_penetrations++;
                                }
                            }
                        }
                    }
                    if (side_penetrations) {
                        found = true;
                        var r = this.createContactEquation(bi, bj, si, sj);
                        side_ns.mult(-R, r.ri); // Sphere r
                        r.ni.copy(side_ns);
                        r.ni.negate(r.ni); // Normal should be out of sphere
                        side_ns.mult(side_h, side_ns);
                        side_ns1.mult(side_dot1, side_ns1);
                        side_ns.vadd(side_ns1, side_ns);
                        side_ns2.mult(side_dot2, side_ns2);
                        side_ns.vadd(side_ns2, r.rj);

                        // Make relative to bodies
                        r.ri.vadd(xi, r.ri);
                        r.ri.vsub(bi.position, r.ri);
                        r.rj.vadd(xj, r.rj);
                        r.rj.vsub(bj.position, r.rj);

                        this.result.push(r);
                        this.createFrictionEquationsFromContact(r, this.frictionResult);
                    }

                    // Check corners
                    var rj = v3pool.get();
                    var sphere_to_corner = sphereBox_sphere_to_corner;
                    for (var j = 0; j !== 2 && !found; j++) {
                        for (var k = 0; k !== 2 && !found; k++) {
                            for (var l = 0; l !== 2 && !found; l++) {
                                rj.set(0, 0, 0);
                                if (j) {
                                    rj.vadd(sides[0], rj);
                                } else {
                                    rj.vsub(sides[0], rj);
                                }
                                if (k) {
                                    rj.vadd(sides[1], rj);
                                } else {
                                    rj.vsub(sides[1], rj);
                                }
                                if (l) {
                                    rj.vadd(sides[2], rj);
                                } else {
                                    rj.vsub(sides[2], rj);
                                }

                                // World position of corner
                                xj.vadd(rj, sphere_to_corner);
                                sphere_to_corner.vsub(xi, sphere_to_corner);

                                if (sphere_to_corner.norm2() < R * R) {
                                    found = true;
                                    var r = this.createContactEquation(bi, bj, si, sj);
                                    r.ri.copy(sphere_to_corner);
                                    r.ri.normalize();
                                    r.ni.copy(r.ri);
                                    r.ri.mult(R, r.ri);
                                    r.rj.copy(rj);

                                    // Make relative to bodies
                                    r.ri.vadd(xi, r.ri);
                                    r.ri.vsub(bi.position, r.ri);
                                    r.rj.vadd(xj, r.rj);
                                    r.rj.vsub(bj.position, r.rj);

                                    this.result.push(r);
                                    this.createFrictionEquationsFromContact(r, this.frictionResult);
                                }
                            }
                        }
                    }
                    v3pool.release(rj);
                    rj = null;

                    // Check edges
                    var edgeTangent = v3pool.get();
                    var edgeCenter = v3pool.get();
                    var r = v3pool.get(); // r = edge center to sphere center
                    var orthogonal = v3pool.get();
                    var dist = v3pool.get();
                    var Nsides = sides.length;
                    for (var j = 0; j !== Nsides && !found; j++) {
                        for (var k = 0; k !== Nsides && !found; k++) {
                            if (j % 3 !== k % 3) {
                                // Get edge tangent
                                sides[k].cross(sides[j], edgeTangent);
                                edgeTangent.normalize();
                                sides[j].vadd(sides[k], edgeCenter);
                                r.copy(xi);
                                r.vsub(edgeCenter, r);
                                r.vsub(xj, r);
                                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction
                                edgeTangent.mult(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction

                                // Find the third side orthogonal to this one
                                var l = 0;
                                while (l === j % 3 || l === k % 3) {
                                    l++;
                                }

                                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent
                                dist.copy(xi);
                                dist.vsub(orthogonal, dist);
                                dist.vsub(edgeCenter, dist);
                                dist.vsub(xj, dist);

                                // Distances in tangent direction and distance in the plane orthogonal to it
                                var tdist = Math.abs(orthonorm);
                                var ndist = dist.norm();

                                if (tdist < sides[l].norm() && ndist < R) {
                                    found = true;
                                    var res = this.createContactEquation(bi, bj, si, sj);
                                    edgeCenter.vadd(orthogonal, res.rj); // box rj
                                    res.rj.copy(res.rj);
                                    dist.negate(res.ni);
                                    res.ni.normalize();

                                    res.ri.copy(res.rj);
                                    res.ri.vadd(xj, res.ri);
                                    res.ri.vsub(xi, res.ri);
                                    res.ri.normalize();
                                    res.ri.mult(R, res.ri);

                                    // Make relative to bodies
                                    res.ri.vadd(xi, res.ri);
                                    res.ri.vsub(bi.position, res.ri);
                                    res.rj.vadd(xj, res.rj);
                                    res.rj.vsub(bj.position, res.rj);

                                    this.result.push(res);
                                    this.createFrictionEquationsFromContact(res, this.frictionResult);
                                }
                            }
                        }
                    }
                    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);
                };

            var convex_to_sphere = new Vec3();
            var sphereConvex_edge = new Vec3();
            var sphereConvex_edgeUnit = new Vec3();
            var sphereConvex_sphereToCorner = new Vec3();
            var sphereConvex_worldCorner = new Vec3();
            var sphereConvex_worldNormal = new Vec3();
            var sphereConvex_worldPoint = new Vec3();
            var sphereConvex_worldSpherePointClosestToPlane = new Vec3();
            var sphereConvex_penetrationVec = new Vec3();
            var sphereConvex_sphereToWorldPoint = new Vec3();

            /**
             * @method sphereConvex
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =
                Narrowphase.prototype.sphereConvex = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    var v3pool = this.v3pool;
                    xi.vsub(xj, convex_to_sphere);
                    var normals = sj.faceNormals;
                    var faces = sj.faces;
                    var verts = sj.vertices;
                    var R = si.radius;
                    var penetrating_sides = [];

                    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){
                    //     return;
                    // }

                    // Check corners
                    for (var i = 0; i !== verts.length; i++) {
                        var v = verts[i];

                        // World position of corner
                        var worldCorner = sphereConvex_worldCorner;
                        qj.vmult(v, worldCorner);
                        xj.vadd(worldCorner, worldCorner);
                        var sphere_to_corner = sphereConvex_sphereToCorner;
                        worldCorner.vsub(xi, sphere_to_corner);
                        if (sphere_to_corner.norm2() < R * R) {
                            found = true;
                            var r = this.createContactEquation(bi, bj, si, sj);
                            r.ri.copy(sphere_to_corner);
                            r.ri.normalize();
                            r.ni.copy(r.ri);
                            r.ri.mult(R, r.ri);
                            worldCorner.vsub(xj, r.rj);

                            // Should be relative to the body.
                            r.ri.vadd(xi, r.ri);
                            r.ri.vsub(bi.position, r.ri);

                            // Should be relative to the body.
                            r.rj.vadd(xj, r.rj);
                            r.rj.vsub(bj.position, r.rj);

                            this.result.push(r);
                            this.createFrictionEquationsFromContact(r, this.frictionResult);
                            return;
                        }
                    }

                    // Check side (plane) intersections
                    var found = false;
                    for (var i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {
                        var normal = normals[i];
                        var face = faces[i];

                        // Get world-transformed normal of the face
                        var worldNormal = sphereConvex_worldNormal;
                        qj.vmult(normal, worldNormal);

                        // Get a world vertex from the face
                        var worldPoint = sphereConvex_worldPoint;
                        qj.vmult(verts[face[0]], worldPoint);
                        worldPoint.vadd(xj, worldPoint);

                        // Get a point on the sphere, closest to the face normal
                        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;
                        worldNormal.mult(-R, worldSpherePointClosestToPlane);
                        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);

                        // Vector from a face point to the closest point on the sphere
                        var penetrationVec = sphereConvex_penetrationVec;
                        worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec);

                        // The penetration. Negative value means overlap.
                        var penetration = penetrationVec.dot(worldNormal);

                        var worldPointToSphere = sphereConvex_sphereToWorldPoint;
                        xi.vsub(worldPoint, worldPointToSphere);

                        if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {
                            // Intersects plane. Now check if the sphere is inside the face polygon
                            var faceVerts = []; // Face vertices, in world coords
                            for (var j = 0, Nverts = face.length; j !== Nverts; j++) {
                                var worldVertex = v3pool.get();
                                qj.vmult(verts[face[j]], worldVertex);
                                xj.vadd(worldVertex, worldVertex);
                                faceVerts.push(worldVertex);
                            }

                            if (pointInPolygon(faceVerts, worldNormal, xi)) { // Is the sphere center in the face polygon?
                                found = true;
                                var r = this.createContactEquation(bi, bj, si, sj);

                                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact
                                worldNormal.negate(r.ni); // Normal pointing out of sphere

                                var penetrationVec2 = v3pool.get();
                                worldNormal.mult(-penetration, penetrationVec2);
                                var penetrationSpherePoint = v3pool.get();
                                worldNormal.mult(-R, penetrationSpherePoint);

                                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);
                                xi.vsub(xj, r.rj);
                                r.rj.vadd(penetrationSpherePoint, r.rj);
                                r.rj.vadd(penetrationVec2, r.rj);

                                // Should be relative to the body.
                                r.rj.vadd(xj, r.rj);
                                r.rj.vsub(bj.position, r.rj);

                                // Should be relative to the body.
                                r.ri.vadd(xi, r.ri);
                                r.ri.vsub(bi.position, r.ri);

                                v3pool.release(penetrationVec2);
                                v3pool.release(penetrationSpherePoint);

                                this.result.push(r);
                                this.createFrictionEquationsFromContact(r, this.frictionResult);

                                // Release world vertices
                                for (var j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
                                    v3pool.release(faceVerts[j]);
                                }

                                return; // We only expect *one* face contact
                            } else {
                                // Edge?
                                for (var j = 0; j !== face.length; j++) {

                                    // Get two world transformed vertices
                                    var v1 = v3pool.get();
                                    var v2 = v3pool.get();
                                    qj.vmult(verts[face[(j + 1) % face.length]], v1);
                                    qj.vmult(verts[face[(j + 2) % face.length]], v2);
                                    xj.vadd(v1, v1);
                                    xj.vadd(v2, v2);

                                    // Construct edge vector
                                    var edge = sphereConvex_edge;
                                    v2.vsub(v1, edge);

                                    // Construct the same vector, but normalized
                                    var edgeUnit = sphereConvex_edgeUnit;
                                    edge.unit(edgeUnit);

                                    // p is xi projected onto the edge
                                    var p = v3pool.get();
                                    var v1_to_xi = v3pool.get();
                                    xi.vsub(v1, v1_to_xi);
                                    var dot = v1_to_xi.dot(edgeUnit);
                                    edgeUnit.mult(dot, p);
                                    p.vadd(v1, p);

                                    // Compute a vector from p to the center of the sphere
                                    var xi_to_p = v3pool.get();
                                    p.vsub(xi, xi_to_p);

                                    // Collision if the edge-sphere distance is less than the radius
                                    // AND if p is in between v1 and v2
                                    if (dot > 0 && dot * dot < edge.norm2() && xi_to_p.norm2() < R * R) { // Collision if the edge-sphere distance is less than the radius
                                        // Edge contact!
                                        var r = this.createContactEquation(bi, bj, si, sj);
                                        p.vsub(xj, r.rj);

                                        p.vsub(xi, r.ni);
                                        r.ni.normalize();

                                        r.ni.mult(R, r.ri);

                                        // Should be relative to the body.
                                        r.rj.vadd(xj, r.rj);
                                        r.rj.vsub(bj.position, r.rj);

                                        // Should be relative to the body.
                                        r.ri.vadd(xi, r.ri);
                                        r.ri.vsub(bi.position, r.ri);

                                        this.result.push(r);
                                        this.createFrictionEquationsFromContact(r, this.frictionResult);

                                        // Release world vertices
                                        for (var j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
                                            v3pool.release(faceVerts[j]);
                                        }

                                        v3pool.release(v1);
                                        v3pool.release(v2);
                                        v3pool.release(p);
                                        v3pool.release(xi_to_p);
                                        v3pool.release(v1_to_xi);

                                        return;
                                    }

                                    v3pool.release(v1);
                                    v3pool.release(v2);
                                    v3pool.release(p);
                                    v3pool.release(xi_to_p);
                                    v3pool.release(v1_to_xi);
                                }
                            }

                            // Release world vertices
                            for (var j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
                                v3pool.release(faceVerts[j]);
                            }
                        }
                    }
                };

            var planeBox_normal = new Vec3();
            var plane_to_corner = new Vec3();

            /**
             * @method planeBox
             * @param  {Array}      result
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =
                Narrowphase.prototype.planeBox = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    sj.convexPolyhedronRepresentation.material = sj.material;
                    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
                    this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj);
                };

            var planeConvex_v = new Vec3();
            var planeConvex_normal = new Vec3();
            var planeConvex_relpos = new Vec3();
            var planeConvex_projected = new Vec3();

            /**
             * @method planeConvex
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =
                Narrowphase.prototype.planeConvex = function (
                    planeShape,
                    convexShape,
                    planePosition,
                    convexPosition,
                    planeQuat,
                    convexQuat,
                    planeBody,
                    convexBody
                ) {
                    // Simply return the points behind the plane.
                    var worldVertex = planeConvex_v,
                        worldNormal = planeConvex_normal;
                    worldNormal.set(0, 0, 1);
                    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation

                    var numContacts = 0;
                    var relpos = planeConvex_relpos;
                    for (var i = 0; i !== convexShape.vertices.length; i++) {

                        // Get world convex vertex
                        worldVertex.copy(convexShape.vertices[i]);
                        convexQuat.vmult(worldVertex, worldVertex);
                        convexPosition.vadd(worldVertex, worldVertex);
                        worldVertex.vsub(planePosition, relpos);

                        var dot = worldNormal.dot(relpos);
                        if (dot <= 0.0) {

                            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);

                            // Get vertex position projected on plane
                            var projected = planeConvex_projected;
                            worldNormal.mult(worldNormal.dot(relpos), projected);
                            worldVertex.vsub(projected, projected);
                            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane

                            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane

                            // rj is now just the vector from the convex center to the vertex
                            worldVertex.vsub(convexPosition, r.rj);

                            // Make it relative to the body
                            r.ri.vadd(planePosition, r.ri);
                            r.ri.vsub(planeBody.position, r.ri);
                            r.rj.vadd(convexPosition, r.rj);
                            r.rj.vsub(convexBody.position, r.rj);

                            this.result.push(r);
                            numContacts++;
                            if (!this.enableFrictionReduction) {
                                this.createFrictionEquationsFromContact(r, this.frictionResult);
                            }
                        }
                    }

                    if (this.enableFrictionReduction && numContacts) {
                        this.createFrictionFromAverage(numContacts);
                    }
                };

            var convexConvex_sepAxis = new Vec3();
            var convexConvex_q = new Vec3();

            /**
             * @method convexConvex
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =
                Narrowphase.prototype.convexConvex = function (si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, faceListA, faceListB) {
                    var sepAxis = convexConvex_sepAxis;

                    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
                        return;
                    }

                    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {
                        var res = [];
                        var q = convexConvex_q;
                        si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);
                        var numContacts = 0;
                        for (var j = 0; j !== res.length; j++) {
                            var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj),
                                ri = r.ri,
                                rj = r.rj;
                            sepAxis.negate(r.ni);
                            res[j].normal.negate(q);
                            q.mult(res[j].depth, q);
                            res[j].point.vadd(q, ri);
                            rj.copy(res[j].point);

                            // Contact points are in world coordinates. Transform back to relative
                            ri.vsub(xi, ri);
                            rj.vsub(xj, rj);

                            // Make relative to bodies
                            ri.vadd(xi, ri);
                            ri.vsub(bi.position, ri);
                            rj.vadd(xj, rj);
                            rj.vsub(bj.position, rj);

                            this.result.push(r);
                            numContacts++;
                            if (!this.enableFrictionReduction) {
                                this.createFrictionEquationsFromContact(r, this.frictionResult);
                            }
                        }
                        if (this.enableFrictionReduction && numContacts) {
                            this.createFrictionFromAverage(numContacts);
                        }
                    }
                };


            /**
             * @method convexTrimesh
             * @param  {Array}      result
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            // Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =
            // Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){
            //     var sepAxis = convexConvex_sepAxis;

            //     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){
            //         return;
            //     }

            //     // Construct a temp hull for each triangle
            //     var hullB = new ConvexPolyhedron();

            //     hullB.faces = [[0,1,2]];
            //     var va = new Vec3();
            //     var vb = new Vec3();
            //     var vc = new Vec3();
            //     hullB.vertices = [
            //         va,
            //         vb,
            //         vc
            //     ];

            //     for (var i = 0; i < sj.indices.length / 3; i++) {

            //         var triangleNormal = new Vec3();
            //         sj.getNormal(i, triangleNormal);
            //         hullB.faceNormals = [triangleNormal];

            //         sj.getTriangleVertices(i, va, vb, vc);

            //         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
            //         if(!d){
            //             triangleNormal.scale(-1, triangleNormal);
            //             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);

            //             if(!d){
            //                 continue;
            //             }
            //         }

            //         var res = [];
            //         var q = convexConvex_q;
            //         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);
            //         for(var j = 0; j !== res.length; j++){
            //             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),
            //                 ri = r.ri,
            //                 rj = r.rj;
            //             r.ni.copy(triangleNormal);
            //             r.ni.negate(r.ni);
            //             res[j].normal.negate(q);
            //             q.mult(res[j].depth, q);
            //             res[j].point.vadd(q, ri);
            //             rj.copy(res[j].point);

            //             // Contact points are in world coordinates. Transform back to relative
            //             ri.vsub(xi,ri);
            //             rj.vsub(xj,rj);

            //             // Make relative to bodies
            //             ri.vadd(xi, ri);
            //             ri.vsub(bi.position, ri);
            //             rj.vadd(xj, rj);
            //             rj.vsub(bj.position, rj);

            //             result.push(r);
            //         }
            //     }
            // };

            var particlePlane_normal = new Vec3();
            var particlePlane_relpos = new Vec3();
            var particlePlane_projected = new Vec3();

            /**
             * @method particlePlane
             * @param  {Array}      result
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =
                Narrowphase.prototype.planeParticle = function (sj, si, xj, xi, qj, qi, bj, bi) {
                    var normal = particlePlane_normal;
                    normal.set(0, 0, 1);
                    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation
                    var relpos = particlePlane_relpos;
                    xi.vsub(bj.position, relpos);
                    var dot = normal.dot(relpos);
                    if (dot <= 0.0) {
                        var r = this.createContactEquation(bi, bj, si, sj);
                        r.ni.copy(normal); // Contact normal is the plane normal
                        r.ni.negate(r.ni);
                        r.ri.set(0, 0, 0); // Center of particle

                        // Get particle position projected on plane
                        var projected = particlePlane_projected;
                        normal.mult(normal.dot(xi), projected);
                        xi.vsub(projected, projected);
                        //projected.vadd(bj.position,projected);

                        // rj is now the projected world position minus plane position
                        r.rj.copy(projected);
                        this.result.push(r);
                        this.createFrictionEquationsFromContact(r, this.frictionResult);
                    }
                };

            var particleSphere_normal = new Vec3();

            /**
             * @method particleSphere
             * @param  {Array}      result
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =
                Narrowphase.prototype.sphereParticle = function (sj, si, xj, xi, qj, qi, bj, bi) {
                    // The normal is the unit vector from sphere center to particle center
                    var normal = particleSphere_normal;
                    normal.set(0, 0, 1);
                    xi.vsub(xj, normal);
                    var lengthSquared = normal.norm2();

                    if (lengthSquared <= sj.radius * sj.radius) {
                        var r = this.createContactEquation(bi, bj, si, sj);
                        normal.normalize();
                        r.rj.copy(normal);
                        r.rj.mult(sj.radius, r.rj);
                        r.ni.copy(normal); // Contact normal
                        r.ni.negate(r.ni);
                        r.ri.set(0, 0, 0); // Center of particle
                        this.result.push(r);
                        this.createFrictionEquationsFromContact(r, this.frictionResult);
                    }
                };

            // WIP
            var cqj = new Quaternion();
            var convexParticle_local = new Vec3();
            var convexParticle_normal = new Vec3();
            var convexParticle_penetratedFaceNormal = new Vec3();
            var convexParticle_vertexToParticle = new Vec3();
            var convexParticle_worldPenetrationVec = new Vec3();

            /**
             * @method convexParticle
             * @param  {Array}      result
             * @param  {Shape}      si
             * @param  {Shape}      sj
             * @param  {Vec3}       xi
             * @param  {Vec3}       xj
             * @param  {Quaternion} qi
             * @param  {Quaternion} qj
             * @param  {Body}       bi
             * @param  {Body}       bj
             */
            Narrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =
                Narrowphase.prototype.convexParticle = function (sj, si, xj, xi, qj, qi, bj, bi) {
                    var penetratedFaceIndex = -1;
                    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;
                    var worldPenetrationVec = convexParticle_worldPenetrationVec;
                    var minPenetration = null;
                    var numDetectedFaces = 0;

                    // Convert particle position xi to local coords in the convex
                    var local = convexParticle_local;
                    local.copy(xi);
                    local.vsub(xj, local); // Convert position to relative the convex origin
                    qj.conjugate(cqj);
                    cqj.vmult(local, local);

                    if (sj.pointIsInside(local)) {

                        if (sj.worldVerticesNeedsUpdate) {
                            sj.computeWorldVertices(xj, qj);
                        }
                        if (sj.worldFaceNormalsNeedsUpdate) {
                            sj.computeWorldFaceNormals(qj);
                        }

                        // For each world polygon in the polyhedra
                        for (var i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {

                            // Construct world face vertices
                            var verts = [sj.worldVertices[sj.faces[i][0]]];
                            var normal = sj.worldFaceNormals[i];

                            // Check how much the particle penetrates the polygon plane.
                            xi.vsub(verts[0], convexParticle_vertexToParticle);
                            var penetration = -normal.dot(convexParticle_vertexToParticle);
                            if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {
                                minPenetration = penetration;
                                penetratedFaceIndex = i;
                                penetratedFaceNormal.copy(normal);
                                numDetectedFaces++;
                            }
                        }

                        if (penetratedFaceIndex !== -1) {
                            // Setup contact
                            var r = this.createContactEquation(bi, bj, si, sj);
                            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);

                            // rj is the particle position projected to the face
                            worldPenetrationVec.vadd(xi, worldPenetrationVec);
                            worldPenetrationVec.vsub(xj, worldPenetrationVec);
                            r.rj.copy(worldPenetrationVec);
                            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);
                            //projectedToFace.copy(r.rj);

                            //qj.vmult(r.rj,r.rj);
                            penetratedFaceNormal.negate(r.ni); // Contact normal
                            r.ri.set(0, 0, 0); // Center of particle

                            var ri = r.ri,
                                rj = r.rj;

                            // Make relative to bodies
                            ri.vadd(xi, ri);
                            ri.vsub(bi.position, ri);
                            rj.vadd(xj, rj);
                            rj.vsub(bj.position, rj);

                            this.result.push(r);
                            this.createFrictionEquationsFromContact(r, this.frictionResult);
                        } else {
                            console.warn("Point found inside convex, but did not find penetrating face!");
                        }
                    }
                };

            Narrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =
                Narrowphase.prototype.boxHeightfield = function (si, sj, xi, xj, qi, qj, bi, bj) {
                    si.convexPolyhedronRepresentation.material = si.material;
                    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
                    this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj);
                };

            var convexHeightfield_tmp1 = new Vec3();
            var convexHeightfield_tmp2 = new Vec3();
            var convexHeightfield_faceList = [0];

            /**
             * @method convexHeightfield
             */
            Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =
                Narrowphase.prototype.convexHeightfield = function (
                    convexShape,
                    hfShape,
                    convexPos,
                    hfPos,
                    convexQuat,
                    hfQuat,
                    convexBody,
                    hfBody
                ) {
                    var data = hfShape.data,
                        w = hfShape.elementSize,
                        radius = convexShape.boundingSphereRadius,
                        worldPillarOffset = convexHeightfield_tmp2,
                        faceList = convexHeightfield_faceList;

                    // Get sphere position to heightfield local!
                    var localConvexPos = convexHeightfield_tmp1;
                    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);

                    // Get the index of the data points to test against
                    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,
                        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,
                        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,
                        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;

                    // Bail out if we are out of the terrain
                    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
                        return;
                    }

                    // Clamp index to edges
                    if (iMinX < 0) { iMinX = 0; }
                    if (iMaxX < 0) { iMaxX = 0; }
                    if (iMinY < 0) { iMinY = 0; }
                    if (iMaxY < 0) { iMaxY = 0; }
                    if (iMinX >= data.length) { iMinX = data.length - 1; }
                    if (iMaxX >= data.length) { iMaxX = data.length - 1; }
                    if (iMaxY >= data[0].length) { iMaxY = data[0].length - 1; }
                    if (iMinY >= data[0].length) { iMinY = data[0].length - 1; }

                    var minMax = [];
                    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
                    var min = minMax[0];
                    var max = minMax[1];

                    // Bail out if we're cant touch the bounding height box
                    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {
                        return;
                    }

                    for (var i = iMinX; i < iMaxX; i++) {
                        for (var j = iMinY; j < iMaxY; j++) {

                            // Lower triangle
                            hfShape.getConvexTrianglePillar(i, j, false);
                            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
                            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
                                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);
                            }

                            // Upper triangle
                            hfShape.getConvexTrianglePillar(i, j, true);
                            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
                            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
                                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);
                            }
                        }
                    }
                };

            var sphereHeightfield_tmp1 = new Vec3();
            var sphereHeightfield_tmp2 = new Vec3();

            /**
             * @method sphereHeightfield
             */
            Narrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =
                Narrowphase.prototype.sphereHeightfield = function (
                    sphereShape,
                    hfShape,
                    spherePos,
                    hfPos,
                    sphereQuat,
                    hfQuat,
                    sphereBody,
                    hfBody
                ) {
                    var data = hfShape.data,
                        radius = sphereShape.radius,
                        w = hfShape.elementSize,
                        worldPillarOffset = sphereHeightfield_tmp2;

                    // Get sphere position to heightfield local!
                    var localSpherePos = sphereHeightfield_tmp1;
                    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);

                    // Get the index of the data points to test against
                    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,
                        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,
                        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,
                        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;

                    // Bail out if we are out of the terrain
                    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length) {
                        return;
                    }

                    // Clamp index to edges
                    if (iMinX < 0) { iMinX = 0; }
                    if (iMaxX < 0) { iMaxX = 0; }
                    if (iMinY < 0) { iMinY = 0; }
                    if (iMaxY < 0) { iMaxY = 0; }
                    if (iMinX >= data.length) { iMinX = data.length - 1; }
                    if (iMaxX >= data.length) { iMaxX = data.length - 1; }
                    if (iMaxY >= data[0].length) { iMaxY = data[0].length - 1; }
                    if (iMinY >= data[0].length) { iMinY = data[0].length - 1; }

                    var minMax = [];
                    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
                    var min = minMax[0];
                    var max = minMax[1];

                    // Bail out if we're cant touch the bounding height box
                    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {
                        return;
                    }

                    var result = this.result;
                    for (var i = iMinX; i < iMaxX; i++) {
                        for (var j = iMinY; j < iMaxY; j++) {

                            var numContactsBefore = result.length;

                            // Lower triangle
                            hfShape.getConvexTrianglePillar(i, j, false);
                            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
                            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
                                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);
                            }

                            // Upper triangle
                            hfShape.getConvexTrianglePillar(i, j, true);
                            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
                            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
                                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);
                            }

                            var numContacts = result.length - numContactsBefore;

                            if (numContacts > 2) {
                                return;
                            }
                            /*
                            // Skip all but 1
                            for (var k = 0; k < numContacts - 1; k++) {
                                result.pop();
                            }
                            */
                        }
                    }
                };

        }, { "../collision/AABB": 3, "../collision/Ray": 9, "../equations/ContactEquation": 19, "../equations/FrictionEquation": 21, "../math/Quaternion": 28, "../math/Transform": 29, "../math/Vec3": 30, "../shapes/ConvexPolyhedron": 38, "../shapes/Shape": 43, "../solver/Solver": 47, "../utils/Vec3Pool": 54 }], 56: [function (_dereq_, module, exports) {
            /* global performance */

            module.exports = World;

            var Shape = _dereq_('../shapes/Shape');
            var Vec3 = _dereq_('../math/Vec3');
            var Quaternion = _dereq_('../math/Quaternion');
            var GSSolver = _dereq_('../solver/GSSolver');
            var Vec3Pool = _dereq_('../utils/Vec3Pool');
            var ContactEquation = _dereq_('../equations/ContactEquation');
            var FrictionEquation = _dereq_('../equations/FrictionEquation');
            var Narrowphase = _dereq_('./Narrowphase');
            var EventTarget = _dereq_('../utils/EventTarget');
            var ArrayCollisionMatrix = _dereq_('../collision/ArrayCollisionMatrix');
            var Material = _dereq_('../material/Material');
            var ContactMaterial = _dereq_('../material/ContactMaterial');
            var Body = _dereq_('../objects/Body');
            var TupleDictionary = _dereq_('../utils/TupleDictionary');
            var RaycastResult = _dereq_('../collision/RaycastResult');
            var AABB = _dereq_('../collision/AABB');
            var Ray = _dereq_('../collision/Ray');
            var NaiveBroadphase = _dereq_('../collision/NaiveBroadphase');

            /**
             * The physics world
             * @class World
             * @constructor
             * @extends EventTarget
             */
            function World() {
                EventTarget.apply(this);

                /**
                 * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is "fresh" inside event callbacks.
                 * @property {Number} dt
                 */
                this.dt = -1;

                /**
                 * Makes bodies go to sleep when they've been inactive
                 * @property allowSleep
                 * @type {Boolean}
                 */
                this.allowSleep = false;

                /**
                 * All the current contacts (instances of ContactEquation) in the world.
                 * @property contacts
                 * @type {Array}
                 */
                this.contacts = [];
                this.frictionEquations = [];

                /**
                 * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).
                 * @property quatNormalizeSkip
                 * @type {Number}
                 */
                this.quatNormalizeSkip = 0;

                /**
                 * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.
                 * @property quatNormalizeFast
                 * @type {Boolean}
                 * @see Quaternion.normalizeFast
                 * @see Quaternion.normalize
                 */
                this.quatNormalizeFast = false;

                /**
                 * The wall-clock time since simulation start
                 * @property time
                 * @type {Number}
                 */
                this.time = 0.0;

                /**
                 * Number of timesteps taken since start
                 * @property stepnumber
                 * @type {Number}
                 */
                this.stepnumber = 0;

                /// Default and last timestep sizes
                this.default_dt = 1 / 60;

                this.nextId = 0;
                /**
                 * @property gravity
                 * @type {Vec3}
                 */
                this.gravity = new Vec3();

                /**
                 * @property broadphase
                 * @type {Broadphase}
                 */
                this.broadphase = new NaiveBroadphase();

                /**
                 * @property bodies
                 * @type {Array}
                 */
                this.bodies = [];

                /**
                 * @property solver
                 * @type {Solver}
                 */
                this.solver = new GSSolver();

                /**
                 * @property constraints
                 * @type {Array}
                 */
                this.constraints = [];

                /**
                 * @property narrowphase
                 * @type {Narrowphase}
                 */
                this.narrowphase = new Narrowphase(this);

                /**
                 * @property {ArrayCollisionMatrix} collisionMatrix
                 * @type {ArrayCollisionMatrix}
                 */
                this.collisionMatrix = new ArrayCollisionMatrix();

                /**
                 * CollisionMatrix from the previous step.
                 * @property {ArrayCollisionMatrix} collisionMatrixPrevious
                 * @type {ArrayCollisionMatrix}
                 */
                this.collisionMatrixPrevious = new ArrayCollisionMatrix();

                /**
                 * All added materials
                 * @property materials
                 * @type {Array}
                 */
                this.materials = [];

                /**
                 * @property contactmaterials
                 * @type {Array}
                 */
                this.contactmaterials = [];

                /**
                 * Used to look up a ContactMaterial given two instances of Material.
                 * @property {TupleDictionary} contactMaterialTable
                 */
                this.contactMaterialTable = new TupleDictionary();

                this.defaultMaterial = new Material("default");

                /**
                 * This contact material is used if no suitable contactmaterial is found for a contact.
                 * @property defaultContactMaterial
                 * @type {ContactMaterial}
                 */
                this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });

                /**
                 * @property doProfiling
                 * @type {Boolean}
                 */
                this.doProfiling = false;

                /**
                 * @property profile
                 * @type {Object}
                 */
                this.profile = {
                    solve: 0,
                    makeContactConstraints: 0,
                    broadphase: 0,
                    integrate: 0,
                    narrowphase: 0,
                };

                /**
                 * @property subsystems
                 * @type {Array}
                 */
                this.subsystems = [];

                this.addBodyEvent = {
                    type: "addBody",
                    body: null,
                };

                this.removeBodyEvent = {
                    type: "removeBody",
                    body: null,
                };
            }
            World.prototype = new EventTarget();

            // Temp stuff
            var tmpAABB1 = new AABB();
            var tmpArray1 = [];
            var tmpRay = new Ray();

            /**
             * Get the contact material between materials m1 and m2
             * @method getContactMaterial
             * @param {Material} m1
             * @param {Material} m2
             * @return {ContactMaterial} The contact material if it was found.
             */
            World.prototype.getContactMaterial = function (m1, m2) {
                return this.contactMaterialTable.get(m1.id, m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];
            };

            /**
             * Get number of objects in the world.
             * @method numObjects
             * @return {Number}
             * @deprecated
             */
            World.prototype.numObjects = function () {
                return this.bodies.length;
            };

            /**
             * Store old collision state info
             * @method collisionMatrixTick
             */
            World.prototype.collisionMatrixTick = function () {
                var temp = this.collisionMatrixPrevious;
                this.collisionMatrixPrevious = this.collisionMatrix;
                this.collisionMatrix = temp;
                this.collisionMatrix.reset();
            };

            /**
             * Add a rigid body to the simulation.
             * @method add
             * @param {Body} body
             * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.
             * @todo Adding an array of bodies should be possible. This would save some loops too
             * @deprecated Use .addBody instead
             */
            World.prototype.add = World.prototype.addBody = function (body) {
                if (this.bodies.indexOf(body) !== -1) {
                    return;
                }
                body.index = this.bodies.length;
                this.bodies.push(body);
                body.world = this;
                body.initPosition.copy(body.position);
                body.initVelocity.copy(body.velocity);
                body.timeLastSleepy = this.time;
                if (body instanceof Body) {
                    body.initAngularVelocity.copy(body.angularVelocity);
                    body.initQuaternion.copy(body.quaternion);
                }
                this.collisionMatrix.setNumObjects(this.bodies.length);
                this.addBodyEvent.body = body;
                this.dispatchEvent(this.addBodyEvent);
            };

            /**
             * Add a constraint to the simulation.
             * @method addConstraint
             * @param {Constraint} c
             */
            World.prototype.addConstraint = function (c) {
                this.constraints.push(c);
            };

            /**
             * Removes a constraint
             * @method removeConstraint
             * @param {Constraint} c
             */
            World.prototype.removeConstraint = function (c) {
                var idx = this.constraints.indexOf(c);
                if (idx !== -1) {
                    this.constraints.splice(idx, 1);
                }
            };

            /**
             * Raycast test
             * @method rayTest
             * @param {Vec3} from
             * @param {Vec3} to
             * @param {Function|RaycastResult} result
             * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.
             */
            World.prototype.rayTest = function (from, to, result) {
                if (result instanceof RaycastResult) {
                    // Do raycastclosest
                    this.raycastClosest(from, to, {
                        skipBackfaces: true
                    }, result);
                } else {
                    // Do raycastAll
                    this.raycastAll(from, to, {
                        skipBackfaces: true
                    }, result);
                }
            };

            /**
             * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.
             * @method raycastAll
             * @param  {Vec3} from
             * @param  {Vec3} to
             * @param  {Object} options
             * @param  {number} [options.collisionFilterMask=-1]
             * @param  {number} [options.collisionFilterGroup=-1]
             * @param  {boolean} [options.skipBackfaces=false]
             * @param  {boolean} [options.checkCollisionResponse=true]
             * @param  {Function} callback
             * @return {boolean} True if any body was hit.
             */
            World.prototype.raycastAll = function (from, to, options, callback) {
                options.mode = Ray.ALL;
                options.from = from;
                options.to = to;
                options.callback = callback;
                return tmpRay.intersectWorld(this, options);
            };

            /**
             * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.
             * @method raycastAny
             * @param  {Vec3} from
             * @param  {Vec3} to
             * @param  {Object} options
             * @param  {number} [options.collisionFilterMask=-1]
             * @param  {number} [options.collisionFilterGroup=-1]
             * @param  {boolean} [options.skipBackfaces=false]
             * @param  {boolean} [options.checkCollisionResponse=true]
             * @param  {RaycastResult} result
             * @return {boolean} True if any body was hit.
             */
            World.prototype.raycastAny = function (from, to, options, result) {
                options.mode = Ray.ANY;
                options.from = from;
                options.to = to;
                options.result = result;
                return tmpRay.intersectWorld(this, options);
            };

            /**
             * Ray cast, and return information of the closest hit.
             * @method raycastClosest
             * @param  {Vec3} from
             * @param  {Vec3} to
             * @param  {Object} options
             * @param  {number} [options.collisionFilterMask=-1]
             * @param  {number} [options.collisionFilterGroup=-1]
             * @param  {boolean} [options.skipBackfaces=false]
             * @param  {boolean} [options.checkCollisionResponse=true]
             * @param  {RaycastResult} result
             * @return {boolean} True if any body was hit.
             */
            World.prototype.raycastClosest = function (from, to, options, result) {
                options.mode = Ray.CLOSEST;
                options.from = from;
                options.to = to;
                options.result = result;
                return tmpRay.intersectWorld(this, options);
            };

            /**
             * Remove a rigid body from the simulation.
             * @method remove
             * @param {Body} body
             * @deprecated Use .removeBody instead
             */
            World.prototype.remove = function (body) {
                body.world = null;
                var n = this.bodies.length - 1,
                    bodies = this.bodies,
                    idx = bodies.indexOf(body);
                if (idx !== -1) {
                    bodies.splice(idx, 1); // Todo: should use a garbage free method

                    // Recompute index
                    for (var i = 0; i !== bodies.length; i++) {
                        bodies[i].index = i;
                    }

                    this.collisionMatrix.setNumObjects(n);
                    this.removeBodyEvent.body = body;
                    this.dispatchEvent(this.removeBodyEvent);
                }
            };

            /**
             * Remove a rigid body from the simulation.
             * @method removeBody
             * @param {Body} body
             */
            World.prototype.removeBody = World.prototype.remove;

            /**
             * Adds a material to the World.
             * @method addMaterial
             * @param {Material} m
             * @todo Necessary?
             */
            World.prototype.addMaterial = function (m) {
                this.materials.push(m);
            };

            /**
             * Adds a contact material to the World
             * @method addContactMaterial
             * @param {ContactMaterial} cmat
             */
            World.prototype.addContactMaterial = function (cmat) {

                // Add contact material
                this.contactmaterials.push(cmat);

                // Add current contact material to the material table
                this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);
            };

            // performance.now()
            if (typeof performance === 'undefined') {
                performance = {};
            }
            if (!performance.now) {
                var nowOffset = Date.now();
                if (performance.timing && performance.timing.navigationStart) {
                    nowOffset = performance.timing.navigationStart;
                }
                performance.now = function () {
                    return Date.now() - nowOffset;
                };
            }

            var step_tmp1 = new Vec3();

            /**
             * Step the physics world forward in time.
             *
             * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
             *
             * @method step
             * @param {Number} dt                       The fixed time step size to use.
             * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.
             * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.
             *
             * @example
             *     // fixed timestepping without interpolation
             *     world.step(1/60);
             *
             * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World
             */
            World.prototype.step = function (dt, timeSinceLastCalled, maxSubSteps) {
                maxSubSteps = maxSubSteps || 10;
                timeSinceLastCalled = timeSinceLastCalled || 0;

                if (timeSinceLastCalled === 0) { // Fixed, simple stepping

                    this.internalStep(dt);

                    // Increment time
                    this.time += dt;

                } else {

                    // Compute the number of fixed steps we should have taken since the last step
                    var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);
                    internalSteps = Math.min(internalSteps, maxSubSteps);

                    // Do some fixed steps to catch up
                    var t0 = performance.now();
                    for (var i = 0; i !== internalSteps; i++) {
                        this.internalStep(dt);
                        if (performance.now() - t0 > dt * 1000) {
                            // We are slower than real-time. Better bail out.
                            break;
                        }
                    }

                    // Increment internal clock
                    this.time += timeSinceLastCalled;

                    // Compute "Left over" time step
                    var h = this.time % dt;
                    var h_div_dt = h / dt;
                    var interpvelo = step_tmp1;
                    var bodies = this.bodies;

                    for (var j = 0; j !== bodies.length; j++) {
                        var b = bodies[j];
                        if (b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING) {

                            // Interpolate
                            b.position.vsub(b.previousPosition, interpvelo);
                            interpvelo.scale(h_div_dt, interpvelo);
                            b.position.vadd(interpvelo, b.interpolatedPosition);

                            // TODO: interpolate quaternion
                            // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;

                        } else {

                            // For static bodies, just copy. Who else will do it?
                            b.interpolatedPosition.copy(b.position);
                            b.interpolatedQuaternion.copy(b.quaternion);
                        }
                    }
                }
            };

            /**
             * Step the simulation
             * @method step
             * @param {Number} dt
             */
            var World_step_postStepEvent = { type: "postStep" }, // Reusable event objects to save memory
                World_step_preStepEvent = { type: "preStep" },
                World_step_collideEvent = { type: "collide", body: null, contact: null },
                World_step_oldContacts = [], // Pools for unused objects
                World_step_frictionEquationPool = [],
                World_step_p1 = [], // Reusable arrays for collision pairs
                World_step_p2 = [],
                World_step_gvec = new Vec3(), // Temporary vectors and quats
                World_step_vi = new Vec3(),
                World_step_vj = new Vec3(),
                World_step_wi = new Vec3(),
                World_step_wj = new Vec3(),
                World_step_t1 = new Vec3(),
                World_step_t2 = new Vec3(),
                World_step_rixn = new Vec3(),
                World_step_rjxn = new Vec3(),
                World_step_step_q = new Quaternion(),
                World_step_step_w = new Quaternion(),
                World_step_step_wq = new Quaternion(),
                invI_tau_dt = new Vec3();
            World.prototype.internalStep = function (dt) {
                this.dt = dt;

                var world = this,
                    that = this,
                    contacts = this.contacts,
                    p1 = World_step_p1,
                    p2 = World_step_p2,
                    N = this.numObjects(),
                    bodies = this.bodies,
                    solver = this.solver,
                    gravity = this.gravity,
                    doProfiling = this.doProfiling,
                    profile = this.profile,
                    DYNAMIC = Body.DYNAMIC,
                    profilingStart,
                    constraints = this.constraints,
                    frictionEquationPool = World_step_frictionEquationPool,
                    gnorm = gravity.norm(),
                    gx = gravity.x,
                    gy = gravity.y,
                    gz = gravity.z,
                    i = 0;

                if (doProfiling) {
                    profilingStart = performance.now();
                }

                // Add gravity to all objects
                for (i = 0; i !== N; i++) {
                    var bi = bodies[i];
                    if ((bi.type & DYNAMIC)) { // Only for dynamic bodies
                        var f = bi.force, m = bi.mass;
                        f.x += m * gx;
                        f.y += m * gy;
                        f.z += m * gz;
                    }
                }

                // Update subsystems
                for (var i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {
                    this.subsystems[i].update();
                }

                // Collision detection
                if (doProfiling) { profilingStart = performance.now(); }
                p1.length = 0; // Clean up pair arrays from last step
                p2.length = 0;
                this.broadphase.collisionPairs(this, p1, p2);
                if (doProfiling) { profile.broadphase = performance.now() - profilingStart; }

                // Remove constrained pairs with collideConnected == false
                var Nconstraints = constraints.length;
                for (i = 0; i !== Nconstraints; i++) {
                    var c = constraints[i];
                    if (!c.collideConnected) {
                        for (var j = p1.length - 1; j >= 0; j -= 1) {
                            if ((c.bodyA === p1[j] && c.bodyB === p2[j]) ||
                                (c.bodyB === p1[j] && c.bodyA === p2[j])) {
                                p1.splice(j, 1);
                                p2.splice(j, 1);
                            }
                        }
                    }
                }

                this.collisionMatrixTick();

                // Generate contacts
                if (doProfiling) { profilingStart = performance.now(); }
                var oldcontacts = World_step_oldContacts;
                var NoldContacts = contacts.length;

                for (i = 0; i !== NoldContacts; i++) {
                    oldcontacts.push(contacts[i]);
                }
                contacts.length = 0;

                // Transfer FrictionEquation from current list to the pool for reuse
                var NoldFrictionEquations = this.frictionEquations.length;
                for (i = 0; i !== NoldFrictionEquations; i++) {
                    frictionEquationPool.push(this.frictionEquations[i]);
                }
                this.frictionEquations.length = 0;

                this.narrowphase.getContacts(
                    p1,
                    p2,
                    this,
                    contacts,
                    oldcontacts, // To be reused
                    this.frictionEquations,
                    frictionEquationPool
                );

                if (doProfiling) {
                    profile.narrowphase = performance.now() - profilingStart;
                }

                // Loop over all collisions
                if (doProfiling) {
                    profilingStart = performance.now();
                }

                // Add all friction eqs
                for (var i = 0; i < this.frictionEquations.length; i++) {
                    solver.addEquation(this.frictionEquations[i]);
                }

                var ncontacts = contacts.length;
                for (var k = 0; k !== ncontacts; k++) {

                    // Current contact
                    var c = contacts[k];

                    // Get current collision indeces
                    var bi = c.bi,
                        bj = c.bj,
                        si = c.si,
                        sj = c.sj;

                    // Get collision properties
                    var cm;
                    if (bi.material && bj.material) {
                        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;
                    } else {
                        cm = this.defaultContactMaterial;
                    }

                    // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;

                    var mu = cm.friction;
                    // c.restitution = cm.restitution;

                    // If friction or restitution were specified in the material, use them
                    if (bi.material && bj.material) {
                        if (bi.material.friction >= 0 && bj.material.friction >= 0) {
                            mu = bi.material.friction * bj.material.friction;
                        }

                        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {
                            c.restitution = bi.material.restitution * bj.material.restitution;
                        }
                    }

                    // c.setSpookParams(
                    //           cm.contactEquationStiffness,
                    //           cm.contactEquationRelaxation,
                    //           dt
                    //       );

                    solver.addEquation(c);

                    // // Add friction constraint equation
                    // if(mu > 0){

                    // 	// Create 2 tangent equations
                    // 	var mug = mu * gnorm;
                    // 	var reducedMass = (bi.invMass + bj.invMass);
                    // 	if(reducedMass > 0){
                    // 		reducedMass = 1/reducedMass;
                    // 	}
                    // 	var pool = frictionEquationPool;
                    // 	var c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
                    // 	var c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
                    // 	this.frictionEquations.push(c1, c2);

                    // 	c1.bi = c2.bi = bi;
                    // 	c1.bj = c2.bj = bj;
                    // 	c1.minForce = c2.minForce = -mug*reducedMass;
                    // 	c1.maxForce = c2.maxForce = mug*reducedMass;

                    // 	// Copy over the relative vectors
                    // 	c1.ri.copy(c.ri);
                    // 	c1.rj.copy(c.rj);
                    // 	c2.ri.copy(c.ri);
                    // 	c2.rj.copy(c.rj);

                    // 	// Construct tangents
                    // 	c.ni.tangents(c1.t, c2.t);

                    //           // Set spook params
                    //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
                    //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);

                    //           c1.enabled = c2.enabled = c.enabled;

                    // 	// Add equations to solver
                    // 	solver.addEquation(c1);
                    // 	solver.addEquation(c2);
                    // }

                    if (bi.allowSleep &&
                        bi.type === Body.DYNAMIC &&
                        bi.sleepState === Body.SLEEPING &&
                        bj.sleepState === Body.AWAKE &&
                        bj.type !== Body.STATIC
                    ) {
                        var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();
                        var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit, 2);
                        if (speedSquaredB >= speedLimitSquaredB * 2) {
                            bi._wakeUpAfterNarrowphase = true;
                        }
                    }

                    if (bj.allowSleep &&
                        bj.type === Body.DYNAMIC &&
                        bj.sleepState === Body.SLEEPING &&
                        bi.sleepState === Body.AWAKE &&
                        bi.type !== Body.STATIC
                    ) {
                        var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();
                        var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit, 2);
                        if (speedSquaredA >= speedLimitSquaredA * 2) {
                            bj._wakeUpAfterNarrowphase = true;
                        }
                    }

                    // Now we know that i and j are in contact. Set collision matrix state
                    this.collisionMatrix.set(bi, bj, true);
                    //bi.hasCollision = true;

                    if (!this.collisionMatrixPrevious.get(bi, bj)) {
                        // First contact!
                        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.
                        World_step_collideEvent.body = bj;
                        World_step_collideEvent.contact = c;
                        bi.dispatchEvent(World_step_collideEvent);


                        World_step_collideEvent.body = bi;
                        bj.dispatchEvent(World_step_collideEvent);
                    }
                }
                if (doProfiling) {
                    profile.makeContactConstraints = performance.now() - profilingStart;
                    profilingStart = performance.now();
                }

                // Wake up bodies
                for (i = 0; i !== N; i++) {
                    var bi = bodies[i];
                    if (bi._wakeUpAfterNarrowphase) {
                        bi.wakeUp();
                        bi._wakeUpAfterNarrowphase = false;
                    }
                }

                // Add user-added constraints
                var Nconstraints = constraints.length;
                for (i = 0; i !== Nconstraints; i++) {
                    var c = constraints[i];
                    c.update();
                    for (var j = 0, Neq = c.equations.length; j !== Neq; j++) {
                        var eq = c.equations[j];
                        solver.addEquation(eq);
                    }
                }

                // Solve the constrained system
                solver.solve(dt, this);

                if (doProfiling) {
                    profile.solve = performance.now() - profilingStart;
                }

                // Remove all contacts from solver
                solver.removeAllEquations();

                // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details
                var pow = Math.pow;
                for (i = 0; i !== N; i++) {
                    var bi = bodies[i];
                    if (bi.type & DYNAMIC) { // Only for dynamic bodies
                        var ld = pow(1.0 - bi.linearDamping, dt);
                        var v = bi.velocity;
                        v.mult(ld, v);
                        var av = bi.angularVelocity;
                        if (av) {
                            var ad = pow(1.0 - bi.angularDamping, dt);
                            av.mult(ad, av);
                        }
                    }
                }

                this.dispatchEvent(World_step_preStepEvent);

                // Invoke pre-step callbacks
                for (i = 0; i !== N; i++) {
                    var bi = bodies[i];
                    if (bi.preStep) {
                        bi.preStep.call(bi);
                    }
                }

                // Leap frog
                // vnew = v + h*f/m
                // xnew = x + h*vnew
                if (doProfiling) {
                    profilingStart = performance.now();
                }
                var q = World_step_step_q;
                var w = World_step_step_w;
                var wq = World_step_step_wq;
                var stepnumber = this.stepnumber;
                var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;
                var quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;
                var quatNormalizeFast = this.quatNormalizeFast;
                var half_dt = dt * 0.5;
                var PLANE = Shape.types.PLANE,
                    CONVEX = Shape.types.CONVEXPOLYHEDRON;

                for (i = 0; i !== N; i++) {
                    var b = bodies[i],
                        force = b.force,
                        tau = b.torque;
                    if ((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING) { // Only for dynamic
                        var velo = b.velocity,
                            angularVelo = b.angularVelocity,
                            pos = b.position,
                            quat = b.quaternion,
                            invMass = b.invMass,
                            invInertia = b.invInertiaWorld;

                        velo.x += force.x * invMass * dt;
                        velo.y += force.y * invMass * dt;
                        velo.z += force.z * invMass * dt;

                        if (b.angularVelocity) {
                            invInertia.vmult(tau, invI_tau_dt);
                            invI_tau_dt.mult(dt, invI_tau_dt);
                            invI_tau_dt.vadd(angularVelo, angularVelo);
                        }

                        // Use new velocity  - leap frog
                        pos.x += velo.x * dt;
                        pos.y += velo.y * dt;
                        pos.z += velo.z * dt;

                        if (b.angularVelocity) {
                            w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);
                            w.mult(quat, wq);
                            quat.x += half_dt * wq.x;
                            quat.y += half_dt * wq.y;
                            quat.z += half_dt * wq.z;
                            quat.w += half_dt * wq.w;
                            if (quatNormalize) {
                                if (quatNormalizeFast) {
                                    quat.normalizeFast();
                                } else {
                                    quat.normalize();
                                }
                            }
                        }

                        if (b.aabb) {
                            b.aabbNeedsUpdate = true;
                        }

                        // Update world inertia
                        if (b.updateInertiaWorld) {
                            b.updateInertiaWorld();
                        }
                    }
                }
                this.clearForces();

                this.broadphase.dirty = true;

                if (doProfiling) {
                    profile.integrate = performance.now() - profilingStart;
                }

                // Update world time
                this.time += dt;
                this.stepnumber += 1;

                this.dispatchEvent(World_step_postStepEvent);

                // Invoke post-step callbacks
                for (i = 0; i !== N; i++) {
                    var bi = bodies[i];
                    var postStep = bi.postStep;
                    if (postStep) {
                        postStep.call(bi);
                    }
                }

                // Sleeping update
                if (this.allowSleep) {
                    for (i = 0; i !== N; i++) {
                        bodies[i].sleepTick(this.time);
                    }
                }
            };

            /**
             * Sets all body forces in the world to zero.
             * @method clearForces
             */
            World.prototype.clearForces = function () {
                var bodies = this.bodies;
                var N = bodies.length;
                for (var i = 0; i !== N; i++) {
                    var b = bodies[i],
                        force = b.force,
                        tau = b.torque;

                    b.force.set(0, 0, 0);
                    b.torque.set(0, 0, 0);
                }
            };

        }, { "../collision/AABB": 3, "../collision/ArrayCollisionMatrix": 4, "../collision/NaiveBroadphase": 7, "../collision/Ray": 9, "../collision/RaycastResult": 10, "../equations/ContactEquation": 19, "../equations/FrictionEquation": 21, "../material/ContactMaterial": 24, "../material/Material": 25, "../math/Quaternion": 28, "../math/Vec3": 30, "../objects/Body": 31, "../shapes/Shape": 43, "../solver/GSSolver": 46, "../utils/EventTarget": 49, "../utils/TupleDictionary": 52, "../utils/Vec3Pool": 54, "./Narrowphase": 55 }]
    }, {}, [2])
        (2)
});

function float2int(a){return 0|a}function radian2angle(a){return a/Math.PI*180}function angle2radian(a){return a/180*Math.PI}function getChiNum(a){return keyChi[a]}function hexToArgb(a,b,c){return void 0===b&&(b=!0),void 0===c&&(c=null),c||(c=new Pan3d.Vector3D),c.w=b?a>>24&255:0,c.x=a>>16&255,c.y=a>>8&255,c.z=255&a,c}function hexToArgbNum(a,b,c){return void 0===b&&(b=!0),void 0===c&&(c=null),c=hexToArgb(a,b,c),c.scaleBy(1/255),c}function getBaseUrl(){return Pan3d.Scene_data.supportBlob?"":"_base"}function strokeFilter(a,b,c,d){function e(a,c){return 4*(c*b+a)}function f(a,b){var c;return c=e(a-1,b),i[c+3]>0?!0:(c=e(a+1,b),i[c+3]>0?!0:(c=e(a,b+1),i[c+3]>0?!0:(c=e(a,b-1),i[c+3]>0?!0:!1)))}for(var g=hexToArgb(d),h=a.getImageData(0,0,b,c),i=h.data,j=new Array,k=1;b-1>k;k++)for(var l=0;c-1>l;l++){var m=e(k,l);0==i[m+3]&&f(k,l)&&j.push(m)}for(var k=0;k<j.length;k++)i[j[k]]=g.x,i[j[k]+1]=g.y,i[j[k]+2]=g.z,i[j[k]+3]=g.w;a.putImageData(h,0,0)}function trim(a){return trimRight(trimLeft(a))}function trimLeft(a){if(null==a)return"";var b=new String(" 	\n\r"),c=new String(a);if(-1!=b.indexOf(c.charAt(0))){for(var d=0,e=c.length;e>d&&-1!=b.indexOf(c.charAt(d));)d++;c=c.substring(d,e)}return c}function trimRight(a){if(null==a)return"";var b=new String(" 	\n\r"),c=new String(a);if(-1!=b.indexOf(c.charAt(c.length-1))){for(var d=c.length-1;d>=0&&-1!=b.indexOf(c.charAt(d));)d--;c=c.substring(0,d+1)}return c}function TweenMoveTo(a,b,c){}function getScencdStr(a){var b=Math.floor(a/60%60),c=Math.floor(a%60);return String(10>b?"0":"")+String(b)+":"+String(10>c?"0":"")+String(c)}function random(a){return Math.floor(Math.random()*a)}function randomByItem(a){return a[random(a.length)]}function makeArray(a,b){for(var c=0;c<a.length;c++)b.push(a[c])}function unZip(a){var b=new Uint8Array(a),c=new Zlib.Inflate(b),d=c.decompress();return d.buffer}function getZipByte(a){var b=a.readInt(),c=a.buffer.slice(a.position,a.position+b);a.position+=b;var d=unZip(c);return new Pan3d.Pan3dByteArray(d)}function getUrlParam(a){var b=new RegExp("(^|&)"+a+"=([^&]*)(&|$)"),c=window.location.search.substr(1).match(b);return null!=c?decodeURI(c[2]):null}function copy2clipboard(a){var b=document.createElement("textarea");b.style.fontSize="12pt",b.style.position="absolute",b.style["z-index"]=-1,b.style.background="transparent",b.style.border="transparent",b.style.color="white",b.setAttribute("readonly",""),document.body.appendChild(b),b.value=a,b.select(),b.setSelectionRange(0,b.value.length);try{document.execCommand("copy")}catch(c){alert("不支持复制")}setTimeout(function(){document.body.removeChild(b)},1e3)}function getBit(a,b){return Boolean(a>>(31&b)&1)}function getUItittleUrl(a){return"ui/load/tittle/"+a+".png"}function getSkillUrl(a){!a||0==a.length;var b="skill/"+a+getBaseUrl()+".txt";return b.replace(".txt","_byte.txt")}function getModelUrl(a){return"model/"+a+getBaseUrl()+".txt"}function getModelUIUrl(a){return"model/"+a+getBaseUrl()+".txt"}function getMapUrl(a){return"map/"+a+".txt"}function getRoleUrl(a){return"role/"+a+getBaseUrl()+".txt"}function getZipMapUrl(a){return"map/"+a+"/"}function Snum(a){return"123"}function getEffectUIUrl(a){return"ui/load/effect/"+a+".png"}function getKeyProById(a){return"cc"}var Pan3d;!function(a){var b=function(){function a(a){this.type=a}return a.COMPLETE="complete",a}();a.BaseEvent=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this._eventsMap=null}return a.prototype.addEventListener=function(a,b,c){this._eventsMap||(this._eventsMap=new Object);var d=this._eventsMap[a];d||(d=this._eventsMap[a]=[]);for(var e={listener:b,thisObject:c},f=0;f<d.length;f++){var g=d[f];if(g.listener==b&&g.thisObject==c)return}d.push(e)},a.prototype.removeEventListener=function(a,b,c){if(null!=this._eventsMap)for(var d=this._eventsMap[a],e=0;d&&e<d.length;e++){var f=d[e];if(f.listener==b&&f.thisObject==c)return void d.splice(e,1)}},a.prototype.dispatchEvent=function(a){var b=this._eventsMap;if(!b)return!0;var c=b[a.type];if(!c)return!0;var d=c.length;if(0==d)return!0;a.target=this;for(var e=0;d>e;e++){var f=c[e];f.listener.call(f.thisObject,a)}},a}();a.EventDispatcher=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.prototype.destory=function(){},a}();a.GC=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b._useNum=0,b.idleTime=0,b}return __extends(b,a),Object.defineProperty(b.prototype,"useNum",{get:function(){return this._useNum},set:function(a){this._useNum=a,0==this._useNum&&(this.idleTime=0)},enumerable:!0,configurable:!0}),b.prototype.clearUseNum=function(){this._useNum--,this._useNum<=0&&(this.idleTime=b.GCTime)},b.GCTime=4,b}(a.GC);a.ResCount=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){var b=this;this._dic=new Object,a.TimeUtil.addTimeTick(6e4,function(){b.gc()})}return b.prototype.gc=function(){for(var b in this._dic){var c=this._dic[b];c.useNum<=0&&(c.idleTime++,c.idleTime>=a.ResCount.GCTime&&(c.destory(),delete this._dic[b]))}},b}();a.ResGC=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(c,d,e){void 0===c&&(c=0),void 0===d&&(d=0),void 0===e&&(e=0);var f=b.call(this)||this;return f._x=c,f._y=d,f._z=e,f._scaleX=1,f._scaleY=1,f._scaleZ=1,f._rotationX=0,f._rotationY=0,f._rotationZ=0,f.posMatrix=new a.Matrix3D,f}return __extends(c,b),c.prototype.toStringout=function(){return"Object3D("+String(this._x)+","+String(this._y)+","+String(this._z)+")"},Object.defineProperty(c.prototype,"x",{get:function(){return this._x},set:function(a){this._x=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"y",{get:function(){return this._y},set:function(a){this._y=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"z",{get:function(){return this._z},set:function(a){this._z=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scale",{set:function(a){this._scaleX=this._scaleY=this._scaleZ=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scaleX",{get:function(){return this._scaleX},set:function(a){this._scaleX=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scaleY",{get:function(){return this._scaleY},set:function(a){this._scaleY=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scaleZ",{get:function(){return this._scaleZ},set:function(a){this._scaleZ=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"rotationX",{get:function(){return this._rotationX},set:function(a){this._rotationX=a,this.updateMatrix(),this.updateRotationMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"rotationY",{get:function(){return this._rotationY},set:function(a){this._rotationY=a,this.updateMatrix(),this.updateRotationMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"rotationZ",{get:function(){return this._rotationZ},set:function(a){this._rotationZ=a,this.updateMatrix(),this.updateRotationMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"px",{get:function(){return 0},set:function(a){},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"py",{get:function(){return 0},set:function(a){},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"pz",{get:function(){return 0},set:function(a){},enumerable:!0,configurable:!0}),c.prototype.updateMatrix=function(){this.posMatrix.identity(),this.posMatrix.appendScale(this._scaleX,this._scaleY,this._scaleZ),this.posMatrix.appendRotation(this._rotationX,a.Vector3D.X_AXIS),this.posMatrix.appendRotation(this._rotationY,a.Vector3D.Y_AXIS),this.posMatrix.appendRotation(this._rotationZ,a.Vector3D.Z_AXIS),this.posMatrix.appendTranslation(this._x,this._y,this._z)},c.prototype.updateRotationMatrix=function(){},c}(a.EventDispatcher);a.Object3D=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._distance=500,c.offset=new a.Vector3D,c.lastFoucs3D=new a.Vector3D,c.needChange=!0,c.cameraMatrix=new a.Matrix3D,c}return __extends(c,b),Object.defineProperty(c.prototype,"distance",{get:function(){return this._distance},set:function(a){this._distance=a},enumerable:!0,configurable:!0}),c.prototype.lookAt=function(a){this.lookAtTarget=a},Object.defineProperty(c.prototype,"astarRect",{set:function(b){this._astarRect=new a.Rectangle,this._astarRect.x=b.x,this._astarRect.y=b.y,this._astarRect.width=b.width,this._astarRect.height=b.height,this._midPos=new a.Vector3D,this._midPos.x=this._astarRect.x+this._astarRect.width/2,this._midPos.z=this._astarRect.y+this._astarRect.height/2,this._scaleVec=new a.Vector3D,this._scaleVec.x=(this._astarRect.width-100)/this._astarRect.width,this._scaleVec.z=(this._astarRect.height-100)/this._astarRect.height},enumerable:!0,configurable:!0}),c.prototype.update=function(){if(this.lookAtTarget){var b=28;if(this._astarRect&&this._astarRect.width<600){var c=new a.Vector3D;c.x=(this.lookAtTarget.px-this._midPos.x)*this._scaleVec.x+this._midPos.x,c.z=(this.lookAtTarget.pz-this._midPos.z)*this._scaleVec.z+this._midPos.z,c.y=this.lookAtTarget.py,a.Scene_data.focus3D.x=c.x,a.Scene_data.focus3D.y=c.y+b,a.Scene_data.focus3D.z=c.z}else a.Scene_data.focus3D.x=this.lookAtTarget.px,a.Scene_data.focus3D.y=this.lookAtTarget.py+b,a.Scene_data.focus3D.z=this.lookAtTarget.pz;this.lastFoucs3D.x!=a.Scene_data.focus3D.x||this.lastFoucs3D.y!=a.Scene_data.focus3D.y||this.lastFoucs3D.z!=a.Scene_data.focus3D.z?(this.lastFoucs3D.x=a.Scene_data.focus3D.x,this.lastFoucs3D.y=a.Scene_data.focus3D.y,this.lastFoucs3D.z=a.Scene_data.focus3D.z,this.needChange=!0):this.needChange=!1}},Object.defineProperty(c.prototype,"postion",{get:function(){return new a.Vector3D(this.x,this.y,this.z)},enumerable:!0,configurable:!0}),c}(a.Object3D);a.Camera3D=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.vertices=new Array,a.uvs=new Array,a.indexs=new Array,a.lightuvs=new Array,a.normals=new Array,a.tangents=new Array,a.bitangents=new Array,a.treNum=0,a.compressBuffer=!1,a.hasdispose=!1,a}return __extends(c,b),c.prototype.destory=function(){this.vertices.length=0,this.vertices=null,this.uvs.length=0,this.uvs=null,this.indexs.length=0,this.indexs=null,this.lightuvs.length=0,this.lightuvs=null,this.normals.length=0,this.normals=null,this.tangents.length=0,this.tangents=null,this.bitangents.length=0,this.bitangents=null,this.vertexBuffer&&(a.Scene_data.context3D.deleteBuffer(this.vertexBuffer),this.vertexBuffer=null),this.uvBuffer&&(a.Scene_data.context3D.deleteBuffer(this.uvBuffer),this.uvBuffer=null),this.indexBuffer&&(a.Scene_data.context3D.deleteBuffer(this.indexBuffer),this.indexBuffer=null),this.lightUvBuffer&&(a.Scene_data.context3D.deleteBuffer(this.lightUvBuffer),this.lightUvBuffer=null),this.normalsBuffer&&(a.Scene_data.context3D.deleteBuffer(this.normalsBuffer),this.normalsBuffer=null),this.tangentBuffer&&(a.Scene_data.context3D.deleteBuffer(this.tangentBuffer),this.tangentBuffer=null),this.bitangentBuffer&&(a.Scene_data.context3D.deleteBuffer(this.bitangentBuffer),this.bitangentBuffer=null),this.hasdispose=!0},c}(a.ResCount);a.ObjData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.boneIDAry=new Array,a.boneWeightAry=new Array,a.boneNewIDAry=new Array,a.particleAry=new Array,a}return __extends(c,b),c.prototype.getBindPosMatrix=function(){for(var b=new Array,c=new Array,d=0;d<this.bindPosAry.length;d++){var e=this.bindPosAry[d],f=new a.Quaternion(e[0],e[1],e[2]);f.setMd5W();var g=f.toMatrix3D();g.appendTranslation(e[3],e[4],e[5]),c.push(g.clone()),g.invert(),b.push(g)}this.bindPosMatrixAry=b,this.bindPosInvertMatrixAry=c},c.prototype.destory=function(){b.prototype.destory.call(this),this.materialParam&&(this.materialParam.destory(),this.materialParam=null,this.materialParamData=null),this.boneIDAry.length=0,this.boneWeightAry.length=0,this.boneNewIDAry.length=0,this.boneIDAry=null,this.boneWeightAry=null,this.boneNewIDAry=null,this.boneWeightBuffer&&(a.Scene_data.context3D.deleteBuffer(this.boneWeightBuffer),this.boneWeightBuffer=null),this.boneIdBuffer&&(a.Scene_data.context3D.deleteBuffer(this.boneIdBuffer),this.boneIdBuffer=null),this.material&&this.material.clearUseNum(),this.particleAry.length=0,this.particleAry=null},c}(a.ObjData);a.MeshData=b;var c=function(){function a(a,b){this.url=a,this.socketName=b}return a}();a.BindParticle=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a){this._keys=new Array,this._values=new Array;for(var b=0;a&&b<a.length;b++)this[a[b].key]=a[b].value,this._keys.push(a[b].key),this._values.push(a[b].value)}return a.prototype.add=function(a,b){this[a]=b,this._keys.push(a),this._values.push(b)},a.prototype.has=function(a){return this[a]?!0:!1},a.prototype.remove=function(a){var b=this._keys.indexOf(a,0);this._keys.splice(b,1),this._values.splice(b,1),delete this[a]},a.prototype.keys=function(){return this._keys},a.prototype.values=function(){return this._values},a.prototype.containsKey=function(a){return"undefined"==typeof this[a]?!1:!0},a.prototype.toLookup=function(){return this},a}();a.Dictionary=b;(function(){function a(){this._item=new Array}return a.prototype.add=function(a){this._item.push(a)},a.prototype.has=function(a){for(var b=0;b<this._item.length;b++)if(this._item[b]==a)return!0;return!1},a})()}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.Orange7a2f21="[7a2f21]",a.Orange9a683f="[9a683f]",a.Orange853d07="[853d07]",a.Brown6a4936="[6a4936]",a.Brown623424="[623424]",a.Brownac8965="[ac8965]",a.Reddb4051="[db4051]",a.Redd92200="[d92200]",a.Redff0000="[ff0000]",a.Brownd8d49c="[d8d49c]",a.color843b11="[843b11]",a.colorb96d49="[b96d49]",a.colorcd2000="[cd2000]",a.colorfef3d7="[fef3d7]",a.color9a683f="[9a683f]",a.Brown7a2f21="[7a2f21]",a.Brown40120a="[40120a]",a.Brown491207="[491207]",a.Brown541616="[541616]",a.Brown5a2610="[5a2610]",a.Browndf9a68="[df9a68]",a.Browndb39264="[b39264]",a.Brownd662c0d="[662c0d]",a.colorefe4c4="[efe4c4]",a.color802626="[802626]",a.color9f7b4d="[9f7b4d]",a.color4b0808="[4b0808]",a.color5f5c59="[5f5c59]",a.color903713="[903713]",a.colorfdf6da="[fdf6da]",a.color73301c="[73301c]",a.colorffeeb5="[ffeeb5]",a.Green98ec2c="   ",a.Green56da35="[56da35]",a.Green20a200="[20a200]",a.Greenadff00="[adff00]",a.Green2ca937="[2ca937]",a.Green464b11="[464b11]",a.Green54db36="[54db36]",a.Yellowf7d253="[f7d253]",a.Yellowffecc6="[ffecc6]",a.Yellowffd500="[ffd500]",a.Yellowffe9b4="[ffe9b4]",a.Yellowedce7e="[edce7e]",a.color4c1c07="[4c1c07]",a.Whiteffffff="[ffffff]",a.Whitefffce6="[fffce6]",a.Whitefff7db="[fff7db]",a.White9A683F="[9A683F]",a.Black000000="[000000]",a.Whitefff4d6="[fff4d6]",a.Whiteffeed0="[ffeed0]",a.Whiteffeec9="[ffeec9]",a.Whiteffe9b4="[ffe9b4]",a.Whitefff0b4="[fff0b4]",a.Coffeeff9200="[ff9200]",a.Coffeefee87b="[fee87b]",a.color2daa35="[2daa35]",a.color4392ff="[4392ff]",a.colorb759ff="[b759ff]",a.colorff7200="[ff7200]",a.colorce0a00="[ce0a00]",a.coloraa874a="[aa874a]",a.colorffecc6="[ffecc6]",a.colorfde87e="[fde87e]",a.colord6e7ff="[d6e7ff]",a.colord27262e="[27262e]",a.colorffe9b4="[ffe9b4]",a.color9c9b9b="[9c9b9b]",a.colorfff2d3="[fff2d3]",a.color451800="[451800]",a}();a.ColorType=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(b,c){this.width=b,this.height=c;var d=a.UIManager.getInstance().getContext2D(this.width,this.height,!1);this.imgData=d.getImageData(0,0,this.width,this.height);for(var e=0;e<this.imgData.data.length;e+=4)this.imgData.data[e+0]=255,this.imgData.data[e+1]=255,this.imgData.data[e+2]=255,this.imgData.data[e+3]=255}return b.prototype.getIndexByPos=function(a,b){var c=b*this.width+a;return 4*c},b.prototype.setRgb=function(a,b,c){a=Math.round(a),b=Math.round(b);var d=this.getIndexByPos(a,b);this.imgData.data[d+0]=255*c.x,this.imgData.data[d+1]=255*c.y,this.imgData.data[d+2]=255*c.z,this.imgData.data[d+3]=255},b.prototype.getRgb=function(b,c){b=Math.round(b),c=Math.round(c);var d=new a.Vector3D,e=this.getIndexByPos(b,c);return d.x=this.imgData.data[e+0]/255,d.y=this.imgData.data[e+1]/255,d.z=this.imgData.data[e+2]/255,d.w=1,d},b}();a.BitMapData=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.setTextureNum=0,this.setProgramNum=0}return b.prototype.init=function(a){var b=a.getContext("webgl",{stencil:!0,alpha:!0,depth:!0,antialias:!1})||a.getContext("experimental-webgl",{stencil:!0,alpha:!0,depth:!0,antialias:!1});this.renderContext=b,this._contextSetTest=new d},b.prototype.resetSize=function(a,b){this.renderContext.viewport(0,0,a,b)},b.prototype.uploadBuff3D=function(a){var b=this.renderContext.createBuffer();return this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER,b),this.renderContext.bufferData(this.renderContext.ARRAY_BUFFER,new Float32Array(a),this.renderContext.STATIC_DRAW),b},b.prototype.uploadBuff3DArrayBuffer=function(a){var b=this.renderContext.createBuffer();return this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER,b),this.renderContext.bufferData(this.renderContext.ARRAY_BUFFER,a,this.renderContext.STATIC_DRAW),b},b.prototype.uploadBuff3DByBuffer=function(a,b){this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER,a),this.renderContext.bufferData(this.renderContext.ARRAY_BUFFER,new Float32Array(b),this.renderContext.STATIC_DRAW)},b.prototype.uploadIndexBuff3D=function(a){var b=this.renderContext.createBuffer();return this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER,b),this.renderContext.bufferData(this.renderContext.ELEMENT_ARRAY_BUFFER,new Uint16Array(a),this.renderContext.STATIC_DRAW),b},b.prototype.uploadIndexBuff3DByBuffer=function(a,b){this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER,a),this.renderContext.bufferData(this.renderContext.ELEMENT_ARRAY_BUFFER,new Uint16Array(b),this.renderContext.STATIC_DRAW)},b.prototype.clearContext=function(){this.renderContext.depthMask(!0),this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT|this.renderContext.DEPTH_BUFFER_BIT|this.renderContext.STENCIL_BUFFER_BIT)},b.prototype.update=function(){this._contextSetTest.clear(),this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER,null),this.renderContext.clearColor(63/255,63/255,63/255,1),this.renderContext.clearDepth(1),this.renderContext.clearStencil(0),this.renderContext.enable(this.renderContext.DEPTH_TEST),this.renderContext.depthMask(!0),this.renderContext.enable(this.renderContext.BLEND),this.renderContext.frontFace(this.renderContext.CW),this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT|this.renderContext.DEPTH_BUFFER_BIT|this.renderContext.STENCIL_BUFFER_BIT),this.setBlendParticleFactors(0),this.renderContext.disable(this.renderContext.CULL_FACE),this.setTextureNum=0,this.setProgramNum=0},b.prototype.updateFBO=function(a){this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER,a.frameBuffer),this.renderContext.clearColor(63/255,63/255,63/255,1),this.renderContext.clearDepth(1),this.renderContext.clearStencil(0),this.renderContext.enable(this.renderContext.DEPTH_TEST),this.renderContext.depthMask(!0),this.renderContext.enable(this.renderContext.BLEND),this.renderContext.frontFace(this.renderContext.CW),this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT|this.renderContext.DEPTH_BUFFER_BIT|this.renderContext.STENCIL_BUFFER_BIT),this.setBlendParticleFactors(0),this.renderContext.disable(this.renderContext.CULL_FACE)},b.prototype.setDepthTest=function(a){a?this.renderContext.enable(this.renderContext.DEPTH_TEST):this.renderContext.disable(this.renderContext.DEPTH_TEST)},b.prototype.setWriteDepth=function(a){this._contextSetTest.testZbuffer(a)||this.renderContext.depthMask(a)},b.prototype.setBlendParticleFactors=function(a){if(!this._contextSetTest.testBlend(a))switch(a){case 0:this.renderContext.blendFunc(this.renderContext.ONE,this.renderContext.ONE_MINUS_SRC_ALPHA);break;case 1:this.renderContext.blendFunc(this.renderContext.ONE,this.renderContext.ONE);break;case 2:this.renderContext.blendFunc(this.renderContext.DST_COLOR,this.renderContext.ZERO);break;case 3:this.renderContext.blendFunc(this.renderContext.ONE,this.renderContext.ONE_MINUS_SRC_COLOR);break;case 4:this.renderContext.blendFunc(this.renderContext.SRC_ALPHA,this.renderContext.ONE);break;case-1:this.renderContext.blendFunc(this.renderContext.SRC_ALPHA,this.renderContext.ONE_MINUS_SRC_ALPHA)}},b.prototype.setProgram=function(a){this._contextSetTest.testProgram(a)||(this.renderContext.useProgram(a),this.setProgramNum++)},b.prototype.getLocation=function(a,b){return this.renderContext.getUniformLocation(a,b)},b.prototype.setVcMatrix3fv=function(a,b,c){this.renderContext.uniformMatrix3fv(a.getWebGLUniformLocation(b),!1,c)},b.prototype.setVcMatrix4fv=function(a,b,c){this.renderContext.uniformMatrix4fv(a.getWebGLUniformLocation(b),!1,c)},b.prototype.setVpMatrix=function(a,b){this._contextSetTest.testVp()||this.renderContext.uniformMatrix4fv(a.getWebGLUniformLocation("vpMatrix3D"),!1,b)},b.prototype.setVc4fv=function(a,b,c){this.renderContext.uniform4fv(a.getWebGLUniformLocation(b),c)},b.prototype.setVc1fv=function(a,b,c){this.renderContext.uniform1fv(a.getWebGLUniformLocation(b),c)},b.prototype.setVc3fv=function(a,b,c){this.renderContext.uniform3fv(a.getWebGLUniformLocation(b),c)},b.prototype.setVc2fv=function(a,b,c){this.renderContext.uniform2fv(a.getWebGLUniformLocation(b),c)},b.prototype.setVcFloat=function(a,b,c){this.renderContext.uniform1fv(a.getWebGLUniformLocation(b),c)},b.prototype.setuniform3f=function(a,b,c,d,e){this.renderContext.uniform3f(a.getWebGLUniformLocation(b),c,d,e)},b.prototype.setVcMatrix4fvLocation=function(a,b){this.renderContext.uniformMatrix4fv(a,!1,b)},b.prototype.setVc2f=function(a,b,c,d){this.renderContext.uniform2f(a.getWebGLUniformLocation(b),c,d)},b.prototype.setVcMatrix2fvLocation=function(a,b){this.renderContext.uniformMatrix2fv(a,!1,b)},b.prototype.setVc4fvLocation=function(a,b){this.renderContext.uniform4fv(a,b)},b.prototype.setVa=function(a,b,c){this._contextSetTest.testVa(c),this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER,c),this.renderContext.enableVertexAttribArray(a),this.renderContext.vertexAttribPointer(a,b,this.renderContext.FLOAT,!1,0,0)},b.prototype.pushVa=function(a){return this._contextSetTest.testVa(a)?!0:(this.renderContext.bindBuffer(this.renderContext.ARRAY_BUFFER,a),!1)},b.prototype.setVaOffset=function(a,b,c,d){this._contextSetTest.enableVaAry[a]||(this.renderContext.enableVertexAttribArray(a),this._contextSetTest.enableVaAry[a]=!0),this.renderContext.vertexAttribPointer(a,b,this.renderContext.FLOAT,!1,c,d)},b.prototype.clearVa=function(a){this._contextSetTest.enableVaAry[a]=!1,this.renderContext.disableVertexAttribArray(a)},b.prototype.drawCall=function(a,b){this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER,a),this.renderContext.drawElements(this.renderContext.TRIANGLES,b,this.renderContext.UNSIGNED_SHORT,0)},b.prototype.drawLine=function(a,b){this.renderContext.bindBuffer(this.renderContext.ELEMENT_ARRAY_BUFFER,a),this.renderContext.drawElements(this.renderContext.LINES,b,this.renderContext.UNSIGNED_SHORT,0)},b.prototype.setRenderTexture=function(a,b,c,d,e){void 0===e&&(e=!0),e&&this._contextSetTest.testTexture(b,c)||(0==d?this.renderContext.activeTexture(this.renderContext.TEXTURE0):1==d?this.renderContext.activeTexture(this.renderContext.TEXTURE1):2==d?this.renderContext.activeTexture(this.renderContext.TEXTURE2):3==d?this.renderContext.activeTexture(this.renderContext.TEXTURE3):4==d?this.renderContext.activeTexture(this.renderContext.TEXTURE4):5==d?this.renderContext.activeTexture(this.renderContext.TEXTURE5):6==d&&this.renderContext.activeTexture(this.renderContext.TEXTURE6),this.renderContext.bindTexture(this.renderContext.TEXTURE_2D,c),this.renderContext.uniform1i(a.getWebGLUniformLocation(b),d),this.setTextureNum++)},b.prototype.setRenderTextureCube=function(a,b,c,d){0==d?this.renderContext.activeTexture(this.renderContext.TEXTURE0):1==d?this.renderContext.activeTexture(this.renderContext.TEXTURE1):2==d?this.renderContext.activeTexture(this.renderContext.TEXTURE2):3==d?this.renderContext.activeTexture(this.renderContext.TEXTURE3):4==d?this.renderContext.activeTexture(this.renderContext.TEXTURE4):5==d?this.renderContext.activeTexture(this.renderContext.TEXTURE5):6==d&&this.renderContext.activeTexture(this.renderContext.TEXTURE6),this.renderContext.bindTexture(this.renderContext.TEXTURE_CUBE_MAP,c),this.renderContext.uniform1i(this.renderContext.getUniformLocation(a,b),d)},b.prototype.updateTexture=function(a,b,c,d){this.renderContext.bindTexture(this.renderContext.TEXTURE_2D,a),this.renderContext.texSubImage2D(this.renderContext.TEXTURE_2D,0,b,c,this.renderContext.RGBA,this.renderContext.UNSIGNED_BYTE,d)},b.prototype.getTexture=function(b,c,d,e){void 0===c&&(c=0),void 0===d&&(d=0),void 0===e&&(e=0);var f=new a.Rectangle(0,0,Math.pow(2,Math.ceil(Math.log(b.width)/Math.log(2))),Math.pow(2,Math.ceil(Math.log(b.height)/Math.log(2))));if(f.width!=b.width||f.height!=b.height){var g=a.UIManager.getInstance().getContext2D(f.width,f.height,!1);return g.drawImage(b,0,0,b.width,b.height,0,0,f.width,f.height),this.getTexture(g.canvas,0,0)}var h=this.renderContext.createTexture();this.renderContext.bindTexture(this.renderContext.TEXTURE_2D,h),this.renderContext.texImage2D(this.renderContext.TEXTURE_2D,0,this.renderContext.RGBA,this.renderContext.RGBA,this.renderContext.UNSIGNED_BYTE,b);var i;i=0==d?this.renderContext.LINEAR:this.renderContext.NEAREST;var j;return 0==d?0==e?j=this.renderContext.LINEAR:1==e?j=this.renderContext.LINEAR_MIPMAP_LINEAR:2==e&&(j=this.renderContext.LINEAR_MIPMAP_NEAREST):0==e?j=this.renderContext.NEAREST:1==e?j=this.renderContext.NEAREST_MIPMAP_LINEAR:2==e&&(j=this.renderContext.NEAREST_MIPMAP_NEAREST),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_MAG_FILTER,i),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_MIN_FILTER,j),0==c?(this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_S,this.renderContext.REPEAT),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_T,this.renderContext.REPEAT)):(this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_S,this.renderContext.CLAMP_TO_EDGE),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_T,this.renderContext.CLAMP_TO_EDGE)),0!=e&&this.renderContext.generateMipmap(this.renderContext.TEXTURE_2D),h},b.prototype.creatTexture=function(a,b,c){void 0===c&&(c=0);var d=this.renderContext.createTexture();return this.renderContext.bindTexture(this.renderContext.TEXTURE_2D,d),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_MAG_FILTER,this.renderContext.LINEAR),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_MIN_FILTER,this.renderContext.LINEAR),0==c?(this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_S,this.renderContext.REPEAT),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_T,this.renderContext.REPEAT)):(this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_S,this.renderContext.CLAMP_TO_EDGE),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_WRAP_T,this.renderContext.CLAMP_TO_EDGE)),this.renderContext.texImage2D(this.renderContext.TEXTURE_2D,0,this.renderContext.RGB,a,b,0,this.renderContext.RGB,this.renderContext.UNSIGNED_BYTE,null),d},b.prototype.createFramebuffer=function(){var a=this.renderContext.createFramebuffer();return this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER,a),a},b.prototype.deleteBuffer=function(a){this.renderContext.deleteBuffer(a),0!=this.renderContext.getError()},b.prototype.deleteTexture=function(a){this.renderContext.deleteTexture(a)},b.prototype.deleteShader=function(a){this.renderContext.deleteShader(a.vShader),this.renderContext.deleteShader(a.fShader),this.renderContext.deleteProgram(a.program)},b.prototype.cullFaceBack=function(a){this._contextSetTest.testCull(a)||(a?(this.renderContext.enable(this.renderContext.CULL_FACE),this.renderContext.cullFace(this.renderContext.BACK)):this.renderContext.disable(this.renderContext.CULL_FACE))},b.prototype.getFBO=function(){var a=c.fw,b=c.fh,d=this.renderContext.createFramebuffer();this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER,d);var e=this.renderContext.createRenderbuffer();this.renderContext.bindRenderbuffer(this.renderContext.RENDERBUFFER,e),this.renderContext.renderbufferStorage(this.renderContext.RENDERBUFFER,this.renderContext.DEPTH_COMPONENT16,a,b),this.renderContext.framebufferRenderbuffer(this.renderContext.FRAMEBUFFER,this.renderContext.DEPTH_ATTACHMENT,this.renderContext.RENDERBUFFER,e);var f=this.renderContext.createTexture();this.renderContext.bindTexture(this.renderContext.TEXTURE_2D,f),this.renderContext.texImage2D(this.renderContext.TEXTURE_2D,0,this.renderContext.RGBA,a,b,0,this.renderContext.RGBA,this.renderContext.UNSIGNED_BYTE,null),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_MAG_FILTER,this.renderContext.LINEAR),this.renderContext.texParameteri(this.renderContext.TEXTURE_2D,this.renderContext.TEXTURE_MIN_FILTER,this.renderContext.LINEAR),this.renderContext.framebufferTexture2D(this.renderContext.FRAMEBUFFER,this.renderContext.COLOR_ATTACHMENT0,this.renderContext.TEXTURE_2D,f,0),this.renderContext.bindTexture(this.renderContext.TEXTURE_2D,null),this.renderContext.bindRenderbuffer(this.renderContext.RENDERBUFFER,null),this.renderContext.bindFramebuffer(this.renderContext.FRAMEBUFFER,null);var g=new c;return g.frameBuffer=d,g.depthBuffer=e,g.texture=f,g},b.prototype.clearTest=function(){this._contextSetTest.clear()},b}();a.Context3D=b;var c=function(){function a(){}return a.fw=512,
a.fh=512,a}();a.FBO=c;var d=function(){function a(){this.enableVaAry=new Array,this.vaAry=new Array,this._blendType=-1e3,this._cullType=!1,this._zbufferType=!0,this._vpMatrix=!1}return a.prototype.testTexture=function(a,b){return this._textureDic[a]==b?!0:(this._textureDic[a]=b,!1)},a.prototype.testProgram=function(a){return this._program==a?!0:(this._program=a,this._textureDic=new Object,this._vpMatrix=!1,!1)},a.prototype.testVa=function(a){return this._vabuffer==a?!0:(this._vabuffer=a,!1)},a.prototype.clear=function(){this._blendType=-1e3,this._cullType=!1,this._vpMatrix=!1,this._program=null,this._vabuffer=null},a.prototype.testBlend=function(a){return this._blendType==a?!0:(this._blendType=a,!1)},a.prototype.testCull=function(a){return this._cullType==a?!0:(this._cullType=a,!1)},a.prototype.testZbuffer=function(a){return this._zbufferType==a?!0:(this._zbufferType=a,!1)},a.prototype.testVp=function(){return this._vpMatrix?!0:(this._vpMatrix=!0,!1)},a}();a.ContextSetTest=d}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return Object.defineProperty(a,"viewMatrx3D",{get:function(){return a._viewMatrx3D},set:function(b){a._viewMatrx3D=b},enumerable:!0,configurable:!0}),a.sceneViewHW=500,a.fileRoot="res/",a.verticalScene=!1,a.effectsLev=2,a.camFar=1e3,a.frameTime=1e3/60,a.MAX_NUMBER=1e7,a.user=0,a.scaleLight=[2],a.useByte=!0,a.fogColor=[0,0,0],a.fogData=[1e3,.003],a.gameAngle=0,a.sceneNumId=0,a.supportBlob=!1,a}();a.Scene_data=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=a.call(this)||this;return b.sceneVisible=!0,b._hasDestory=!1,b._onStage=!1,b}return __extends(b,a),b.prototype.update=function(){},Object.defineProperty(b.prototype,"onStage",{get:function(){return this._onStage},enumerable:!0,configurable:!0}),b.prototype.addStage=function(){this._onStage=!0},b.prototype.removeStage=function(){this._onStage=!1},b.prototype.resize=function(){},b.prototype.destory=function(){this.objData&&this.objData.useNum--},b}(a.Object3D);a.Display3D=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.time=0,c.dynamic=!1,c._rotationMatrix=new a.Matrix3D,c}return __extends(c,b),Object.defineProperty(c.prototype,"aabbVect",{get:function(){if(!this._aabbVect){var b=this.aabb,c=b.x,d=b.y,e=b.z,f=b.width,g=b.height,h=b.depth;this._aabbVect=new Array,this._aabbVect.push(new a.Vector3D(c,d,e)),this._aabbVect.push(new a.Vector3D(c+f,d,e)),this._aabbVect.push(new a.Vector3D(c,d+g,e)),this._aabbVect.push(new a.Vector3D(c,d,e+h)),this._aabbVect.push(new a.Vector3D(c+f,d+g,e)),this._aabbVect.push(new a.Vector3D(c+f,d,e+h)),this._aabbVect.push(new a.Vector3D(c,d+g,e+h)),this._aabbVect.push(new a.Vector3D(c+f,d+g,e+h))}return this._aabbVect},enumerable:!0,configurable:!0}),c.prototype.setObjUrl=function(b){var c=this;this.objurl=b,a.ObjDataManager.getInstance().getObjData(a.Scene_data.fileRoot+b,function(b){c.objData=b,c.material&&(c.objData.tangentBuffer||a.ObjDataManager.getInstance().creatTBNBuffer(c.objData))})},c.prototype.setPicUrl=function(b){var c=this;this.picUrl=b,a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+b,function(a){c.baseTexture=a})},c.prototype.setLightMapUrl=function(b){var c=this;if(b&&""!=b){var d=a.Scene_data.fileRoot+b;a.TextureManager.getInstance().getTexture(d,function(a){c.lightMapTextureRes=a})}},Object.defineProperty(c.prototype,"lightMapTexture",{get:function(){return!this.lightMapTextureRes,this.lightMapTextureRes.texture},enumerable:!0,configurable:!0}),c.prototype.setMaterialUrl=function(b,c){var d=this;void 0===c&&(c=null),b=b.replace("_byte.txt",".txt"),b=b.replace(".txt","_byte.txt"),this.materialUrl=a.Scene_data.fileRoot+b,a.MaterialManager.getInstance().getMaterialByte(this.materialUrl,function(b){d.material=b,d.material.useNormal&&d.objData&&!d.objData.tangentBuffer&&a.ObjDataManager.getInstance().creatTBNBuffer(d.objData),(d.material.usePbr||d.material.directLight)&&(d._rotationData=new Float32Array(9),d.updateRotationMatrix()),c&&(d.materialParam=new a.MaterialBaseParam,d.materialParam.setData(d.material,c))},null,!0,a.MaterialShader.MATERIAL_SHADER,a.MaterialShader)},Object.defineProperty(c.prototype,"lightProbe",{get:function(){return this._lightProbe},set:function(b){if(this._lightProbe=b,this._lightProbe&&!this.resultSHVec){this.resultSHVec=new Array;for(var c=[.4444730390920146,-.3834955622240026,-.33124467509627725,.09365654209093091,-.05673310882817577,.2120523322966496,.02945768486978205,-.04965996229802928,-.1136529129285836],d=0;9>d;d++)this.resultSHVec.push(new a.Vector3D(c[d],c[d],c[d]))}},enumerable:!0,configurable:!0}),c.prototype.update=function(){(!this.dynamic||this.sceneVisible)&&this.updateMaterial()},c.prototype.updateMaterial=function(){this.material&&this.objData&&(a.Scene_data.context3D.setBlendParticleFactors(this.material.blendMode),a.Scene_data.context3D.cullFaceBack(this.material.backCull),this.updateBind(),a.Scene_data.context3D.setProgram(this.material.program),a.Scene_data.context3D.setWriteDepth(this.material.writeZbuffer),a.Scene_data.context3D.setVcMatrix4fv(this.material.shader,"posMatrix3D",this.posMatrix.m),this.setCam(),this.setMaterialVc(this.material,this.materialParam),this.setMaterialTexture(this.material,this.materialParam),this.setDirectLight(this.material),this.setMaterialVa(),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum))},c.prototype.setMaterialVa=function(){this.objData.compressBuffer?this.setMaterialVaCompress():this.setMaterialVaIndependent()},c.prototype.setMaterialVaIndependent=function(){a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,2,this.objData.uvBuffer),this.material.directLight||this.material.noLight||a.Scene_data.context3D.setVa(2,2,this.objData.lightUvBuffer),(this.material.usePbr||this.material.directLight)&&(a.Scene_data.context3D.setVa(3,3,this.objData.normalsBuffer),a.Scene_data.context3D.setVcMatrix3fv(this.material.shader,"rotationMatrix3D",this._rotationData)),this.material.useNormal&&(a.Scene_data.context3D.setVa(4,3,this.objData.tangentBuffer),a.Scene_data.context3D.setVa(5,3,this.objData.bitangentBuffer))},c.prototype.setMaterialVaCompress=function(){var b=a.Scene_data.context3D.pushVa(this.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.objData.stride,this.objData.uvsOffsets),this.material.directLight||this.material.noLight||a.Scene_data.context3D.setVaOffset(2,2,this.objData.stride,this.objData.lightuvsOffsets),(this.material.usePbr||this.material.directLight)&&(a.Scene_data.context3D.setVaOffset(3,3,this.objData.stride,this.objData.normalsOffsets),a.Scene_data.context3D.setVcMatrix3fv(this.material.shader,"rotationMatrix3D",this._rotationData)),this.material.useNormal&&(a.Scene_data.context3D.setVaOffset(4,3,this.objData.stride,this.objData.tangentsOffsets),a.Scene_data.context3D.setVaOffset(5,3,this.objData.stride,this.objData.bitangentsOffsets)))},c.prototype.setDirectLight=function(b){b.directLight&&(a.Scene_data.context3D.setVc3fv(b.shader,"ambientColor",a.Scene_data.light.ambientColor),a.Scene_data.context3D.setVc3fv(b.shader,"sunDirect",a.Scene_data.light.sunDirect),a.Scene_data.context3D.setVc3fv(b.shader,"sunColor",a.Scene_data.light.sunColor))},c.prototype.setCam=function(){a.Scene_data.context3D.setVpMatrix(this.material.shader,a.Scene_data.vpMatrix.m)},c.prototype.setBind=function(b,c){this.bindTarget=b,this.bindSocket=c,this.bindMatrix=new a.Matrix3D},c.prototype.setGroup=function(b,c,d){this._isInGroup=!0,this._groupPos=b,this._groupRotation=c,this._groupScale=d,this.groupMatrix=new a.Matrix3D,this.groupRotationMatrix=new a.Matrix3D,this.groupMatrix.isIdentity=!1,this.groupMatrix.identity(),this.groupMatrix.appendScale(d.x,d.y,d.z),this.groupMatrix.appendRotation(c.x,a.Vector3D.X_AXIS),this.groupMatrix.appendRotation(c.y,a.Vector3D.Y_AXIS),this.groupMatrix.appendRotation(c.z,a.Vector3D.Z_AXIS),this.groupMatrix.appendTranslation(b.x,b.y,b.z),this.groupRotationMatrix.isIdentity=!1,this.groupRotationMatrix.identity(),this.groupRotationMatrix.prependRotation(c.z,a.Vector3D.Z_AXIS),this.groupRotationMatrix.prependRotation(c.y,a.Vector3D.Y_AXIS),this.groupRotationMatrix.prependRotation(c.x,a.Vector3D.X_AXIS)},c.prototype.updateBind=function(){this.bindTarget&&(this.posMatrix.identity(),this.posMatrix.appendScale(this._scaleX,this._scaleY,this._scaleZ),this._isInGroup&&this.posMatrix.append(this.groupMatrix),this.bindTarget.getSocket(this.bindSocket,this.bindMatrix),this.posMatrix.append(this.bindMatrix),this.bindMatrix.copyTo(this._rotationMatrix),this._rotationMatrix.identityPostion(),this._isInGroup&&this._rotationMatrix.prepend(this.groupRotationMatrix),this.sceneVisible=this.bindTarget.visible)},c.prototype.setBaseMaterialVc=function(b){var c=0;b.hasTime&&(c=(a.TimeUtil.getTimer()-this.time)%1e5*.001),(b.hasTime||b.usePbr||b.useKill)&&a.Scene_data.context3D.setVc4fv(b.shader,"fc0",[1,0,b.killNum,c]),b.scaleLightMap&&a.Scene_data.context3D.setVcFloat(b.shader,"scalelight",a.Scene_data.scaleLight),(b.usePbr||1==b.fogMode)&&this.setCamPos(b),0!=b.fogMode&&(a.Scene_data.context3D.setVc2fv(b.shader,"fogdata",a.Scene_data.fogData),a.Scene_data.context3D.setVc3fv(b.shader,"fogcolor",a.Scene_data.fogColor))},c.prototype.setCamPos=function(b){b.updateCam(a.Scene_data.cam3D.x/100,a.Scene_data.cam3D.y/100,a.Scene_data.cam3D.z/100)},c.prototype.setMaterialVc=function(b,c){if(void 0===c&&(c=null),!(b.fcNum<=0)){var d=0;b.hasTime&&(d=(a.TimeUtil.getTimer()-this.time)%1e5*.001),b.update(d),this.setCamPos(b),c&&c.update(),a.Scene_data.context3D.setVc4fv(b.shader,"fc",b.fcData)}},c.prototype.setMaterialTexture=function(b,c){void 0===c&&(c=null);for(var d=b.texList,e=0;e<d.length;e++)if(d[e].type==a.TexItem.LIGHTMAP)a.Scene_data.context3D.setRenderTexture(b.shader,d[e].name,this.lightMapTexture,d[e].id);else if(d[e].type==a.TexItem.LTUMAP&&a.Scene_data.pubLut)a.Scene_data.context3D.setRenderTexture(b.shader,d[e].name,a.Scene_data.pubLut,d[e].id);else if(d[e].type==a.TexItem.CUBEMAP)if(b.useDynamicIBL);else{var f=Math.floor(5*b.roughness);if(a.Scene_data.skyCubeMap){var g=a.Scene_data.skyCubeMap[f];a.Scene_data.context3D.setRenderTextureCube(b.program,d[e].name,g,d[e].id)}}else d[e].texture&&a.Scene_data.context3D.setRenderTexture(b.shader,d[e].name,d[e].texture,d[e].id);if(c)for(e=0;e<c.dynamicTexList.length;e++)c.dynamicTexList[e].target&&a.Scene_data.context3D.setRenderTexture(b.shader,c.dynamicTexList[e].target.name,c.dynamicTexList[e].texture,c.dynamicTexList[e].target.id)},c.prototype.checkMaterialTexture=function(b){for(var c=b.texList,d=0;d<c.length;d++)if(c[d].type==a.TexItem.LIGHTMAP){if(!this.lightMapTexture)return!1}else if(c[d].type==a.TexItem.LTUMAP){if(!a.Scene_data.pubLut)return!1}else if(c[d].type==a.TexItem.CUBEMAP){if(b.useDynamicIBL);else if(!a.Scene_data.skyCubeMap)return!1}else if(!c[d].texture)return!1;return!0},c.prototype.updateRotationMatrix=function(){try{this._rotationMatrix.identity(),this._rotationMatrix.appendRotation(this._rotationX,a.Vector3D.X_AXIS),this._rotationMatrix.appendRotation(this._rotationY,a.Vector3D.Y_AXIS),this._rotationMatrix.appendRotation(this._rotationZ,a.Vector3D.Z_AXIS),this._rotationData&&this._rotationMatrix.getRotaion(this._rotationData)}catch(b){}},c.prototype.setPos=function(a){this.x=a.x,this.y=a.y+10,this.z=a.z},c.prototype.destory=function(){b.prototype.destory.call(this),this.name=null,this.objurl=null,this.picUrl=null,this.materialUrl=null,this.material&&this.material.useNum--,this.materialParam&&(this.materialParam.destory(),this.materialParam=null),this.lightMapTextureRes&&this.lightMapTextureRes.clearUseNum(),this._rotationMatrix=null,this._rotationData=null,this.bindMatrix=null,this.bindTarget=null,this.bindSocket=null,this._groupPos=null,this._groupRotation=null,this._groupScale=null,this.groupMatrix=null,this.groupRotationMatrix=null},c}(a.Display3D);a.Display3DSprite=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.shader=a.ProgrmaManager.getInstance().getProgram(a.SkyShader.Sky_Shader),c.program=c.shader.program,c}return __extends(c,b),c.prototype.setObjUrl=function(b){var c=this;this.objurl=b,a.ObjDataManager.getInstance().getObjData(a.Scene_data.fileRoot+b,function(a){c.objData=a})},c.prototype.setCubeUrl=function(b){var c=this;a.TextureManager.getInstance().loadCubeTexture(b,function(a){c.cubeTextList=a})},c.prototype.update=function(){a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"posMatrix3D",this.posMatrix.m),this.cubeTextList&&a.Scene_data.context3D.setRenderTextureCube(this.program,"s_texture",this.cubeTextList[0],0),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.normalsBuffer),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)},c}(a.Display3D);a.Display3DSky=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._completeState=0,a._defaultAction="stand",a._curentFrame=0,a._actionTime=0,a._fileScale=1,a._hasDestory=!1,a._isSinging=!1,a.meshVisible=!0,a._nextScale=1,a.locationDic=new Object,a._animDic=new Object,a._partDic=new Object,a._partUrl=new Object,a._preLoadActionDic=new Object,a._waitLoadActionDic=new Object,a.showCapsule=!1,a._enablePhysics=!1,a}return __extends(c,b),Object.defineProperty(c.prototype,"isSinging",{get:function(){return this._isSinging},set:function(a){this._isSinging=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"curentAction",{get:function(){return this._curentAction},set:function(a){this._curentAction=a},enumerable:!0,configurable:!0}),c.prototype.fixAstartData=function(a){},c.prototype.setRoleUrl=function(b){var c=this;this.clearMesh(),a.MeshDataManager.getInstance().getMeshData(b,function(a){return c._hasDestory?void a.useNum--:(c._skinMesh=a,c.fileScale=a.fileScale,c.onStage&&c.addSkinMeshParticle(),c._animDic=a.animDic,void c.onMeshLoaded())})},c.prototype.onMeshLoaded=function(){this.dispatchEvent(new a.BaseEvent(a.BaseEvent.COMPLETE))},c.prototype.clearMesh=function(){this.removeSkinMeshParticle(),this._skinMesh&&this._skinMesh.useNum--,this._skinMesh=null,this._animDic=new Object},c.prototype.addSkinMeshParticle=function(){if(this._skinMesh){var b=new Array;this._partDic.mesh=b;var c=this._skinMesh.meshAry;if(c)for(var d=0;d<c.length;d++)for(var e=c[d].particleAry,f=0;f<e.length;f++){var g,h=e[f];g=a.ParticleManager.getInstance().getParticleByte(a.Scene_data.fileRoot+h.url),g.sourceData||console.log("particle.sourceData error"),g.dynamic=!0,g.bindSocket=h.socketName,b.push(g),g.bindTarget=this,a.ParticleManager.getInstance().addParticle(g)}}},c.prototype.removeSkinMeshParticle=function(){var b=this._partDic.mesh;if(b){for(var c=0;c<b.length;c++)a.ParticleManager.getInstance().removeParticle(b[c]),b[c].destory();this._partDic.mesh=null}},c.prototype.roleResCom=function(a,b){},c.prototype.setMeshUrl=function(b,c){var d=this;void 0===c&&(c=1),this._meshUrl=a.Scene_data.fileRoot+b,a.MeshDataManager.getInstance().getMeshData(this._meshUrl,function(a){d._skinMesh=a,1!=c&&(d._skinMesh.type=1);for(var b in d._animDic)d.processAnimByMesh(d._animDic[b]);a.loadMaterial(function(a){d.loadMaterialCom(a)}),d.fileScale=a.fileScale},c)},Object.defineProperty(c.prototype,"scale",{get:function(){return this._nextScale},set:function(a){this._nextScale=a,this._scaleX=a*this._fileScale,this._scaleY=a*this._fileScale,this._scaleZ=a*this._fileScale,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"fileScale",{set:function(a){this._fileScale=a,this._scaleX=this._nextScale*a,this._scaleY=this._nextScale*a,this._scaleZ=this._nextScale*a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"shadow",{set:function(b){b?this._shadow||(this._shadow=a.ShadowManager.getInstance().addShadow()):this._shadow&&a.ShadowManager.getInstance().removeShadow(this._shadow)},enumerable:!0,configurable:!0}),c.prototype.setShadowSize=function(a){this._shadow&&(this._shadow.size=a)},c.prototype.addStage=function(){b.prototype.addStage.call(this),this.addSkinMeshParticle(),this._shadow&&(this._shadow.visible=!0)},c.prototype.removeStage=function(){b.prototype.removeStage.call(this),this._shadow&&a.ShadowManager.getInstance().removeShadow(this._shadow);for(var c in this._partDic)for(var d=this._partDic[c],e=0;e<d.length;e++)d[e]instanceof a.CombineParticle?a.ParticleManager.getInstance().removeParticle(d[e]):d[e]instanceof a.Display3DSprite&&a.SceneManager.getInstance().removeSpriteDisplay(d[e])},c.prototype.loadMaterialCom=function(a){a.lightProbe&&(this.lightProbe=!0)},c.prototype.setCollision=function(a,b){},c.prototype.applyVisible=function(){},c.prototype.removePart=function(b){var c=this._partDic[b];if(c){for(var d=0;d<c.length;d++)c[d]instanceof a.CombineParticle?(a.ParticleManager.getInstance().removeParticle(c[d]),c[d].destory()):c[d]instanceof a.Display3DSprite&&(a.SceneManager.getInstance().removeSpriteDisplay(c[d]),c[d].destory());this._partDic[b]=null,this._partUrl[b]=null,delete this._partDic[b],delete this._partUrl[b]}},c.prototype.addPart=function(b,c,d){var e=this;if(this._partUrl[b]!=d){this._partUrl[b]&&this.removePart(b),this._partDic[b]||(this._partDic[b]=new Array),this._partUrl[b]=d;var f=this._partDic[b];a.GroupDataManager.getInstance().getGroupData(a.Scene_data.fileRoot+d,function(a){e.loadPartRes(c,a,f)})}},c.prototype.loadPartRes=function(b,c,d){if(!this._hasDestory){for(var e=0;e<c.dataAry.length;e++){var f,g,h,i=c.dataAry[e];if(i.isGroup&&(f=new a.Vector3D(i.x,i.y,i.z),g=new a.Vector3D(i.rotationX,i.rotationY,i.rotationZ),h=new a.Vector3D(i.scaleX,i.scaleY,i.scaleZ)),i.types==a.BaseRes.SCENE_PARTICLE_TYPE){var j=a.ParticleManager.getInstance().getParticleByte(a.Scene_data.fileRoot+i.particleUrl);d.push(j),j.bindTarget=this,j.bindSocket=b,j.dynamic=!0,a.ParticleManager.getInstance().addParticle(j),i.isGroup&&j.setGroup(f,g,h)}else if(i.types==a.BaseRes.PREFAB_TYPE){var k=new a.Display3DSprite;k.setObjUrl(i.objUrl),k.setMaterialUrl(i.materialUrl,i.materialInfoArr),k.dynamic=!0,d.push(k),k.setBind(this,b),a.SceneManager.getInstance().addSpriteDisplay(k),i.isGroup&&k.setGroup(f,g,h)}}this.applyVisible()}},c.prototype.getSocket=function(b,c){if(c.identity(),!this._skinMesh)return void c.append(this.posMatrix);if(!this._skinMesh.boneSocketDic[b])return void((b="none")?c.appendTranslation(this._x,this._y,this._z):c.append(this.posMatrix));var d,e=this._skinMesh.boneSocketDic[b],f=e.index;d=this.getFrameMatrix(f),c.appendScale(1/this._scaleX,1/this._scaleY,1/this._scaleZ),c.appendRotation(e.rotationX,a.Vector3D.X_AXIS),c.appendRotation(e.rotationY,a.Vector3D.Y_AXIS),c.appendRotation(e.rotationZ,a.Vector3D.Z_AXIS),c.appendTranslation(e.x,e.y,e.z),d&&(c.append(this._skinMesh.meshAry[this._skinMesh.meshAry.length-1].bindPosInvertMatrixAry[f]),c.append(d)),c.append(this.posMatrix)},c.prototype.getSunType=function(){return 0},c.prototype.getFrameMatrix=function(a){if(this._animDic[this.curentAction]){var b=this._animDic[this.curentAction];return this._curentFrame>=b.matrixAry.length?b.matrixAry[0][a]:b.matrixAry[this._curentFrame][a]}if(this._animDic[this._defaultAction]){var b=this._animDic[this._defaultAction];return b.matrixAry[this._curentFrame][a]}return null},c.prototype.addAction=function(a,b,c){void 0===c&&(c=!1),this._preLoadActionDic[a]=b,a==this._defaultAction||a==this.curentAction?this.setAnimUrl(a,b):c&&this.setAnimUrl(a,b)},c.prototype.setAnimUrl=function(b,c){var d=this;this._waitLoadActionDic[b]=!0,a.AnimManager.getInstance().getAnimData(c,function(a){d._animDic[b]=a,d.processAnimByMesh(a),d._waitLoadActionDic[b]=!1})},c.prototype.play=function(a,b,c){return void 0===b&&(b=0),void 0===c&&(c=!0),this.curentAction!=a?(this.curentAction=a,this._completeState=b,this._actionTime=0,this.updateFrame(0),this._animDic.hasOwnProperty(a)?!0:(!this._waitLoadActionDic[a]&&this._preLoadActionDic[a]&&this.setAnimUrl(a,this._preLoadActionDic[a]),!1)):void 0},c.prototype.processAnimByMesh=function(a){if(this._skinMesh&&!a.hasProcess){for(var b=0;b<a.matrixAry.length;b++)for(var c=a.matrixAry[b],d=0;d<c.length;d++)c[d].prepend(this._skinMesh.meshAry[0].bindPosMatrixAry[d]);a.hasProcess=!0}},c.prototype.update=function(){if(this._skinMesh){if(this.lightProbe&&(this.resultSHVec=a.LightProbeManager.getInstance().getData(new a.Vector3D(this.x,this.y+10,this.z))),this.updateBind(),this.meshVisible)for(var b=0;b<this._skinMesh.meshAry.length;b++)this.updateMaterialMesh(this._skinMesh.meshAry[b]);this.showCapsule&&this.updateShowCapsule()}},c.prototype.updateFrame=function(b){this._actionTime+=b;var c;if(this.curentAction&&this._animDic[this.curentAction])c=this.curentAction;else{if(!this._animDic[this._defaultAction])return;c=this._defaultAction}var d=this._animDic[c];this._curentFrame=float2int(this._actionTime/(2*a.Scene_data.frameTime)),this._curentFrame>=d.matrixAry.length&&(0==this._completeState?(this._actionTime=0,this._curentFrame=0):1==this._completeState?this._curentFrame=d.matrixAry.length-1:2==this._completeState?(this._curentFrame=0,this._completeState=0,this.changeAction(this.curentAction)):3==this._completeState)},c.prototype.changeAction=function(a){this.curentAction=this._defaultAction},c.prototype.destory=function(){b.prototype.destory.call(this),this._skinMesh&&this._skinMesh.useNum--;for(var c in this._partDic)for(var d=this._partDic[c],e=0;e<d.length;e++)d[e]instanceof a.CombineParticle?d[e].destory():d[e]instanceof a.Display3DSprite&&d[e].destory();this._partDic=null,this._hasDestory=!0},c.prototype.updateShowCapsule=function(){this.capsuleLineSprite?(this.capsuleLineSprite.x=this.x,this.capsuleLineSprite.y=this.y+this._capsule.radius,this.capsuleLineSprite.z=this.z,this.capsuleLineSprite.update()):(this.capsuleLineSprite=new a.LineDisplaySprite,this.capsuleLineSprite.clear(),this.capsuleLineSprite.baseColor=new a.Vector3D(1,0,0,1),this.drawCylinder(this._capsule.radius,this._capsule.height),this.drawBall(this._capsule.radius),this.capsuleLineSprite.upToGpu())},c.prototype.drawBall=function(b){var c,d,e,f,g,h,i,j=b,k=12;for(g=0;k>=g;g++)for(e=null,f=k/2;k>f;f++)c=new a.Vector3D(j,0,0),d=new a.Matrix3D,d.appendRotation(360/k*f,a.Vector3D.Z_AXIS),c=d.transformVector(c),h=new a.Matrix3D,h.appendRotation(360/k*g,a.Vector3D.Y_AXIS),c=h.transformVector(c),e&&this.capsuleLineSprite.makeLineMode(e,c),e=c.clone();for(g=1;4>=g;g++)for(h=new a.Matrix3D,h.appendRotation(-20*g,a.Vector3D.Z_AXIS),i=h.transformVector(new a.Vector3D(j,0,0)),e=null,f=0;k>f;f++)c=i.clone(),d=new a.Matrix3D,d.appendRotation(360/k*f,a.Vector3D.Y_AXIS),c=d.transformVector(c),e&&this.capsuleLineSprite.makeLineMode(e,c),f==k-1&&this.capsuleLineSprite.makeLineMode(i,c),e=c.clone()},c.prototype.drawCylinder=function(b,c){var d,e,f,g=b,h=c,i=12;for(f=0;i>f;f++){var j=new a.Vector3D(g,0,0),k=new a.Vector3D(g,+h,0),l=new a.Matrix3D;l.appendRotation(f*(360/i),a.Vector3D.Y_AXIS);var m=l.transformVector(j),n=l.transformVector(k);this.capsuleLineSprite.makeLineMode(m,n),this.capsuleLineSprite.makeLineMode(n,new a.Vector3D(0,+h,0)),f==i-1&&(this.capsuleLineSprite.makeLineMode(m,j),this.capsuleLineSprite.makeLineMode(n,k)),(d||e)&&(this.capsuleLineSprite.makeLineMode(m,d),this.capsuleLineSprite.makeLineMode(n,e)),d=m.clone(),e=n.clone()}},c.prototype.setVcMatrix=function(b){a.Scene_data.context3D.setVpMatrix(b.material.shader,a.Scene_data.vpMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"posMatrix3D",this.posMatrix.m)},c.prototype.setVa=function(a){a.compressBuffer?this.setVaCompress(a):this.setVaIndependent(a)},c.prototype.setVaIndependent=function(b){a.Scene_data.context3D.setVa(0,3,b.vertexBuffer),a.Scene_data.context3D.setVa(1,2,b.uvBuffer),a.Scene_data.context3D.setVa(2,4,b.boneIdBuffer),a.Scene_data.context3D.setVa(3,4,b.boneWeightBuffer),b.material.usePbr?(a.Scene_data.context3D.setVa(4,4,b.normalsBuffer),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"rotationMatrix3D",this._rotationMatrix.m),b.material.useNormal&&(a.Scene_data.context3D.setVa(5,4,b.tangentBuffer),a.Scene_data.context3D.setVa(6,4,b.bitangentBuffer))):(b.material.lightProbe||b.material.directLight)&&(a.Scene_data.context3D.setVa(4,4,b.normalsBuffer),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"rotationMatrix3D",this._rotationMatrix.m))},c.prototype.setVaCompress=function(b){var c=a.Scene_data.context3D.pushVa(b.vertexBuffer);c||(a.Scene_data.context3D.setVaOffset(0,3,b.stride,0),a.Scene_data.context3D.setVaOffset(1,2,b.stride,b.uvsOffsets),a.Scene_data.context3D.setVaOffset(2,4,b.stride,b.boneIDOffsets),a.Scene_data.context3D.setVaOffset(3,4,b.stride,b.boneWeightOffsets),b.material.usePbr?(a.Scene_data.context3D.setVaOffset(4,3,b.stride,b.normalsOffsets),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"rotationMatrix3D",this._rotationMatrix.m),b.material.useNormal&&(a.Scene_data.context3D.setVaOffset(5,3,b.stride,b.tangentsOffsets),a.Scene_data.context3D.setVaOffset(6,3,b.stride,b.bitangentsOffsets))):(b.material.lightProbe||b.material.directLight)&&(a.Scene_data.context3D.setVaOffset(4,3,b.stride,b.normalsOffsets),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"rotationMatrix3D",this._rotationMatrix.m)))},c.prototype.clearVa=function(){a.Scene_data.context3D.clearVa(2),a.Scene_data.context3D.clearVa(3),a.Scene_data.context3D.clearVa(4),a.Scene_data.context3D.clearVa(5),a.Scene_data.context3D.clearVa(6)},c.prototype.updateMaterialMesh=function(b){b.material&&(a.Scene_data.context3D.setProgram(b.material.program),a.Scene_data.context3D.cullFaceBack(!1),a.Scene_data.context3D.setBlendParticleFactors(b.material.blendMode),this.setVcMatrix(b),this.setMaterialVc(b.material,b.materialParam),this.setMaterialTexture(b.material,b.materialParam),this.setVa(b),this.setDirectLight(b.material),this.setMeshVc(b),a.Scene_data.context3D.drawCall(b.indexBuffer,b.treNum))},c.prototype.setLightProbeVc=function(b){if(b.lightProbe)for(var c=0;c<this.resultSHVec.length;c++)a.Scene_data.context3D.setVc3fv(b.shader,"sh["+c+"]",[this.resultSHVec[c].x,this.resultSHVec[c].y,this.resultSHVec[c].z])},c.prototype.setMeshVc=function(b){var c;if(this._animDic[this.curentAction])c=this._animDic[this.curentAction];else{if(!this._animDic[this._defaultAction])return;c=this._animDic[this._defaultAction]}var d=c.getBoneQPAryByMesh(b)[b.uid][this._curentFrame];d&&(a.Scene_data.context3D.setVc4fv(b.material.shader,"boneQ",d.quat),a.Scene_data.context3D.setVc3fv(b.material.shader,"boneD",d.pos))},c.prototype.setPos=function(a){b.prototype.setPos.call(this,a),this._shadow&&(this._shadow.x=a.x,this._shadow.y=a.y+8,this._shadow.z=a.z)},Object.defineProperty(c.prototype,"x",{get:function(){return this._x},set:function(a){this._x=a,this.updateMatrix(),this._shadow&&(this._shadow.x=a),this.changePos()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"y",{get:function(){return this._y},set:function(a){this._y=a,this.updateMatrix(),this._shadow&&(this._shadow.y=a),this.changePos()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"z",{get:function(){return this._z},set:function(a){this._z=a,this.updateMatrix(),this._shadow&&(this._shadow.z=a),this.changePos()},enumerable:!0,configurable:!0}),c.prototype.changePos=function(){},c}(a.Display3DSprite);a.Display3dMovie=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.batchNum=0,a.batchPos=new Array,a}return __extends(c,b),Object.defineProperty(c.prototype,"fileScale",{set:function(a){this._fileScale=a;for(var b=0;b<this.batchPos.length;b++)this.batchPos[b].fileScale=a},enumerable:!0,configurable:!0}),c.prototype.addSun=function(a){this.batchPos.push(a),a.fileScale=this._fileScale},c.prototype.setVcMatrix=function(b){a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"rotationMatrix3D",this._rotationMatrix.m);for(var c=0;c<this.batchPos.length;c++)a.Scene_data.context3D.setVcMatrix4fv(b.material.shader,"posMatrixAry["+c+"]",this.batchPos[c].posMatrix.m)},c.prototype.setLightProbeVc=function(a){},c.prototype.setVa=function(b){a.Scene_data.context3D.setVa(0,3,b.vertexBuffer),a.Scene_data.context3D.setVa(1,3,b.uvBuffer),a.Scene_data.context3D.setVa(2,4,b.boneIdBuffer),a.Scene_data.context3D.setVa(3,4,b.boneWeightBuffer),b.material.usePbr?(a.Scene_data.context3D.setVa(4,4,b.normalsBuffer),b.material.useNormal&&(a.Scene_data.context3D.setVa(5,4,b.tangentBuffer),a.Scene_data.context3D.setVa(6,4,b.bitangentBuffer))):(b.material.lightProbe||b.material.directLight)&&a.Scene_data.context3D.setVa(4,4,b.normalsBuffer)},c.prototype.addStage=function(){if(b.prototype.addStage.call(this),this.batchPos.length)for(var a=0;a<this.batchPos.length;a++)this.batchPos[a].add()},c.prototype.removeStage=function(){if(b.prototype.removeStage.call(this),this.batchPos.length)for(var a=0;a<this.batchPos.length;a++)this.batchPos[a].remove()},c}(a.Display3dMovie);a.Display3dBatchMovie=b;var c=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.posData=[0,0,0,10],a.hasReach=!1,a._fileScale=1,a}return __extends(c,b),Object.defineProperty(c.prototype,"shadow",{set:function(b){b&&(this._shadow||(this._shadow=a.ShadowManager.getInstance().addShadow(),this._shadow.x=this._x,this._shadow.y=this._y,this._shadow.z=this._z))},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"fileScale",{set:function(a){this._fileScale=a,this._scaleX*=a,this._scaleY*=a,this._scaleZ*=a,this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scale",{set:function(a){this._scaleX=a*this._fileScale,this._scaleY=a*this._fileScale,this._scaleZ=a*this._fileScale,this.posData[3]=20*a,
this.updateMatrix()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"x",{get:function(){return this._x},set:function(a){this._x=a,this.posData[0]=a,this.updateMatrix(),this._shadow&&(this.retinueShadowFix?this._shadow.x=a+this.retinueShadowFix.x:this._shadow.x=a)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"y",{get:function(){return this._y},set:function(a){this._y=a,this.posData[1]=a,this.updateMatrix(),this._shadow&&(this.retinueShadowFix?this._shadow.y=a+this.retinueShadowFix.y+2:this._shadow.y=a+2)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"z",{get:function(){return this._z},set:function(a){this._z=a,this.posData[2]=a,this.updateMatrix(),this._shadow&&(this.retinueShadowFix?this._shadow.z=a+this.retinueShadowFix.z:this._shadow.z=a)},enumerable:!0,configurable:!0}),c.prototype.add=function(){this._shadow&&(this._shadow.visible=!0)},c.prototype.remove=function(){this._shadow&&(this._shadow.visible=!1)},c}(a.Object3D);a.Movie3D=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.needUpdate=!1,c.locationFloat32=new Float32Array(0),c.shadowList=new Array,c.objData=new a.ObjData,c.shader=a.ProgrmaManager.getInstance().getProgram(a.Display3DShadowShader.Display3DShadowShader),c.program=c.shader.program,c.posProLocation=a.Scene_data.context3D.getLocation(c.program,"pos"),c}return __extends(c,b),c.prototype.addShadow=function(a){this.shadowList.push(a),a.display=this,this.applyObjData()},c.prototype.removeShadow=function(a){var b=this.shadowList.indexOf(a);-1!=b&&(this.shadowList.splice(b,1),this.applyObjData()),0==this.shadowList.length},c.prototype.stateChage=function(){for(var a=0;a<this.shadowList.length&&!this.shadowList[a].visible;a++);a==this.shadowList.length?this.needUpdate=!1:this.needUpdate=!0},c.prototype.hasIdle=function(){return this.shadowList.length<30},c.prototype.applyObjData=function(){this.objData.vertices.length=0,this.objData.uvs.length=0,this.objData.indexs.length=0;for(var b=1,c=0;c<this.shadowList.length;c++)this.objData.vertices.push(-b,0,b,b,0,b,b,0,-b,-b,0,-b),this.objData.uvs.push(0,0,c,0,1,c,1,1,c,1,0,c),this.objData.indexs.push(4*c,1+4*c,2+4*c,4*c,2+4*c,3+4*c);this.objData.treNum=6*this.shadowList.length,this.objData.vertexBuffer?(a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer,this.objData.vertices),a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer,this.objData.uvs),a.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer,this.objData.indexs)):(this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs))},c.prototype.update=function(){if(this.needUpdate&&0!=this.shadowList.length&&this.objData.treNum){a.Scene_data.context3D.setBlendParticleFactors(0),a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),this.locationFloat32.length!=4*this.shadowList.length&&(this.locationFloat32=new Float32Array(4*this.shadowList.length));for(var b=0;b<this.shadowList.length;b++)this.shadowList[b].visible?(this.locationFloat32[4*b+0]=this.shadowList[b].data[0],this.locationFloat32[4*b+1]=this.shadowList[b].data[1],this.locationFloat32[4*b+2]=this.shadowList[b].data[2],this.locationFloat32[4*b+3]=this.shadowList[b].data[3]):(this.locationFloat32[4*b+0]=0,this.locationFloat32[4*b+1]=1e4,this.locationFloat32[4*b+2]=0,this.locationFloat32[4*b+3]=0);a.Scene_data.context3D.setVc4fvLocation(this.posProLocation,this.locationFloat32),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",c.texture,0),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)}},c}(a.Display3D);a.Display3dShadow=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._scaleData=[1,1],c.shader=a.ProgrmaManager.getInstance().getProgram(a.UIImageShader.UI_IMG_SHADER),c.program=c.shader,c.initData(),c}return __extends(c,b),c.prototype.initData=function(){this.objData=new a.ObjData,this.objData.vertices.push(-1,1,.99,1,1,.99,1,-1,.99,-1,-1,.99),this.objData.uvs.push(0,0,1,0,1,1,0,1),this.objData.indexs.push(0,1,2,0,2,3),this.objData.treNum=6,this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs)},c.prototype.resize=function(){this.appleyPos()},c.prototype.setImgInfo=function(a,b,c){this.setImgUrl(a),this._width=b,this._height=c},c.prototype.setImgUrl=function(a){},c.prototype.appleyPos=function(){var b=this._width/a.Scene_data.stageWidth,c=this._height/a.Scene_data.stageHeight;c>b?(this._scaleData[0]=1,this._scaleData[1]=this._height/a.Scene_data.stageHeight/b):(this._scaleData[0]=this._width/a.Scene_data.stageWidth/c,this._scaleData[1]=1)},c.prototype.update=function(){this.appleyPos(),a.Scene_data.context3D.setBlendParticleFactors(0),a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,2,this.objData.uvBuffer),a.Scene_data.context3D.setVc2fv(this.shader,"scale",this._scaleData),a.Scene_data.context3D.setVcFloat(this.shader,"alpha",[1]),a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.texture,0),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)},c}(a.Display3D);a.Display3dBg=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.batchPos=new Array,c._time=0,c._allFrame=12,c._uvData=[0,0],c._uWidth=0,c._vWidth=0,c._state=0,c.frameRate=3,c.objData=new a.ObjData,c.watchCaramMatrix=new a.Matrix3D,c.shader=a.ProgrmaManager.getInstance().getProgram(a.Movie2DShader.MOVIE2D_SHADER),c.program=c.shader.program,c}return __extends(c,b),c.prototype.update=function(){this.watchCaramMatrix.identity(),this.watchCaramMatrix.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),this.watchCaramMatrix.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS),a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"watchCamMatrix3D",this.watchCaramMatrix.m);for(var b=0;b<this.batchPos.length;b++)a.Scene_data.context3D.setVc4fv(this.shader,"posdata["+b+"]",this.batchPos[b].posData);a.Scene_data.context3D.setVc2fv(this.shader,"outuv",this._uvData),a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.movieTexture,0),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)},c.prototype.updateFrame=function(b){this._time+=b;var c=float2int(this._time/(2*a.Scene_data.frameTime)/this.frameRate);c>=this._allFrame&&(0==this._state?(this._time=0,c=0):1==this._state?c=this._allFrame-1:2==this._state?(this.play("stand"),c=0,this._state=0):3==this._state),this._uvData[0]=c*this._uWidth},c.prototype.play=function(a,b){void 0===b&&(b=0),this._state=b,this._time=0,"walk"==a?this._uvData[1]=this._vWidth:-1!=a.indexOf("attack")?this._uvData[1]=2*this._vWidth:this._uvData[1]=0},c.prototype.addSun=function(a){this.batchPos.push(a)},c.prototype.setUrl=function(a){},c.prototype.initData=function(b,c,d,e,f,g){void 0===g&&(g=!1),this.objData.vertices.length=0,this.objData.uvs.length=0,this.objData.indexs.length=0,this._uWidth=d,this._vWidth=e,this._allFrame=f;for(var h=0;b>h;h++){this.objData.vertices.push(-.5*c,1,0,.5*c,1,0,.5*c,0,0,-.5*c,0,0);var i=0;g&&(i=float2int(f*Math.random())*d),this.objData.uvs.push(0+i,0,h,d+i,0,h,d+i,1*e,h,0+i,1*e,h),this.objData.indexs.push(4*h,1+4*h,2+4*h,4*h,2+4*h,3+4*h)}this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer?(a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer,this.objData.vertices),a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer,this.objData.uvs),a.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer,this.objData.indexs)):(this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs))},c.prototype.addStage=function(){if(b.prototype.addStage.call(this),this.batchPos.length)for(var a=0;a<this.batchPos.length;a++)this.batchPos[a].add()},c.prototype.removeStage=function(){if(b.prototype.removeStage.call(this),this.batchPos.length)for(var a=0;a<this.batchPos.length;a++)this.batchPos[a].remove()},c}(a.Display3D);a.Display2dMovie=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.uiMatrix=new a.Matrix3D,c.uiMatrix.prependTranslation(0,0,600),c.uiMatrix.prependRotation(-15,a.Vector3D.X_AXIS),c.uiMatrix.prependRotation(0,a.Vector3D.Y_AXIS),c.uiViewMatrix=new a.Matrix3D,c}return __extends(c,b),c.prototype.loadRes=function(b){var c=this;this.modelRes||(this.modelRes=new a.ModelRes),this.modelRes.load(a.Scene_data.fileRoot+getModelUrl(b),function(){c.loadResComFinish()})},c.prototype.loadResComFinish=function(){this.setObjUrl(this.modelRes.objUrl),this.setMaterialUrl(this.modelRes.materialUrl)},c.prototype.loadGroup=function(b){var c=this,d=new a.GroupRes;d.load(a.Scene_data.fileRoot+"model/"+b+".txt",function(){c.loadPartRes(d)})},c.prototype.loadPartRes=function(b){for(var c=0;c<b.dataAry.length;c++){var d=b.dataAry[c];d.types==a.BaseRes.SCENE_PARTICLE_TYPE||d.types==a.BaseRes.PREFAB_TYPE&&(this.setObjUrl(d.objUrl),this.setMaterialUrl(d.materialUrl,d.materialInfoArr))}},c.prototype.resize=function(){this.uiViewMatrix.identity(),this.uiViewMatrix.perspectiveFieldOfViewLH(1,1,500,5e3),this.uiViewMatrix.appendScale(1e3/a.Scene_data.stageWidth,1e3/a.Scene_data.stageHeight,1)},c.prototype.setCam=function(){a.Scene_data.context3D.setVcMatrix4fv(this.material.shader,"viewMatrix3D",this.uiViewMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.material.shader,"camMatrix3D",this.uiMatrix.m)},c.prototype.update=function(){a.Scene_data.context3D.setWriteDepth(!0),a.Scene_data.context3D.setDepthTest(!0),b.prototype.update.call(this),a.Scene_data.context3D.setWriteDepth(!1),a.Scene_data.context3D.setDepthTest(!1)},c}(a.Display3DSprite);a.Display3DUISprite=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){var c=b.call(this)||this;return c.batchPos=new Array,c.objData=new a.ObjData,c.watchCaramMatrix=new a.Matrix3D,c.shader=a.ProgrmaManager.getInstance().getProgram(a.Sprite2DShader.SPRITE2D_SHADER),c.program=c.shader.program,c}return __extends(d,b),d.prototype.setInfo=function(b,c,d){this._imgAtlas||(this._imgAtlas=new a.UIAtlas),this._imgAtlas.setInfo(b,c,d)},d.prototype.getSprite=function(a){var b=new c;return b.uvData=this._imgAtlas.getRec(a),b},d.prototype.addSprite=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];for(var c=0;c<a.length;c++)this.batchPos.push(a[c]);this.applyData()},d.prototype.applyData=function(){this.objData.vertices.length=0,this.objData.uvs.length=0,this.objData.indexs.length=0;for(var b=0;b<this.batchPos.length;b++){var c=this.batchPos[b].uvData,d=c.pixelHeight/c.pixelWitdh;this.objData.vertices.push(-.5*c.width,1*d*c.width,0,.5*c.width,1*d*c.width,0,.5*c.width,0,0,-.5*c.width,0,0),this.objData.uvs.push(c.x,c.y,b,c.x+c.width,c.y,b,c.x+c.width,c.y+c.height,b,c.x,c.y+c.height,b),this.objData.indexs.push(4*b,1+4*b,2+4*b,4*b,2+4*b,3+4*b)}this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer?(a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer,this.objData.vertices),a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer,this.objData.uvs),a.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer,this.objData.indexs)):(this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs))},d.prototype.update=function(){if(0!=this.batchPos.length){this.watchCaramMatrix.identity(),this.watchCaramMatrix.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),this.watchCaramMatrix.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS),a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"watchCamMatrix3D",this.watchCaramMatrix.m);for(var b=0;b<this.batchPos.length;b++)a.Scene_data.context3D.setVc4fv(this.shader,"posdata["+b+"]",this.batchPos[b].posData);a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this._imgAtlas.texture,0),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)}},d}(a.Display3D);a.Display2DSprite=b;var c=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b.posData=[0,0,0,100],b}return __extends(b,a),b.prototype.setPos=function(a,b,c){this.x=a,this.y=b,this.z=c},Object.defineProperty(b.prototype,"scale",{get:function(){return this._scaleX},set:function(a){this._scaleX=a,this.posData[3]=100*a},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"x",{set:function(a){this._x=a,this.posData[0]=a},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"y",{set:function(a){this._y=a,this.posData[1]=a},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"z",{set:function(a){this._z=a,this.posData[2]=a},enumerable:!0,configurable:!0}),b}(a.Object3D)}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function b(){}return b.prototype.mekeUseTexture=function(b){var c=new a.Rectangle(0,0,Math.pow(2,Math.ceil(Math.log(b.width)/Math.log(2))),Math.pow(2,Math.ceil(Math.log(b.height)/Math.log(2))));if(c.width!=b.width||c.height!=b.height){for(var d=new a.BitMapData(c.width,c.height),e=0;e<d.width;e++)for(var f=0;f<d.height;f++){var g=b.getRgb(e/d.width*b.width,f/d.height*b.height);d.setRgb(e,f,g)}return d}return b},b.prototype.calibration=function(){this.idBitmap=this.mekeUseTexture(this.idBitmap),this.infoBitmap=this.mekeUseTexture(this.infoBitmap)},b.meshAllgroundData=function(c){for(var d=c.readInt(),e=c.readInt(),f=new Array,g=0;d>g;g++)for(var h=0;e>h;h++){var i=c.readInt(),j=c.readInt(),k=c.readInt(),l=c.readInt(),m=new b;m.idBitmap=new a.BitMapData(k,l),m.infoBitmap=new a.BitMapData(k,l),m.tx=i,m.ty=j,f.push(m);for(var n=0;k>n;n++)for(var o=0;l>o;o++){var p,q=c.readByte();switch(q){case 0:p=new a.Vector3D(0,1,2);break;case 1:p=new a.Vector3D(0,1,3);break;case 2:p=new a.Vector3D(0,2,3);break;case 3:p=new a.Vector3D(1,2,3);break;default:throw new Error("信息索引没有编入")}m.idBitmap.setRgb(n,o,new a.Vector3D(p.x/255,p.y/255,p.z/255,1));var r=new a.Vector3D;r.x=c.readByte()+128,r.y=c.readByte()+128,r.z=255-r.x-r.y,m.infoBitmap.setRgb(n,o,new a.Vector3D(r.x/255,r.y/255,r.z/255,1))}m.calibration()}for(var s=c.readUTF(),t=0;t<f.length;t++)f[t].sixurl=s;return f},b}();a.GroundDataMesh=b;var c=function(b){function c(){var c=b.call(this)||this;return a.ProgrmaManager.getInstance().registe(a.TerrainDisplay3DShader.TerrainDisplay3DShader,new a.TerrainDisplay3DShader),c.groundShader=a.ProgrmaManager.getInstance().getProgram(a.TerrainDisplay3DShader.TerrainDisplay3DShader),c}return __extends(c,b),c.prototype.update=function(){this.groundShader&&this.baseSixteenRes&&this.idMapPicDataTexture?this.upDataToDraw():b.prototype.update.call(this)},c.prototype.upDataToDraw=function(){if(this.groundShader&&this.baseSixteenRes){a.Scene_data.context3D.cullFaceBack(!1),a.Scene_data.context3D.setProgram(this.groundShader.program),a.Scene_data.context3D.setVcMatrix4fv(this.groundShader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.groundShader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.groundShader,"posMatrix3D",this.posMatrix.m),a.Scene_data.context3D.setVc4fv(this.groundShader,"colorData",[1,0,1,1]);var b=a.Scene_data.context3D.pushVa(this.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.objData.stride,this.objData.uvsOffsets)),a.Scene_data.context3D.setRenderTexture(this.groundShader,"idmaptexture",this.idMapPicDataTexture,0),a.Scene_data.context3D.setRenderTexture(this.groundShader,"infotexture",this.infoMapPicDataTexture,1),a.Scene_data.context3D.setRenderTexture(this.groundShader,"sixtexture",this.baseSixteenRes.texture,2),a.Scene_data.context3D.setRenderTexture(this.groundShader,"lightexture",this.lightMapTexture,3),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)}},c.prototype.setGrounDataMesh=function(b){var c=this;this.idMapPicDataTexture=a.Scene_data.context3D.getTexture(b.idBitmap.imgData,0,1),this.infoMapPicDataTexture=a.Scene_data.context3D.getTexture(b.infoBitmap.imgData,0,1);var d=b.sixurl;a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+d,function(a){c.baseSixteenRes=a})},c}(a.Display3DSprite);a.TerrainDisplay3DSprite=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.init=function(c){var d=/ipad/i.test(navigator.userAgent),e=/iPhone/i.test(navigator.userAgent),f=/android/i.test(navigator.userAgent);/iindow/i.test(navigator.userAgent),navigator.userAgent.toLowerCase();d||e||f?a.Scene_data.isPc=!1:a.Scene_data.isPc=!0,d||e?a.Scene_data.isIos=!0:a.Scene_data.isIos=!1,a.Scene_data.vpMatrix=new a.Matrix3D,a.Scene_data.canvas3D=c,a.Scene_data.context3D=new a.Context3D,a.Scene_data.context3D.init(c),a.UIManager.getInstance().init(),a.Scene_data.cam3D=new a.Camera3D,a.Scene_data.focus3D=new a.Object3D,a.Scene_data.focus3D.x=0,a.Scene_data.focus3D.y=0,a.Scene_data.focus3D.z=0,a.Scene_data.focus3D.rotationY=135,a.Scene_data.focus3D.rotationX=-45,a.Scene_data.light=new a.LightVo,b.testBlob(),b.resetSize(),b.initShadow(),a.TimeUtil.init(),a.PathManager.init()},b.resReady=function(){b.initPbr()},b.testBlob=function(){try{new Blob}catch(b){return void(a.Scene_data.supportBlob=!1)}a.Scene_data.supportBlob=!0},b.initPbr=function(){a.Scene_data.pubLut||a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+"base/brdf_ltu.jpg",function(b){a.Scene_data.pubLut=b.texture},1),a.Scene_data.skyCubeMap||a.TextureManager.getInstance().loadCubeTexture(a.Scene_data.fileRoot+"base/cube/e",function(b){a.Scene_data.skyCubeMap=b})},b.initShadow=function(){a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+"base/shadow.png",function(b){a.Display3dShadow.texture=b.texture})},b.resetSize=function(c,d){void 0===c&&(c=0),void 0===d&&(d=0),b.needInputTxt||(document.body.clientWidth>document.body.clientHeight?(a.Scene_data.stageWidth=document.body.clientWidth,a.Scene_data.stageHeight=document.body.clientHeight,a.Scene_data.verticalScene=!1):(a.Scene_data.stageWidth=document.body.clientHeight,a.Scene_data.stageHeight=document.body.clientWidth,a.Scene_data.verticalScene=!0),this.needVertical||(a.Scene_data.stageWidth=document.body.clientWidth,a.Scene_data.stageHeight=document.body.clientHeight,a.Scene_data.verticalScene=!1),a.Scene_data.canvas3D.width=a.Scene_data.stageWidth,a.Scene_data.canvas3D.height=a.Scene_data.stageHeight,a.Scene_data.context3D.resetSize(a.Scene_data.stageWidth,a.Scene_data.stageHeight),a.UIManager.getInstance().resize(),a.BloodManager.getInstance().resize(),this.resetViewMatrx3D(),a.Scene_data.canvas3D.style.position="absolute",a.Scene_data.canvas3D.style.left="0px",a.Scene_data.canvas3D.style.top="0px",a.Scene_data.verticalScene?a.Scene_data.canvas3D.style.transform="matrix(0,1,-1,0,"+a.Scene_data.stageHeight+",0)":a.Scene_data.canvas3D.style.transform="matrix(1,0,0,1,0,0)",a.Scene_data.canvas3D.style.transformOrigin="0px 0px 0px",a.Scene_data.canvas3D.style.top="0px")},b.resetViewMatrx3D=function(){a.Scene_data.viewMatrx3D?a.Scene_data.viewMatrx3D.identity():a.Scene_data.viewMatrx3D=new a.Matrix3D;var b=a.Scene_data.stageWidth,c=a.Scene_data.stageHeight;a.Scene_data.sceneViewHW=Math.max(b,c),a.Scene_data.viewMatrx3D.perspectiveFieldOfViewLH(this.sceneCamScale,1,50,a.Scene_data.camFar),a.Scene_data.viewMatrx3D.appendScale(1*(a.Scene_data.sceneViewHW/b*2),b/c*(a.Scene_data.sceneViewHW/b*2),1)},b.update=function(){a.TimeUtil.update(),a.SceneManager.getInstance().update(),a.FpsMc.update()},b.unload=function(){},b.needVertical=!0,b.needInputTxt=!1,b.sceneCamScale=1.76,b}();a.Engine=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.getCamView=function(b,c){b.update();var d=new a.Matrix3D;d.appendRotation(-c.rotationX,a.Vector3D.X_AXIS),d.appendRotation(-c.rotationZ,a.Vector3D.Z_AXIS),d.appendRotation(-c.rotationY,a.Vector3D.Y_AXIS),d.appendTranslation(c.x,c.y,c.z);var e=d.transformVector(new a.Vector3D(0,0,-b.distance));return b.x=e.x,b.y=e.y,b.z=e.z,b.rotationX=c.rotationX,b.rotationY=c.rotationY,b.rotationZ=c.rotationZ,b.cameraMatrix.identity(),b.cameraMatrix.prependTranslation(0,0,b.distance),b.cameraMatrix.prependRotation(b.rotationX,a.Vector3D.X_AXIS),b.cameraMatrix.prependRotation(b.rotationZ,a.Vector3D.Z_AXIS),b.cameraMatrix.prependRotation(b.rotationY,a.Vector3D.Y_AXIS),b.cameraMatrix.prependTranslation(-c.x,-c.y,-c.z),this.camOffSetShock(b),this.updateVp(),b.cameraMatrix.m},b.camOffSetShock=function(a){this.SetShock&&a.cameraMatrix.prependTranslation(a.offset.x,a.offset.y,a.offset.z)},b.updateVp=function(){a.Scene_data.vpMatrix.identity(),a.Scene_data.vpMatrix.prepend(a.Scene_data.viewMatrx3D),a.Scene_data.vpMatrix.prepend(a.Scene_data.cam3D.cameraMatrix)},b.MathCam=function(b){var c=new a.Matrix3D;c.prependRotation(b.rotationX,a.Vector3D.X_AXIS),c.prependRotation(b.rotationY,a.Vector3D.Y_AXIS),c.prependTranslation(-b.x,-b.y,-b.z),b.cameraMatrix.identity(),b.cameraMatrix.append(c)},b.GetViewHitBoxData=function(b){var c=a.Scene_data.cam3D.cameraMatrix.clone();c.invert();var d=a.Scene_data.viewMatrx3D.m[0],e=a.Scene_data.viewMatrx3D.m[5];this.viewBoxVecItem?(this.lastViewScale.x!=d||this.lastViewScale.y!=e)&&(this.viewBoxVecItem[0]=new a.Vector3D(-b/d,-b/e,b),this.viewBoxVecItem[1]=new a.Vector3D(-b/d,+b/e,b),this.viewBoxVecItem[2]=new a.Vector3D(+b/d,-b/e,b),this.viewBoxVecItem[3]=new a.Vector3D(+b/d,+b/e,b),this.viewBoxVecItem[4]=new a.Vector3D(0,0,0)):(this.lastViewScale=new a.Vector2D(d,e),this.viewBoxVecItem=new Array,this.viewBoxVecItem.push(new a.Vector3D(-b/d,-b/e,b)),this.viewBoxVecItem.push(new a.Vector3D(-b/d,+b/e,b)),this.viewBoxVecItem.push(new a.Vector3D(+b/d,-b/e,b)),this.viewBoxVecItem.push(new a.Vector3D(+b/d,+b/e,b)),this.viewBoxVecItem.push(new a.Vector3D(0,0,0)))},b.GetViewHitBoxDataCopy=function(b){this.viewBoxVecItem||(this.viewBoxVecItem=new Array,this.viewBoxVecItem.push(new a.Vector3D),this.viewBoxVecItem.push(new a.Vector3D),this.viewBoxVecItem.push(new a.Vector3D),this.viewBoxVecItem.push(new a.Vector3D));var c=b/(a.Scene_data.sceneViewHW/2),d=a.Scene_data.sceneViewHW/2*c,e=a.Scene_data.stageWidth,f=a.Scene_data.stageHeight,g=new a.Matrix3D;g.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),g.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS);var h=a.Scene_data.viewMatrx3D.transformVector(new a.Vector3D(500,0,500)),i=h.x/h.w,j=.8,k=e/2/i*c*j,l=f/2/i*c*j;this.viewBoxVecItem[0]=this.gettempPos(new a.Vector3D(-k,-l,d),g),this.viewBoxVecItem[1]=this.gettempPos(new a.Vector3D(+k,-l,d),g),this.viewBoxVecItem[2]=this.gettempPos(new a.Vector3D(+k,+l,d),g),this.viewBoxVecItem[3]=this.gettempPos(new a.Vector3D(-k,+l,d),g)},b.gettempPos=function(b,c){var d=c.transformVector(b);return d=d.add(new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z))},b.mathmidpoint=function(a,b,c){var d,e,f;d=a.x+(b.x-a.x)*c,e=a.y+(b.y-a.y)*c,f=a.z+(b.z-a.z)*c,a.x=d,a.y=e,a.z=f},b.drawbezier=function(a,b){var c=new Array;if(0==a.length)return{x:0,y:0,z:0};for(var d=0;d<a.length;d++)c.push({x:a[d].x,y:a[d].y,z:a[d].z});for(;c.length>1;){for(var e=0;e<c.length-1;e++)this.mathmidpoint(c[e],c[e+1],b);c.pop()}return c[0]},b.math_distance=function(a,b,c,d){return Math.sqrt((d-b)*(d-b)+(c-a)*(c-a))},b.math_angle=function(a,b,c,d){var e=a-c,f=b-d,g=180*Math.atan(f/e)/Math.PI;return g},b.easeIn=function(a,b,c,d){return c*(a/=d)*a+b},b.easeOut=function(a,b,c,d){return-c*(a/=d)*(a-2)+b},b.easeInOut=function(a,b,c,d){return(a/=d/2)<1?c/2*a*a+b:-c/2*(--a*(a-2)-1)+b},b.mathDisplay2Dto3DWorldPos=function(b,c,d){void 0===d&&(d=300);var e=a.Scene_data.cam3D.cameraMatrix.clone(),f=a.Scene_data.viewMatrx3D.clone();e.invert(),f.invert();var g=new a.Vector3D;return g.x=c.x-b.x,g.y=c.y-b.y,g.x=2*g.x/b.width-1,g.y=1-2*g.y/b.height,g.w=d,g.x=g.x*g.w,g.y=g.y*g.w,g=f.transformVector(g),g.z=d,g=e.transformVector(g)},b.SetShock=!0,b}();a.MathClass=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.mathDisplay2Dto3DWorldPos=function(b,c){void 0===c&&(c=300);var d=c/(a.Scene_data.sceneViewHW/2),e=a.Scene_data.sceneViewHW/2*d,f=a.Scene_data.stageWidth,g=a.Scene_data.stageHeight,h=new a.Matrix3D;h.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),h.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS);var i=a.Scene_data.viewMatrx3D.transformVector(new a.Vector3D(500,0,500)),j=i.x/i.w,k=f/2/j*d,l=g/2/j*d,m=b.x/f*k*2,n=b.y/g*l*2,o=this.gettempPos(new a.Vector3D(-k+m,+l-n,e),h);return o},b.getGroundPanelPos=function(b){var c=a.MathClass.mathDisplay2Dto3DWorldPos(new a.Rectangle(0,0,a.Scene_data.stageWidth,a.Scene_data.stageHeight),new a.Vector2D(b.x,b.y),300),d=new Array;d.push(new a.Vector3D(0,0,0)),d.push(new a.Vector3D(-100,0,100)),d.push(new a.Vector3D(100,0,100));var e=new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z);return this.getLinePlaneInterectPointByTri(e,c,d)},b.gettempPos=function(b,c){var d=c.transformVector(b);return d=d.add(new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z))},b.math3DWorldtoDisplay2DPos=function(b){var c=a.Scene_data.cam3D.cameraMatrix.clone();c.append(a.Scene_data.viewMatrx3D.clone());var d=a.Scene_data.stageWidth,e=a.Scene_data.stageHeight,f=c.transformVector(b),g=new a.Vector2D;return g.x=(f.x/f.w+1)*(d/2),g.y=(-f.y/f.w+1)*(e/2),g},b.argbToHex=function(a,b,c,d){var e=a<<24|b<<16|c<<8|d;return e},b.hexToArgb=function(b){var c=new a.Vector3D;return c.w=b>>24&255,c.x=b>>16&255,c.y=b>>8&255,c.z=255&b,c},b.getLinePlaneInterectPointByTri=function(b,c,d){if(d.length<3)return null;var e=new a.Vector3D(0,2e3,0);return this.getLineAndPlaneIntersectPoint(b,c,d[0],e)},b.getLineAndPlaneIntersectPoint=function(b,c,d,e){var f=new a.Vector3D(b.x-c.x,b.y-c.y,b.z-c.z);f.normalize();var g=f.x*e.x+f.y*e.y+f.z*e.z,h=((d.x-b.x)*e.x+(d.y-b.y)*e.y+(d.z-b.z)*e.z)/g,i=new a.Vector3D;return i.setTo(b.x+f.x*h,b.y+f.y*h,b.z+f.z*h),i},b.lookAt=function(b,c){var d=new a.Matrix3D;return d.buildLookAtLH(b,c,a.Vector3D.Y_AXIS),d},b}();a.MathUtil=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.isIdentity=!0;var a=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];this.m=new Float32Array(a)}return b.prototype.clone=function(a){return void 0===a&&(a=null),a||(a=new b),a.m[0]=this.m[0],a.m[1]=this.m[1],a.m[2]=this.m[2],a.m[3]=this.m[3],a.m[4]=this.m[4],a.m[5]=this.m[5],a.m[6]=this.m[6],a.m[7]=this.m[7],a.m[8]=this.m[8],a.m[9]=this.m[9],a.m[10]=this.m[10],a.m[11]=this.m[11],a.m[12]=this.m[12],a.m[13]=this.m[13],a.m[14]=this.m[14],a.m[15]=this.m[15],a},Object.defineProperty(b.prototype,"position",{get:function(){return new a.Vector3D(this.m[12],this.m[13],this.m[14],this.m[15])},enumerable:!0,configurable:!0}),b.prototype.copyTo=function(a){a.m[0]=this.m[0],a.m[1]=this.m[1],a.m[2]=this.m[2],a.m[3]=this.m[3],a.m[4]=this.m[4],a.m[5]=this.m[5],a.m[6]=this.m[6],a.m[7]=this.m[7],a.m[8]=this.m[8],a.m[9]=this.m[9],a.m[10]=this.m[10],a.m[11]=this.m[11],a.m[12]=this.m[12],a.m[13]=this.m[13],a.m[14]=this.m[14],a.m[15]=this.m[15]},b.prototype.identity=function(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=0,this.m[4]=0,this.m[5]=1,this.m[6]=0,this.m[7]=0,this.m[8]=0,this.m[9]=0,this.m[10]=1,this.m[11]=0,this.m[12]=0,this.m[13]=0,this.m[14]=0,this.m[15]=1},b.prototype.invert=function(){var a=this.m,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],m=a[11],n=a[12],o=a[13],p=a[14],q=a[15],r=b*g-c*f,s=b*h-d*f,t=b*i-e*f,u=c*h-d*g,v=c*i-e*g,w=d*i-e*h,x=j*o-k*n,y=j*p-l*n,z=j*q-m*n,A=k*p-l*o,B=k*q-m*o,C=l*q-m*p,D=r*C-s*B+t*A+u*z-v*y+w*x;return D?(D=1/D,this.m[0]=(g*C-h*B+i*A)*D,this.m[1]=(d*B-c*C-e*A)*D,this.m[2]=(o*w-p*v+q*u)*D,this.m[3]=(l*v-k*w-m*u)*D,this.m[4]=(h*z-f*C-i*y)*D,this.m[5]=(b*C-d*z+e*y)*D,this.m[6]=(p*t-n*w-q*s)*D,this.m[7]=(j*w-l*t+m*s)*D,this.m[8]=(f*B-g*z+i*x)*D,this.m[9]=(c*z-b*B-e*x)*D,this.m[10]=(n*v-o*t+q*r)*D,this.m[11]=(k*t-j*v-m*r)*D,this.m[12]=(g*y-f*A-h*x)*D,this.m[13]=(b*A-c*y+d*x)*D,this.m[14]=(o*s-n*u-p*r)*D,void(this.m[15]=(j*u-k*s+l*r)*D)):null},b.prototype.invertToMatrix=function(a){var b=this.m,c=b[0],d=b[1],e=b[2],f=b[3],g=b[4],h=b[5],i=b[6],j=b[7],k=b[8],l=b[9],m=b[10],n=b[11],o=b[12],p=b[13],q=b[14],r=b[15],s=c*h-d*g,t=c*i-e*g,u=c*j-f*g,v=d*i-e*h,w=d*j-f*h,x=e*j-f*i,y=k*p-l*o,z=k*q-m*o,A=k*r-n*o,B=l*q-m*p,C=l*r-n*p,D=m*r-n*q,E=s*D-t*C+u*B+v*A-w*z+x*y;
return E?(E=1/E,a.m[0]=(h*D-i*C+j*B)*E,a.m[1]=(e*C-d*D-f*B)*E,a.m[2]=(p*x-q*w+r*v)*E,a.m[3]=(m*w-l*x-n*v)*E,a.m[4]=(i*A-g*D-j*z)*E,a.m[5]=(c*D-e*A+f*z)*E,a.m[6]=(q*u-o*x-r*t)*E,a.m[7]=(k*x-m*u+n*t)*E,a.m[8]=(g*C-h*A+j*y)*E,a.m[9]=(d*A-c*C-f*y)*E,a.m[10]=(o*w-p*u+r*s)*E,a.m[11]=(l*u-k*w-n*s)*E,a.m[12]=(h*z-g*B-i*y)*E,a.m[13]=(c*B-d*z+e*y)*E,a.m[14]=(p*t-o*v-q*s)*E,void(a.m[15]=(k*v-l*t+m*s)*E)):null},b.prototype.appendTranslation=function(a,c,d){b.tempM.identity(),b.tempM.prependTranslation(a,c,d),this.append(b.tempM)},b.prototype.prependTranslation=function(a,b,c){var d=this.m;d[12]=d[0]*a+d[4]*b+d[8]*c+d[12],d[13]=d[1]*a+d[5]*b+d[9]*c+d[13],d[14]=d[2]*a+d[6]*b+d[10]*c+d[14],d[15]=d[3]*a+d[7]*b+d[11]*c+d[15]},b.prototype.transformVector=function(b){var c=new a.Vector3D;return c.x=this.m[0]*b.x+this.m[4]*b.y+this.m[8]*b.z+this.m[12]*b.w,c.y=this.m[1]*b.x+this.m[5]*b.y+this.m[9]*b.z+this.m[13]*b.w,c.z=this.m[2]*b.x+this.m[6]*b.y+this.m[10]*b.z+this.m[14]*b.w,c.w=this.m[3]*b.x+this.m[7]*b.y+this.m[11]*b.z+this.m[15]*b.w,c},b.prototype.append=function(a){b.tempM.m[0]=a.m[0],b.tempM.m[1]=a.m[1],b.tempM.m[2]=a.m[2],b.tempM.m[3]=a.m[3],b.tempM.m[4]=a.m[4],b.tempM.m[5]=a.m[5],b.tempM.m[6]=a.m[6],b.tempM.m[7]=a.m[7],b.tempM.m[8]=a.m[8],b.tempM.m[9]=a.m[9],b.tempM.m[10]=a.m[10],b.tempM.m[11]=a.m[11],b.tempM.m[12]=a.m[12],b.tempM.m[13]=a.m[13],b.tempM.m[14]=a.m[14],b.tempM.m[15]=a.m[15],b.tempM.prepend(this),this.m[0]=b.tempM.m[0],this.m[1]=b.tempM.m[1],this.m[2]=b.tempM.m[2],this.m[3]=b.tempM.m[3],this.m[4]=b.tempM.m[4],this.m[5]=b.tempM.m[5],this.m[6]=b.tempM.m[6],this.m[7]=b.tempM.m[7],this.m[8]=b.tempM.m[8],this.m[9]=b.tempM.m[9],this.m[10]=b.tempM.m[10],this.m[11]=b.tempM.m[11],this.m[12]=b.tempM.m[12],this.m[13]=b.tempM.m[13],this.m[14]=b.tempM.m[14],this.m[15]=b.tempM.m[15]},b.prototype.prepend=function(a){var b=a.m,c=this.m,d=this.m,e=d[0],f=d[1],g=d[2],h=d[3],i=d[4],j=d[5],k=d[6],l=d[7],m=d[8],n=d[9],o=d[10],p=d[11],q=d[12],r=d[13],s=d[14],t=d[15],u=b[0],v=b[1],w=b[2],x=b[3];c[0]=u*e+v*i+w*m+x*q,c[1]=u*f+v*j+w*n+x*r,c[2]=u*g+v*k+w*o+x*s,c[3]=u*h+v*l+w*p+x*t,u=b[4],v=b[5],w=b[6],x=b[7],c[4]=u*e+v*i+w*m+x*q,c[5]=u*f+v*j+w*n+x*r,c[6]=u*g+v*k+w*o+x*s,c[7]=u*h+v*l+w*p+x*t,u=b[8],v=b[9],w=b[10],x=b[11],c[8]=u*e+v*i+w*m+x*q,c[9]=u*f+v*j+w*n+x*r,c[10]=u*g+v*k+w*o+x*s,c[11]=u*h+v*l+w*p+x*t,u=b[12],v=b[13],w=b[14],x=b[15],c[12]=u*e+v*i+w*m+x*q,c[13]=u*f+v*j+w*n+x*r,c[14]=u*g+v*k+w*o+x*s,c[15]=u*h+v*l+w*p+x*t},b.prototype.appendRotation=function(a,c){b.tempM.identity(),b.tempM.prependRotation(a,c),this.append(b.tempM)},b.prototype.tomat3=function(){var a=Array.prototype.concat.apply([],arguments);a=[1,0,0,0,1,0,0,0,1];var b=new Float32Array(a);return b[0]=this.m[0],b[1]=this.m[1],b[2]=this.m[2],b[3]=this.m[4],b[4]=this.m[5],b[5]=this.m[6],b[6]=this.m[8],b[7]=this.m[9],b[8]=this.m[10],b},b.prototype.getRotaion=function(a){a[0]=this.m[0],a[1]=this.m[1],a[2]=this.m[2],a[3]=this.m[4],a[4]=this.m[5],a[5]=this.m[6],a[6]=this.m[8],a[7]=this.m[9],a[8]=this.m[10]},b.prototype.identityPostion=function(){this.m[12]=0,this.m[13]=0,this.m[14]=0},Object.defineProperty(b.prototype,"x",{get:function(){return this.m[12]},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"y",{get:function(){return this.m[13]},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"z",{get:function(){return this.m[14]},enumerable:!0,configurable:!0}),b.prototype.prependRotation=function(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A=this.m,B=this.m,C=b.x,D=b.y,E=b.z,F=Math.sqrt(C*C+D*D+E*E);return Math.abs(F)<1e-6?null:(F=1/F,C*=F,D*=F,E*=F,c=Math.sin(a*Math.PI/180),d=Math.cos(a*Math.PI/180),e=1-d,f=B[0],g=B[1],h=B[2],i=B[3],j=B[4],k=B[5],l=B[6],m=B[7],n=B[8],o=B[9],p=B[10],q=B[11],r=C*C*e+d,s=D*C*e+E*c,t=E*C*e-D*c,u=C*D*e-E*c,v=D*D*e+d,w=E*D*e+C*c,x=C*E*e+D*c,y=D*E*e-C*c,z=E*E*e+d,A[0]=f*r+j*s+n*t,A[1]=g*r+k*s+o*t,A[2]=h*r+l*s+p*t,A[3]=i*r+m*s+q*t,A[4]=f*u+j*v+n*w,A[5]=g*u+k*v+o*w,A[6]=h*u+l*v+p*w,A[7]=i*u+m*v+q*w,A[8]=f*x+j*y+n*z,A[9]=g*x+k*y+o*z,A[10]=h*x+l*y+p*z,A[11]=i*x+m*y+q*z,B!==A&&(A[12]=B[12],A[13]=B[13],A[14]=B[14],A[15]=B[15]),A)},b.prototype.prependScale=function(a,b,c){var d=this.m,e=this.m;return e[0]=d[0]*a,e[1]=d[1]*a,e[2]=d[2]*a,e[3]=d[3]*a,e[4]=d[4]*b,e[5]=d[5]*b,e[6]=d[6]*b,e[7]=d[7]*b,e[8]=d[8]*c,e[9]=d[9]*c,e[10]=d[10]*c,e[11]=d[11]*c,e[12]=d[12],e[13]=d[13],e[14]=d[14],e[15]=d[15],e},b.prototype.appendScale=function(a,c,d){b.tempM.identity(),b.tempM.prependScale(a,c,d),this.append(b.tempM)},b.prototype.perspectiveFieldOfViewLH=function(a,b,c,d){var e=1/Math.tan(a/2),f=e/b,g=this.m;g[0]=f,g[1]=0,g[2]=0,g[3]=0,g[4]=0,g[5]=e,g[6]=0,g[7]=0,g[8]=0,g[9]=0,g[10]=d/(d-c),g[11]=1,g[12]=0,g[13]=0,g[14]=c*d/(c-d),g[15]=0},b.prototype.fromVtoV=function(b,c){var d=b.cross(c);d.normalize();var e=Math.acos(b.dot(c)),f=new a.Quaternion;f.fromAxisAngle(d,e),f.toMatrix3D(this)},b.prototype.buildLookAtLH=function(b,c,d){var e=this.m,f=new a.Vector3D;f.x=c.x-b.x,f.y=c.y-b.y,f.z=c.z-b.z,f.normalize();var g=d.cross(f);g.normalize();var h=f.cross(g);e[0]=g.x,e[1]=h.x,e[2]=f.x,e[3]=0,e[4]=g.y,e[5]=h.y,e[6]=f.y,e[7]=0,e[8]=g.z,e[9]=h.z,e[10]=f.z,e[11]=0,e[12]=-g.dot(b),e[13]=-h.dot(b),e[14]=-f.dot(b),e[15]=1},b.mul=function(a,b,c){var d=b[0],e=b[1],f=b[2],g=b[3],h=b[4],i=b[5],j=b[6],k=b[7],l=b[8],m=b[9],n=b[10],o=b[11],p=b[12],q=b[13],r=b[14];b=b[15];var s=c[0],t=c[1],u=c[2],v=c[3];return a[0]=s*d+t*h+u*l+v*p,a[1]=s*e+t*i+u*m+v*q,a[2]=s*f+t*j+u*n+v*r,a[3]=s*g+t*k+u*o+v*b,s=c[4],t=c[5],u=c[6],v=c[7],a[4]=s*d+t*h+u*l+v*p,a[5]=s*e+t*i+u*m+v*q,a[6]=s*f+t*j+u*n+v*r,a[7]=s*g+t*k+u*o+v*b,s=c[8],t=c[9],u=c[10],v=c[11],a[8]=s*d+t*h+u*l+v*p,a[9]=s*e+t*i+u*m+v*q,a[10]=s*f+t*j+u*n+v*r,a[11]=s*g+t*k+u*o+v*b,s=c[12],t=c[13],u=c[14],v=c[15],a[12]=s*d+t*h+u*l+v*p,a[13]=s*e+t*i+u*m+v*q,a[14]=s*f+t*j+u*n+v*r,a[15]=s*g+t*k+u*o+v*b,a},b.prototype.toEulerAngles=function(b){void 0===b&&(b=null);var c=new a.Quaternion;return c.fromMatrix(this),c.toEulerAngles(b)},b.tempM=new b,b}();a.Matrix3D=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(a,b,c,d){void 0===a&&(a=0),void 0===b&&(b=0),void 0===c&&(c=0),void 0===d&&(d=1),this.x=0,this.y=0,this.z=0,this.w=1,this.x=a,this.y=b,this.z=c,this.w=d}return b.prototype.print=function(){alert(String(this.x)+" "+String(this.y)+" "+String(this.z)+" "+String(this.w))},b.prototype.toEulerAngles=function(b){void 0===b&&(b=null),b||(b=new a.Vector3D);var c=this.x,d=this.y,e=this.z,f=this.w;return b.x=Math.atan2(2*(f*c+d*e),1-2*(c*c+d*d)),b.y=Math.asin(2*(f*d-e*c)),b.z=Math.atan2(2*(f*e+c*d),1-2*(d*d+e*e)),b},b.prototype.toMatrix3D=function(b){void 0===b&&(b=null),b||(b=new a.Matrix3D);var c=b.m,d=this.x,e=this.y,f=this.z,g=this.w,h=d+d,i=e+e,j=f+f,k=d*h,l=e*h,m=e*i,n=f*h,o=f*i,p=f*j,q=g*h,r=g*i,s=g*j;return c[0]=1-m-p,c[1]=l+s,c[2]=n-r,c[3]=0,c[4]=l-s,c[5]=1-k-p,c[6]=o+q,c[7]=0,c[8]=n+r,c[9]=o-q,c[10]=1-k-m,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,b},b.prototype.fromAxisAngle=function(a,b){var c=Math.sin(b/2),d=Math.cos(b/2);this.x=a.x*c,this.y=a.y*c,this.z=a.z*c,this.w=d,this.normalize()},b.prototype.normalize=function(a){void 0===a&&(a=1);var b=a/Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);this.x*=b,this.y*=b,this.z*=b,this.w*=b},b.prototype.fromMatrix=function(a){var b=[0,0,0,0,0,0,0,0,0];b[0]=a.m[0],b[1]=a.m[1],b[2]=a.m[2],b[3]=a.m[4],b[4]=a.m[5],b[5]=a.m[6],b[6]=a.m[8],b[7]=a.m[9],b[8]=a.m[10];var c,d=b[0]+b[4]+b[8],e=[0,0,0,0];if(d>0)c=Math.sqrt(d+1),e[3]=.5*c,c=.5/c,e[0]=(b[5]-b[7])*c,e[1]=(b[6]-b[2])*c,e[2]=(b[1]-b[3])*c;else{var f=0;b[4]>b[0]&&(f=1),b[8]>b[3*f+f]&&(f=2);var g=(f+1)%3,h=(f+2)%3;c=Math.sqrt(b[3*f+f]-b[3*g+g]-b[3*h+h]+1),e[f]=.5*c,c=.5/c,e[3]=(b[3*g+h]-b[3*h+g])*c,e[g]=(b[3*g+f]+b[3*f+g])*c,e[h]=(b[3*h+f]+b[3*f+h])*c}this.x=e[0],this.y=e[1],this.z=e[2],this.w=e[3]},b.prototype.setMd5W=function(){this.w=1-(this.x*this.x+this.y*this.y+this.z*this.z),this.w<0?this.w=0:this.w=-Math.sqrt(this.w)},b.prototype.slerp=function(a,b,c){var d=a.w,e=a.x,f=a.y,g=a.z,h=b.w,i=b.x,j=b.y,k=b.z,l=d*h+e*i+f*j+g*k;if(0>l&&(l=-l,h=-h,i=-i,j=-j,k=-k),.95>l){var m=Math.acos(l),n=1/Math.sin(m),o=Math.sin(m*(1-c))*n,p=Math.sin(m*c)*n;this.w=d*o+h*p,this.x=e*o+i*p,this.y=f*o+j*p,this.z=g*o+k*p}else{this.w=d+c*(h-d),this.x=e+c*(i-e),this.y=f+c*(j-f),this.z=g+c*(k-g);var q=1/Math.sqrt(this.w*this.w+this.x*this.x+this.y*this.y+this.z*this.z);this.w*=q,this.x*=q,this.y*=q,this.z*=q}},b}();a.Quaternion=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a,b,c,d){void 0===a&&(a=0),void 0===b&&(b=0),void 0===c&&(c=0),void 0===d&&(d=1),this.x=0,this.y=0,this.z=0,this.w=1,this.x=a,this.y=b,this.z=c,this.w=d}return a.prototype.normalize=function(){var a=this.length;0!=a&&this.scaleBy(1/a)},Object.defineProperty(a.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},enumerable:!0,configurable:!0}),a.prototype.scaleBy=function(a){this.x*=a,this.y*=a,this.z*=a,this.w*=a},a.prototype.divideScalar=function(a){0!=a?(this.x=this.x/a,this.y=this.y/a,this.z=this.z/a):(this.x=0,this.y=0,this.z=0)},a.prototype.distanceToSquared=function(b){return a.distance(this,b)},a.prototype.scaleByW=function(){this.x*=this.w,this.y*=this.w,this.z*=this.w},a.prototype.add=function(b){return new a(this.x+b.x,this.y+b.y,this.z+b.z)},a.prototype.subtract=function(b){return new a(this.x-b.x,this.y-b.y,this.z-b.z)},a.prototype.addByNum=function(a,b,c,d){void 0===d&&(d=0),this.x+=a,this.y+=b,this.z+=c,this.w+=d},a.prototype.setTo=function(a,b,c){this.x=a,this.y=b,this.z=c},a.prototype.setByte=function(a){this.x=a.readFloat(),this.y=a.readFloat(),this.z=a.readFloat()},a.prototype.cross=function(b){return new a(this.y*b.z-this.z*b.y,this.z*b.x-this.x*b.z,this.x*b.y-this.y*b.x)},a.prototype.dot=function(a){return this.x*a.x+this.y*a.y+this.z*a.z},a.prototype.clone=function(){return new a(this.x,this.y,this.z)},a.distance=function(a,b){var c=a.x-b.x,d=a.y-b.y,e=a.z-b.z;return Math.sqrt(c*c+d*d+e*e)},a.prototype.toString=function(){return"Vector3D("+String(this.x)+","+String(this.y)+","+String(this.z)+","+String(this.w)+")"},a.X_AXIS=new a(1,0,0),a.Y_AXIS=new a(0,1,0),a.Z_AXIS=new a(0,0,1),a}();a.Vector3D=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a,b){void 0===a&&(a=0),void 0===b&&(b=0),this.x=0,this.y=0,this.x=a,this.y=b}return a.prototype.normalize=function(){var a=this.length;0!=a&&this.scaleBy(1/a)},Object.defineProperty(a.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},enumerable:!0,configurable:!0}),a.prototype.scaleBy=function(a){this.x*=a,this.y*=a},a.prototype.sub=function(b){return new a(b.x-this.x,b.y-this.y)},a.prototype.add=function(b){return new a(b.x+this.x,b.y+this.y)},a.prototype.toString=function(){return"Vector2D("+String(this.x)+","+String(this.y)+")"},a.distance=function(a,b){var c=a.x-b.x,d=a.y-b.y;return Math.sqrt(c*c+d*d)},a.prototype.subtract=function(b){return new a(this.x-b.x,this.y-b.y)},a}();a.Vector2D=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a,b,c,d){void 0===a&&(a=0),void 0===b&&(b=0),void 0===c&&(c=1),void 0===d&&(d=1),this.x=0,this.y=0,this.width=0,this.height=1,this.x=a,this.y=b,this.width=c,this.height=d}return a.prototype.sets=function(a,b,c,d){this.x=a,this.y=b,this.width=c,this.height=d},a.prototype.setRec=function(a){this.x=a.x,this.y=a.y,this.width=a.width,this.height=a.height},a.prototype.isHitByPoint=function(a,b){return a>=this.x&&b>=this.y&&a<=this.x+this.width&&b<=this.y+this.height},a}();a.Rectangle=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a,b,c){void 0===a&&(a=0),void 0===b&&(b=0),void 0===c&&(c=0),this.setData(a,b,c)}return a.prototype.setData=function(a,b,c){this.x=a,this.y=b,this.radius=c},a.prototype.setPos=function(a,b){this.x=a,this.y=b},Object.defineProperty(a.prototype,"x",{get:function(){return this._x},set:function(a){this._x=a},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"y",{get:function(){return this._y},set:function(a){this._y=a},enumerable:!0,configurable:!0}),a.prototype.setRadius=function(a){this.radius=a},a.prototype.testPoint=function(a){var b=this.x-a.x,c=this.y-a.y;return Math.sqrt(b*b+c*c)<this.radius},a}();a.Circle=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.getGroundPos=function(b,c){var d=-500;if(!this._plantObjectMath){var e=new a.Vector3D(0,d,500),f=new a.Vector3D(-500,d,0),g=new a.Vector3D(500,d,0);this._plantObjectMath=a.Calculation._PanelEquationFromThreePt(e,f,g),this._plantnormal=new a.Vector3D(this._plantObjectMath.a,this._plantObjectMath.b,this._plantObjectMath.c),this._plantnormal.normalize(),this._plane_a=new a.Vector3D(e.x,e.y,e.z)}var h=a.MathUtil.mathDisplay2Dto3DWorldPos(new a.Vector2D(b,c),500),i=new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z),j=a.Calculation.calPlaneLineIntersectPoint(this._plantnormal,this._plane_a,h,i);return j},b}();a.Groundposition=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this.a=0,this.b=0,this.c=0,this.d=0}return a}();a.ObjectMath=b;var c=function(){function c(){}return c._PanelEquationFromThreePt=function(a,c,d){var e=(c.y-a.y)*(d.z-a.z)-(c.z-a.z)*(d.y-a.y),f=(c.z-a.z)*(d.x-a.x)-(c.x-a.x)*(d.z-a.z),g=(c.x-a.x)*(d.y-a.y)-(c.y-a.y)*(d.x-a.x),h=0-(e*a.x+f*a.y+g*a.z),i=new b;return i.a=e,i.b=f,i.c=g,i.d=h,i},c.calPlaneLineIntersectPoint=function(b,c,d,e){var f=new a.Vector3D,g=b.x,h=b.y,i=b.z,j=c.x,k=c.y,l=c.z,m=d.x-e.x,n=d.y-e.y,o=d.z-e.z,p=e.x,q=e.y,r=e.z,s=m*g+n*h+o*i;if(0==s)return null;var t=((j-p)*g+(k-q)*h+(l-r)*i)/s;return f.x=p+m*t,f.y=q+n*t,f.z=r+o*t,f},c}();a.Calculation=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.LITTLE_ENDIAN="littleEndian",a.BIG_ENDIAN="bigEndian",a}();a.Endian=b;var c=function(){function c(a){this.BUFFER_EXT_SIZE=0,this.optcode=0,this.EOF_byte=-1,this.EOF_code_point=-1,this._setArrayBuffer(a||new ArrayBuffer(this.BUFFER_EXT_SIZE)),this.endian=b.BIG_ENDIAN}return c.prototype._setArrayBuffer=function(a){this.write_position=a.byteLength,this.data=new DataView(a),this._position=0},c.prototype.setdata=function(a){this._setArrayBuffer(a.buffer)},Object.defineProperty(c.prototype,"buffer",{get:function(){return this.data.buffer},set:function(a){this.data=new DataView(a)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"dataView",{get:function(){return this.data},set:function(a){this.data=a,this.write_position=a.byteLength},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"bufferOffset",{get:function(){return this.data.byteOffset},enumerable:!0,configurable:!0}),c.prototype.getByte=function(a){return this.data.getUint8(a)},c.prototype.setByte=function(a,b){this.data.setUint8(a,b)},Object.defineProperty(c.prototype,"position",{get:function(){return this._position},set:function(a){this._position=a,this.write_position=a>this.write_position?a:this.write_position},enumerable:!0,configurable:!0}),c.prototype.reset=function(){this.clear()},Object.defineProperty(c.prototype,"length",{get:function(){return this.write_position},set:function(a){this.validateBuffer(a,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"bytesAvailable",{get:function(){return this.data.byteLength-this._position},enumerable:!0,configurable:!0}),c.prototype.clear=function(){this._setArrayBuffer(new ArrayBuffer(this.BUFFER_EXT_SIZE))},c.prototype.readBoolean=function(){return 0!=this.data.getUint8(this.position++)},c.prototype.readByte=function(){return this.data.getInt8(this.position++)},c.prototype.readBytes=function(a,b,c){void 0===b&&(b=0),void 0===c&&(c=0);for(var d=0;c>d;d++)a.data.setUint8(d+b,this.data.getUint8(this.position++))},c.prototype.readDouble=function(){var a=this.data.getFloat64(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_FLOAT64,a},c.prototype.readFloat=function(){var a=this.data.getFloat32(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_FLOAT32,a},c.prototype.readInt=function(){var a=this.data.getInt32(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_INT32,a},c.prototype.getInt=function(){var a=this.data.getInt32(this.position,this.endian==b.LITTLE_ENDIAN);return a},c.prototype.readInt32=function(){return this.readInt()},c.prototype.readShort=function(){this.position>=this.data.byteLength;var a=this.data.getInt16(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_INT16,a},c.prototype.readFloatTwoByte=function(a){return this.readShort()/a},c.prototype.readFloatOneByte=function(){return(this.readByte()+128)/256},c.prototype.readUnsignedByte=function(){return this.data.getUint8(this.position++)},c.prototype.readUint8=function(){return this.readUnsignedByte()},c.prototype.readInt8=function(){return this.readByte()},c.prototype.readUnsignedInt=function(){var a=this.data.getUint32(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_UINT32,a},c.prototype.readUint32=function(){return this.readUnsignedInt()},c.prototype.readUint64=function(){return this.readDouble()},c.prototype.readUnsignedShort=function(){var a=this.data.getUint16(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_UINT16,a},c.prototype.readUint16=function(){return this.readUnsignedShort()},c.prototype.readUTF=function(){var a=this.data.getUint16(this.position,this.endian==b.LITTLE_ENDIAN);return this.position+=c.SIZE_OF_UINT16,a>0?this.readUTFBytes(a):""},c.prototype.readString=function(){return this.readUTF()},c.prototype.readUTFBytes=function(a){var b=new Uint8Array(this.buffer,this.bufferOffset+this.position,a);return this.position+=a,this.decodeUTF8(b)},c.prototype.readStringByLen=function(a){return this.readUTFBytes(a)},c.prototype.writeBoolean=function(a){this.validateBuffer(c.SIZE_OF_BOOLEAN),this.data.setUint8(this.position++,a?1:0)},c.prototype.writeByte=function(a){this.validateBuffer(c.SIZE_OF_INT8),this.data.setInt8(this.position++,a)},c.prototype.writeUint8=function(a){this.writeByte(a)},c.prototype.writeInt8=function(a){this.writeByte(a)},c.prototype.writeBytes=function(a,b,c){void 0===b&&(b=0),void 0===c&&(c=0);var d;if(!(0>b)&&!(0>c)&&(d=0==c?a.length-b:Math.min(a.length-b,c),d>0)){this.validateBuffer(d);for(var e=new DataView(a.buffer),f=b;d+b>f;f++)this.data.setUint8(this.position++,e.getUint8(f))}},c.prototype.writeDouble=function(a){this.validateBuffer(c.SIZE_OF_FLOAT64),this.data.setFloat64(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_FLOAT64},c.prototype.writeFloat=function(a){this.validateBuffer(c.SIZE_OF_FLOAT32),this.data.setFloat32(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_FLOAT32},c.prototype.writeInt=function(a){this.validateBuffer(c.SIZE_OF_INT32),this.data.setInt32(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_INT32},c.prototype.writeInt32=function(a){this.writeInt(a)},c.prototype.writeUnsignedShort=function(a){this.validateBuffer(c.SIZE_OF_INT16),this.data.setInt16(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_INT16},c.prototype.writeUint16=function(a){this.writeUnsignedShort(a)},c.prototype.writeUint64=function(a){this.validateBuffer(c.SIZE_OF_FLOAT64),this.data.setFloat64(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_FLOAT64},c.prototype.writeShort=function(a){this.validateBuffer(c.SIZE_OF_INT16),this.data.setUint16(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_INT16},c.prototype.writeUnsignedInt=function(a){this.validateBuffer(c.SIZE_OF_UINT32),this.data.setUint32(this.position,a,this.endian==b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_UINT32},c.prototype.writeUint32=function(a){this.writeUnsignedInt(a)},c.prototype.writeUTF=function(a){var d=this.encodeUTF8(a),e=d.length;this.validateBuffer(c.SIZE_OF_UINT16+e),this.data.setUint16(this.position,e,this.endian===b.LITTLE_ENDIAN),this.position+=c.SIZE_OF_UINT16,this._writeUint8Array(d,!1)},c.prototype.writeString=function(a){var b=new c;b.writeUTFBytes(a),this.writeUint16(b.length+1),this.writeBytes(b,0,b.length),this.writeByte(0)},c.prototype.writeStringByLen=function(a,b){var c=this.position;this.writeUTFBytes(a),this.position=c+b,this.length=this.position+1},c.prototype.readVector3D=function(b){void 0===b&&(b=!1);var c=new a.Vector3D;return c.x=this.readFloat(),c.y=this.readFloat(),c.z=this.readFloat(),b&&(c.w=this.readFloat()),c},c.prototype.writeUTFBytes=function(a){this._writeUint8Array(this.encodeUTF8(a))},c.prototype.toString=function(){return"[ByteArray] length:"+this.length+", bytesAvailable:"+this.bytesAvailable},c.prototype._writeUint8Array=function(a,b){void 0===b&&(b=!0),b&&this.validateBuffer(this.position+a.length);for(var c=0;c<a.length;c++)this.data.setUint8(this.position++,a[c])},c.prototype.validate=function(a){return this.data.byteLength>0&&this._position+a<=this.data.byteLength?!0:void 0},c.prototype.validateBuffer=function(a,b){if(void 0===b&&(b=!1),this.write_position=a>this.write_position?a:this.write_position,a+=this._position,this.data.byteLength<a||b){var c=new Uint8Array(new ArrayBuffer(a+this.BUFFER_EXT_SIZE)),d=Math.min(this.data.buffer.byteLength,a+this.BUFFER_EXT_SIZE);c.set(new Uint8Array(this.data.buffer,0,d)),this.buffer=c.buffer}},c.prototype.encodeUTF8=function(a){for(var b=0,c=this.stringToCodePoints(a),d=[];c.length>b;){var e=c[b++];if(this.inRange(e,55296,57343))this.encoderError(e);else if(this.inRange(e,0,127))d.push(e);else{var f,g;for(this.inRange(e,128,2047)?(f=1,g=192):this.inRange(e,2048,65535)?(f=2,g=224):this.inRange(e,65536,1114111)&&(f=3,g=240),d.push(this.div(e,Math.pow(64,f))+g);f>0;){var h=this.div(e,Math.pow(64,f-1));d.push(128+h%64),f-=1}}}return new Uint8Array(d)},c.prototype.decodeUTF8=function(a){for(var b,c=!1,d=0,e="",f=0,g=0,h=0,i=0;a.length>d;){var j=a[d++];if(j===this.EOF_byte)b=0!==g?this.decoderError(c):this.EOF_code_point;else if(0===g)this.inRange(j,0,127)?b=j:(this.inRange(j,194,223)?(g=1,i=128,f=j-192):this.inRange(j,224,239)?(g=2,i=2048,f=j-224):this.inRange(j,240,244)?(g=3,i=65536,f=j-240):this.decoderError(c),f*=Math.pow(64,g),b=null);else if(this.inRange(j,128,191))if(h+=1,f+=(j-128)*Math.pow(64,g-h),h!==g)b=null;else{var k=f,l=i;f=0,g=0,h=0,i=0,b=this.inRange(k,l,1114111)&&!this.inRange(k,55296,57343)?k:this.decoderError(c,j)}else f=0,g=0,h=0,i=0,d--,b=this.decoderError(c,j);null!==b&&b!==this.EOF_code_point&&(65535>=b?b>0&&(e+=String.fromCharCode(b)):(b-=65536,e+=String.fromCharCode(55296+(b>>10&1023)),e+=String.fromCharCode(56320+(1023&b))))}return e},c.prototype.encoderError=function(a){},c.prototype.decoderError=function(a,b){return b||65533},c.prototype.inRange=function(a,b,c){return a>=b&&c>=a},c.prototype.div=function(a,b){return Math.floor(a/b)},c.prototype.stringToCodePoints=function(a){for(var b=[],c=0,d=a.length;c<a.length;){var e=a.charCodeAt(c);if(this.inRange(e,55296,57343))if(this.inRange(e,56320,57343))b.push(65533);else if(c===d-1)b.push(65533);else{var f=a.charCodeAt(c+1);if(this.inRange(f,56320,57343)){var g=1023&e,h=1023&f;c+=1,b.push(65536+(g<<10)+h)}else b.push(65533)}else b.push(e);c+=1}return b},c.SIZE_OF_BOOLEAN=1,c.SIZE_OF_INT8=1,c.SIZE_OF_INT16=2,c.SIZE_OF_INT32=4,c.SIZE_OF_UINT8=1,c.SIZE_OF_UINT16=2,c.SIZE_OF_UINT32=4,c.SIZE_OF_FLOAT32=4,c.SIZE_OF_FLOAT64=8,c}();a.Pan3dByteArray=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a,b,c,d){void 0===a&&(a=null),void 0===b&&(b=null),void 0===c&&(c=null),void 0===d&&(d=.1),this.p1=a,this.p2=b,this.p3=c,this.precision=d}return a.prototype.setAllPoint=function(a,b,c){this.p1=a,this.p2=b,this.p3=c},a.prototype.checkPointIn=function(b){var c=this.getArea(),d=0;return d+=a.getAreaByPoints(b,this.p1,this.p2),d+=a.getAreaByPoints(b,this.p2,this.p3),d+=a.getAreaByPoints(b,this.p3,this.p1),d==c||Math.abs(d-c)<this.precision},a.prototype.getArea=function(){return a.getAreaByPoints(this.p1,this.p2,this.p3)},a.getAreaByPoints=function(a,b,c){var d=a.x-b.x,e=a.y-b.y,f=Math.sqrt(d*d+e*e);d=b.x-c.x,e=b.y-c.y;var g=Math.sqrt(d*d+e*e);d=c.x-a.x,e=c.y-a.y;var h=Math.sqrt(d*d+e*e),i=(f+g+h)/2,j=i*(i-f)*(i-g)*(i-h);return j>0?Math.sqrt(j):0},a.baseTri=new a,a}();a.TestTriangle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.getProgram=function(a){return this._dic[a]?this._dic[a]:(alert("please registe Program=>"+a),null)},b.prototype.registe=function(a,b){this._dic[a]||(b.encode(),b.useNum=1,b.name=a,this._dic[a]=b)},b.prototype.getMaterialProgram=function(a,b,c,d,e){void 0===d&&(d=null),void 0===e&&(e=!1);var f=a+"_"+c.url;if(d){for(var g=0;g<d.length;g++)f+="_"+d[g];f+=e?"true_":"false_"}if(this._dic[f])return this._dic[f].useNum++,this._dic[f];e&&(d=[c.usePbr,c.useNormal,c.hasFresnel,c.useDynamicIBL,c.lightProbe,c.directLight,c.noLight,c.fogMode]);var h=new b;h.paramAry=d,h.fragment=c.shaderStr;h.encode();return h.useNum++,this._dic[f]=h,h},b.prototype.outShader=function(a){for(var b=a.split("\n"),c=0;c<b.length;c++){var d='"';d+=b[c],c<b.length-1?(d+="\\n",d+='"',d+="+"):d+='"'}},b.prototype.gc=function(){a.prototype.gc.call(this)},b}(a.ResGC);a.ProgrmaManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.fragment=a.getFragmentShaderString(),a}return __extends(c,b),c.prototype.encode=function(){this.vertex=this.getVertexShaderString();var b=a.Scene_data.context3D.renderContext;this.program=b.createProgram(),this.vShader=b.createShader(b.VERTEX_SHADER),this.fShader=b.createShader(b.FRAGMENT_SHADER),b.shaderSource(this.vShader,this.vertex),b.shaderSource(this.fShader,this.fragment),b.compileShader(this.vShader),b.compileShader(this.fShader),b.attachShader(this.program,this.vShader),b.attachShader(this.program,this.fShader),this.binLocation(b),b.linkProgram(this.program),this.localDic=new Object;var c=b.getProgramInfoLog(this.program),d=b.getShaderInfoLog(this.vShader),e=b.getShaderInfoLog(this.fShader);return""!=c?""==d&&""==e?!0:!1:!0},c.prototype.getWebGLUniformLocation=function(b){var c=this.localDic[b];return c?c:(this.localDic[b]=a.Scene_data.context3D.getLocation(this.program,b),this.localDic[b])},c.prototype.binLocation=function(a){},c.prototype.getVertexShaderString=function(){return""},c.prototype.getFragmentShaderString=function(){return""},c.prototype.destory=function(){this.vertex=null,this.fragment=null,this.name=null,this.localDic=null,a.Scene_data.context3D.deleteShader(this)},c}(a.ResCount);a.Shader3D=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2CubeTexST")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 v2CubeTexST;uniform mat4 viewMatrix3D;uniform mat4 camMatrix3D;uniform mat4 posMatrix3D;varying vec2 v_texCoord;void main(void){   v_texCoord = vec2(v2CubeTexST.x, v2CubeTexST.y);   vec4 vt0= vec4(v3Position, 1.0);   vt0 = posMatrix3D * vt0;   vt0 = camMatrix3D * vt0;   vt0 = viewMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nuniform vec4 testconst;uniform vec4 testconst2;varying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\nvec4 test = vec4(0,0,0,1);\ntest.xyz = mix(vec3(1,1,1)*0.5,testconst.xyz,0.5);\ninfoUv.xyz = test.xyz * infoUv.xyz;\ngl_FragColor = infoUv;\n}";return a},b.buildShader="BuildShader",b}(a.Shader3D);a.BuildShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=a.call(this)||this;return b.name="Material_shader",b}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2CubeTexST");var b=this.paramAry[0],c=this.paramAry[1],d=(this.paramAry[4],this.paramAry[5]),e=this.paramAry[6];d||e||a.bindAttribLocation(this.program,2,"v2lightuv"),b?(a.bindAttribLocation(this.program,3,"v3Normal"),c&&(a.bindAttribLocation(this.program,4,"v3Tangent"),a.bindAttribLocation(this.program,5,"v3Bitangent"))):d&&a.bindAttribLocation(this.program,3,"v3Normal")},b.prototype.getVertexShaderString=function(){var a=this.paramAry[0],b=this.paramAry[1],c=(this.paramAry[2],this.paramAry[3],this.paramAry[4],this.paramAry[5]),d=this.paramAry[6],e=this.paramAry[7],f="attribute vec3 v3Position;\nattribute vec2 v2CubeTexST;\nvarying vec2 v0;\n";return c?f+="varying vec3 v2;\n":d||(f+="attribute vec2 v2lightuv;\nvarying vec2 v2;\n"),a?(f+="attribute vec3 v3Normal;\nvarying vec3 v1;\n",f+=b?"varying mat3 v4;\n":"varying vec3 v4;\n"):0!=e&&(f+="varying vec3 v1;\n"),b&&(f+="attribute vec3 v3Tangent;\nattribute vec3 v3Bitangent;\n"),c&&(a||(f+="attribute vec3 v3Normal;\n"),f+="uniform vec3 sunDirect;\nuniform vec3 sunColor;\nuniform vec3 ambientColor;\n"),f+="uniform mat4 vpMatrix3D;\nuniform mat4 posMatrix3D;\nuniform mat3 rotationMatrix3D;\n",f+="void main(void){\nv0 = vec2(v2CubeTexST.x, v2CubeTexST.y);\nvec4 vt0= vec4(v3Position, 1.0);\nvt0 = posMatrix3D * vt0;\n",c||d||(f+="v2 = vec2(v2lightuv.x, v2lightuv.y);\n"),(a||0!=e)&&(f+="v1 = vec3(vt0.x,vt0.y,vt0.z);\n"),f+="vt0 = vpMatrix3D * vt0;\n",a&&(f+=b?"v4 = mat3(rotationMatrix3D * v3Tangent,rotationMatrix3D * v3Bitangent, rotationMatrix3D * v3Normal);\n":"v4 = rotationMatrix3D * v3Normal;\n"),c&&(f+=a?"float suncos = dot(v4.xyz,sunDirect.xyz);\n":"vec3 n = rotationMatrix3D * v3Normal;\nfloat suncos = dot(n.xyz,sunDirect.xyz);\n",f+="suncos = clamp(suncos,0.0,1.0);\nv2 = sunColor * suncos + ambientColor;"),f+="gl_Position = vt0;}"},b.prototype.outstr=function(a){for(var b=a.split(";"),c=0;c<b.length;c++){String(trim(b[c]))}},b.prototype.getFragmentShaderString=function(){var a="uniform sampler2D s_texture1;\nuniform vec4 testconst;varying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz = testconst.xyz * infoUv.xyz;\ngl_FragColor = infoUv;\n}";return a},b.MATERIAL_SHADER="Material_shader",b}(a.Shader3D);a.MaterialShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,
new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=a.call(this)||this;return b.name="Material_Anim_shader",b}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"pos"),a.bindAttribLocation(this.program,1,"v2Uv"),a.bindAttribLocation(this.program,2,"boneID"),a.bindAttribLocation(this.program,3,"boneWeight");var b=this.paramAry[0],c=this.paramAry[1],d=this.paramAry[4],e=this.paramAry[5];b?(a.bindAttribLocation(this.program,4,"normal"),c&&(a.bindAttribLocation(this.program,5,"tangent"),a.bindAttribLocation(this.program,6,"bitangent"))):(d||e)&&a.bindAttribLocation(this.program,4,"normal")},b.getMd5M44Str=function(){var a="vec4 qdv(vec4 q,vec3 d, vec3 v ){\nvec3 t = 2.0 * cross(q.xyz, v);\nvec3 f = v + q.w * t + cross(q.xyz, t);\nreturn  vec4(f.x+d.x,f.y+d.y,f.z+d.z,1.0);\n }\nvec4 getQDdata(vec3 vdata){\nvec4 tempnum = qdv(boneQ[int(boneID.x)],boneD[int(boneID.x)],vdata) * boneWeight.x;\ntempnum += qdv(boneQ[int(boneID.y)],boneD[int(boneID.y)],vdata) * boneWeight.y;\ntempnum += qdv(boneQ[int(boneID.z)],boneD[int(boneID.z)],vdata)* boneWeight.z;\ntempnum += qdv(boneQ[int(boneID.w)],boneD[int(boneID.w)],vdata) * boneWeight.w;\ntempnum.x = tempnum.x*-1.0;\nreturn  tempnum;\n }\n";return a},b.getMd5M44NrmStr=function(){var a="vec4 qdvNrm(vec4 q, vec3 v ){\nvec3 t = 2.0 * cross(q.xyz, v);\nvec3 f = v + q.w * t + cross(q.xyz, t);\nreturn  vec4(f.x,f.y,f.z,1.0);\n }\nvec4 getQDdataNrm(vec3 vdata){\nvec4 tempnum = qdvNrm(boneQ[int(boneID.x)],vdata) * boneWeight.x;\ntempnum += qdvNrm(boneQ[int(boneID.y)],vdata) * boneWeight.y;\ntempnum += qdvNrm(boneQ[int(boneID.z)],vdata)* boneWeight.z;\ntempnum += qdvNrm(boneQ[int(boneID.w)],vdata) * boneWeight.w;\ntempnum.x = tempnum.x*-1.0;\ntempnum.xyz = normalize(tempnum.xyz);\nreturn  tempnum;\n }\n";return a},b.prototype.getVertexShaderString=function(){var a=this.paramAry[0],c=this.paramAry[1],d=(this.paramAry[2],this.paramAry[3],this.paramAry[4]),e=this.paramAry[5],f=this.paramAry[6],g="attribute vec4 pos;\nattribute vec2 v2Uv;\nattribute vec4 boneID;\nattribute vec4 boneWeight;\nvarying vec2 v0;\nuniform vec4 boneQ[54];\nuniform vec3 boneD[54];\nuniform mat4 vpMatrix3D;\nuniform mat4 posMatrix3D;\n";return d?g+="uniform vec3 sh[9];\nvarying vec3 v2;\n":e?g+="uniform vec3 sunDirect;\nuniform vec3 sunColor;\nuniform vec3 ambientColor;\nvarying vec3 v2;\n":f||(g+="varying vec2 v2;\n"),a?(g+="attribute vec4 normal;\nuniform mat4 rotationMatrix3D;\nvarying vec3 v1;\n",g+=c?"varying mat3 v4;\n":"varying vec3 v4;\n",c&&(g+="attribute vec4 tangent;\nattribute vec4 bitangent;\n")):(d||e)&&(g+="attribute vec4 normal;\nuniform mat4 rotationMatrix3D;\n"),g+=b.getMd5M44Str()+b.getMd5M44NrmStr()+"void main(void){\nv0 = v2Uv;\nvec4 vt0 = getQDdata(vec3(pos.x,pos.y,pos.z));\nvt0.xyz = vt0.xyz*1.0;\nvt0 = posMatrix3D * vt0;\n",a&&(g+="v1 = vec3(vt0.x,vt0.y,vt0.z);\n"),g+="vt0 = vpMatrix3D * vt0;\ngl_Position = vt0;\n",a?g+=c?"vec4 vt2 = getQDdataNrm(vec3(tangent.x,tangent.y,tangent.z));\nvt2 = rotationMatrix3D * vt2;\nvt2.xyz = normalize(vt2.xyz);\nvec4 vt1 = getQDdataNrm(vec3(bitangent.x,bitangent.y,bitangent.z));\nvt1 = rotationMatrix3D * vt1;\nvt1.xyz = normalize(vt1.xyz);\nvt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\nvt0 = rotationMatrix3D * vt0;\nvt0.xyz = normalize(vt0.xyz);\nv4 = mat3(vec3(vt2.x,vt2.y,vt2.z),vec3(vt1.x,vt1.y,vt1.z),vec3(vt0.x,vt0.y,vt0.z));\n":"vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\nvt0 = rotationMatrix3D * vt0;\nvt0.xyz = normalize(vt0.xyz);\nv4 = vec3(vt0.x,vt0.y,vt0.z);\n":(d||e)&&(g+="vt0 = getQDdataNrm(vec3(normal.x,normal.y,normal.z));\nvt0 = rotationMatrix3D * vt0;\nvt0.xyz = normalize(vt0.xyz);\n"),d?g+="vec3 lpb = sh[0] * 0.28209479177387814;\nlpb += sh[1] * (vt0.y * -0.4886025119029199);\nlpb += sh[2] * (vt0.z * 0.4886025119029199);\nlpb += sh[3] * (vt0.x * -0.4886025119029199);\nlpb += sh[4] * (vt0.x * vt0.y * 1.0925484305920792);\nlpb += sh[5] * (vt0.z * vt0.y * -1.0925484305920792);\nlpb += sh[6] * ((3.0 * vt0.z * vt0.z - 1.0) * 0.31539156525252005);\nlpb += sh[7] * (vt0.z * vt0.x * -1.0925484305920792);\nlpb += sh[8] * ((vt0.x * vt0.x - vt0.y * vt0.y) * 0.5462742152960396);\nv2 = lpb;\n":e?g+="float suncos = dot(vt0.xyz,sunDirect.xyz);\nsuncos = clamp(suncos,0.0,1.0);\nv2 = sunColor * suncos + ambientColor;":f||(g+="v2 = v2Uv;\n"),g+="}"},b.prototype.getFragmentShaderString=function(){var a="uniform sampler2D s_texture1;\nuniform vec4 testconst;varying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz = testconst.xyz * infoUv.xyz;\ngl_FragColor = infoUv;\n}";return a},b.MATERIAL_ANIM_SHADER="Material_Anim_shader",b}(a.Shader3D);a.MaterialAnimShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=a.call(this)||this;return b.name="Material_Batch_Anim_Shader",b}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"pos"),a.bindAttribLocation(this.program,1,"v2Uv"),a.bindAttribLocation(this.program,2,"boneID"),a.bindAttribLocation(this.program,3,"boneWeight");var b=this.paramAry[0],c=this.paramAry[1],d=this.paramAry[4],e=this.paramAry[5];b?(a.bindAttribLocation(this.program,4,"normal"),c&&(a.bindAttribLocation(this.program,5,"tangent"),a.bindAttribLocation(this.program,6,"bitangent"))):(d||e)&&a.bindAttribLocation(this.program,4,"normal")},b.prototype.getVertexShaderString=function(){var a=this.paramAry[0],b=this.paramAry[1],c=(this.paramAry[2],this.paramAry[3],this.paramAry[4]),d=this.paramAry[5],e=this.paramAry[6],f="precision mediump float;\nattribute vec4 pos;\nattribute vec3 v2Uv;\nattribute vec4 boneID;\nattribute vec4 boneWeight;\nvarying vec2 v0;\nuniform mat4 bone[19];\nuniform mat4 viewMatrix3D;\nuniform mat4 camMatrix3D;\nuniform mat4 posMatrixAry[6];\n";return c?f+="varying vec3 v2;\n":d?f+="uniform vec3 sunDirect;\nuniform vec3 sunColor;\nuniform vec3 ambientColor;\nvarying vec3 v2;\n":e||(f+="varying vec2 v2;\n"),a?(f+="attribute vec4 normal;\nuniform mat4 rotationMatrix3D;\nvarying vec3 v1;\n",f+=b?"varying mat3 v4;\n":"varying vec3 v4;\n",b&&(f+="attribute vec4 tangent;\nattribute vec4 bitangent;\n")):(c||d)&&(f+="attribute vec4 normal;\nuniform mat4 rotationMatrix3D;\n"),f+="void main(void){\nv0 = vec2(v2Uv.xy);\nvec4 vt0 = bone[int(boneID.x)] * pos * boneWeight.x;\nvt0 += bone[int(boneID.y)] * pos * boneWeight.y;\nvt0 += bone[int(boneID.z)] * pos * boneWeight.z;\nvt0 += bone[int(boneID.w)] * pos * boneWeight.w;\nvt0 = posMatrixAry[int(v2Uv.z)] * vt0;\n",a&&(f+="v1 = vec3(vt0.x,vt0.y,vt0.z);\n"),f+="vt0 = camMatrix3D * vt0;\nvt0 = viewMatrix3D * vt0;\ngl_Position = vt0;\n",a?f+=b?"vec4 vt2 = bone[int(boneID.x)] * tangent * boneWeight.x;\nvt2 += bone[int(boneID.y)] * tangent * boneWeight.y;\nvt2 += bone[int(boneID.z)] * tangent * boneWeight.z;\nvt2 += bone[int(boneID.w)] * tangent * boneWeight.w;\nvt2 = rotationMatrix3D * vt2;\nvt2.xyz = normalize(vt2.xyz);\nvec4 vt1 = bone[int(boneID.x)] * bitangent * boneWeight.x;\nvt1 += bone[int(boneID.y)] * bitangent * boneWeight.y;\nvt1 += bone[int(boneID.z)] * bitangent * boneWeight.z;\nvt1 += bone[int(boneID.w)] * bitangent * boneWeight.w;\nvt1 = rotationMatrix3D * vt1;\nvt1.xyz = normalize(vt1.xyz);\nvt0 = bone[int(boneID.x)] * normal * boneWeight.x;\nvt0 += bone[int(boneID.y)] * normal * boneWeight.y;\nvt0 += bone[int(boneID.z)] * normal * boneWeight.z;\nvt0 += bone[int(boneID.w)] * normal * boneWeight.w;\nvt0 = rotationMatrix3D * vt0;\nvt0.xyz = normalize(vt0.xyz);\nv4 = mat3(vec3(vt2.x,vt2.y,vt2.z),vec3(vt1.x,vt1.y,vt1.z),vec3(vt0.x,vt0.y,vt0.z));\n":"vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\nvt0 += bone[int(boneID.y)] * normal * boneWeight.y;\nvt0 += bone[int(boneID.z)] * normal * boneWeight.z;\nvt0 += bone[int(boneID.w)] * normal * boneWeight.w;\nvt0 = rotationMatrix3D * vt0;\nvt0.xyz = normalize(vt0.xyz);\nv4 = vec3(vt0.x,vt0.y,vt0.z);\n":(c||d)&&(f+="vt0 = bone[int(boneID.x)] * normal * boneWeight.x;\nvt0 += bone[int(boneID.y)] * normal * boneWeight.y;\nvt0 += bone[int(boneID.z)] * normal * boneWeight.z;\nvt0 += bone[int(boneID.w)] * normal * boneWeight.w;\nvt0 = rotationMatrix3D * vt0;\nvt0.xyz = normalize(vt0.xyz);\n"),c?f+="vec3 lpb = normalize(vec3(1.0,1.0,-1.0));\nfloat lp = min(0.0,dot(lpb,vec3(vt0.xyz)));\nlp = lp * 2.0 + 0.7;\nv2 = vec3(lp,lp,lp);\n":d?f+="float suncos = dot(vt0.xyz,sunDirect.xyz);\nsuncos = clamp(suncos,0.0,1.0);\nv2 = sunColor * suncos + ambientColor;":e||(f+="v2 = v2Uv;\n"),f+="}"},b.prototype.getFragmentShaderString=function(){var a="uniform sampler2D s_texture1;\nuniform vec4 testconst;varying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz = testconst.xyz * infoUv.xyz;\ngl_FragColor = infoUv;\n}";return a},b}(a.Shader3D);a.MaterialBatchAnimShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v3Normal")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec3 v3Normal;uniform mat4 viewMatrix3D;uniform mat4 camMatrix3D;uniform mat4 posMatrix3D;varying vec3 vNormal;void main(void){   vNormal = vec3(v3Normal.x, v3Normal.y,v3Normal.z);   vec4 vt0= vec4(v3Position, 1.0);   vt0 = posMatrix3D * vt0;   vt0 = camMatrix3D * vt0;   vt0 = viewMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform samplerCube s_texture;\nvarying vec3 vNormal;\nvoid main(void)\n{\nvec4 infoUv = textureCube(s_texture, vNormal);\ngl_FragColor = infoUv;\n}";return a},b.Sky_Shader="SkyShader",b}(a.Shader3D);a.SkyShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform mat4 viewMatrix3D;uniform mat4 camMatrix3D;uniform vec4 pos[30];varying vec2 v_texCoord;void main(void){   v_texCoord = vec2(v2uv.x, v2uv.y);   vec3 vt1= vec3(v3Pos.xyz * pos[int(v2uv.z)].w + pos[int(v2uv.z)].xyz);   vec4 vt0= vec4(vt1, 1.0);   vt0 = camMatrix3D * vt0;   vt0 = viewMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz *= infoUv.w;\ngl_FragColor = infoUv;\n}";return a},b.Display3DShadowShader="Display3DShadowShader",b}(a.Shader3D);a.Display3DShadowShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform vec4 ui[50];uniform vec4 ui2[50];varying vec2 v_texCoord;void main(void){   vec4 data = ui2[int(v2uv.z)];   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);   data = ui[int(v2uv.z)];   vec3 pos = vec3(0.0,0.0,0.0);   pos.xy = v3Pos.xy * data.zw * 2.0;   pos.x += data.x * 2.0 - 1.0;   pos.y += -data.y * 2.0 + 1.0;   vec4 vt0= vec4(pos, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz *= infoUv.w;\ngl_FragColor = infoUv;\n}";return a},b.UI_SHADER="UIShader",b}(a.Shader3D);a.UIShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec2 v2uv;uniform vec2 scale;varying vec2 v_texCoord;void main(void){   v_texCoord = vec2(v2uv.x, v2uv.y);   vec4 vt0= vec4(v3Pos.x*scale.x,v3Pos.y*scale.y,v3Pos.z,1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nuniform float alpha;varying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.w = alpha;\ninfoUv.xyz *= infoUv.w;\ngl_FragColor = infoUv;\n}";return a},b.UI_IMG_SHADER="UI_img_Shader",b}(a.Shader3D);a.UIImageShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;uniform vec4 ui;void main(void){   vec3 pos = vec3(0.0,0.0,0.0);   pos.xy = v3Pos.xy * ui.zw * 2.0;   pos.x += ui.x * 2.0 - 1.0;   pos.y += -ui.y * 2.0 + 1.0;   vec4 vt0= vec4(pos, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nvoid main(void)\n{\ngl_FragColor = vec4(0.5,0.5,0.5,1.0);\n}";return a},b.UI_MASK_SHADER="UImaskShader",b}(a.Shader3D);a.UIMaskShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform mat4 viewMatrix3D;\nuniform mat4 camMatrix3D;\nuniform mat4 watchCamMatrix3D;\nuniform vec4 posdata[24];uniform vec2 outuv;varying vec2 v_texCoord;void main(void){   vec4 data = posdata[int(v2uv.z)];   vec4 vt0= vec4(v3Pos * data.w,1.0);   vt0= watchCamMatrix3D * vt0;   vt0.xyz += data.xyz;   v_texCoord = vec2(v2uv.x,v2uv.y) + outuv;   gl_Position = viewMatrix3D * camMatrix3D * vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz *= infoUv.w;\nif(infoUv.w < 0.1){discard;}\ngl_FragColor = infoUv;\n}";return a},b.MOVIE2D_SHADER="Movie2DShader",b}(a.Shader3D);a.Movie2DShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform mat4 viewMatrix3D;\nuniform mat4 camMatrix3D;\nuniform mat4 watchCamMatrix3D;\nuniform vec4 posdata[12];varying vec2 v_texCoord;void main(void){   vec4 data = posdata[int(v2uv.z)];   vec4 vt0= vec4(v3Pos * data.w,1.0);   vt0= watchCamMatrix3D * vt0;   vt0.xyz += data.xyz;   v_texCoord = vec2(v2uv.x,v2uv.y);   gl_Position = viewMatrix3D * camMatrix3D * vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz *= infoUv.w;\nif(infoUv.w < 0.1){discard;}\ngl_FragColor = infoUv;\n}";return a},b.SPRITE2D_SHADER="Sprite2DShader",b}(a.Shader3D);a.Sprite2DShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2TexCoord")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 v2TexCoord;\nuniform mat4 viewMatrix3D;uniform mat4 camMatrix3D;uniform mat4 posMatrix3D;varying vec2 v0;\nvoid main(void){ v0 = v2TexCoord;   vec4 vt0= vec4(v3Position, 1.0);   vt0 = posMatrix3D * vt0;   vt0 = camMatrix3D * vt0;   vt0 = viewMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;uniform sampler2D idmaptexture;uniform sampler2D infotexture;uniform sampler2D sixtexture;uniform sampler2D lightexture;vec4 qdvNrm(float indx ,vec2 uvpos){vec2 sixuvTx=uvpos; float ccavid= floor(indx*255.0);if (ccavid==0.0) {\n} else  if (ccavid==1.0){\nsixuvTx.x=sixuvTx.x+0.5;} else  if (ccavid==2.0){sixuvTx.y=sixuvTx.y+0.5;}else{sixuvTx.x=sixuvTx.x+0.5;sixuvTx.y=sixuvTx.y+0.5;}; sixuvTx.x=sixuvTx.x+0.001;sixuvTx.y=sixuvTx.y+0.001;vec4 sixUvColor = texture2D(sixtexture, sixuvTx.xy);\nreturn  sixUvColor;\n }\nvarying vec2 v0;void main(void){vec4 idUv = texture2D(idmaptexture, v0.xy);\nvec4 infoUv = texture2D(infotexture, v0.xy);\nvec4 sixUv = texture2D(sixtexture, v0.xy);\nvec4 lightUv = texture2D(lightexture, v0*0.995+0.0025);\nvec2 sixuv=fract(v0*10.0);  sixuv=sixuv*0.498; vec4 tempnumA = qdvNrm(idUv.x,sixuv) * infoUv.x;\nvec4 tempnumB = qdvNrm(idUv.y,sixuv) * infoUv.y;\nvec4 tempnumC = qdvNrm(idUv.z,sixuv) * infoUv.z;\nvec4 tempnumD = tempnumA+tempnumB+tempnumC;\n tempnumD.xyz=tempnumD.xyz*lightUv.xyz*2.0; gl_FragColor = tempnumD;}";return a},b.TerrainDisplay3DShader="TerrainDisplay3DShader",b}(a.Shader3D);a.TerrainDisplay3DShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.destory=function(){for(var a=0;a<this.dataAry.length;a++)this.dataAry[a].destory()},c.prototype.getCombineParticle=function(){var b=new a.CombineParticle;b.maxTime=this.maxTime;for(var c=0;c<this.dataAry.length;c++){var d=this.dataAry[c].creatPartilce();b.addPrticleItem(d)}return b.sourceData=this,this.useNum++,b},c.prototype.setDataByte=function(b){b.position=0;var c=b.readInt(),d=b.readInt();this.maxTime=0,this.dataAry=new Array;for(var e=0;d>e;e++){var f=b.readInt(),g=this.getParticleDataType(f);g.version=c,g.setAllByteInfo(b),this.dataAry.push(g),g.timelineData.maxFrameNum>this.maxTime&&(this.maxTime=g.timelineData.maxFrameNum)}this.maxTime*=a.Scene_data.frameTime},c.prototype.getParticleDataType=function(b){var c;switch(b){case 1:c=new a.ParticleFacetData;break;case 18:c=new a.ParticleBallData;break;case 3:c=new a.ParticleLocusData;break;case 14:c=new a.ParticleLocusballData;break;case 9:case 4:case 7:c=new a.ParticleModelData;break;case 8:c=new a.ParticleFollowData;break;case 12:c=new a.ParticleFollowLocusData;break;case 13:c=new a.ParticleBoneData}return c},c}(a.ResCount);a.CombineParticleData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._maxTime=1e6,c._rotationX=0,c._rotationY=0,c._rotationZ=0,c.hasMulItem=!1,c.sceneVisible=!0,c.dynamic=!1,c.hasDestory=!1,c._displayAry=new Array,c._time=0,c.bindMatrix=new a.Matrix3D,c.invertBindMatrix=new a.Matrix3D,c.bindVecter3d=new a.Vector3D,c.bindScale=new a.Vector3D(1,1,1),c.groupMatrix=new a.Matrix3D,c.groupRotationMatrix=new a.Matrix3D,c}return __extends(c,b),Object.defineProperty(c.prototype,"displayAry",{get:function(){return this._displayAry},set:function(a){this._displayAry=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"maxTime",{set:function(a){this._maxTime=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"bindTarget",{set:function(a){this._bindTarget=a,this.invertBindMatrix.isIdentity=!1},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"bindSocket",{set:function(a){this._bindSocket=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"x",{get:function(){return this.bindVecter3d.x},set:function(a){this.bindVecter3d.x=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"y",{get:function(){return this.bindVecter3d.y},set:function(a){this.bindVecter3d.y=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"z",{get:function(){return this.bindVecter3d.z},set:function(a){this.bindVecter3d.z=a},enumerable:!0,configurable:!0}),c.prototype.setPos=function(a,b,c){this.bindVecter3d.setTo(a,b,c);for(var d=0;d<this._displayAry.length;d++)this._displayAry[d].resetPos()},c.prototype.setMulPos=function(a){for(var b=0;b<this._displayAry.length;b++)this._displayAry[b].resetMulPos(a)},Object.defineProperty(c.prototype,"scaleX",{set:function(a){this.bindScale.x=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scaleY",{set:function(a){this.bindScale.y=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"scaleZ",{set:function(a){this.bindScale.z=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"rotationX",{set:function(a){this._rotationX=a,this.applyRotation()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"rotationY",{set:function(a){this._rotationY=a,this.applyRotation()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"rotationZ",{set:function(a){this._rotationZ=a,this.applyRotation()},enumerable:!0,configurable:!0}),c.prototype.applyRotation=function(){this.bindMatrix.identity(),this.bindMatrix.appendRotation(this._rotationX,a.Vector3D.X_AXIS),this.bindMatrix.appendRotation(this._rotationY,a.Vector3D.Y_AXIS),this.bindMatrix.appendRotation(this._rotationZ,a.Vector3D.Z_AXIS),this.bindMatrix.copyTo(this.invertBindMatrix),this.invertBindMatrix.invert(),this.invertBindMatrix.isIdentity=!1},c.prototype.setGroup=function(b,c,d){this._isInGroup=!0,this._groupPos=b,this._groupRotation=c,this._groupScale=d,this.groupMatrix.isIdentity=!1,this.groupMatrix.identity(),this.groupMatrix.appendScale(d.x,d.y,d.z),this.groupMatrix.appendRotation(c.x,a.Vector3D.X_AXIS),this.groupMatrix.appendRotation(c.y,a.Vector3D.Y_AXIS),this.groupMatrix.appendRotation(c.z,a.Vector3D.Z_AXIS),this.groupMatrix.appendTranslation(b.x,b.y,b.z),this.groupRotationMatrix.isIdentity=!1,this.groupRotationMatrix.identity(),this.groupRotationMatrix.prependRotation(c.z,a.Vector3D.Z_AXIS),this.groupRotationMatrix.prependRotation(c.y,a.Vector3D.Y_AXIS),this.groupRotationMatrix.prependRotation(c.x,a.Vector3D.X_AXIS)},c.prototype.setDataByte=function(b){b.position=0;var c=b.readInt(),d=b.readInt();this._maxTime=0,this._displayAry=new Array;for(var e=0;d>e;e++){var f=b.readInt(),g=this.getDisplay3DById(f);g.setAllByteInfo(b,c),g.setBind(this.bindVecter3d,this.bindMatrix,this.bindScale,this.invertBindMatrix,this.groupMatrix),this._displayAry.push(g),g.timeline.maxFrameNum>this._maxTime&&(this._maxTime=g.timeline.maxFrameNum)}this._maxTime*=a.Scene_data.frameTime},c.prototype.addPrticleItem=function(a){a.visible=!1,a.setBind(this.bindVecter3d,this.bindMatrix,this.bindScale,this.invertBindMatrix,this.groupMatrix),this._displayAry.push(a)},c.prototype.getDisplay3DById=function(a){var b=new Object;return b.particleType=a,this.getDisplay3D(b)},c.prototype.setData=function(b){this._displayAry=new Array,this._maxTime=0;for(var c=0;c<b.length;c++){var d=b[c].display,e=this.getDisplay3D(d);e.setBind(this.bindVecter3d,this.bindMatrix,this.bindScale,this.invertBindMatrix,this.groupMatrix),this._displayAry.push(e),e.timeline.maxFrameNum>this._maxTime&&(this._maxTime=e.timeline.maxFrameNum)}this._maxTime*=a.Scene_data.frameTime},c.prototype.updateTime=function(b){if(this._time+=b,this._displayAry){for(var c=0;c<this._displayAry.length;c++)this._displayAry[c].updateTime(this._time);this.updateBind(),this._time>=this._maxTime&&this.dispatchEvent(new a.BaseEvent(a.BaseEvent.COMPLETE))}},c.prototype.updateBind=function(){this._bindTarget&&(this._bindTarget.getSocket(this._bindSocket,this.bindMatrix),this.bindVecter3d.setTo(this.bindMatrix.x,this.bindMatrix.y,this.bindMatrix.z),this.bindMatrix.identityPostion(),this.groupRotationMatrix.isIdentity?this.bindMatrix.invertToMatrix(this.invertBindMatrix):(this.bindMatrix.copyTo(this.invertBindMatrix),this.invertBindMatrix.prepend(this.groupRotationMatrix),this.invertBindMatrix.invert()))},c.prototype.reset=function(){this._time=0;for(var a=0;a<this._displayAry.length;a++)this._displayAry[a].reset()},c.prototype.update=function(){if(this.sceneVisible&&this._displayAry)for(var a=0;a<this._displayAry.length;a++)this._displayAry[a].update()},c.prototype.updateItem=function(a){this.sceneVisible&&(this.hasDestory||this._displayAry[a].update())},Object.defineProperty(c.prototype,"size",{get:function(){return this._displayAry?this._displayAry.length:0},enumerable:!0,configurable:!0}),c.prototype.getDisplay3D=function(b){var c,d=b.particleType;switch(d){case 1:c=new a.Display3DFacetParticle;break;case 18:c=new a.Display3DBallPartilce;break;case 3:c=new a.Display3DLocusPartilce;break;case 14:c=new a.Display3DLocusBallPartilce;break;case 9:c=new a.Display3DModelObjParticle;break;case 4:c=new a.Display3DModelPartilce;break;case 7:c=new a.Display3dModelAnimParticle;break;case 8:c=new a.Display3DFollowPartilce}return c.visible=!1,c},c.prototype.destory=function(){this.sourceData&&this.sourceData.useNum--;for(var a=0;a<this._displayAry.length;a++)this._displayAry[a].destory();this._displayAry.length=0,this._displayAry=null,this.bindMatrix=null,this.bindVecter3d=null,this.bindScale=null,this.invertBindMatrix=null,this._bindTarget=null,this._bindSocket=null,this._groupPos=null,this._groupRotation=null,this._groupScale=null,this.groupMatrix=null,this.groupRotationMatrix=null,this.hasDestory=!0},c}(a.EventDispatcher);a.CombineParticle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._time=0,a.renderDic=new Object,a._particleList=new Array,a}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.getParticleByte=function(b){b=b.replace("_byte.txt",".txt"),b=b.replace(".txt","_byte.txt");var c=new a.CombineParticle,d=b;if(this._dic[d]){var e=this._dic[d];c=e.getCombineParticle()}return c.url=d,c},c.prototype.registerUrl=function(a){if(a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt"),this._dic[a]){var b=this._dic[a];b.useNum++}},c.prototype.releaseUrl=function(a){if(a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt"),this._dic[a]){var b=this._dic[a];b.clearUseNum()}},c.prototype.addResByte=function(b,c){if(!this._dic[b]){var d=new a.CombineParticleData;d.setDataByte(c),this._dic[b]=d}},c.prototype.update=function(){this.updateRenderDic(),this.clearPaticleVa()},c.prototype.clearPaticleVa=function(){a.Scene_data.context3D.clearVa(2),a.Scene_data.context3D.clearVa(3),a.Scene_data.context3D.clearVa(4),a.Scene_data.context3D.clearVa(5)},c.prototype.setHide=function(){for(var a=0;a<this._particleList.length;a++)!this._particleList[a].dynamic},Object.defineProperty(c.prototype,"particleList",{get:function(){return this._particleList},enumerable:!0,configurable:!0}),c.prototype.updateTime=function(){for(var b=a.TimeUtil.getTimer(),c=b-this._time,d=0;d<this._particleList.length;d++)this._particleList[d].sceneVisible&&this._particleList[d].updateTime(c);this._time=b},c.prototype.addRenderDic=function(a){var b=a.url;this.renderDic[b]||(this.renderDic[b]=new Array),this.renderDic[b].push(a)},c.prototype.removeRenderDic=function(a){var b=a.url,c=this.renderDic[b].indexOf(a);-1!=c&&(this.renderDic[b].splice(c,1),0==this.renderDic[b].length&&delete this.renderDic[b])},c.prototype.updateRenderDic=function(){for(var a in this.renderDic){var b=this.renderDic[a];if(1==b.length)b[0].update();else for(var c=b[0].size,d=0;c>d;d++)for(var e=0;e<b.length;e++)b[e].updateItem(d)}},c.prototype.addParticle=function(a){-1==this._particleList.lastIndexOf(a)&&(this._particleList.push(a),this.addRenderDic(a))},c.prototype.removeParticle=function(a){var b=this._particleList.indexOf(a);-1!=b&&(this._particleList.splice(b,1),
this.removeRenderDic(a))},c.prototype.gc=function(){b.prototype.gc.call(this)},c}(a.ResGC);a.ParticleManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.isInGroup=!1,c.visible=!0,c._rotationMatrix=new a.Matrix3D,c.modelMatrix=new a.Matrix3D,c}return __extends(c,b),c.prototype.onCreated=function(){},c.prototype.setBind=function(a,b,c,d,e){this.bindVecter3d=a,this.bindMatrix=b,this.bindScale=c,this.invertBindMatrix=d,this.groupMatrix=e},c.prototype.getMulBindList=function(){return null},c.prototype.updateMatrix=function(){this.bindMatrix&&(this.modelMatrix.identity(),this.groupMatrix.isIdentity||this.posMatrix.append(this.groupMatrix),this.modelMatrix.append(this.posMatrix),this.modelMatrix.append(this.bindMatrix),this.modelMatrix.appendTranslation(this.bindVecter3d.x,this.bindVecter3d.y,this.bindVecter3d.z))},Object.defineProperty(c.prototype,"cantUseEffectsLev",{get:function(){var b=this.data._renderPriority<=a.Scene_data.effectsLev;return!b},enumerable:!0,configurable:!0}),c.prototype.updateTime=function(a){this.cantUseEffectsLev||(this._time=a-this._beginTime,this._time+=this.data._delayedTime,this.timeline.updateTime(a),this.visible=this.timeline.visible,this.posMatrix.identity(),this.posMatrix.prependScale(.1*this._scaleX*this.bindScale.x*this.data.overAllScale,.1*this._scaleY*this.bindScale.y*this.data.overAllScale,.1*this._scaleZ*this.bindScale.z*this.data.overAllScale),this.timeline.updateMatrix(this.posMatrix,this))},c.prototype.reset=function(){this.timeline.reset(),this.updateTime(0)},c.prototype.clearAllAnim=function(){},c.prototype.update=function(){this.cantUseEffectsLev||this.visible&&this.data.materialParam&&(0==this.data._alphaMode&&(this.data._alphaMode=-1),a.Scene_data.context3D.setBlendParticleFactors(this.data._alphaMode),a.Scene_data.context3D.cullFaceBack(this.data.materialParam.material.backCull),this.data.materialParam&&a.Scene_data.context3D.setProgram(this.data.materialParam.program),this.updateMatrix(),this.setVc(),this.setVa(),this.resetVa())},c.prototype.setVc=function(){},c.prototype.pushVc=function(){a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.data.vcmatData)},c.prototype.setVa=function(){},c.prototype.resetVa=function(){},c.prototype.setMaterialVc=function(){if(this.data.materialParam){for(var b=this.data.materialParam.dynamicConstList,c=this._time%(a.Scene_data.frameTime*this.data._life),d=0;d<b.length;d++)b[d].update(c);this.data.materialParam.material.fcNum<=0||(c*=this.data.materialParam.material.timeSpeed,this.data.materialParam.material.update(c),a.Scene_data.context3D.setVc4fv(this.data.materialParam.shader,"fc",this.data.materialParam.material.fcData))}},c.prototype.setMaterialTexture=function(){if(this.data.materialParam){for(var b=this.data.materialParam.material.texList,c=0;c<b.length;c++)b[c].isDynamic||a.Scene_data.context3D.setRenderTexture(this.data.materialParam.shader,b[c].name,b[c].texture,b[c].id,!0);for(var d=this.data.materialParam.dynamicTexList,c=0;c<d.length;c++)a.Scene_data.context3D.setRenderTexture(this.data.materialParam.shader,d[c].target.name,d[c].texture,d[c].target.id,!0)}},c.prototype.inverBind=function(){this.invertBindMatrix.isIdentity||this._rotationMatrix.prepend(this.invertBindMatrix)},c.prototype.resetPos=function(){},c.prototype.resetMulPos=function(a){},c.prototype.getVector3DByObject=function(b){return b?new a.Vector3D(b.x,b.y,b.z,b.w):null},c.prototype.clone=function(){return null},c.prototype.setAllByteInfo=function(b,c){void 0===c&&(c=0),this.creatData(),this.data.version=c,this.data.setAllByteInfo(b),this.timeline=new a.TimeLine,this.timeline.setAllDataInfo(this.data.timelineData),this._beginTime=this.timeline.beginTime},c.prototype.creatData=function(){this.data=new a.ParticleData},c.prototype.setTimeLine=function(a){this.timeline=a,this._beginTime=a.beginTime},c.prototype.destory=function(){this.timeline=null,this.bindMatrix=null,this.bindVecter3d=null,this.bindScale=null,this.invertBindMatrix=null,this.groupMatrix=null,this._rotationMatrix=null,this.modelMatrix=null,this.groupPos=null,this.groupScale=null,this.groupRotation=null},c}(a.Object3D);a.Display3DParticle=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._delayedTime=0,this._width=100,this._height=100,this._originWidthScale=.5,this._originHeightScale=.5,this._eyeDistance=0,this._watchEye=!1,this._isZiZhuan=!1,this.overAllScale=1}return b.prototype.destory=function(){this.objData&&this.objData.destory(),this.materialParam.destory(),this.timelineData.destory(),this.timelineData=null},b.prototype.uploadGpu=function(){},b.prototype.regShader=function(){},b.prototype.initVcData=function(){},b.prototype.creatPartilce=function(){var b=this.getParticle();b.data=this;var c=new a.TimeLine;return c.setAllDataInfo(this.timelineData),b.setTimeLine(c),b.onCreated(),b},b.prototype.getParticle=function(){return null},b.prototype.setAllByteInfo=function(b){this.timelineData=new a.TimeLineData,this.timelineData.setByteData(b),this._beginTime=this.timelineData.beginTime,this.version>=15&&(this._delayedTime=b.readFloat()),this._width=b.readFloat(),this._height=b.readFloat(),this._widthFixed=b.readBoolean(),this._heightFixed=b.readBoolean(),this._originWidthScale=b.readFloat(),this._originHeightScale=b.readFloat(),this._eyeDistance=b.readFloat(),this._alphaMode=b.readFloat(),this._uSpeed=b.readFloat(),this._vSpeed=b.readFloat(),this._animLine=b.readFloat(),this._animRow=b.readFloat(),this._animInterval=b.readFloat(),this._renderPriority=b.readFloat(),this._distortion=b.readBoolean(),this._isUV=b.readBoolean(),this._isU=b.readBoolean(),this._isV=b.readBoolean(),this._life=b.readFloat(),this._life=this._life>1e4?a.Scene_data.MAX_NUMBER:this._life,this._watchEye=b.readBoolean(),this._ziZhuanAngly=new a.Vector3D,this._ziZhuanAngly.x=b.readFloat(),this._ziZhuanAngly.y=b.readFloat(),this._ziZhuanAngly.z=b.readFloat(),this._ziZhuanAngly.w=b.readFloat(),this.rotationV3d=new a.Vector3D,this.rotationV3d.x=b.readFloat(),this.rotationV3d.y=b.readFloat(),this.rotationV3d.z=b.readFloat(),this.center=new a.Vector3D,this.center.x=b.readFloat(),this.center.y=b.readFloat(),this.center.z=b.readFloat(),this.center.w=b.readFloat(),this.overAllScale=b.readFloat(),!this._ziZhuanAngly||0==this._ziZhuanAngly.x&&0==this._ziZhuanAngly.y&&0==this._ziZhuanAngly.z||(this._isZiZhuan=!0),this.readMaterialPara(b);var c=b.readUTF();c=c.replace("_byte.txt",".txt"),c=c.replace(".txt","_byte.txt"),this.materialByteUrl=c},Object.defineProperty(b.prototype,"materialByteUrl",{set:function(b){var c=this;this._materialUrl!=b&&(this._materialUrl=b,a.MaterialManager.getInstance().getMaterialByte(a.Scene_data.fileRoot+b,function(a){c.onMaterialLoad(a)}))},enumerable:!0,configurable:!0}),b.prototype.onMaterialLoad=function(b){this.materialParam=new a.MaterialParam,this.materialParam.setMaterial(b),this.materialParam.setLife(this._life),this.materialParamData&&(this.materialParam.setTextObj(this.materialParamData.texAry),this.materialParam.setConstObj(this.materialParamData.conAry)),a.MaterialManager.getInstance().loadDynamicTexUtil(this.materialParam),this.regShader()},b.prototype.readMaterialPara=function(a){this.materialParamData=new Object;var b=(a.readUTF(),a.readInt());this.materialParamData.texAry=new Array;for(var c=0;b>c;c++){var d=new Object;d.isParticleColor=a.readBoolean(),d.paramName=a.readUTF(),d.url=a.readUTF(),d.isParticleColor&&(d.curve=new Object,this.readTempCurve(a,d.curve)),this.materialParamData.texAry.push(d)}this.readMaterialParaConAry(a)},b.prototype.readTempCurve=function(a,b){b.values=new Array;var c=!1;if(this.version>=12){var d=a.readInt();if(d>0)var e=a.readFloat();for(var f=0;d>f;f++){for(var g=a.readInt(),h=new Array,i=0;g>i;i++)h.push(a.readByte()/127*e);b.values.push(h)}c=!0}b.type=a.readFloat(),b.maxFrame=a.readFloat(),b.sideType=a.readBoolean(),b.speedType=a.readBoolean(),b.useColorType=a.readBoolean(),b.items=this.readItems(a),c||this.makeCurveData(b)},b.prototype.readItems=function(a){for(var b=new Array,c=a.readInt(),d=0;c>d;d++){var e=new Object;e.frame=a.readInt(),e.vec3=a.readVector3D(!0),e.rotation=a.readVector3D(!0),e.rotationLeft=a.readVector3D(!0),b.push(e)}return b},b.prototype.makeCurveData=function(a){for(var b=a.items,c=new Array,d=new Array,e=new Array,f=new Array,g=0;g<b.length;g++)if(g==b.length-1)c.push(b[g].vec3.x),d.push(b[g].vec3.y),e.push(b[g].vec3.z),f.push(b[g].vec3.w);else{var h=b[g+1].frame-b[g].frame,i=b[g].vec3,j=b[g+1].vec3,k=a.items[g].rotation,l=a.items[g+1].rotationLeft;c=c.concat(this.getBzData(i.x,j.x,k.x,l.x,h)),d=d.concat(this.getBzData(i.y,j.y,k.y,l.y,h)),e=e.concat(this.getBzData(i.z,j.z,k.z,l.z,h)),f=f.concat(this.getBzData(i.w,j.w,k.w,l.w,h))}a.values=new Array,a.values[0]=c,a.values[1]=d,a.values[2]=e,a.values[3]=f},b.prototype.getBzData=function(b,c,d,e,f){var g=10,h=new a.Vector2D(0,b*g),i=new a.Vector2D(f,c*g),j=new a.Matrix3D,k=new a.Vector3D;j.identity(),j.appendRotation(-d,a.Vector3D.Z_AXIS),k=j.transformVector(new a.Vector3D(f/2,0,0));var l=new a.Vector2D(f/2,h.y+k.y);j.identity(),j.appendRotation(-e,a.Vector3D.Z_AXIS),k=j.transformVector(new a.Vector3D(-f/2,0,0));for(var m=new a.Vector2D(f/2,i.y+k.y),n=[h,l,m,i],o=new Array,p=1;3*f>p;p++)o.push(this.drawbezier(n,p/(3*f)));var q=new Array;for(p=0;f>p;p++)for(var r=0;r<o.length;r++)if(o[r].x>=p){q.push(o[r].y/g);break}return q},b.prototype.drawbezier=function(b,c){var d=new Array;if(0==b.length)return new a.Vector2D;for(var e in b)d.push(new a.Vector2D(b[e].x,b[e].y));for(;d.length>1;){for(var f=0;f<d.length-1;f++)this.mathmidpoint(d[f],d[f+1],c);d.pop()}return d[0]},b.prototype.mathmidpoint=function(a,b,c){var d,e;d=a.x+(b.x-a.x)*c,e=a.y+(b.y-a.y)*c,a.x=d,a.y=e},b.prototype.readMaterialParaConAry=function(a){for(var b=new Array,c=a.readInt(),d=0;c>d;d++){var e=new Object;e.type=a.readFloat(),e.indexID=a.readFloat(),e.paramName=a.readUTF(),e.curve=new Object,this.readTempCurve(a,e.curve),b.push(e)}this.materialParamData.conAry=b},b.prototype.setFloat32Vec=function(a,b){},b.prototype.setFloat32Mat=function(a,b){},b}();a.ParticleData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b}(a.ObjData);a.ParticleGpuData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._lifeVisible=!0,a._resultUvVec=new Array(2),a}return __extends(c,b),Object.defineProperty(c.prototype,"facetdata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleFacetData},c.prototype.update=function(){this._lifeVisible&&b.prototype.update.call(this)},c.prototype.reset=function(){b.prototype.reset.call(this),this._lifeVisible=!0},c.prototype.setVc=function(){this.updateRotaionMatrix(),this.updateUV(),this.data.vcmatData.set(a.Scene_data.viewMatrx3D.m,0),this.data.vcmatData.set(a.Scene_data.cam3D.cameraMatrix.m,16),this.data.vcmatData.set(this.modelMatrix.m,48),this.data.vcmatData.set(this._rotationMatrix.m,32),this.data.vcmatData.set(this._resultUvVec,64),this.setMaterialVc(),!this.facetdata._isCycle&&this._time/a.Scene_data.frameTime>this.data._life-2&&(this._lifeVisible=!1),a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.data.vcmatData)},c.prototype.setVa=function(){var b=a.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.data.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.data.objData.stride,12)),this.setMaterialTexture(),a.Scene_data.context3D.drawCall(this.data.objData.indexBuffer,this.data.objData.treNum)},c.prototype.updateRotaionMatrix=function(){this._rotationMatrix.identity(),this.data._watchEye&&(this.timeline.inverAxisRotation(this._rotationMatrix),this.facetdata._locky||this.facetdata._lockx||this.inverBind(),this.facetdata._locky||this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),this.facetdata._lockx||this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS)),this.data._isZiZhuan&&this.timeline.applySelfRotation(this._rotationMatrix,this.data._ziZhuanAngly)},c.prototype.updateUV=function(){var b=float2int(this._time/a.Scene_data.frameTime);b=b>this.facetdata._maxAnimTime?this.facetdata._maxAnimTime:b,b=b/this.data._animInterval%(this.data._animLine*this.data._animRow),this._resultUvVec[0]=float2int(b%this.data._animLine)/this.data._animLine+this._time/a.Scene_data.frameTime*this.data._uSpeed,this._resultUvVec[1]=float2int(b/this.data._animLine)/this.data._animRow+this._time/a.Scene_data.frameTime*this.data._vSpeed},c}(a.Display3DParticle);a.Display3DFacetParticle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2TexCoord")},b.prototype.getMat4Str=function(a){return"vcmat["+b.shader_mat4[a]+"]"},b.prototype.getVec4Str=function(a){return"vcmat["+b.shader_vec4[a][0]+"]["+b.shader_vec4[a][1]+"]"},b.getVcSize=function(){return 5},b.prototype.getVertexShaderString=function(){var a="attribute vec4 v3Position;\nattribute vec2 v2TexCoord;\nuniform mat4 vcmat["+b.getVcSize()+"];\nvarying vec2 v0;\nvoid main(void){\n   v0 = v2TexCoord + vec2("+this.getVec4Str("uvMove")+".xy);\n   gl_Position = "+this.getMat4Str("viewMatrix3D")+"  * "+this.getMat4Str("camMatrix3D")+" * "+this.getMat4Str("posMatrix3D")+" * "+this.getMat4Str("rotationMatrix3D")+" * v3Position;\n}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D tex;\nvarying vec2 v0;\nvoid main(void)\n{\nvec4 infoUv = texture2D(tex, v0.xy);\ngl_FragColor = infoUv;\n}";return a},b.Display3D_Facet_Shader="Display3DFacetShader",b.shader_mat4={viewMatrix3D:0,camMatrix3D:1,rotationMatrix3D:2,posMatrix3D:3},b.shader_vec4={uvMove:[4,0]},b}(a.Shader3D);a.Display3DFacetShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a._isCycle=!1,a}return __extends(c,b),c.prototype.setAllByteInfo=function(a){this._maxAnimTime=a.readFloat(),this._isCycle=a.readBoolean(),this._lockx=a.readBoolean(),this._locky=a.readBoolean(),b.prototype.setAllByteInfo.call(this,a),this.initVcData(),this.uploadGpu()},c.prototype.getParticle=function(){return new a.Display3DFacetParticle},c.prototype.uploadGpu=function(){this.objData=new a.ObjData,this.makeRectangleData(this._width,this._height,this._originWidthScale,this._originHeightScale,this._isUV,this._isU,this._isV,this._animLine,this._animRow)},c.prototype.makeRectangleData=function(b,c,d,e,f,g,h,i,j){void 0===d&&(d=.5),void 0===e&&(e=.5),void 0===f&&(f=!1),void 0===g&&(g=!1),void 0===h&&(h=!1),void 0===i&&(i=1),void 0===j&&(j=1);var k=new Array,l=new Array,m=new Array;if(m.push(new a.Vector2D(0,0)),m.push(new a.Vector2D(0,1/j)),m.push(new a.Vector2D(1/i,1/j)),m.push(new a.Vector2D(1/i,0)),g)for(var n=0;n<m.length;n++)m[n].x=-m[n].x;if(h)for(var n=0;n<m.length;n++)m[n].y=-m[n].y;f&&m.push(m.shift());for(var n=0;n<m.length;n++)k.push(m[n].x,m[n].y);l.push(-d*b,c-e*c,0),l.push(m[0].x,m[0].y),l.push(b-d*b,c-e*c,0),l.push(m[1].x,m[1].y),l.push(b-d*b,-e*c,0),l.push(m[2].x,m[2].y),l.push(-d*b,-e*c,0),l.push(m[3].x,m[3].y);var o=new Array;o.push(0,1,2,0,2,3),this.objData.stride=20,this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(l),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(o),this.objData.treNum=o.length},c.prototype.initVcData=function(){this.vcmatData=new Float32Array(16*a.Display3DFacetShader.getVcSize())},c.prototype.setFloat32Vec=function(b,c){var d=a.Display3DFacetShader.shader_vec4[b],e=16*d[0]+4*d[1];this.vcmatData.set(c,e)},c.prototype.setFloat32Mat=function(b,c){var d=16*a.Display3DFacetShader.shader_mat4[b];this.vcmatData.set(c,d)},c.prototype.regShader=function(){this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DFacetShader.Display3D_Facet_Shader,a.Display3DFacetShader,this.materialParam.material),this.materialParam.program=this.materialParam.shader.program},c}(a.ParticleData);a.ParticleFacetData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),Object.defineProperty(c.prototype,"balldata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleBallData},c.prototype.setVa=function(){this.setVaCompress(),this.setMaterialTexture(),a.Scene_data.context3D.drawCall(this.data.objData.indexBuffer,this.data.objData.treNum)},c.prototype.setVaCompress=function(){var b=a.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.data.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,3,this.data.objData.stride,12),a.Scene_data.context3D.setVaOffset(2,4,this.data.objData.stride,24),a.Scene_data.context3D.setVaOffset(3,3,this.data.objData.stride,40),this.balldata._needSelfRotation&&a.Scene_data.context3D.setVaOffset(4,2,this.data.objData.stride,52),this.balldata._needRandomColor&&a.Scene_data.context3D.setVaOffset(5,4,this.particleBallData.stride,this.particleBallData.randomOffset))},c.prototype.resetVa=function(){},c.prototype.setVc=function(){this.updateWatchCaramMatrix(),this.balldata.vcmatData.set(a.Scene_data.viewMatrx3D.m,0),this.balldata.vcmatData.set(a.Scene_data.cam3D.cameraMatrix.m,16),this.balldata.vcmatData.set(this.modelMatrix.m,32),this.balldata.vcmatData.set(this._rotationMatrix.m,48),this.balldata._timeVec[0]=this._time/a.Scene_data.frameTime*this.balldata._playSpeed,this.balldata.vcmatData.set(this.balldata._timeVec,80),this.balldata._is3Dlizi&&(this.updateAllRotationMatrix(),this.balldata._wordPosVec[0]=this.bindVecter3d.x,this.balldata._wordPosVec[1]=this.bindVecter3d.y,this.balldata._wordPosVec[2]=this.bindVecter3d.z,this.balldata._caramPosVec[0]=a.Scene_data.cam3D.x,this.balldata._caramPosVec[1]=a.Scene_data.cam3D.y,this.balldata._caramPosVec[2]=a.Scene_data.cam3D.z,this.balldata.vcmatData.set(this.balldata._allRotationMatrix.m,64),this.balldata.vcmatData.set(this.balldata._wordPosVec,96),this.balldata.vcmatData.set(this.balldata._caramPosVec,100)),a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.balldata.vcmatData),this.setMaterialVc()},c.prototype.updateWatchCaramMatrix=function(){this._rotationMatrix.identity(),this.balldata.facez?this._rotationMatrix.prependRotation(90,a.Vector3D.X_AXIS):this.balldata._is3Dlizi?(this.timeline.inverAxisRotation(this._rotationMatrix),this.inverBind()):this.balldata._watchEye&&(this.timeline.inverAxisRotation(this._rotationMatrix),this.inverBind(),this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS))},c.prototype.updateAllRotationMatrix=function(){this.balldata._allRotationMatrix.identity(),this.balldata._allRotationMatrix.prependScale(this.data.overAllScale*this._scaleX*.1*this.bindScale.x,this.data.overAllScale*this._scaleY*.1*this.bindScale.y,this.data.overAllScale*this._scaleZ*.1*this.bindScale.z),this.timeline.inverAxisRotation(this._rotationMatrix),this.isInGroup&&(this.balldata._allRotationMatrix.appendRotation(this.groupRotation.x,a.Vector3D.X_AXIS),this.balldata._allRotationMatrix.appendRotation(this.groupRotation.y,a.Vector3D.Y_AXIS),this.balldata._allRotationMatrix.appendRotation(this.groupRotation.z,a.Vector3D.Z_AXIS)),this.bindMatrix&&this.balldata._allRotationMatrix.append(this.bindMatrix)},Object.defineProperty(c.prototype,"particleBallData",{get:function(){return this.data.objData},enumerable:!0,configurable:!0}),c}(a.Display3DParticle);a.Display3DBallPartilce=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"vPosition"),a.bindAttribLocation(this.program,1,"texcoord"),a.bindAttribLocation(this.program,2,"basePos"),a.bindAttribLocation(this.program,3,"speed");var b=this.paramAry[3];b&&a.bindAttribLocation(this.program,4,"rotation");var c=this.paramAry[1];c&&a.bindAttribLocation(this.program,5,"color")},b.prototype.getMat4Str=function(a){return"vcmat["+b.shader_mat4[a]+"]"},b.prototype.getVec4Str=function(a){return"vcmat["+b.shader_vec4[a][0]+"]["+b.shader_vec4[a][1]+"]"},b.getVcSize=function(){return 7},b.prototype.getVertexShaderString=function(){var a,c,d,e,f,g,h,i,j,k,l,m,j,i,n,o,p,q,r,s,t,u,v;n="attribute vec4 vPosition;\nattribute vec3 texcoord;\nattribute vec4 basePos;\nattribute vec3 speed;\nuniform mat4 vcmat["+b.getVcSize()+"];\nvarying vec2 v0;\n",u="attribute vec4 color;\nvarying vec4 v2;\n",o="",p="attribute vec2 rotation;\n",q="",r="",s="",t="",v="varying vec2 v1;\n",a="float ctime = "+this.getVec4Str("time")+".x - basePos.w;\nif ("+this.getVec4Str("time")+".w > 0.0 && ctime >= 0.0) {\n    ctime = fract(ctime / "+this.getVec4Str("time")+".z) * "+this.getVec4Str("time")+".z;\n}\nvec4 pos = vPosition;\n",c="float stime = ctime - "+this.getVec4Str("scale")+".w;\nstime = max(stime,0.0);\nfloat sf = "+this.getVec4Str("scale")+".x * stime;\nif ("+this.getVec4Str("scale")+".y != 0.0 && "+this.getVec4Str("scale")+".z != 0.0) {\n    sf += sin("+this.getVec4Str("scale")+".y * stime) * "+this.getVec4Str("scale")+".z;\n}\nif (sf > "+this.getVec4Str("scaleCtrl")+".z) {\n    sf = "+this.getVec4Str("scaleCtrl")+".z;\n} else if (sf < "+this.getVec4Str("scaleCtrl")+".w) {\n    sf = "+this.getVec4Str("scaleCtrl")+".w;\n}\nvec2 sv2 = vec2("+this.getVec4Str("scaleCtrl")+".x * sf, "+this.getVec4Str("scaleCtrl")+".y * sf);\nsv2 = sv2 + 1.0;\npos.x *= sv2.x;\npos.y *= sv2.y;\n",d="float angle = rotation.x + rotation.y * ctime;\nvec4 np = vec4(sin(angle), cos(angle), 0, 0);\nnp.z = np.x * pos.y + np.y * pos.x;\nnp.w = np.y * pos.y - np.x * pos.x;\npos.xy = np.zw;\n",e="vec3 addPos = speed * ctime;\nvec3 uspeed = vec3(0,0,0);\nif (ctime < 0.0 || ctime >= "+this.getVec4Str("time")+".z) {\n    addPos.y = addPos.y + 100000.0;\n}\n",f="if("+this.getVec4Str("time")+".y != 0.0 && length(speed) != 0.0) {\n    uspeed = vec3(speed.x, speed.y, speed.z);\n    uspeed = normalize(uspeed);\n    uspeed = uspeed * "+this.getVec4Str("time")+".y;\n    uspeed.xyz = uspeed.xyz + "+this.getVec4Str("force")+".xyz;\n} else {\n    uspeed = vec3("+this.getVec4Str("force")+".x, "+this.getVec4Str("force")+".y, "+this.getVec4Str("force")+".z);\n}\naddPos.xyz = addPos.xyz + uspeed.xyz * ctime * ctime;\n",g="uspeed = speed + uspeed * ctime * 2.0;\nuspeed = normalize(uspeed);\nvec4 tempMul = "+this.getMat4Str("rotationMatrix")+" * vec4(uspeed,1.0);\nuspeed.xyz = tempMul.xyz;\nuspeed = normalize(uspeed);\nvec3 cPos = addPos;\ntempMul = "+this.getMat4Str("rotationMatrix")+" * vec4(cPos,1.0);\ncPos.xyz = tempMul.xyz; \ncPos.xyz = "+this.getVec4Str("worldPos")+".xyz + cPos.xyz;\ncPos.xyz = "+this.getVec4Str("camPos")+".xyz - cPos.xyz;\ncPos = normalize(cPos);\ncPos = cross(uspeed, cPos);\ncPos = normalize(cPos);\nuspeed = uspeed * pos.x;\ncPos = cPos * pos.y;\npos.xyz = uspeed.xyz + cPos.xyz;\n",h="pos = "+this.getMat4Str("watheye")+" * pos;\npos.xyz = pos.xyz + basePos.xyz + addPos.xyz;\ngl_Position = "+this.getMat4Str("viewMatrix3D")+" * "+this.getMat4Str("camMatrix3D")+" * "+this.getMat4Str("modelMatrix")+" * pos;\n",k="v0 = vec2(texcoord.x,texcoord.y);\n",l="vec2 uv = vec2(texcoord.x,texcoord.y);\nfloat animframe = floor(ctime / "+this.getVec4Str("animCtrl")+".z);\nanimframe = animframe / "+this.getVec4Str("animCtrl")+".x;\nuv.x += animframe;\nanimframe = floor(animframe);\nuv.y += animframe / "+this.getVec4Str("animCtrl")+".y;\nv0.xy = uv.xy;\n",m="vec2 uv = vec2("+this.getVec4Str("uvCtrl")+".x,"+this.getVec4Str("uvCtrl")+".y);\nuv.xy = uv.xy * ctime + texcoord.xy;\nv0.xy = uv.xy;\n",j="v2 = color;\n",i="v1 = vec2(ctime/"+this.getVec4Str("time")+".z,1.0);\n";var w=this.paramAry[0],x=this.paramAry[1],y=this.paramAry[2],z=this.paramAry[3],A=this.paramAry[4],B=this.paramAry[5],C=this.paramAry[6],D="",E="";D+=a,E+=n,A&&(D+=c,E+=o),z&&(D+=d,E+=p),D+=e,B&&(D+=f,E+=q),y&&(D+=g,E+=r),D+=h,1==C?(D+=l,E+=s):2==C?(D+=m,E+=t):D+=k,x&&(D+=j,E+=u),w&&(D+=i,E+=v);var F=E+"void main(){\n"+D+"}";return F},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D tex;\nvarying vec2 v0;\nvoid main(void)\n{\nvec4 infoUv = texture2D(tex, v0.xy);\ngl_FragColor = infoUv;\n}";return a},b.Display3D_Ball_Shader="Display3DBallShader",b.shader_mat4={viewMatrix3D:0,camMatrix3D:1,modelMatrix:2,watheye:3,rotationMatrix:4},b.shader_vec4={time:[5,0],scale:[5,1],scaleCtrl:[5,2],force:[5,3],worldPos:[6,0],camPos:[6,1],animCtrl:[6,2],uvCtrl:[6,3]},b}(a.Shader3D);a.Display3DBallShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c._totalNum=1,c._acceleration=.2,c._toscale=0,c._shootAngly=new a.Vector3D(1,0,0),c._shootSpeed=0,c._isRandom=!1,c._isSendRandom=!1,c._isSendAngleRandom=!1,c._paticleMaxScale=1,c._paticleMinScale=1,c._addforce=new a.Vector3D(0,0,0),c._lixinForce=new a.Vector3D(0,0,0),c._waveform=new a.Vector3D(0,0,0,0),c._round=new a.Vector3D,c._is3Dlizi=!1,c._speed=1,c._isLoop=!1,c._basePositon=new a.Vector3D(0,0,0),c._baseRandomAngle=0,c._shapeType=0,c._playSpeed=1,c._beginScale=0,c}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DBallPartilce},c.prototype.setAllByteInfo=function(c){this._totalNum=c.readFloat(),this._acceleration=c.readFloat(),this._toscale=c.readFloat(),this._shootSpeed=c.readFloat(),this._isRandom=c.readBoolean(),this._isSendRandom=c.readBoolean(),this._round.x=c.readFloat(),this._round.y=c.readFloat(),this._round.z=c.readFloat(),this._round.w=c.readFloat(),this._is3Dlizi=c.readBoolean(),this._halfCircle=c.readBoolean(),this._shootAngly.x=c.readFloat(),this._shootAngly.y=c.readFloat(),this._shootAngly.z=c.readFloat(),this._shootAngly.w=c.readFloat(),this._shootAngly.normalize(),this._speed=c.readFloat(),this._isLoop=c.readBoolean(),this._isSendAngleRandom=c.readBoolean(),this._waveform.x=c.readFloat(),this._waveform.y=c.readFloat(),this._waveform.z=c.readFloat(),this._waveform.w=c.readFloat(),this._closeSurface=c.readBoolean(),this._isEven=c.readBoolean(),this._paticleMaxScale=c.readFloat(),this._paticleMinScale=c.readFloat(),this._basePositon.x=c.readFloat(),this._basePositon.y=c.readFloat(),this._basePositon.z=c.readFloat(),this._basePositon.w=c.readFloat(),this._baseRandomAngle=c.readFloat(),this._shapeType=c.readFloat(),this._lockX=c.readBoolean(),this._lockY=c.readBoolean(),this._addforce.x=c.readFloat(),this._addforce.y=c.readFloat(),this._addforce.z=c.readFloat(),this._addforce.w=c.readFloat(),this._addforce.scaleByW(),this._lixinForce.x=c.readFloat(),this._lixinForce.y=c.readFloat(),this._lixinForce.z=c.readFloat(),this._lixinForce.w=c.readFloat(),this._islixinAngly=c.readBoolean(),this._particleRandomScale=new a.Vector3D,this._particleRandomScale.x=c.readFloat(),this._particleRandomScale.y=c.readFloat(),this._particleRandomScale.z=c.readFloat(),this._particleRandomScale.w=c.readFloat(),this._playSpeed=c.readFloat(),this.facez=c.readBoolean(),this._beginScale=c.readFloat(),this._widthFixed=c.readBoolean(),this._heightFixed=c.readBoolean(),this.readRandomColor(c),0!=this._acceleration||0!=this._addforce.x||0!=this._addforce.y||0!=this._addforce.z?(this._needAddSpeed=!0,this._addSpeedVec=[this._addforce.x,this._addforce.y,this._addforce.z]):this._needAddSpeed=!1,0!=this._toscale||0!=this._waveform.x||0!=this._waveform.y?(this._needScale=!0,this._scaleVec=[this._toscale,this._waveform.x,this._waveform.y,this._beginScale],this._scaleCtrlVec=[this._widthFixed?0:1,this._heightFixed?0:1,this._paticleMaxScale-1,this._paticleMinScale-1]):this._needScale=!1,b.prototype.setAllByteInfo.call(this,c),this._timeVec=[0,this._acceleration,this._life,this._isLoop?1:-1],this._is3Dlizi&&(this._wordPosVec=[0,0,0],this._caramPosVec=[0,0,0],this._allRotationMatrix=new a.Matrix3D),this.initVcData()},c.prototype.readRandomColor=function(a){var b=a.readInt(),c=new Object;c.alpha=new Array,c.color=new Array,c.pos=new Array;for(var d=0;b>d;d++)c.alpha.push(a.readFloat()),c.color.push(a.readFloat()),c.pos.push(a.readFloat());this._textureRandomColorInfo=c},Object.defineProperty(c.prototype,"objBallData",{get:function(){return this.objData},enumerable:!0,configurable:!0}),c.prototype.uploadGpu=function(){this.objData=new a.ParticleBallGpuData,this.initBaseData(),this.initBasePos(),this.initSpeed(),this.initSelfRotaion(),this._needRandomColor&&this.initBaseColor(),this.pushToGpu()},c.prototype.initBaseData=function(){for(var a=new Array,b=new Array,c=new Array,d=0;d<this._totalNum;d++)this.makeRectangleData(a,b,this._width,this._height,this._originWidthScale,this._originHeightScale,this._isUV,this._isU,this._isV,this._animLine,this._animRow,d),c.push(0+4*d,1+4*d,2+4*d,0+4*d,2+4*d,3+4*d);this.objBallData.vertices=a,this.objBallData.uvs=b,this.objBallData.indexs=c},c.prototype.makeRectangleData=function(b,c,d,e,f,g,h,i,j,k,l,m){
void 0===f&&(f=.5),void 0===g&&(g=.5),void 0===h&&(h=!1),void 0===i&&(i=!1),void 0===j&&(j=!1),void 0===k&&(k=1),void 0===l&&(l=1),void 0===m&&(m=0);var n=Math.random()*(this._particleRandomScale.x-this._particleRandomScale.y)+this._particleRandomScale.y;b.push(-f*d*n,(e-g*e)*n,0),b.push((d-f*d)*n,(e-g*e)*n,0),b.push((d-f*d)*n,-g*e*n,0),b.push(-f*d*n,-g*e*n,0);var o=new Array;if(o.push(new a.Vector2D(0,0)),o.push(new a.Vector2D(0,1/l)),o.push(new a.Vector2D(1/k,1/l)),o.push(new a.Vector2D(1/k,0)),i)for(var p=0;p<o.length;p++)o[p].x=-o[p].x;if(j)for(var p=0;p<o.length;p++)o[p].y=-o[p].y;h&&o.push(o.shift());for(var p=0;p<o.length;p++)c.push(o[p].x,o[p].y,m)},c.prototype.initBasePos=function(){for(var b=new Array,c=0;c<this._totalNum;c++){var d,e;if(this._isRandom){var f=new a.Vector3D(this._round.x*this._round.w,this._round.y*this._round.w,this._round.z*this._round.w);this._isEven?this._closeSurface?(d=new a.Vector3D(0,0,f.z),e=new a.Matrix3D,e.appendRotation(360*Math.random(),a.Vector3D.Y_AXIS),d=e.transformVector(d),d.y=f.y*Math.random()*2-f.y):(d=new a.Vector3D(0,0,f.z*Math.random()*2-f.z),e=new a.Matrix3D,e.appendRotation(360*Math.random(),a.Vector3D.Y_AXIS),d=e.transformVector(d),d.y=f.y*Math.random()*2-f.y):this._closeSurface?(d=new a.Vector3D(0,0,f.z),e=new a.Matrix3D,this._halfCircle?e.appendRotation(180*-Math.random(),a.Vector3D.X_AXIS):e.appendRotation(360*Math.random(),a.Vector3D.X_AXIS),e.appendRotation(360*Math.random(),a.Vector3D.Y_AXIS),d=e.transformVector(d)):d=this._halfCircle?new a.Vector3D(f.x*Math.random()*2-f.x,f.y*Math.random(),f.z*Math.random()*2-f.z):new a.Vector3D(f.x*Math.random()*2-f.x,f.y*Math.random()*2-f.y,f.z*Math.random()*2-f.z)}else d=new a.Vector3D;d=d.add(this._basePositon);for(var g=0;4>g;g++)b.push(d.x,d.y,d.z,c*this._shootSpeed)}this.objBallData.basePos=b},c.prototype.initSpeed=function(){for(var b=new Array,c=0;c<this._totalNum;c++){var d=new a.Vector3D,e=new a.Vector3D;if(0!=this._shootAngly.x||0!=this._shootAngly.y||0!=this._shootAngly.z){var f=Math.tan(this._shootAngly.w*Math.PI/180*Math.random()),g=360*Math.PI/180*Math.random();e=new a.Vector3D(Math.sin(g)*f,Math.cos(g)*f,1);var h=new a.Matrix3D;if(h.fromVtoV(new a.Vector3D(0,.0101,.99994),new a.Vector3D(this._shootAngly.x,this._shootAngly.y,this._shootAngly.z)),e=h.transformVector(e),isNaN(e.x))throw new Error("发射锥角，可能有问题，确定是否有取膜");e.normalize(),d=d.add(e)}(0!=this._lixinForce.x||0!=this._lixinForce.y||0!=this._lixinForce.z)&&(e=new a.Vector3D(Math.random()>.5?-this._lixinForce.x:this._lixinForce.x,Math.random()>.5?-this._lixinForce.y:this._lixinForce.y,Math.random()>.5?-this._lixinForce.z:this._lixinForce.z),e.normalize(),d=d.add(e)),this._islixinAngly&&(e=this._isEven?new a.Vector3D(this.objBallData.basePos[16*c],0,this.objBallData.basePos[16*c+2]):new a.Vector3D(this.objBallData.basePos[16*c],this.objBallData.basePos[16*c+1],this.objBallData.basePos[16*c+2]),e.normalize(),d=d.add(e)),d.normalize(),this._isSendRandom?d.scaleBy(this._speed*Math.random()):d.scaleBy(this._speed);for(var i=(this._baseRandomAngle*Math.random()*Math.PI/180,0);4>i;i++)b.push(d.x,d.y,d.z)}this.objBallData.beMove=b},c.prototype.initSelfRotaion=function(){var a=0,b=0;if(0==this._ziZhuanAngly.x&&0==this._ziZhuanAngly.y&&0==this._ziZhuanAngly.z&&0==this._ziZhuanAngly.w)return void(this._needSelfRotation=!1);if(this._is3Dlizi)return void(this._needSelfRotation=!1);this._needSelfRotation=!0;for(var c=new Array,d=0;d<this._totalNum;)a=this._ziZhuanAngly.x,1==this._ziZhuanAngly.y&&(a*=Math.random()),b=this._ziZhuanAngly.z,1==this._ziZhuanAngly.w?b*=Math.random():-1==this._ziZhuanAngly.w&&(b*=2*Math.random()-1),c.push(a,b),c.push(a,b),c.push(a,b),c.push(a,b),d++;this.objBallData.baseRotation=c},c.prototype.initBaseColor=function(){for(var b=a.ColorTransition.getInstance().getImageData(this._textureRandomColorInfo),c=b.data,d=new Array,e=0;e<this._totalNum;e++){var f=4*float2int(128*Math.random()),g=new a.Vector3D(c[f],c[f+1],c[f+2],c[f+3]);g.scaleBy(1/255),d.push(g.x,g.y,g.z,g.w),d.push(g.x,g.y,g.z,g.w),d.push(g.x,g.y,g.z,g.w),d.push(g.x,g.y,g.z,g.w)}this.objBallData.randomColor=d},c.prototype.pushToGpu=function(){this.compressVertex()},c.prototype.compressVertex=function(){var b=this.objBallData.vertices.length/3,c=13;this._needSelfRotation&&(c+=2),this._needRandomColor&&(this.objBallData.randomOffset=4*c,c+=4),this.objBallData.stride=4*c;for(var d=new Array,e=0;b>e;e++){for(var f=0;3>f;f++)d.push(this.objBallData.vertices[3*e+f]);for(var f=0;3>f;f++)d.push(this.objBallData.uvs[3*e+f]);for(var f=0;4>f;f++)d.push(this.objBallData.basePos[4*e+f]);for(var f=0;3>f;f++)d.push(this.objBallData.beMove[3*e+f]);if(this._needSelfRotation)for(var f=0;2>f;f++)d.push(this.objBallData.baseRotation[2*e+f]);if(this._needRandomColor)for(var f=0;4>f;f++)d.push(this.objBallData.randomColor[4*e+f])}this.objBallData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(d),this.objBallData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objBallData.indexs),this.objBallData.treNum=this.objBallData.indexs.length},c.prototype.setFloat32Vec=function(b,c){var d=a.Display3DBallShader.shader_vec4[b],e=16*d[0]+4*d[1];this.vcmatData.set(c,e)},c.prototype.setFloat32Mat=function(b,c){var d=16*a.Display3DBallShader.shader_mat4[b];this.vcmatData.set(c,d)},c.prototype.initVcData=function(){this.vcmatData=new Float32Array(16*a.Display3DBallShader.getVcSize()),this.setFloat32Vec("time",this._timeVec),this._needAddSpeed&&this.setFloat32Vec("force",this._addSpeedVec),this._needScale&&(this.setFloat32Vec("scale",this._scaleVec),this.setFloat32Vec("scaleCtrl",this._scaleCtrlVec)),1==this._uvType?this.setFloat32Vec("animCtrl",this._animCtrlVec):2==this._uvType&&this.setFloat32Vec("uvCtrl",this._uvCtrlVec)},c.prototype.regShader=function(){if(this.materialParam){var b=this.getShaderParam();this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DBallShader.Display3D_Ball_Shader,a.Display3DBallShader,this.materialParam.material,b),this.materialParam.program=this.materialParam.shader.program}},c.prototype.getShaderParam=function(){1!=this._animRow||1!=this._animLine?(this._uvType=1,this._animCtrlVec=[this._animLine,this._animRow,this._animInterval]):0!=this._uSpeed||0!=this._vSpeed?(this._uvType=2,this._uvCtrlVec=[this._uSpeed,this._vSpeed]):this._uvType=0;var a=this.materialParam.material.hasParticleColor;this._needRandomColor=this.materialParam.material.hasVertexColor,this.uploadGpu();var b,c;c=a?1:0;var d=this._needRandomColor?1:0,e=this._is3Dlizi?1:0,f=this._needSelfRotation?1:0,g=this._needScale?1:0,h=this._needAddSpeed?1:0;return b=[c,d,e,f,g,h,this._uvType]},c}(a.ParticleData);a.ParticleBallData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.destory=function(){b.prototype.destory.call(this),this.basePos&&(this.basePos.length=0,this.basePos=null,this.basePosBuffer&&(a.Scene_data.context3D.deleteBuffer(this.basePosBuffer),this.basePosBuffer=null)),this.beMove&&(this.beMove.length=0,this.beMove=null,this.beMoveBuffer&&(a.Scene_data.context3D.deleteBuffer(this.beMoveBuffer),this.beMoveBuffer=null)),this.randomColor&&(this.randomColor.length=0,this.randomColor=null,this.randomColorBuffer&&(a.Scene_data.context3D.deleteBuffer(this.randomColorBuffer),this.randomColorBuffer=null)),this.baseRotation&&(this.baseRotation.length=0,this.baseRotation=null,this.baseRotationBuffer&&(a.Scene_data.context3D.deleteBuffer(this.baseRotationBuffer),this.baseRotationBuffer=null))},c}(a.ParticleGpuData);a.ParticleBallGpuData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"u2Texture")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 u2Texture;uniform mat4 viewMatrix3D;uniform mat4 camMatrix3D;uniform mat4 posMatrix3D;varying vec2 v_texCoord;void main(void){   v_texCoord = vec2(u2Texture.x, u2Texture.y);   vec4 vt0= vec4(v3Position, 1.0);   vt0 = posMatrix3D * vt0;   vt0 = camMatrix3D * vt0;   vt0 = viewMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ngl_FragColor =infoUv;\n}";return a},b.BaseDiplay3dShader="BaseDiplay3dShader",b}(a.Shader3D);a.BaseDiplay3dShader=b;var c=function(c){function d(){var a=c.call(this)||this;return a.initData(),a.updateMatrix,a}return __extends(d,c),d.prototype.initData=function(){a.ProgrmaManager.getInstance().registe(b.BaseDiplay3dShader,new b),this.shader=a.ProgrmaManager.getInstance().getProgram(b.BaseDiplay3dShader),this.program=this.shader.program,this.objData=new a.ObjData,this.objData.vertices=new Array,this.objData.vertices.push(0,0,0),this.objData.vertices.push(100,0,0),this.objData.vertices.push(100,0,100),this.objData.uvs=new Array,this.objData.uvs.push(0,0),this.objData.uvs.push(1,0),this.objData.uvs.push(0,1),this.objData.indexs=new Array,this.objData.indexs.push(0,1,2),this.loadTexture(),this.upToGpu()},d.prototype.loadTexture=function(){var b=a.UIManager.getInstance().getContext2D(128,128,!1);b.fillStyle="rgb(255,255,255)",b.fillRect(0,0,128,128),this._uvTextureRes=a.TextureManager.getInstance().getCanvasTexture(b)},d.prototype.upToGpu=function(){this.objData.indexs.length&&(this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs))},d.prototype.update=function(){this.objData&&this.objData.indexBuffer&&this._uvTextureRes&&(a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"posMatrix3D",this.posMatrix.m),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,2,this.objData.uvBuffer),a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this._uvTextureRes.texture,0),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum))},d}(a.Display3D);a.BaseDiplay3dSprite=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),Object.defineProperty(c.prototype,"locusdata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleLocusData},c.prototype.setVa=function(){var b=a.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.data.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.data.objData.stride,28),this.data._watchEye&&a.Scene_data.context3D.setVaOffset(2,4,this.data.objData.stride,12)),this.setMaterialTexture(),a.Scene_data.context3D.drawCall(this.data.objData.indexBuffer,this.data.objData.treNum)},c.prototype.setVc=function(){this.updateUV(),this.data.vcmatData.set(a.Scene_data.viewMatrx3D.m,0),this.data.vcmatData.set(a.Scene_data.cam3D.cameraMatrix.m,16),this.data.vcmatData.set(this.modelMatrix.m,32),this.data.vcmatData.set(this.locusdata._resultUvVec,48),this.data._watchEye&&(this.locusdata._caramPosVec[0]=a.Scene_data.cam3D.x,this.locusdata._caramPosVec[1]=a.Scene_data.cam3D.y,this.locusdata._caramPosVec[2]=a.Scene_data.cam3D.z,this.data.vcmatData.set(this.locusdata._caramPosVec,52)),this.locusdata._changUv&&this.data.setFloat32Vec("isUv",this.locusdata._uvVec),a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.data.vcmatData),this.setMaterialVc()},c.prototype.updateUV=function(){var b=this._time/a.Scene_data.frameTime,c=this.data._life/100,d=this.locusdata._speed*b/this.locusdata._density/10;this.locusdata._isEnd&&(d=Math.min(1,d)),this.locusdata._isLoop&&(d%=this.locusdata._life?c+1:1),this.locusdata._resultUvVec[0]=d},c}(a.Display3DParticle);a.Display3DLocusPartilce=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2TexCoord"),this.paramAry[0]&&a.bindAttribLocation(this.program,2,"v3Normal")},c.prototype.getMat4Str=function(a){return"vcmat["+c.shader_mat4[a]+"]"},c.prototype.getVec4Str=function(a){return"vcmat["+c.shader_vec4[a][0]+"]["+c.shader_vec4[a][1]+"]"},c.getVcSize=function(){return 4},c.prototype.getVertexShaderString=function(){var b="attribute vec4 v3Position;\nattribute vec2 v2TexCoord;\nuniform mat4 vcmat["+a.Display3DFacetShader.getVcSize()+"];\nvarying vec2 v0;\nvarying vec4 v2;\n",c="attribute vec4 v3Normal;\n",d="",e="varying vec2 v1;\n",f="   vec2 tempv0 = v2TexCoord;\n   tempv0.x -= "+this.getVec4Str("uvMove")+".x;\n",g="   v1 = v2TexCoord;\n",h="   v0 = tempv0;\n",i="   tempv0.xy *= "+this.getVec4Str("isUv")+".xy;\n   if("+this.getVec4Str("isUv")+".z >= 0.0){\n   vec2 tempv1 = tempv0;\n   tempv0.y = tempv1.x;\n   tempv0.x = tempv1.y;}\n   v0 = tempv0;\n",j="   float alpha = tempv0.x/"+this.getVec4Str("uvMove")+".y;\n   alpha = 1.0 - clamp(abs(alpha),0.0,1.0);\n   float kill = -tempv0.x;\n   kill *= tempv0.x - "+this.getVec4Str("uvMove")+".z;\n   v2 = vec4(kill,0.0,0.0,alpha);\n",k="   gl_Position = "+this.getMat4Str("viewMatrix3D")+"  * "+this.getMat4Str("camMatrix3D")+" * "+this.getMat4Str("posMatrix3D")+" * v3Position;\n",l="   vec4 tempPos = "+this.getMat4Str("posMatrix3D")+" * v3Position;\n   vec3 mulPos = vec3(tempPos.x,tempPos.y,tempPos.z);\n   vec3 normals = vec3(v3Normal.x,v3Normal.y,v3Normal.z);\n   mulPos = normalize(vec3("+this.getVec4Str("camPos")+".xyz) - mulPos);\n   mulPos = cross(mulPos, normals);\n   mulPos = normalize(mulPos);\n   mulPos *= v3Normal.w;\n   tempPos.xyz = mulPos.xyz + v3Position.xyz;\n   gl_Position = "+this.getMat4Str("viewMatrix3D")+"  * "+this.getMat4Str("camMatrix3D")+" * "+this.getMat4Str("posMatrix3D")+" * tempPos;\n",m=this.paramAry[0],n=this.paramAry[1],o=this.paramAry[2],p=b;m&&(p+=c),n&&(p+=d),o&&(p+=e);var q=f+j;o&&(q+=g),q+=n?i:h,q+=m?l:k;var r=p+"void main(void){\n"+q+"}";return r},c.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D tex;\nvarying vec2 v0;\nvoid main(void)\n{\nvec4 infoUv = texture2D(tex, v0.xy);\ngl_FragColor = infoUv;\n}";return a},c.Display3D_Locus_Shader="Display3DLocusShader",c.shader_mat4={viewMatrix3D:0,camMatrix3D:1,posMatrix3D:2},c.shader_vec4={uvMove:[3,0],camPos:[3,1],isUv:[3,2]},c}(a.Shader3D);a.Display3DLocusShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a._speed=1,a._isLoop=!1,a}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DLocusPartilce},c.prototype.setAllByteInfo=function(c){this._isLoop=c.readBoolean(),this._speed=c.readFloat(),this._density=c.readFloat(),this._isEnd=c.readBoolean(),this.objData=new a.ObjData;var d=c.getInt(),e=9,f=d*e*4,g=new ArrayBuffer(f),h=new DataView(g);a.BaseRes.readBytes2ArrayBuffer(c,h,3,0,e,4),a.BaseRes.readBytes2ArrayBuffer(c,h,4,3,e,4),a.BaseRes.readBytes2ArrayBuffer(c,h,2,7,e,4);for(var i=c.readInt(),j=0;i>j;j++)this.objData.indexs.push(c.readInt());this.objData.stride=4*e,b.prototype.setAllByteInfo.call(this,c),this.initUV(),this._watchEye&&(this._caramPosVec=[0,0,0]),this._uvVec=[this._isU?-1:1,this._isV?-1:1,this._isUV?1:-1],this.initVcData(),this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3DArrayBuffer(g),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs),this.objData.treNum=this.objData.indexs.length},c.prototype.initUV=function(){this._resultUvVec=new Array(3);var b=0,c=this._life/100,d=this._speed*b/this._density/10;this._isEnd&&(d=Math.min(1,d));var e;this._isLoop?this._life?(d%=c+1,e=new a.Vector3D(d,c,-c)):(d%=1,e=new a.Vector3D(d+1,99,-2)):e=this._life?new a.Vector3D(d,c,-1):new a.Vector3D(d,99,-1),this._resultUvVec[0]=e.x,this._resultUvVec[1]=e.y,this._resultUvVec[2]=e.z},c.prototype.uploadGpu=function(){this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this._watchEye&&(this.objData.normalsBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.normals)),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs),this.objData.treNum=this.objData.indexs.length},c.prototype.regShader=function(){if(this.materialParam){var b=this._watchEye?1:0,c=0,d=this.materialParam.material.hasParticleColor;this._isU||this._isV||this._isUV?(c=1,this._changUv=!0):this._changUv=!1;var e;e=[b,c,d?1:0],this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DLocusShader.Display3D_Locus_Shader,a.Display3DLocusShader,this.materialParam.material,e),this.materialParam.program=this.materialParam.shader.program}},c.prototype.initVcData=function(){this.vcmatData=new Float32Array(16*a.Display3DLocusShader.getVcSize())},c.prototype.setFloat32Vec=function(b,c){var d=a.Display3DLocusShader.shader_vec4[b],e=16*d[0]+4*d[1];this.vcmatData.set(c,e)},c.prototype.setFloat32Mat=function(b,c){var d=16*a.Display3DLocusShader.shader_mat4[b];this.vcmatData.set(c,d)},c}(a.ParticleData);a.ParticleLocusData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.creatData=function(){this.data=new a.ParticleLocusballData},c}(a.Display3DBallPartilce);a.Display3DLocusBallPartilce=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DLocusBallPartilce},c.prototype.initBasePos=function(){for(var b=new Array,c=0;c<this._totalNum;c++){var d,e=3*c;if(this._isRandom){var f=new a.Vector3D(this._round.x*this._round.w,this._round.y*this._round.w,this._round.z*this._round.w);d=new a.Vector3D(this._posAry[e]+Math.random()*f.x,this._posAry[e+1]+Math.random()*f.y,this._posAry[e+2]+Math.random()*f.z)}else d=new a.Vector3D(this._posAry[e],this._posAry[e+1],this._posAry[e+2]);d=d.add(this._basePositon);for(var g=0;4>g;g++)b.push(d.x,d.y,d.z,c*this._shootSpeed)}this.objBallData.basePos=b},c.prototype.initSpeed=function(){for(var b=new Array,c=0;c<this._totalNum;c++){var d=new a.Vector3D;if(0==this._tangentSpeed)d.addByNum(this._angleAry[3*c],this._angleAry[3*c+1],this._angleAry[3*c+2]);else if(2==this._tangentSpeed)d.setTo(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1);else{var e=new a.Vector3D(this._tangentAry[3*c],this._tangentAry[3*c+1],this._tangentAry[3*c+2]);e.scaleBy(this._tangentSpeed),d=d.add(e)}d.normalize(),this._isSendRandom?d.scaleBy(this._speed*Math.random()):d.scaleBy(this._speed);for(var f=0;4>f;f++)b.push(d.x,d.y,d.z)}this.objBallData.beMove=b},c.prototype.setAllByteInfo=function(a){this._tangentSpeed=a.readFloat(),this._posAry=JSON.parse(a.readUTF()),this._angleAry=JSON.parse(a.readUTF()),this._tangentAry=JSON.parse(a.readUTF()),b.prototype.setAllByteInfo.call(this,a),this.uploadGpu()},c}(a.ParticleBallData);a.ParticleLocusballData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._resultUvVec=new Array(2),a}return __extends(c,b),Object.defineProperty(c.prototype,"modeldata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleModelData},c.prototype.setVc=function(){this.updateWatchCaramMatrix(),this.updateUV(),this.data.vcmatData.set(a.Scene_data.viewMatrx3D.m,0),this.data.vcmatData.set(a.Scene_data.cam3D.cameraMatrix.m,16),this.data.vcmatData.set(this.modelMatrix.m,48),this.data.vcmatData.set(this._rotationMatrix.m,32),this.data.vcmatData.set(this._resultUvVec,64),a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.data.vcmatData),this.setMaterialVc()},c.prototype.setVa=function(){a.Scene_data.context3D.setWriteDepth(1==this.data._depthMode);var b=a.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.data.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.data.objData.stride,12)),this.setMaterialTexture(),a.Scene_data.context3D.drawCall(this.data.objData.indexBuffer,this.data.objData.treNum),a.Scene_data.context3D.setWriteDepth(!1)},c.prototype.updateWatchCaramMatrix=function(){this._rotationMatrix.identity(),this.data._watchEye&&(this.timeline.inverAxisRotation(this._rotationMatrix),this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS)),this.data._isZiZhuan&&this.timeline.applySelfRotation(this._rotationMatrix,this.data._ziZhuanAngly)},c.prototype.updateUV=function(){var b=Math.floor(this._time/a.Scene_data.frameTime/this.data._animInterval);this.data._animLine*this.data._animRow;this._resultUvVec[0]=Math.floor(b%this.data._animLine)/this.data._animLine,this._resultUvVec[1]=Math.floor(b/this.data._animLine)/this.data._animRow,this._resultUvVec[0]+=this._time/a.Scene_data.frameTime*this.data._uSpeed,this._resultUvVec[1]+=this._time/a.Scene_data.frameTime*this.data._vSpeed},c}(a.Display3DParticle);a.Display3DModelPartilce=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.update=function(){this._depthMode&&a.Scene_data.context3D.setDepthTest(!0),b.prototype.update.call(this),this._depthMode&&a.Scene_data.context3D.setDepthTest(!1)},c}(a.Display3DModelPartilce);a.Display3DModelObjParticle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.updateUV=function(){var b=this._time/a.Scene_data.frameTime;b=b>this.modeldata._maxAnimTime?this.modeldata._maxAnimTime:b,b=b/this.data._animInterval%(this.data._animLine*this.data._animRow),this._resultUvVec[0]=float2int(b%this.data._animLine)/this.data._animLine+this._time/a.Scene_data.frameTime*this.data._uSpeed,this._resultUvVec[1]=float2int(b/this.data._animLine)/this.data._animRow+this._time/a.Scene_data.frameTime*this.data._vSpeed},c}(a.Display3DModelPartilce);a.Display3dModelAnimParticle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DModelPartilce},c.prototype.setAllByteInfo=function(c){this.objData=new a.ObjData,this._maxAnimTime=c.readFloat();var d=c.getInt(),e=5,f=d*e*4,g=new ArrayBuffer(f),h=new DataView(g);a.BaseRes.readBytes2ArrayBuffer(c,h,3,0,e,4),a.BaseRes.readBytes2ArrayBuffer(c,h,2,3,e,4);for(var i=c.readInt(),j=0;i>j;j++)this.objData.indexs.push(c.readInt());this.objData.stride=4*e,this.version>=36&&(this._depthMode=c.readInt()),b.prototype.setAllByteInfo.call(this,c),this.initVcData(),this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3DArrayBuffer(g),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs),this.objData.treNum=this.objData.indexs.length},c.prototype.initVcData=function(){this.vcmatData=new Float32Array(16*a.Display3DFacetShader.getVcSize())},c.prototype.uploadGpu=function(){this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs),this.objData.treNum=this.objData.indexs.length},c.prototype.regShader=function(){this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DFacetShader.Display3D_Facet_Shader,a.Display3DFacetShader,this.materialParam.material),this.materialParam.program=this.materialParam.shader.program},c.prototype.setFloat32Vec=function(b,c){var d=a.Display3DFacetShader.shader_vec4[b],e=16*d[0]+4*d[1];this.vcmatData.set(c,e)},c.prototype.setFloat32Mat=function(b,c){var d=16*a.Display3DFacetShader.shader_mat4[b];this.vcmatData.set(c,d)},c}(a.ParticleData);a.ParticleModelData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.flag=0,a}return __extends(c,b),Object.defineProperty(c.prototype,"followdata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleFollowData},c.prototype.onCreated=function(){this.initBingMatrixAry()},c.prototype.setVc=function(){b.prototype.setVc.call(this),this.updateBind(),a.Scene_data.context3D.setVc3fv(this.data.materialParam.shader,"bindpos",this._bindMatrixAry)},c.prototype.initBingMatrixAry=function(){this._bindMatrixAry=new Float32Array(120),this._bindFlagAry=new Array;for(var a=0;a<this.followdata._totalNum;a++)this._bindFlagAry.push(0)},c.prototype.updateBind=function(){for(var b=this._time/a.Scene_data.frameTime,c=this.flag;c<this.followdata._totalNum;c++){var d=(b-c*this.followdata._shootSpeed)/this.followdata._life;if(d>=this._bindFlagAry[c]){var e=3*c;this._bindMatrixAry[e]=this.bindVecter3d.x,this._bindMatrixAry[e+1]=this.bindVecter3d.y,this._bindMatrixAry[e+2]=this.bindVecter3d.z,this._bindFlagAry[c]++}}},c.prototype.updateMatrix=function(){this.bindMatrix&&(this.modelMatrix.identity(),this.groupMatrix.isIdentity||this.posMatrix.append(this.groupMatrix),this.modelMatrix.append(this.posMatrix))},c.prototype.updateAllRotationMatrix=function(){this.followdata._allRotationMatrix.identity(),this.followdata._allRotationMatrix.prependScale(this.followdata.overAllScale*this._scaleX*.1*this.bindScale.x,this.followdata.overAllScale*this._scaleY*.1*this.bindScale.y,this.followdata.overAllScale*this._scaleZ*.1*this.bindScale.z),this.isInGroup&&(this.followdata._allRotationMatrix.appendRotation(this.groupRotation.x,a.Vector3D.X_AXIS),this.followdata._allRotationMatrix.appendRotation(this.groupRotation.y,a.Vector3D.Y_AXIS),this.followdata._allRotationMatrix.appendRotation(this.groupRotation.z,a.Vector3D.Z_AXIS))},c.prototype.reset=function(){b.prototype.reset.call(this);for(var a=0;a<this.followdata._totalNum;a++)this._bindMatrixAry[3*a]=0,this._bindMatrixAry[3*a+1]=0,this._bindMatrixAry[3*a+2]=0,this._bindFlagAry[a]=0},c.prototype.updateWatchCaramMatrix=function(){this._rotationMatrix.identity(),this.followdata.facez?this._rotationMatrix.prependRotation(90,a.Vector3D.X_AXIS):this.followdata._watchEye&&(this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),this._rotationMatrix.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS))},c}(a.Display3DBallPartilce);a.Display3DFollowPartilce=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"vPosition"),a.bindAttribLocation(this.program,1,"texcoord"),a.bindAttribLocation(this.program,2,"basePos"),a.bindAttribLocation(this.program,3,"speed");var b=this.paramAry[3];b&&a.bindAttribLocation(this.program,4,"rotation");
var c=this.paramAry[1];c&&a.bindAttribLocation(this.program,5,"color")},c.prototype.getMat4Str=function(b){return"vcmat["+a.Display3DBallShader.shader_mat4[b]+"]"},c.prototype.getVec4Str=function(b){return"vcmat["+a.Display3DBallShader.shader_vec4[b][0]+"]["+a.Display3DBallShader.shader_vec4[b][1]+"]"},c.getVcSize=function(){return 7},c.prototype.getVertexShaderString=function(){var b,c,d,e,f,g,h,i,j,k,l,m,j,i,n,o,p,q,r,s,t,u,v;n="attribute vec4 vPosition;\nattribute vec3 texcoord;\nattribute vec4 basePos;\nattribute vec3 speed;\nuniform mat4 vcmat["+a.Display3DBallShader.getVcSize()+"];\nuniform vec3 bindpos[30];\nvarying vec2 v0;\n",u="attribute vec4 color;\nvarying vec4 v2;\n",o="",p="attribute vec2 rotation;\n",q="",r="",s="",t="",v="varying vec2 v1;\n",b="float ctime = "+this.getVec4Str("time")+".x - basePos.w;\nif ("+this.getVec4Str("time")+".w > 0.0 && ctime >= 0.0) {\n    ctime = fract(ctime / "+this.getVec4Str("time")+".z) * "+this.getVec4Str("time")+".z;\n}\nvec4 pos = vPosition;\n",c="float stime = ctime - "+this.getVec4Str("scale")+".w;\nstime = max(stime,0.0);\nfloat sf = "+this.getVec4Str("scale")+".x * stime;\nif ("+this.getVec4Str("scale")+".y != 0.0 && "+this.getVec4Str("scale")+".z != 0.0) {\n    sf += sin("+this.getVec4Str("scale")+".y * stime) * "+this.getVec4Str("scale")+".z;\n}\nif (sf > "+this.getVec4Str("scaleCtrl")+".z) {\n    sf = "+this.getVec4Str("scaleCtrl")+".z;\n} else if (sf < "+this.getVec4Str("scaleCtrl")+".w) {\n    sf = "+this.getVec4Str("scaleCtrl")+".w;\n}\nvec2 sv2 = vec2("+this.getVec4Str("scaleCtrl")+".x * sf, "+this.getVec4Str("scaleCtrl")+".y * sf);\nsv2 = sv2 + 1.0;\npos.x *= sv2.x;\npos.y *= sv2.y;\n",d="float angle = rotation.x + rotation.y * ctime;\nvec4 np = vec4(sin(angle), cos(angle), 0, 0);\nnp.z = np.x * pos.y + np.y * pos.x;\nnp.w = np.y * pos.y - np.x * pos.x;\npos.xy = np.zw;\n",e="vec3 addPos = speed * ctime;\nvec3 uspeed = vec3(0,0,0);\nif (ctime < 0.0 || ctime >= "+this.getVec4Str("time")+".z) {\n    addPos.y = addPos.y + 100000.0;\n}\n",f="if("+this.getVec4Str("time")+".y != 0.0 && length(speed) != 0.0) {\n    uspeed = vec3(speed.x, speed.y, speed.z);\n    uspeed = normalize(uspeed);\n    uspeed = uspeed * "+this.getVec4Str("time")+".y;\n    uspeed.xyz = uspeed.xyz + "+this.getVec4Str("force")+".xyz;\n} else {\n    uspeed = vec3("+this.getVec4Str("force")+".x, "+this.getVec4Str("force")+".y, "+this.getVec4Str("force")+".z);\n}\naddPos.xyz = addPos.xyz + uspeed.xyz * ctime * ctime;\n",g="uspeed = speed + uspeed * ctime * 2.0;\nuspeed = normalize(uspeed);\nvec4 tempMul = "+this.getMat4Str("rotationMatrix")+" * vec4(uspeed,1.0);\nuspeed.xyz = tempMul.xyz;\nuspeed = normalize(uspeed);\nvec3 cPos = addPos;\ntempMul = "+this.getMat4Str("rotationMatrix")+" * vec4(cPos,1.0);\ncPos.xyz = tempMul.xyz; \ncPos.xyz = "+this.getVec4Str("worldPos")+".xyz + cPos.xyz;\ncPos.xyz = "+this.getVec4Str("camPos")+".xyz - cPos.xyz;\ncPos = normalize(cPos);\ncPos = cross(uspeed, cPos);\ncPos = normalize(cPos);\nuspeed = uspeed * pos.x;\ncPos = cPos * pos.y;\npos.xyz = uspeed.xyz + cPos.xyz;\n",h="pos = "+this.getMat4Str("watheye")+" * pos;\npos.xyz = pos.xyz + basePos.xyz + addPos.xyz;\npos = "+this.getMat4Str("modelMatrix")+" * pos;\npos.xyz = pos.xyz + bindpos[int(texcoord.z)].xyz;\ngl_Position = "+this.getMat4Str("viewMatrix3D")+" * "+this.getMat4Str("camMatrix3D")+" * pos;\n",k="v0 = vec2(texcoord.x,texcoord.y);\n",l="vec2 uv = vec2(texcoord.x,texcoord.y);\nfloat animframe = floor(ctime / "+this.getVec4Str("animCtrl")+".z);\nanimframe = animframe / "+this.getVec4Str("animCtrl")+".x;\nuv.x += animframe;\nanimframe = floor(animframe);\nuv.y += animframe / "+this.getVec4Str("animCtrl")+".y;\nv0.xy = uv.xy;\n",m="vec2 uv = vec2("+this.getVec4Str("uvCtrl")+".x,"+this.getVec4Str("uvCtrl")+".y);\nuv.xy = uv.xy * ctime + texcoord.xy;\nv0.xy = uv.xy;\n",j="v2 = color;\n",i="v1 = vec2(ctime/"+this.getVec4Str("time")+".z,1.0);\n";var w=this.paramAry[0],x=this.paramAry[1],y=this.paramAry[2],z=this.paramAry[3],A=this.paramAry[4],B=this.paramAry[5],C=this.paramAry[6],D="",E="";D+=b,E+=n,A&&(D+=c,E+=o),z&&(D+=d,E+=p),D+=e,B&&(D+=f,E+=q),y&&(D+=g,E+=r),D+=h,1==C?(D+=l,E+=s):2==C?(D+=m,E+=t):D+=k,x&&(D+=j,E+=u),w&&(D+=i,E+=v);var F=E+"void main(){\n"+D+"}";return F},c.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D tex;\nvarying vec2 v0;\nvoid main(void)\n{\nvec4 infoUv = texture2D(tex, v0.xy);\ngl_FragColor = infoUv;\n}";return a},c.Display3D_Follow_Shader="Display3DFollowShader",c.shader_mat4={viewMatrix3D:0,camMatrix3D:1,modelMatrix:2,watheye:3,rotationMatrix:4},c.shader_vec4={time:[5,0],scale:[5,1],scaleCtrl:[5,2],force:[5,3],worldPos:[6,0],camPos:[6,1],animCtrl:[6,2],uvCtrl:[6,3]},c}(a.Shader3D);a.Display3DFollowShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DFollowPartilce},c.prototype.setAllByteInfo=function(a){b.prototype.setAllByteInfo.call(this,a),this.uploadGpu()},c.prototype.regShader=function(){if(this.materialParam){var b=this.getShaderParam();this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DFollowShader.Display3D_Follow_Shader,a.Display3DFollowShader,this.materialParam.material,b),this.materialParam.program=this.materialParam.shader.program}},c}(a.ParticleBallData);a.ParticleFollowData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.flag=0,a._caramPosVec=[0,0,0],a}return __extends(c,b),Object.defineProperty(c.prototype,"followlocusdata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleFollowLocusData},c.prototype.onCreated=function(){this.initBindMatrixAry()},c.prototype.initBindMatrixAry=function(){this._bindPosAry=new Array,this._gpuVc=new Float32Array(6*this.followlocusdata._fenduanshu);for(var a=0;a<=this.followlocusdata._fenduanshu;a++)this._bindPosAry.push([0,0,5*a]),this._bindPosAry.push([0,0,1])},c.prototype.setVa=function(){var b=a.Scene_data.context3D.pushVa(this.data.objData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.data.objData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.data.objData.stride,12)),this.setMaterialTexture(),a.Scene_data.context3D.drawCall(this.data.objData.indexBuffer,this.data.objData.treNum)},c.prototype.setVc=function(){this.updateMatrix(),this.updateBind(),this.data.vcmatData.set(a.Scene_data.viewMatrx3D.m,0),this.data.vcmatData.set(a.Scene_data.cam3D.cameraMatrix.m,16),this._caramPosVec[0]=a.Scene_data.cam3D.x,this._caramPosVec[1]=a.Scene_data.cam3D.y,this._caramPosVec[2]=a.Scene_data.cam3D.z,this.data.vcmatData.set(this._caramPosVec,32),a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.data.vcmatData),this.setBindPosVc(),this.setMaterialVc()},c.prototype.setBindPosVc=function(){for(var b=0;b<this._bindPosAry.length;b++)a.Scene_data.context3D.setVc3fv(this.data.materialParam.shader,"bindpos["+b+"]",this._bindPosAry[b])},c.prototype.reset=function(){this.resetPos(),b.prototype.reset.call(this)},c.prototype.updateMatrix=function(){this.modelMatrix.identity(),this.modelMatrix.prepend(this.posMatrix)},c.prototype.resetPos=function(){for(var b=0;b<this._bindPosAry.length;b+=2)this._bindPosAry[b][0]=this.bindVecter3d.x,this._bindPosAry[b][1]=this.bindVecter3d.y,this._bindPosAry[b][2]=this.bindVecter3d.z;this.flag=a.TimeUtil.getTimer()},c.prototype.updateBind=function(){var b=a.TimeUtil.getTimer();if(b-this.flag>=c.waitCdTime){var d=this._bindPosAry.pop(),e=this._bindPosAry.pop();e[0]=this.bindVecter3d.x,e[1]=this.bindVecter3d.y,e[2]=this.bindVecter3d.z;var f=this._bindPosAry[0],g=this._bindPosAry[1],h=new a.Vector3D(e[0]-f[0],e[1]-f[1],e[2]-f[2]);h.normalize(),g[0]=h.x,d[0]=h.x,g[1]=h.y,d[1]=h.y,g[2]=h.z,d[2]=h.z,this._bindPosAry.unshift(d),this._bindPosAry.unshift(e),this.flag=b}},c.waitCdTime=35,c}(a.Display3DParticle);a.Display3DFollowLocusPartilce=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2TexCoord")},c.prototype.getMat4Str=function(a){return"vcmat["+c.shader_mat4[a]+"]"},c.prototype.getVec4Str=function(a){return"vcmat["+c.shader_vec4[a][0]+"]["+c.shader_vec4[a][1]+"]"},c.getVcSize=function(){return 3},c.prototype.getVertexShaderString=function(){var b="attribute vec3 v3Position;\nattribute vec2 v2TexCoord;\nuniform mat4 vcmat["+a.Display3DFacetShader.getVcSize()+"];\nuniform vec3 bindpos[30];\nvarying vec2 v0;\n",c="   vec3 cpos = bindpos[int(v3Position.x)];\n   vec3 mulPos = normalize(vec3("+this.getVec4Str("camPos")+".xyz) - cpos);\n   vec3 normals = bindpos[int(v3Position.y)];\n   mulPos = cross(mulPos, normals);\n   mulPos = normalize(mulPos);\n   mulPos *= v3Position.z;\n   cpos += mulPos;\n   gl_Position = "+this.getMat4Str("viewMatrix3D")+"  * "+this.getMat4Str("camMatrix3D")+" * vec4(cpos,1.0);\n",d="v0 = v2TexCoord;\n",e=b+"void main(){\n"+c+d+"}";return e},c.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D tex;\nvarying vec2 v0;\nvoid main(void)\n{\nvec4 infoUv = texture2D(tex, v0.xy);\ngl_FragColor = infoUv;\n}";return a},c.Display3D_FollowLocus_Shader="Display3DFollowLocusShader",c.shader_mat4={viewMatrix3D:0,camMatrix3D:1},c.shader_vec4={camPos:[2,0]},c}(a.Shader3D);a.Display3DFollowLocusShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DFollowLocusPartilce},c.prototype.setAllByteInfo=function(a){this._fenduanshu=a.readFloat(),b.prototype.setAllByteInfo.call(this,a),this.uploadGpu(),this.initVcData()},c.prototype.uploadGpu=function(){this.objData=new a.ObjData,this.objData.vertices=new Array,this.objData.uvs=new Array,this.objData.indexs=new Array;for(var b=0;b<=this._fenduanshu;b++){var c=new a.Vector2D(b/this._fenduanshu,0),d=new a.Vector2D(b/this._fenduanshu,1);c.scaleBy(.9),d.scaleBy(.9),this._isU&&(c.x=-c.x,d.x=-d.x),this._isV&&(c.y=-c.y,d.y=-d.y);var e=2*b;this.objData.vertices.push(e,e+1,-this._originWidthScale*this._width/100),this._isUV?this.objData.vertices.push(c.y,c.x):this.objData.vertices.push(c.x,c.y),this.objData.vertices.push(e,e+1,(1-this._originWidthScale)*this._width/100),this._isUV?this.objData.vertices.push(d.y,d.x):this.objData.vertices.push(d.x,d.y)}for(b=0;b<this._fenduanshu;b++)this.objData.indexs.push(0+2*b,1+2*b,2+2*b,1+2*b,3+2*b,2+2*b);this.pushToGpu()},c.prototype.pushToGpu=function(){this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs),this.objData.stride=20,this.objData.treNum=this.objData.indexs.length},c.prototype.initVcData=function(){this.vcmatData=new Float32Array(16*a.Display3DFollowLocusShader.getVcSize())},c.prototype.regShader=function(){if(this.materialParam){new a.Display3DFollowLocusShader;this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DFollowLocusShader.Display3D_FollowLocus_Shader,a.Display3DFollowLocusShader,this.materialParam.material),this.materialParam.program=this.materialParam.shader.program}},c}(a.ParticleData);a.ParticleFollowLocusData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"pos"),a.bindAttribLocation(this.program,1,"v2uv"),a.bindAttribLocation(this.program,2,"boneWeight"),a.bindAttribLocation(this.program,3,"boneID")},c.prototype.getMat4Str=function(a){return"vcmat["+c.shader_mat4[a]+"]"},c.getVcSize=function(){return 3},c.prototype.getVertexShaderString=function(){var b="attribute vec3 pos;attribute vec2 v2uv;attribute vec4 boneWeight;attribute vec4 boneID;uniform vec4 boneQ[54];\nuniform vec3 boneD[54];\nuniform mat4 vcmat["+c.getVcSize()+"];\nvarying vec2 v0;\n"+a.MaterialAnimShader.getMd5M44Str()+"void main(void){v0 = v2uv;\nvec4 vt0 = getQDdata(vec3(pos.x,pos.y,pos.z));\n gl_Position = "+this.getMat4Str("viewMatrix3D")+" * "+this.getMat4Str("camMatrix3D")+" *"+this.getMat4Str("posMatrix3D")+"* vt0;}";return b},c.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nvarying vec2 v0;\nvoid main(void)\n{\ngl_FragColor = vec4(1.0,0.0,1.0,1.0);\n}";return a},c.Display3DBoneShader="Display3DBoneShader",c.shader_mat4={viewMatrix3D:0,camMatrix3D:1,posMatrix3D:2},c}(a.Shader3D);a.Display3DBoneShader=b;var c=function(b){function c(){var a=b.call(this)||this;return a.skipNum=0,a}return __extends(c,b),Object.defineProperty(c.prototype,"modeldata",{get:function(){return this.data},enumerable:!0,configurable:!0}),c.prototype.creatData=function(){this.data=new a.ParticleBoneData},c.prototype.update=function(){a.Scene_data.context3D.setWriteDepth(!1),b.prototype.update.call(this)},c.prototype.setVc=function(){var b=float2int(this._time/a.Scene_data.frameTime/2);this.data.vcmatData.set(a.Scene_data.viewMatrx3D.m,0),this.data.vcmatData.set(a.Scene_data.cam3D.cameraMatrix.m,16),this.data.vcmatData.set(this.modelMatrix.m,32),a.Scene_data.context3D.setVcMatrix4fv(this.data.materialParam.shader,"vcmat",this.data.vcmatData);var c=this.modeldata.animData.boneQPAry[0],d=c.length,e=b%d,f=c[e];a.Scene_data.context3D.setVc4fv(this.data.materialParam.shader,"boneQ",f.quat),a.Scene_data.context3D.setVc3fv(this.data.materialParam.shader,"boneD",f.pos),this.setMaterialVc()},c.prototype.setVa=function(){var b=a.Scene_data.context3D.pushVa(this.modeldata.meshData.vertexBuffer);b||(a.Scene_data.context3D.setVaOffset(0,3,this.modeldata.meshData.stride,0),a.Scene_data.context3D.setVaOffset(1,2,this.modeldata.meshData.stride,12),a.Scene_data.context3D.setVaOffset(3,4,this.modeldata.meshData.stride,20),a.Scene_data.context3D.setVaOffset(2,4,this.modeldata.meshData.stride,36)),this.setMaterialTexture(),a.Scene_data.context3D.drawCall(this.modeldata.meshData.indexBuffer,this.modeldata.meshData.treNum)},c.prototype.resetVa=function(){b.prototype.resetVa.call(this)},c}(a.Display3DParticle);a.Display3DBonePartilce=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.objScale=1,a}return __extends(c,b),c.prototype.getParticle=function(){return new a.Display3DBonePartilce},c.prototype.destory=function(){b.prototype.destory.call(this),this.meshData.destory(),this.animData=null},c.prototype.setAllByteInfo=function(c){this.meshData=new a.MeshData,this.animData=new a.AnimData,this.objScale=c.readFloat();var d=13,e=c.getInt();e*=4*d;var f=new ArrayBuffer(e),g=new DataView(f);a.BaseRes.readBytes2ArrayBuffer(c,g,3,0,d),a.BaseRes.readBytes2ArrayBuffer(c,g,2,3,d),a.BaseRes.readIntForTwoByte(c,this.meshData.indexs),a.BaseRes.readBytes2ArrayBuffer(c,g,4,5,d,2),a.BaseRes.readBytes2ArrayBuffer(c,g,4,9,d,3),this.meshData.stride=4*d,this.readFrameQua(c),b.prototype.setAllByteInfo.call(this,c),this.initVcData(),this.meshData.vertexBuffer=a.Scene_data.context3D.uploadBuff3DArrayBuffer(f),this.meshData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.meshData.indexs),this.meshData.treNum=this.meshData.indexs.length},c.prototype.initVcData=function(){this.vcmatData=new Float32Array(16*a.Display3DBoneShader.getVcSize())},c.prototype.setFloat32Mat=function(b,c){var d=16*a.Display3DBoneShader.shader_mat4[b];this.vcmatData.set(c,d)},c.prototype.readFrameQua=function(b){for(var c=b.readFloat(),d=32767,e=b.readInt(),f=new Array,g=0;e>g;g++){var h=b.readInt(),i=new a.DualQuatFloat32Array;i.quat=new Float32Array(4*h),i.pos=new Float32Array(3*h);for(var j=0;h>j;j++)i.quat[4*j+0]=b.readShort()/d,i.quat[4*j+1]=b.readShort()/d,i.quat[4*j+2]=b.readShort()/d,i.quat[4*j+3]=b.readShort()/d,i.pos[3*j+0]=b.readShort()/d*c,i.pos[3*j+1]=b.readShort()/d*c,i.pos[3*j+2]=b.readShort()/d*c;f.push(i)}this.animData.boneQPAry=new Array,this.animData.boneQPAry.push(f)},c.prototype.uploadGpu=function(){this.uploadMesh(this.meshData)},c.prototype.uploadMesh=function(b){b.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(b.vertices),b.uvBuffer=a.Scene_data.context3D.uploadBuff3D(b.uvs),b.boneIdBuffer=a.Scene_data.context3D.uploadBuff3D(b.boneIDAry),b.boneWeightBuffer=a.Scene_data.context3D.uploadBuff3D(b.boneWeightAry),b.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(b.indexs),b.treNum=b.indexs.length},c.prototype.regShader=function(){this.materialParam.shader=a.ProgrmaManager.getInstance().getMaterialProgram(a.Display3DBoneShader.Display3DBoneShader,a.Display3DBoneShader,this.materialParam.material),this.materialParam.program=this.materialParam.shader.program},c}(a.ParticleData);a.ParticleBoneData=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a}();a.KeyFrame=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.dataAry=new Array}return b.prototype.destory=function(){this.dataAry=null},b.prototype.setByteData=function(b){for(var c=b.readFloat(),d=0;c>d;d++){var e=b.readFloat(),f=this.addKeyFrame(e);f.frameNum=e,f.baseValue=new Array;for(var g=0;10>g;g++)f.baseValue.push(b.readFloat());var h=b.readFloat();if(f.animData=new Array,h>0)for(var i=0;h>i;i++)f.animData.push(this.getByteDataTemp(b))}this.maxFrameNum=this.dataAry[this.dataAry.length-1].frameNum,this.beginTime=this.dataAry[0].frameNum*a.Scene_data.frameTime},b.prototype.addKeyFrame=function(a){var b=new Object;return b.frameNum=a,this.dataAry.push(b),b},b.prototype.getByteDataTemp=function(b){var c=new Object,d=b.readInt(),e=b.readInt();c.data=new Array,c.dataByte=new Array;for(var f=0;e>f;f++){var g=new Object;if(g.type=b.readInt(),1==g.type){var h=b.readFloat();c.dataByte.push(h)}if(2==g.type){var i=new a.Vector3D;i.x=b.readFloat(),i.y=b.readFloat(),i.z=b.readFloat(),c.dataByte.push(i)}}return c.type=d,c},b}();a.TimeLineData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._time=0,a.targetFlag=-1,a.beginTime=0,a.isByteData=!1,a.targetFlag=-1,a.visible=!1,a.maxFrameNum=0,a._time=0,a._keyFrameAry=new Array,a}return __extends(c,b),c.prototype.updateMatrix=function(b,c){this._axisMove&&b.prependTranslation(this._axisMove.axis.x*this._axisMove.num,this._axisMove.axis.y*this._axisMove.num,this._axisMove.axis.z*this._axisMove.num),this._axisRotaion&&b.prependRotation(this._axisRotaion.num,this._axisRotaion.axis),b.prependTranslation(c.data.center.x,c.data.center.y,c.data.center.z),this._scaleChange?b.prependScale(c.data._widthFixed?1:this._scaleChange.num,c.data._heightFixed?1:this._scaleChange.num,c.data._widthFixed?1:this._scaleChange.num):this._scaleNosie?b.prependScale(c.data._widthFixed?1:1+this._scaleNosie.num,c.data._heightFixed?1:1+this._scaleNosie.num,c.data._widthFixed?1:1+this._scaleNosie.num):this._scaleAnim&&b.prependScale(c.data._widthFixed?1:this._scaleAnim.num,c.data._heightFixed?1:this._scaleAnim.num,c.data._widthFixed?1:this._scaleAnim.num),b.prependRotation(c.data.rotationV3d.z,a.Vector3D.Z_AXIS),b.prependRotation(c.data.rotationV3d.y,a.Vector3D.Y_AXIS),b.prependRotation(c.data.rotationV3d.x,a.Vector3D.X_AXIS)},c.prototype.inverAxisRotation=function(a){this._axisRotaion&&a.prependRotation(-this._axisRotaion.num,this._axisRotaion.axis)},c.prototype.applySelfRotation=function(a,b){this._selfRotaion&&a.prependRotation(this._selfRotaion.num,b)},c.prototype.addKeyFrame=function(b){var c=new a.KeyFrame;return c.frameNum=b,this._keyFrameAry.push(c),c},c.prototype.updateTime=function(a){this._currentKeyFrame&&(this._time=a,this.getTarget(),this._axisRotaion&&this._axisRotaion.update(this._time),this._selfRotaion&&this._selfRotaion.update(this._time),this._axisMove&&this._axisMove.update(this._time),this._scaleChange?this._scaleChange.update(this._time):this._scaleNosie?this._scaleNosie.update(this._time):this._scaleAnim&&this._scaleAnim.update(this._time))},c.prototype.getTarget=function(){for(var b=-1,c=0;c<this._keyFrameAry.length&&this._keyFrameAry[c].frameNum*a.Scene_data.frameTime<this._time;c++)b=c;b!=this.targetFlag&&(this._currentKeyFrame=this._keyFrameAry[b],this.targetFlag=b,b>=this._keyFrameAry.length-1||!this._currentKeyFrame?(this.visible=!1,this._currentKeyFrame=null):(this.visible=!0,this.enterKeyFrame(this._currentKeyFrame.animData,this._currentKeyFrame.frameNum*a.Scene_data.frameTime,this._currentKeyFrame.baseValue)))},c.prototype.enterKeyFrame=function(b,c,d){if(void 0===c&&(c=0),void 0===d&&(d=null),null!=d){for(var e=0;10>e;e++)if(d[e])switch(e){case 1:this._selfRotaion||(this._selfRotaion=new a.SelfRotation),this._selfRotaion.num=this._selfRotaion.baseNum=d[e];break;case 2:this._axisRotaion||(this._axisRotaion=new a.AxisRotaion),this._axisRotaion.num=this._axisRotaion.baseNum=d[e];break;case 6:this._scaleChange||(this._scaleChange=new a.ScaleChange),this._scaleChange.num=this._scaleChange.baseNum=d[e];break;case 7:this._scaleAnim||(this._scaleAnim=new a.ScaleAnim),this._scaleAnim.num=this._scaleAnim.baseNum=d[e];break;case 8:this._scaleNosie||(this._scaleNosie=new a.ScaleNoise),this._scaleNosie.num=this._scaleNosie.baseNum=d[e];break;case 9:this._axisMove||(this._axisMove=new a.AxisMove),this._axisMove.num=this._axisMove.baseNum=d[e]}this._selfRotaion&&(this._selfRotaion.isDeath=!0),this._axisRotaion&&(this._axisRotaion.isDeath=!0),this._scaleChange&&(this._scaleChange.isDeath=!0),this._scaleAnim&&(this._scaleAnim.isDeath=!0),this._scaleNosie&&(this._scaleNosie.isDeath=!0),this._axisMove&&(this._axisMove.isDeath=!0),b&&this.setBaseTimeByte(b,c,d)}},c.prototype.reset=function(){this._time=0,this._currentKeyFrame=this._keyFrameAry[0],this.visible=!1,this.targetFlag=-1},c.prototype.setAllByteInfo=function(b,c){this.isByteData=!0;for(var d=b.readFloat(),e=0;d>e;e++){var f=b.readFloat(),g=this.addKeyFrame(f);g.frameNum=f,g.baseValue=new Array;for(var h=0;10>h;h++)g.baseValue.push(b.readFloat());var i=b.readFloat();if(g.animData=new Array,i>0)for(var j=0;i>j;j++)g.animData.push(this.getByteDataTemp(b))}this.maxFrameNum=this._keyFrameAry[this._keyFrameAry.length-1].frameNum,this.beginTime=this._keyFrameAry[0].frameNum*a.Scene_data.frameTime,this._currentKeyFrame=this._keyFrameAry[0]},c.prototype.setAllDataInfo=function(a){this.isByteData=!0;for(var b=a.dataAry.length,c=0;b>c;c++){var d=this.addKeyFrame(a.dataAry[c].frameNum);d.baseValue=a.dataAry[c].baseValue,d.animData=a.dataAry[c].animData}this.maxFrameNum=a.maxFrameNum,this.beginTime=a.beginTime,this._currentKeyFrame=this._keyFrameAry[0]},c.prototype.setBaseTimeByte=function(b,c,d){void 0===c&&(c=0),void 0===d&&(d=null);for(var e=0;e<b.length;e++)1==b[e].type?(this._selfRotaion?this._selfRotaion.reset():this._selfRotaion=new a.SelfRotation,this._selfRotaion.dataByte(b[e].data,b[e].dataByte),this._selfRotaion.baseTime=c):2==b[e].type?(this._axisRotaion?this._axisRotaion.reset():this._axisRotaion=new a.AxisRotaion,this._axisRotaion.dataByte(b[e].data,b[e].dataByte),this._axisRotaion.baseTime=c):6==b[e].type?(this._scaleChange?this._scaleChange.reset():this._scaleChange=new a.ScaleChange,this._scaleChange.dataByte(b[e].data,b[e].dataByte),this._scaleChange.baseTime=c):7==b[e].type?(this._scaleAnim?this._scaleAnim.reset():this._scaleAnim=new a.ScaleAnim,this._scaleAnim.dataByte(b[e].data,b[e].dataByte),this._scaleAnim.baseTime=c):8==b[e].type?(this._scaleNosie?this._scaleNosie.reset():this._scaleNosie=new a.ScaleNoise,this._scaleNosie.dataByte(b[e].data,b[e].dataByte),this._scaleNosie.baseTime=c):9==b[e].type&&(this._axisMove?this._axisMove.reset():this._axisMove=new a.AxisMove,this._axisMove.dataByte(b[e].data,b[e].dataByte),this._axisMove.baseTime=c)},c.prototype.getByteDataTemp=function(b){var c=new Object,d=b.readInt(),e=b.readInt();c.data=new Array,c.dataByte=new Array;for(var f=0;e>f;f++){var g=new Object;if(g.type=b.readInt(),1==g.type){var h=b.readFloat();c.dataByte.push(h)}if(2==g.type){var i=new a.Vector3D;i.x=b.readFloat(),i.y=b.readFloat(),i.z=b.readFloat(),c.dataByte.push(i)}}return c.type=d,c},c.prototype.getMaxFrame=function(){return this._keyFrameAry[this._keyFrameAry.length-1].frameNum},c.prototype.dispose=function(){},c}(a.EventDispatcher);a.TimeLine=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this.baseNum=0,this.num=0,this.time=0,this.speed=0,this.aSpeed=0,this.beginTime=0,this.lastTime=0,this.baseTime=0}return a.prototype.BaseAnim=function(){},a.prototype.update=function(a){this._isDeath||(this.time=a-this.baseTime,this._isActiva?(this.time=this.time-this.beginTime,this.time>this.lastTime&&(this.time=this.lastTime-this.beginTime,this._isDeath=!0),this.coreCalculate()):this.time>=this.beginTime&&(this.time>=this.lastTime?(this.time=this.lastTime-this.beginTime,this.coreCalculate(),this._isDeath=!0):(this.time=this.time-this.beginTime,this.coreCalculate()),this._isActiva=!0))},a.prototype.coreCalculate=function(){this.num=this.speed*this.time+this.aSpeed*this.time*this.time+this.baseNum},a.prototype.reset=function(){this._isActiva=!1,this._isDeath=!1,this.time=0,this.num=0},a.prototype.depthReset=function(){this._isActiva=!1,this._isDeath=!1,this.time=0,this.baseNum=0,this.num=0},Object.defineProperty(a.prototype,"data",{set:function(a){},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"isDeath",{get:function(){return this._isDeath},set:function(a){this._isDeath=a},enumerable:!0,configurable:!0}),a.prototype.getAllNum=function(a){a=Math.min(a,this.lastTime),a-=this.beginTime;var b=this.speed*a+this.aSpeed*a*a;this.baseNum+=b},a}();a.BaseAnim=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),Object.defineProperty(c.prototype,"data",{set:function(b){this.beginTime=Number(b[0].value),-1==Number(b[1].value)?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(b[1].value);var c=b[2].value.split("|");this.axis=new a.Vector3D(Number(c[0]),Number(c[1]),Number(c[2])),this.axis.normalize(),this.speed=.1*Number(b[3].value),this.aSpeed=.001*Number(b[4].value)},enumerable:!0,configurable:!0}),c.prototype.dataByte=function(b,c){this.beginTime=c[0],-1==c[1]?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=c[1],this.axis=c[2],this.axis.normalize(),this.speed=.1*c[3],this.aSpeed=.001*c[4]},c}(a.BaseAnim);a.AxisMove=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),Object.defineProperty(c.prototype,"data",{set:function(b){this.beginTime=Number(b[0].value),-1==Number(b[1].value)?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(b[1].value);var c=String(b[2].value).split("|");this.axis=new a.Vector3D(Number(c[0]),Number(c[1]),Number(c[2])),c=String(b[3].value).split("|"),this.axisPos=new a.Vector3D(100*Number(c[0]),100*Number(c[1]),100*Number(c[2])),this.speed=.1*Number(b[4].value),this.aSpeed=.1*Number(b[5].value)},enumerable:!0,configurable:!0}),c.prototype.dataByte=function(b,c){this.beginTime=Number(c[0]),-1==Number(c[1])?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(c[1]),this.axis=c[2],this.axisPos=c[3],this.speed=.1*c[4],this.aSpeed=.1*c[5]},c}(a.BaseAnim);a.AxisRotaion=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.num=1,a}return __extends(c,b),c.prototype.update=function(a){this._isDeath||(this.time=a-this.baseTime,this._isActiva?(this.coreCalculate(),this.time>this.lastTime&&(this._isDeath=!0)):this.time>=this.beginTime&&(this._isActiva=!0))},c.prototype.coreCalculate=function(){var b=float2int(this.time/a.Scene_data.frameTime);b>=this.numAry.length?this.num=this.numAry[this.numAry.length-1]:this.num=this.numAry[b]},c.prototype.reset=function(){b.prototype.reset.call(this),this.num=1},c.prototype.depthReset=function(){b.prototype.depthReset.call(this),this.num=1},Object.defineProperty(c.prototype,"data",{set:function(b){this.numAry=new Array,this.beginTime=Number(b[0].value),-1==Number(b[1].value)?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(b[1].value),this.beginScale=Number(b[2].value),this.scaleNum=Number(b[3].value),this.scaleAry=new Array;for(var c=0,d=4;d<4+2*this.scaleNum;d+=2){var e=new Object;e.value=Number(b[d].value),e.time=Number(b[d+1].value),c+=e.time,e.beginTime=this.beginTime+c,this.scaleAry.push(e)}var f,g=0,h=1;this.scaleAry.length?(f=(this.scaleAry[this.scaleAry.length-1].beginTime+this.scaleAry[this.scaleAry.length-1].time)/a.Scene_data.frameTime,
h=this.scaleAry[0].beginTime,this._currentTarget=this.scaleAry[0]):f=0;var i=0;for(d=0;f>d;d++){var j=a.Scene_data.frameTime*d;j>=this._currentTarget.beginTime&&(this.beginScale=this._currentTarget.value,g=this._currentTarget.beginTime,i==this.scaleAry.length-1?this._currentTarget=this.scaleAry[this.scaleAry.length-1]:(i++,this._currentTarget=this.scaleAry[i]),h=this._currentTarget.time);var k=(j-g)/h*(this._currentTarget.value-this.beginScale)+this.beginScale;this.numAry.push(k)}this._currentTarget=this.scaleAry[0]},enumerable:!0,configurable:!0}),c.prototype.dataByte=function(b,c){this.numAry=new Array,this.beginTime=c[0],-1==c[1]?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=c[1],this.beginScale=c[2],this.scaleNum=c[3],this.scaleAry=new Array;for(var d=0,e=4;e<4+2*this.scaleNum;e+=2){var f=new Object;f.value=c[e],f.time=c[e+1],d+=f.time,f.beginTime=this.beginTime+d,this.scaleAry.push(f)}var g,h=0,i=1;this.scaleAry.length?(g=(this.scaleAry[this.scaleAry.length-1].beginTime+this.scaleAry[this.scaleAry.length-1].time)/a.Scene_data.frameTime,i=this.scaleAry[0].beginTime,this._currentTarget=this.scaleAry[0]):g=0;var j=0;for(e=0;g>e;e++){var k=a.Scene_data.frameTime*e;k>=this._currentTarget.beginTime&&(this.beginScale=this._currentTarget.value,h=this._currentTarget.beginTime,j==this.scaleAry.length-1?this._currentTarget=this.scaleAry[this.scaleAry.length-1]:(j++,this._currentTarget=this.scaleAry[j]),i=this._currentTarget.time);var l=(k-h)/i*(this._currentTarget.value-this.beginScale)+this.beginScale;this.numAry.push(l)}this._currentTarget=this.scaleAry[0]},c.prototype.getAllNum=function(a){a=Math.min(a,this.lastTime+this.beginTime);var b=this.scaleAry[this.scaleAry.length-1];if(a>=b.beginTime+b.time)return void(this.baseNum=b.value);for(var c,d=0;d<this.scaleAry.length;d++)a>this.scaleAry[d]["this"].beginTime&&(this._currentTarget=this.scaleAry[d],this.beginTime=this._currentTarget["this"].beginTime,this.beginScale=this._currentTarget.value,c=d);c++,this._currentTarget=this.scaleAry[c],this.baseNum=(this._currentTarget.value-this.beginScale)/this._currentTarget["this"].time*(a-this.beginTime)+this.beginScale},c}(a.BaseAnim);a.ScaleAnim=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.num=1,a}return __extends(c,b),c.prototype.coreCalculate=function(){this.num=1+this.speed*this.time+this.baseNum,this.num<this.minNum?this.num=this.minNum:this.num>this.maxNum&&(this.num=this.maxNum)},Object.defineProperty(c.prototype,"data",{set:function(b){this.beginTime=Number(b[0].value),-1==Number(b[1].value)?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(b[1].value),this.speed=.001*Number(b[2].value),this.minNum=.01*Number(b[3].value),this.maxNum=.01*Number(b[4].value)},enumerable:!0,configurable:!0}),c.prototype.dataByte=function(b,c){this.beginTime=c[0],-1==c[1]?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=c[1],this.speed=.001*c[2],this.minNum=.01*c[3],this.maxNum=.01*c[4]},c.prototype.getAllNum=function(a){a=Math.min(a,this.lastTime),a-=this.beginTime;var b=this.speed*a;this.baseNum+=b,this.baseNum<this.minNum?this.baseNum=this.minNum:b>this.maxNum&&(this.baseNum=this.maxNum)},c.prototype.reset=function(){this._isActiva=!1,this._isDeath=!1,this.time=0,this.num=1},c.prototype.depthReset=function(){this._isActiva=!1,this._isDeath=!1,this.time=0,this.baseNum=0,this.num=1},c}(a.BaseAnim);a.ScaleChange=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.coreCalculate=function(){this.num=this.amplitude+this.amplitude*Math.sin(this.speed*this.time)},Object.defineProperty(c.prototype,"data",{set:function(b){this.beginTime=Number(b[0].value),-1==Number(b[1].value)?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(b[1].value),this.amplitude=Number(b[2].value),this.speed=.01*Number(b[3].value)},enumerable:!0,configurable:!0}),c.prototype.dataByte=function(b,c){this.beginTime=c[0],-1==c[1]?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=c[1],this.amplitude=c[2],this.speed=.01*c[3]},c.prototype.getAllNum=function(a){this.baseNum=this.amplitude+this.amplitude*Math.sin(this.speed*a)},c}(a.BaseAnim);a.ScaleNoise=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),Object.defineProperty(c.prototype,"data",{set:function(b){this.beginTime=Number(b[0].value),-1==Number(b[1].value)?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=Number(b[1].value),this.speed=.1*Number(b[2].value),this.aSpeed=.1*Number(b[3].value)},enumerable:!0,configurable:!0}),c.prototype.dataByte=function(b,c){this.beginTime=c[0],-1==c[1]?this.lastTime=a.Scene_data.MAX_NUMBER:this.lastTime=c[1],this.speed=.1*c[2],this.aSpeed=.1*c[3]},c}(a.BaseAnim);a.SelfRotation=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.Down="down",b.Up="Up",b.Move="Move",b.PinchStart="PinchStart",b.Pinch="Pinch",b}(a.BaseEvent);a.InteractiveEvent=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.LEFT="left",a.CENTER="center",a.RIGHT="right",a.TOP="top",a.MIDDLE="middle",a.BOTTOM="bottom",a}();a.TextAlign=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._hasDispose=!1}return Object.defineProperty(b.prototype,"texture",{get:function(){return this.textureRes?this.textureRes.texture:null},enumerable:!0,configurable:!0}),b.prototype.setInfo=function(b,c,d,e){var f=this;void 0===e&&(e=null),this._useImgUrl=e,a.LoadManager.getInstance().load(a.Scene_data.fileRoot+b,a.LoadManager.XML_TYPE,function(a){var b=JSON.parse(a);f.configData=b.uiArr,f.layoutData=b.panelArr,f.loadImgUrl(c,d)})},b.prototype.loadConfig=function(b,c){var d=this;a.LoadManager.getInstance().load(a.Scene_data.fileRoot+b,a.LoadManager.XML_TYPE,function(a){var b=JSON.parse(a);d.configData=b.uiArr,c()})},b.prototype.loadImgUrl=function(b,c){var d=this;a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+b,function(a){d.textureRes=a,d._useImgUrl?d.loadUseImg(c):c()},1,null,0)},b.prototype.loadUseImg=function(b){this.useImg=new Image,this.useImg.onload=function(){b()},this.useImg.src=a.Scene_data.fileRoot+this._useImgUrl},b.prototype.getRec=function(b){for(var c=new a.UIRectangle,d=0;d<this.configData.length;d++)if(this.configData[d].name==b){c.x=this.configData[d].x,c.y=this.configData[d].y,c.width=this.configData[d].width,c.height=this.configData[d].height,c.pixelWitdh=this.configData[d].ow,c.pixelHeight=this.configData[d].oh,c.pixelX=this.configData[d].ox,c.pixelY=this.configData[d].oy,c.type=this.configData[d].type,c.cellX=this.configData[d].cellX,c.cellY=this.configData[d].cellY;break}return c},b.prototype.getLayoutData=function(a){if(!this.layoutData)return null;for(var b in this.layoutData)for(var c=this.layoutData[b].item,d=0;d<c.length;d++)if(c[d].name==a)return c[d]},b.prototype.getGridRec=function(b){for(var c=new a.UIGridRentangle,d=0;d<this.configData.length;d++)if(this.configData[d].name==b){c.x=this.configData[d].x,c.y=this.configData[d].y,c.width=this.configData[d].width,c.height=this.configData[d].height,c.pixelWitdh=this.configData[d].ow,c.pixelHeight=this.configData[d].oh,c.pixelX=this.configData[d].ox,c.pixelY=this.configData[d].oy,c.ogw=this.configData[d].uow,c.ogh=this.configData[d].uoh;break}return c},Object.defineProperty(b.prototype,"hasData",{get:function(){return this.configData},enumerable:!0,configurable:!0}),b.prototype.getObject=function(a,b,c,d,e,f,g,h,i){void 0===h&&(h=0),void 0===i&&(i=0);var j=new Object;return j.x=b/f,j.y=c/g,j.width=d/f,j.height=e/g,j.ow=d,j.oh=e,j.ox=b,j.oy=c,j.name=a,j.cellX=h,j.cellY=i,j},b.prototype.updateCtx=function(b,c,d){a.TextureManager.getInstance().updateTexture(this.texture,c,d,b)},b.prototype.upDataPicToTexture=function(b,c){var d=this;a.LoadManager.getInstance().load(a.Scene_data.fileRoot+b,a.LoadManager.IMG_TYPE,function(b){var e=d.getRec(c);d.ctx=a.UIManager.getInstance().getContext2D(e.pixelWitdh,e.pixelHeight,!1),d.ctx.drawImage(b,0,0,e.pixelWitdh,e.pixelHeight),a.TextureManager.getInstance().updateTexture(d.texture,e.pixelX,e.pixelY,d.ctx)})},b.prototype.clearCtxTextureBySkilname=function(b){var c=this.getRec(b);this.ctx=a.UIManager.getInstance().getContext2D(c.pixelWitdh,c.pixelHeight,!1),this.ctx.clearRect(0,0,c.pixelWitdh,c.pixelHeight),a.TextureManager.getInstance().updateTexture(this.texture,c.pixelX,c.pixelY,this.ctx)},b.prototype.copyPicToTexture=function(b,c){var d=this.getRec(b),e=this.getRec(c);this.ctx=a.UIManager.getInstance().getContext2D(e.pixelWitdh,e.pixelHeight,!1),this.ctx.drawImage(this.useImg,d.pixelX,d.pixelY,d.pixelWitdh,d.pixelWitdh,0,0,e.pixelWitdh,e.pixelWitdh),a.TextureManager.getInstance().updateTexture(this.texture,e.pixelX,e.pixelY,this.ctx)},b.prototype.updateLable=function(b,c,d,e,f,g,h,i){void 0===f&&(f=a.TextAlign.MIDDLE),void 0===g&&(g=a.TextAlign.CENTER),void 0===h&&(h=!1),void 0===i&&(i=0);var j=this.getRec(b);this.ctx=this.getTextCtx(j,d,e,h,f,g);var k=this.getTextxpos(g,this.ctx),l=this.getTextypos(f,this.ctx);i>0?this.wrapText(this.ctx,c,k,l,i,d+3):this.ctx.fillText(c,k,l),a.TextureManager.getInstance().updateTexture(this.texture,j.pixelX,j.pixelY,this.ctx)},b.prototype.updateArtNum=function(b,c,d){var e=String(d),f=this.getRec(b),g=this.getRec(c);this.ctx=a.UIManager.getInstance().getContext2D(f.pixelWitdh,f.pixelHeight,!1);for(var h=g.pixelWitdh/10,i=0;i<e.length;i++){var j=Number(e.charAt(i));this.ctx.drawImage(this.useImg,g.pixelX+j*h,g.pixelY,h,g.pixelHeight,i*h,0,h,g.pixelHeight)}a.TextureManager.getInstance().updateTexture(this.texture,f.pixelX,f.pixelY,this.ctx)},b.prototype.writeSingleLabel=function(b,c,d,e,f){void 0===d&&(d=12),void 0===e&&(e=a.TextAlign.CENTER),void 0===f&&(f="#ffffff"),a.LabelTextFont.writeSingleLabel(this,b,c,d,e,f)},b.prototype.writeSingleLabelToCxt=function(b,c,d,e,f){void 0===d&&(d=12),void 0===e&&(e=0),void 0===f&&(f=0),b.textBaseline=a.TextAlign.TOP,b.textAlign=a.TextAlign.LEFT,b.font="bolder  "+d+"px "+a.UIData.font,a.TextRegExp.wrapText(b,c,"#ffffff",e,f,9999,20)},b.prototype.updateLableCtx=function(b,c,d,e,f,g,h,i,j,k){void 0===g&&(g=a.TextAlign.CENTER),void 0===h&&(h=a.TextAlign.MIDDLE),void 0===i&&(i="#000000"),void 0===j&&(j="bolder"),void 0===k&&(k=0),b.textAlign=g,b.textBaseline=h,b.fillStyle=i,b.font=j+" "+f+"px "+a.UIData.font;var l=this.getTextxpos(g,b);k>0?this.wrapText(b,c,d,e,k,f+3):b.fillText(c,d+l,e)},b.prototype.getTextCtx=function(b,c,d,e,f,g){var h=a.UIManager.getInstance().getContext2D(b.pixelWitdh,b.pixelHeight,!1);return h.textBaseline=f,h.textAlign=g,h.fillStyle=d,h.font=(e?"bolder ":"")+" "+c+"px "+a.UIData.font,h},b.prototype.getTextxpos=function(b,c){var d=0;return b==a.TextAlign.LEFT?d=0:b==a.TextAlign.RIGHT?d=c.canvas.width:b==a.TextAlign.CENTER&&(d=c.canvas.width/2),d},b.prototype.getTextypos=function(b,c){var d=0;return b==a.TextAlign.BOTTOM?d=c.canvas.height:b==a.TextAlign.TOP?d=0:b==a.TextAlign.MIDDLE&&(d=c.canvas.height/2),d},b.prototype.wrapText=function(a,b,c,d,e,f){for(var g=b,h="",i=0;i<g.length;i++)if("\n"==g[i])a.fillText(h,c,d),h="",d+=f;else{var j=h+g[i]+" ",k=a.measureText(j),l=k.width;l>e?(a.fillText(h,c,d),h=g[i]+"",d+=f):h=j}a.fillText(h,c,d)},b.prototype.dispose=function(){this._hasDispose||(this.textureRes.clearUseNum(),this.configData=null,this.layoutData=null,this.useImg=null,this._hasDispose=!0)},b}();a.UIAtlas=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b.pixelWitdh=1,b.pixelHeight=1,b.pixelX=0,b.pixelY=0,b.cellX=0,b.cellY=0,b.type=0,b}return __extends(b,a),b}(a.Rectangle);a.UIRectangle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b.ogw=0,b.ogh=0,b}return __extends(b,a),b}(a.UIRectangle);a.UIGridRentangle=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._x=0,c._y=0,c._width=0,c._height=0,c.z=0,c.absoluteX=0,c.absoluteY=0,c.absoluteWidth=0,c.absoluteHeight=0,c.enable=!0,c._left=0,c._right=0,c._center=0,c._xType=-1,c._top=0,c._bottom=0,c._middle=0,c._yType=-1,c.renderX=0,c.renderY=0,c.renderWidth=0,c.renderHeight=0,c.scale=1,c.isVirtual=!1,c.vcId=0,c._uvScale=1,c._rendering=!1,c.isU=!1,c.isV=!1,c.tr=new a.Rectangle,c.mouseEnable=!0,c}return __extends(c,b),Object.defineProperty(c.prototype,"rendering",{get:function(){return this._rendering},set:function(a){this._rendering=a},enumerable:!0,configurable:!0}),c.prototype.addStage=function(){this.renderData=[0,0,0,0],this.renderData2=[1,1,0,0],this.applyAbsolutePoint(),this.uiRender.addRenderUI(this)},c.prototype.removeStage=function(){this.uiRender.removeRenderUI(this)},c.prototype.pushVaData=function(a,b,c){return a.vertices.push(0,0,0,1,0,0,1,-1,0,0,-1,0),a.uvs.push(this.isU?1:0,this.isV?1:0,b,this.isU?0:1,this.isV?1:0,b,this.isU?0:1,this.isV?0:1,b,this.isU?1:0,this.isV?0:1,b),a.indexs.push(c,1+c,2+c,c,2+c,3+c),c+4},c.prototype.setVc=function(b,c){a.Scene_data.context3D.setVc4fv(b,"ui["+c+"]",this.renderData),a.Scene_data.context3D.setVc4fv(b,"ui2["+c+"]",this.renderData2)},c.prototype.update=function(){},c.prototype.applyRenderSize=function(){if(this.parent){if(this.renderX=this.absoluteX/a.Scene_data.stageWidth,this.renderY=this.absoluteY/a.Scene_data.stageHeight,this.renderWidth=this.absoluteWidth/a.Scene_data.stageWidth,this.renderHeight=this.absoluteHeight/a.Scene_data.stageHeight,this._uvScale>=0)this.renderData[0]=this.renderX,this.renderData[1]=this.renderY,this.renderData[2]=this.renderWidth*this.scale*this._uvScale,this.renderData[3]=this.renderHeight*this.scale,this.renderData2[0]=this.tr.width*this._uvScale,this.renderData2[1]=this.tr.height,this.renderData2[2]=this.tr.x,this.renderData2[3]=this.tr.y;else{var b=Math.abs(this._uvScale);this.renderData[0]=this.renderX+this.renderWidth*(1-b),this.renderData[1]=this.renderY,this.renderData[2]=this.renderWidth*this.scale*b,this.renderData[3]=this.renderHeight*this.scale,this.renderData2[0]=this.tr.width*b,this.renderData2[1]=this.tr.height,this.renderData2[2]=this.tr.x+this.tr.width*(1-b),this.renderData2[3]=this.tr.y}this.uiRender.makeRenderDataVc(this.vcId)}},Object.defineProperty(c.prototype,"uvScale",{get:function(){return this._uvScale},set:function(a){this._uvScale=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),c.prototype.setScale=function(a){this.scale=a,this.applyAbsolutePoint()},c.prototype.applyAbsolutePoint=function(){this.parent&&(-1==this._xType?this.absoluteX=this._x*a.UIData.Scale*this.scale+this.parent.x:0==this._xType?this.absoluteX=this._left*a.UIData.Scale:1==this._xType?this.absoluteX=a.Scene_data.stageWidth-this._right*a.UIData.Scale-this.width*a.UIData.Scale:2==this._xType&&(this.absoluteX=this._center*a.UIData.Scale+a.Scene_data.stageWidth/2-this.width*a.UIData.Scale/2),-1==this._yType?this.absoluteY=this._y*a.UIData.Scale*this.scale+this.parent.y:0==this._yType?this.absoluteY=this._top*a.UIData.Scale:1==this._yType?this.absoluteY=a.Scene_data.stageHeight-this._bottom*a.UIData.Scale-this.height*a.UIData.Scale:2==this._yType&&(this.absoluteY=this._middle*a.UIData.Scale+a.Scene_data.stageHeight/2-this.height*a.UIData.Scale/2),this.absoluteWidth=this.width*a.UIData.Scale,this.absoluteHeight=this.height*a.UIData.Scale,this.applyRenderSize())},Object.defineProperty(c.prototype,"x",{get:function(){return this._x},set:function(a){a!=this._x&&(this._x=a,this.applyAbsolutePoint())},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"y",{get:function(){return this._y},set:function(a){a!=this._y&&(this._y=a,this.applyAbsolutePoint())},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"width",{get:function(){return this._width},set:function(a){a!=this._width&&(this._width=a,this.applyAbsolutePoint())},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"height",{get:function(){return this._height},set:function(a){a!=this._height&&(this._height=a,this.applyAbsolutePoint())},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"left",{set:function(a){this._left=a,this._xType=0,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"right",{set:function(a){this._right=a,this._xType=1,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"center",{set:function(a){this._center=a,this._xType=2,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"top",{set:function(a){this._top=a,this._yType=0,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"bottom",{set:function(a){this._bottom=a,this._yType=1,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"middle",{set:function(a){this._middle=a,this._yType=2,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),c.prototype.testPoint=function(a,b){return a>this.absoluteX&&a<this.absoluteX+this.absoluteWidth&&b>this.absoluteY&&b<this.absoluteY+this.absoluteHeight?!0:!1},c.prototype.setPos=function(a,b){this.x=a,this.y=b},c.prototype.interactiveEvent=function(a){if(!this.enable)return!1;var b=(a.type,this._eventsMap);if(!b)return!1;var c=b[a.type];if(!c)return!1;if(!this.testPoint(a.x,a.y))return!1;var d=c.length;if(0==d)return!1;a.target=this;for(var e=d-1;e>=0;e--){var f=c[e];f.listener.call(f.thisObject,a)}return!0},c.prototype.preShow=function(){this.preParent&&this.preParent.addChild(this)},c.prototype.preHide=function(){this.preParent&&this.preParent.removeChild(this)},c}(a.EventDispatcher);a.UICompenent=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function b(){this._x=0,this._y=0,this._width=0,this._height=0,this._left=0,this._right=0,this._center=0,this._xType=0,this._top=0,this._bottom=0,this._middle=0,this._yType=0,this._list=new Array,this.renderList=new Array,this._hasStage=!1,this._hasLoad=!1,this._isLoading=!1,this._needShowLoading=!0,this._interfaceUI=!1,this._layer=100}return Object.defineProperty(b.prototype,"layer",{get:function(){return this._layer},set:function(a){this._layer=a;for(var b=0;b<this.renderList.length;b++)this.renderList[b].sortnum=this._layer},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"interfaceUI",{get:function(){return this._interfaceUI},set:function(a){this._interfaceUI=a,a?this.layer=0:this.layer=100},enumerable:!0,configurable:!0}),b.prototype.load=function(b,c){void 0===c&&(c=!0),this._isLoading||(this._completeFun=b,this._needShowLoading=c,this._hasLoad?b():(this._isLoading=!0,this._needShowLoading&&a.UILoading.getInstance().show(),this.makeBaseWinUi()))},Object.defineProperty(b.prototype,"hasLoad",{get:function(){return this._hasLoad},enumerable:!0,configurable:!0}),b.prototype.makeBaseWinUi=function(){this.applyLoad()},b.prototype.applyLoad=function(){},b.prototype.applyLoadComplete=function(){this._isLoading=!1,this._completeFun(),this._needShowLoading&&a.UILoading.getInstance().hide(),this._hasLoad=!0},Object.defineProperty(b.prototype,"hasStage",{get:function(){return this._hasStage},set:function(a){this._hasStage=a,a?this.onAdd():this.onRemove()},enumerable:!0,configurable:!0}),b.prototype.setUiListVisibleByItem=function(a,b){try{for(var c=0;c<a.length;c++)b?a[c].parent||this.addChild(a[c]):a[c].parent&&this.removeChild(a[c])}catch(d){}},b.prototype.onAdd=function(){},b.prototype.onRemove=function(){},b.prototype.addChild=function(a){if(!a)throw new Error("ui cuo");if(!a.parent)return this._list.push(a),a.parent=this,a.addStage(),a},b.prototype.addVirtualContainer=function(a){this.virtualContainerList||(this.virtualContainerList=new Array),a.parent=this,this.virtualContainerList.push(a)},b.prototype.removeVirtualContainer=function(a){},b.prototype.addUIList=function(a,b){for(var c=new Array,d=0;d<a.length;d++){var e=b.getComponent(a[d]);this.addChild(e),c.push(e)}return c},b.prototype.getUIList=function(a,b){for(var c=new Array,d=0;d<a.length;d++){var e=b.getComponent(a[d]);c.push(e)}return c},b.prototype.addEvntBut=function(b,c){var d=this.addChild(c.getComponent(b));return d.addEventListener(a.InteractiveEvent.Down,this.butClik,this),d},b.prototype.addEvntButUp=function(b,c){var d=this.addChild(c.getComponent(b));return d.addEventListener(a.InteractiveEvent.Up,this.butClik,this),d},b.prototype.removeEvntBut=function(b){b.removeEventListener(a.InteractiveEvent.Down,this.butClik,this),this.removeChild(b)},b.prototype.butClik=function(a){},b.prototype.renderSetVisibel=function(a,b){for(var c=0;c<a.length;c++)b?a[c].rendering||this.addRender(a[c]):a[c].rendering&&this.removeRender(a[c])},b.prototype.removeChild=function(a){var b=this._list.indexOf(a);-1!=b&&(this._list.splice(b,1),a.parent=null,a.removeStage())},b.prototype.removeAll=function(){for(;this._list.length;)this.removeChild(this._list[0]);for(;this._maskList.length;)this.removeMaks(this._maskList[0])},b.prototype.addMask=function(a){this._maskList||(this._maskList=new Array),a.parent=this,a.applyAbsolutePoint(),this._maskList.push(a)},b.prototype.removeMaks=function(a){if(this._maskList){var b=this._maskList.indexOf(a);-1!=b&&this._maskList.splice(b,1)}},b.prototype.addRender=function(b){var c=this.renderList.indexOf(b);-1==c&&(b.container=this,b.sortnum=this._layer,this.renderList.push(b),this.hasStage&&a.UIManager.getInstance().addUI(b))},b.prototype.addRenderAt=function(b,c){var d=this.renderList.indexOf(b);-1==d&&(b.container=this,b.sortnum=this._layer,this.renderList.splice(c,0,b),this.hasStage&&a.UIManager.getInstance().addUI(b))},b.prototype.removeRender=function(b){var c=this.renderList.indexOf(b);-1!=c&&(this.renderList.splice(c,1),this.hasStage&&a.UIManager.getInstance().removeUI(b))},b.prototype.resize=function(){0==this._xType?this._x=this._left*a.UIData.Scale:1==this._xType?this._x=a.Scene_data.stageWidth-this._right*a.UIData.Scale-this.width*a.UIData.Scale:2==this._xType&&(this._x=this._center*a.UIData.Scale+a.Scene_data.stageWidth/2-this.width*a.UIData.Scale/2),0==this._yType?this._y=this._top*a.UIData.Scale:1==this._yType?this._y=a.Scene_data.stageHeight-this._bottom*a.UIData.Scale-this.height*a.UIData.Scale:2==this._yType&&(this._y=this._middle*a.UIData.Scale+a.Scene_data.stageHeight/2-this.height*a.UIData.Scale/2),this.applyChild(),this.resizeVirtualList()},b.prototype.resizeVirtualList=function(){if(this.virtualContainerList)for(var a=0;a<this.virtualContainerList.length;a++)this.virtualContainerList[a].resize()},Object.defineProperty(b.prototype,"left",{get:function(){return this._left},set:function(b){this._left=b,this._xType=0,this._x=this._left*a.UIData.Scale,this.applyChild()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"right",{get:function(){return this._right},set:function(b){this._right=b,this._xType=1,this._x=a.Scene_data.stageWidth-this._right*a.UIData.Scale-this.width*a.UIData.Scale,this.applyChild()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"center",{set:function(b){this._center=b,this._xType=2,this._x=this._center*a.UIData.Scale+a.Scene_data.stageWidth/2-this.width*a.UIData.Scale/2,this.applyChild()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"top",{get:function(){return this._top},set:function(b){this._top=b,this._yType=0,this._y=this._top*a.UIData.Scale,this.applyChild()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"bottom",{get:function(){return this._bottom},set:function(b){this._bottom=b,this._yType=1,this._y=a.Scene_data.stageHeight-this._bottom*a.UIData.Scale-this.height*a.UIData.Scale,this.applyChild()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"middle",{set:function(b){this._middle=b,this._yType=2,this._y=this._middle*a.UIData.Scale+a.Scene_data.stageHeight/2-this.height*a.UIData.Scale/2,this.applyChild()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"width",{get:function(){if(0!=this._width)return this._width;for(var a=0,b=0;b<this._list.length;b++)a=Math.max(this._list[b].width);return a},set:function(a){this._width=a},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"height",{get:function(){if(0!=this._height)return this._height;for(var a=0,b=0;b<this._list.length;b++)a=Math.max(this._list[b].height);return a},set:function(a){this._height=a},enumerable:!0,configurable:!0}),b.prototype.applyChild=function(){for(var a=0;a<this._list.length;a++)this._list[a].applyAbsolutePoint();if(this._maskList)for(var a=0;a<this._maskList.length;a++)this._maskList[a].applyAbsolutePoint()},Object.defineProperty(b.prototype,"x",{get:function(){return this._x},set:function(a){this._x=a},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"y",{get:function(){return this._y},set:function(a){this._y=a},enumerable:!0,configurable:!0}),b.prototype.dispose=function(){},b.prototype.setSizeForPanelUiCopy=function(a,b,c){var d=c.getComponent(b);a.x=d.x,a.y=d.y,a.width=d.width,a.height=d.height},b}();a.UIConatiner=b;var c=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.update=function(a){},b.prototype.clearOneTemp=function(){},b}(b);a.Dis2DUIContianerBase=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b.visible=!0,b}return __extends(b,a),b}(a.UIConatiner);a.UIVirtualContainer=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.init=function(a,b,c){return void 0===c&&(c=null),this._itemLoad=a,this._bFun=b,this.loadFun=c,this.loadBaseConfigCom(),a.length},b.loadBaseConfigCom=function(){for(var a=0;a<this._itemLoad.length;a++)this.loadUIdata(this._itemLoad[a].xmlurl,this._itemLoad[a].picurl,this._itemLoad[a].name,Boolean(this._itemLoad[a].isTexture))},b.loadOkNum=function(a){this.loadFun&&this.loadFun(a)},b.loadUIdata=function(b,c,d,e){var f=this;if(void 0===d&&(d="default"),void 0===e&&(e=!1),!e){var g=new Image;this._imgDic[d]=g,g.onload=function(a){f.loadOkd()}}a.LoadManager.getInstance().load(a.Scene_data.fileRoot+b,a.LoadManager.XML_TYPE,function(b){var h=Array(JSON.parse(b))[0];f._dic[d]=h,e?a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+c,function(a){f._imgDic[d]=a,f.loadOkd()},1,null,0):g.src=a.Scene_data.fileRoot+c})},b.loadOkd=function(){this._skipnum++,this.loadOkNum(this._skipnum),this._skipnum>=this._itemLoad.length&&this._bFun()},b._skipnum=0,b._dic=new a.Dictionary([]),b._imgDic=new a.Dictionary([]),b}();a.MainUiLoad=b;var c=function(){function b(){}return b.setDesignWH=function(a,b){this.designWidth=a,this.designHeight=b,this.resize()},b.resize=function(){this.Scale=Math.min(a.Scene_data.stageWidth/this.designWidth,a.Scene_data.stageHeight/this.designHeight)},b.init=function(a,b,c){return void 0===c&&(c=null),this._itemLoad=a,this._bFun=b,this.loadFun=c,this.loadBaseConfigCom(),a.length},Object.defineProperty(b,"mainUIAtlas",{get:function(){return null},enumerable:!0,configurable:!0}),b.loadBaseConfigCom=function(){for(var a=0;a<this._itemLoad.length;a++)this.loadUIdata(this._itemLoad[a].xmlurl,this._itemLoad[a].picurl,this._itemLoad[a].name,Boolean(this._itemLoad[a].isTexture))},b.loadOkNum=function(a){this.loadFun&&this.loadFun(a)},b.loadUIdata=function(b,c,d,e){var f=this;if(void 0===d&&(d="default"),void 0===e&&(e=!1),!e){var g=new Image;this._imgDic[d]=g,g.onload=function(a){f.loadOkd()}}a.LoadManager.getInstance().load(a.Scene_data.fileRoot+b,a.LoadManager.XML_TYPE,function(b){var h=Array(JSON.parse(b))[0];f._dic[d]=h,e?a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+c,function(a){f._imgDic[d]=a,f.loadOkd()},1,null,0):g.src=a.Scene_data.fileRoot+c})},b.loadOkd=function(){this._skipnum++,this.loadOkNum(this._skipnum),this._skipnum>=this._itemLoad.length&&(b.textImg=this._imgDic[b.textlist],this._bFun())},b.getImgByKey=function(a){return this._imgDic.containsKey(a)?this._imgDic[a]:null},b.getUiByName=function(a,b){if(this._dic.containsKey(a))for(var c=this._dic[a].uiArr,d=0;d<c.length;d++)if(c[d].name==b)return c[d];return null},b.getUiArrByKey=function(a){return this._dic.containsKey(a)?this._dic[a].uiArr:null},b.designWidth=960,b.designHeight=540,b.font="Helvetica",b._skipnum=0,b.textlist="textlist",b.publicUi="publicUi",b.faceItem=["/大笑","/脸2","/脸3","/脸4","/脸5","/脸6","/脸7","/脸8","/脸9","/脸a","/脸b","/脸c","/脸d","/脸e","/脸f","/脸g","/脸h","/脸i"],b._dic=new a.Dictionary([]),b._imgDic=new a.Dictionary([]),b}();a.UIData=c;var d=function(){function b(){}return b.drawUseImg=function(b,c,d){var e=b.uiRender.uiAtlas.getRec(b.skinName),f=a.UIManager.getInstance().getContext2D(e.pixelWitdh,e.pixelHeight,!1),g=c.getRec(d);f.drawImage(c.useImg,g.pixelX,g.pixelY,g.pixelWitdh,g.pixelHeight,0,0,e.pixelWitdh,e.pixelHeight),b.uiRender.uiAtlas.updateCtx(f,e.pixelX,e.pixelY)},b.clearUI=function(b){
var c=b.uiRender.uiAtlas.getRec(b.skinName),d=a.UIManager.getInstance().getContext2D(c.pixelWitdh,c.pixelHeight,!1);b.uiRender.uiAtlas.updateCtx(d,c.pixelX,c.pixelY)},b.drawTxtLab=function(d,e,f,g,h,i){void 0===h&&(h=0),void 0===i&&(i=3);var j=d.uiRender.uiAtlas.getRec(d.skinName),k=a.UIManager.getInstance().getContext2D(j.pixelWitdh,j.pixelHeight,!1);b.cxtDrawImg(k,a.PuiData.TXTBG,new a.Rectangle(0,0,j.pixelWitdh,j.pixelHeight),c.publicUi),a.LabelTextFont.writeSingleLabelToCtx(k,e,f,h,i,g),d.uiRender.uiAtlas.updateCtx(k,j.pixelX,j.pixelY)},b.drawAttVal=function(c,d,e,f,g){void 0===f&&(f=a.TextAlign.LEFT),void 0===g&&(g=!1);var h="";return"undefined"==typeof d?void b.clearUI(c):(h=a.ColorType.Orange7a2f21+getKeyProById(d)+":  "+a.ColorType.Orange9a683f+Snum(Math.floor(e/100)),g&&(h=a.ColorType.Orange7a2f21+getKeyProById(d)+":  "+a.ColorType.Orange9a683f+"+"+Snum(Math.floor(e/100))),void a.LabelTextFont.writeSingleLabel(c.uiRender.uiAtlas,c.skinName,h,14,f))},b.drawAttValAdd=function(c,d,e){var f="";return"undefined"==typeof d?void b.clearUI(c):(f=a.ColorType.Orange7a2f21+getKeyProById(d)+":    "+a.ColorType.Green2ca937+"+"+Snum(Math.floor(e/100)),void a.LabelTextFont.writeSingleLabel(c.uiRender.uiAtlas,c.skinName,f,14,a.TextAlign.LEFT))},b.drawAddValTop=function(d,e){var f="";f=e>0?"+"+Snum(Math.floor(e/100)):"+0";var g=d.uiRender.uiAtlas.getRec(d.skinName),h=a.UIManager.getInstance().getContext2D(g.pixelWitdh,g.pixelHeight,!1);""!=f&&b.cxtDrawImg(h,a.PuiData.ARROW_TOP,new a.Rectangle(0,3,12,16),c.publicUi),a.LabelTextFont.writeSingleLabelToCtx(h,f,14,15,0,a.TextAlign.LEFT,a.ColorType.Green2ca937),d.uiRender.uiAtlas.updateCtx(h,g.pixelX,g.pixelY)},b.drawAddValRight=function(d,e,f,g){if(void 0===f&&(f=!1),void 0===g&&(g=a.TextAlign.RIGHT),e>=0){var h=d.uiRender.uiAtlas.getRec(d.skinName),i=a.UIManager.getInstance().getContext2D(h.pixelWitdh,h.pixelHeight,!1);b.cxtDrawImg(i,a.PuiData.ARROW_RIGHT,new a.Rectangle(0,3,16,12),c.publicUi);var j=Snum(Math.floor(e/100));f&&(j="+"+j);var k=0;g==a.TextAlign.LEFT&&(k=22),a.LabelTextFont.writeSingleLabelToCtx(i,j,14,k,0,g,a.ColorType.Green2ca937),d.uiRender.uiAtlas.updateCtx(i,h.pixelX,h.pixelY)}else b.clearUI(d)},b.drawResHasNumAndAllNum=function(a,b,c){void 0===c&&(c="");return!1},b.drawCost=function(d,f,g,h){b.cxtDrawImg(d,e.getInstance().costtype(h),new a.Rectangle(f,g,35,35),c.publicUi)},b.drawCostUI=function(d,f,g,h){var i=d.uiRender.uiAtlas.getRec(d.skinName),j=a.UIManager.getInstance().getContext2D(i.pixelWitdh,i.pixelHeight,!1);b.cxtDrawImg(j,e.getInstance().costtype(h),new a.Rectangle(f,g,35,35),c.publicUi),d.uiRender.uiAtlas.updateCtx(j,i.pixelX,i.pixelY)},b.cxtDrawImg=function(a,b,d,e){var f=c.getUiByName(e,b);f&&((0==d.width||0==d.height)&&(d.width=f.ow,d.height=f.oh),0==f.type?a.drawImage(c.getImgByKey(e),f.ox,f.oy,f.ow,f.oh,d.x,d.y,d.width,d.height):1==f.type?(a.drawImage(c.getImgByKey(e),f.ox,f.oy,f.uow,f.uoh,d.x,d.y,f.uow,f.uoh),a.drawImage(c.getImgByKey(e),f.ox+f.uow,f.oy,f.ow-2*f.uow,f.uoh,d.x+f.uow,d.y,d.width-2*f.uow,f.uoh),a.drawImage(c.getImgByKey(e),f.ox+f.ow-f.uow,f.oy,f.uow,f.uoh,d.x+d.width-f.uow,d.y,f.uow,f.uoh),a.drawImage(c.getImgByKey(e),f.ox,f.oy+f.uoh,f.uow,f.oh-2*f.uoh,d.x,d.y+f.uoh,f.uow,d.height-2*f.uoh),a.drawImage(c.getImgByKey(e),f.ox+f.uow,f.oy+f.uoh,f.ow-2*f.uow,f.oh-2*f.uoh,d.x+f.uow,d.y+f.uoh,d.width-2*f.uow,d.height-2*f.uoh),a.drawImage(c.getImgByKey(e),f.ox+f.ow-f.uow,f.oy+f.uoh,f.uow,f.uoh,d.x+d.width-f.uow,d.y+f.uoh,f.uow,d.height-2*f.uoh),a.drawImage(c.getImgByKey(e),f.ox,f.oy+f.oh-f.uoh,f.uow,f.uoh,d.x,d.y+d.height-f.uoh,f.uow,f.uoh),a.drawImage(c.getImgByKey(e),f.ox+f.uow,f.oy+f.oh-f.uoh,f.ow-2*f.uow,f.uoh,d.x+f.uow,d.y+d.height-f.uoh,d.width-2*f.uow,f.uoh),a.drawImage(c.getImgByKey(e),f.ox+f.ow-f.uow,f.oy+f.oh-f.uoh,f.uow,f.uoh,d.x+d.width-f.uow,d.y+d.height-f.uoh,f.uow,f.uoh)):alert("UiDraw没有绘制成功  "+f.type))},b.uiAtlasDrawImg=function(b,d,e,f){var g=b.getRec(d);b.ctx=a.UIManager.getInstance().getContext2D(g.pixelWitdh,g.pixelHeight,!1);var h=c.getUiByName(e,f);h?(0==h.type?b.ctx.drawImage(c.getImgByKey(e),h.ox,h.oy,h.ow,h.oh,0,0,g.pixelWitdh,g.pixelHeight):1==h.type&&(b.ctx.drawImage(c.getImgByKey(e),h.ox,h.oy,h.uow,h.uoh,0,0,h.uow,h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox+h.uow,h.oy,h.ow-2*h.uow,h.uoh,h.uow,0,g.pixelWitdh-2*h.uow,h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox+h.ow-h.uow,h.oy,h.uow,h.uoh,g.pixelWitdh-h.uow,0,h.uow,h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox,h.oy+h.uoh,h.uow,h.oh-2*h.uoh,0,h.uoh,h.uow,g.pixelHeight-2*h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox+h.uow,h.oy+h.uoh,h.ow-2*h.uow,h.oh-2*h.uoh,h.uow,h.uoh,g.pixelWitdh-2*h.uow,g.pixelHeight-2*h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox+h.ow-h.uow,h.oy+h.uoh,h.uow,h.uoh,g.pixelWitdh-h.uow,h.uoh,h.uow,g.pixelHeight-2*h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox,h.oy+h.oh-h.uoh,h.uow,h.uoh,0,g.pixelHeight-h.uoh,h.uow,h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox+h.uow,h.oy+h.oh-h.uoh,h.ow-2*h.uow,h.uoh,h.uow,g.pixelHeight-h.uoh,g.pixelWitdh-2*h.uow,h.uoh),b.ctx.drawImage(c.getImgByKey(e),h.ox+h.ow-h.uow,h.oy+h.oh-h.uoh,h.uow,h.uoh,g.pixelWitdh-h.uow,g.pixelHeight-h.uoh,h.uow,h.uoh)),a.TextureManager.getInstance().updateTexture(b.texture,g.pixelX,g.pixelY,b.ctx)):alert("uiAtlasDrawImg错误")},b.SharedDrawImg=function(b,c,d,e,f,g,h){void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=!0);var i=b.getRec(d);b.ctx=a.UIManager.getInstance().getContext2D(i.pixelWitdh,i.pixelHeight,!1);var j=c.getRec(e),k=h?0:f,l=h?0:g,m=h?i.pixelWitdh:j.pixelWitdh,n=h?i.pixelHeight:j.pixelHeight;b.ctx.drawImage(c.useImg,j.pixelX,j.pixelY,j.pixelWitdh,j.pixelHeight,k,l,m,n),a.TextureManager.getInstance().updateTexture(b.texture,i.pixelX,i.pixelY,b.ctx)},b.drawToUiAtlasToCtx=function(b,c,d,e){var f=c.getRec(d);e||(e=new a.Rectangle(0,0,0,0)),e.width>1&&e.height>1?b.drawImage(c.useImg,f.pixelX,f.pixelY,f.pixelWitdh,f.pixelHeight,e.x,e.y,e.width,e.height):b.drawImage(c.useImg,f.pixelX,f.pixelY,f.pixelWitdh,f.pixelHeight,e.x,e.y,f.pixelWitdh,f.pixelHeight)},b.RepeatLoadImg=function(b,c,d){void 0===d&&(d=null);var e=new Image;e.onload=function(){a.LoadManager.getInstance().load(c,a.LoadManager.IMG_TYPE,function(a){d&&d(e,a)})},e.src=b},b}();a.UiDraw=d;var e=function(){function b(){}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.drawCostUI=function(b,e,f,g,h,i){void 0===g&&(g="#000000"),void 0===h&&(h=0),void 0===i&&(i=0),-1!=g.indexOf("[")&&(g="#"+g.substr(1,6));var j=b.getRec(e),k=a.UIManager.getInstance().getContext2D(j.pixelWitdh,j.pixelHeight,!1);0==h&&(h=j.pixelWitdh,i=j.pixelHeight),d.cxtDrawImg(k,a.PuiData.TXTBG,new a.Rectangle(j.pixelWitdh-h,j.pixelHeight-i-3,h,i+3),c.publicUi);var l,m;Number(f[0])>-1?(d.cxtDrawImg(k,this.costtype(Number(f[0])),new a.Rectangle(0,0,35,35),c.publicUi),l=(h-35)/2+35,m=i>=35?2:35-i):(l=h/2+(j.pixelWitdh-h),m=j.pixelHeight-i),a.LabelTextFont.writeSingleLabelToCtxSetAnchor(k,String(f[1]),16,l,m,a.TextAlign.CENTER,g),a.ArtFont.getInstance(),b.updateCtx(k,j.pixelX,j.pixelY)},b.prototype.costtype=function(b){switch(b){case 1:return a.PuiData.A_YUANBAO;case 2:return a.PuiData.A_BANGYUAN;case 3:return a.PuiData.A_YINBI;case 101:return a.PuiData.A_ZHENQI;case 102:return a.PuiData.A_SHOULING;case 103:return a.PuiData.A_JINGHUA;case 6:return a.PuiData.A_BANGGONG;case 7:return a.PuiData.A_HONOR;case 8:return a.PuiData.A_DOUHUN;case 9:return a.PuiData.A_DOUHUN;case 10:return a.PuiData.A_CARD_G;case 11:return a.PuiData.A_CARD_C;case 12:return a.PuiData.A_CARD_B;case 104:return a.PuiData.A_EXP}},b}();a.UIuitl=e}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._rendering=!1,this.scale=1,this.sortnum=0,this.blenderMode=0,this.renderData=new Float32Array(0),this.renderData2=new Float32Array(0),this.num=0,this.visible=!0,this.initData()}return Object.defineProperty(b.prototype,"rendering",{get:function(){return this._rendering},set:function(a){if(this._rendering=a,this._uiList)for(var b=0;b<this._uiList.length;b++)this._uiList[b].rendering=a},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"texture",{get:function(){return this.textureRes?this.textureRes.texture:null},enumerable:!0,configurable:!0}),b.prototype.initData=function(){this._uiList=new Array,this.objData=new a.ObjData,this.shader=a.ProgrmaManager.getInstance().getProgram(a.UIShader.UI_SHADER),this.program=this.shader.program,this.uiProLocation=a.Scene_data.context3D.getLocation(this.program,"ui"),this.ui2ProLocation=a.Scene_data.context3D.getLocation(this.program,"ui2")},b.prototype.resize=function(){},b.prototype.setImgUrl=function(b){var c=this;a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+b,function(a){c.textureRes=a})},b.prototype.setInfo=function(b,c,d){this.uiAtlas=new a.UIAtlas,this.uiAtlas.setInfo(b,c,function(){d()})},b.prototype.setAtlas=function(a){this.uiAtlas=a},b.prototype.creatComponent=function(b,c,d,e){var f=new a.UICompenent;return f.tr.sets(b,c,d,e),f.uiRender=this,f},b.prototype.getComponent=function(a){var b=this.uiAtlas.getLayoutData(a);if(b){var c=b.type;if(0==c){var d=this.creatBaseComponent(b.dataItem[0]);return d.width=b.rect.width,d.height=b.rect.height,d.x=b.rect.x,d.y=b.rect.y,d.baseRec=b.rect,d.name=a,d}if(1==c){var e=this.creatGrid9Component(b.dataItem[0],b.rect.width,b.rect.height);return e.x=b.rect.x,e.y=b.rect.y,e.baseRec=b.rect,e.name=a,e}if(2==c){if(b.selected){var f=this.createSelectButton(b.dataItem[0],b.dataItem[1]);return f.width=b.rect.width,f.height=b.rect.height,f.x=b.rect.x,f.y=b.rect.y,f.baseRec=b.rect,f.name=a,f}var g=this.creatButton(b.dataItem[0],b.dataItem[1]);return g.width=b.rect.width,g.height=b.rect.height,g.x=b.rect.x,g.y=b.rect.y,g.baseRec=b.rect,g.name=a,g}if(4==c){var h=this.createFrame(b.dataItem[0]);return h.width=b.rect.width,h.height=b.rect.height,h.x=b.rect.x,h.y=b.rect.y,h.baseRec=b.rect,h.name=a,h}}return null},b.prototype.createFrame=function(b){var c=new a.FrameCompenent;c.skinName=b;var d=this.uiAtlas.getRec(b);return c.setFrameData(d),c.uiRender=this,c},b.prototype.creatBaseComponent=function(b){var c=new a.UICompenent;c.skinName=b;var d=this.uiAtlas.getRec(b);return c.tr.setRec(d),c.width=d.pixelWitdh,c.height=d.pixelHeight,c.uiRender=this,c},b.prototype.creatGrid9Component=function(b,c,d){var e=new a.Grid9Compenent;e.skinName=b;var f=this.uiAtlas.getGridRec(b);return e.tr.setRec(f),e.ogw=f.ogw,e.ogh=f.ogh,e.gw=e.ogw/f.pixelWitdh,e.gh=e.ogh/f.pixelHeight,e.width=c,e.height=d,e.uiRender=this,e},b.prototype.creatButton=function(b,c){if(!this.uiAtlas.hasData)return null;var d=new a.Button,e=this.uiAtlas.getRec(b);return d.tr.setRec(e),d.trDown.setRec(this.uiAtlas.getRec(c)),d.width=e.pixelWitdh,d.height=e.pixelHeight,d.uiRender=this,d},b.prototype.createSelectButton=function(b,c){if(!this.uiAtlas.hasData)return null;var d=new a.SelectButton,e=this.uiAtlas.getRec(b);return d.tr.setRec(e),d.trDown.setRec(this.uiAtlas.getRec(c)),d.width=e.pixelWitdh,d.height=e.pixelHeight,d.uiRender=this,d},b.prototype.addRenderUI=function(a){return this._uiList.length>=50?void alert("UIRenderComponent超限制51"):(this._uiList.push(a),a.rendering=this.rendering,void this.applyObjData())},b.prototype.removeRenderUI=function(a){var b=this._uiList.indexOf(a);-1!=b&&this._uiList.splice(b,1),a.rendering=!1,this.applyObjData()},b.prototype.applyObjData=function(){this.objData.vertices.length=0,this.objData.uvs.length=0,this.objData.indexs.length=0;for(var b=0,c=0;c<this._uiList.length;c++){var d=this._uiList[c];d.isVirtual||(b=d.pushVaData(this.objData,c,b))}this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer?(a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.vertexBuffer,this.objData.vertices),a.Scene_data.context3D.uploadBuff3DByBuffer(this.objData.uvBuffer,this.objData.uvs),a.Scene_data.context3D.uploadIndexBuff3DByBuffer(this.objData.indexBuffer,this.objData.indexs)):(this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs)),this.mask&&(this.mask.scale=this.scale,this.mask.applyAbsolutePoint()),this.makeRenderDataVc(-1)},b.prototype.makeRenderDataVc=function(a){if((!this.renderData||this.renderData&&this.renderData.length!=4*this._uiList.length)&&(this.renderData=new Float32Array(4*this._uiList.length),this.renderData2=new Float32Array(4*this._uiList.length)),-1==a)for(var b=0;this._uiList&&b<this._uiList.length;b++)this._uiList[b].vcId=b,this.renderData[4*b+0]=this._uiList[b].renderData[0],this.renderData[4*b+1]=this._uiList[b].renderData[1],this.renderData[4*b+2]=this._uiList[b].renderData[2],this.renderData[4*b+3]=this._uiList[b].renderData[3],this.renderData2[4*b+0]=this._uiList[b].renderData2[0],this.renderData2[4*b+1]=this._uiList[b].renderData2[1],this.renderData2[4*b+2]=this._uiList[b].renderData2[2],this.renderData2[4*b+3]=this._uiList[b].renderData2[3];else a<this._uiList.length&&(this.renderData[4*a+0]=this._uiList[a].renderData[0],this.renderData[4*a+1]=this._uiList[a].renderData[1],this.renderData[4*a+2]=this._uiList[a].renderData[2],this.renderData[4*a+3]=this._uiList[a].renderData[3],this.renderData2[4*a+0]=this._uiList[a].renderData2[0],this.renderData2[4*a+1]=this._uiList[a].renderData2[1],this.renderData2[4*a+2]=this._uiList[a].renderData2[2],this.renderData2[4*a+3]=this._uiList[a].renderData2[3])},b.prototype.update=function(){if(this.visible&&0!=this._uiList.length||this.modelRenderList&&this.modelRenderList.length){if(this.mask){var b=a.Scene_data.context3D.renderContext;b.enable(b.STENCIL_TEST),b.stencilMask(255),b.stencilFunc(b.NEVER,this.mask.level,255),b.stencilOp(b.REPLACE,b.REPLACE,b.REPLACE),this.mask.update(),b.stencilFunc(b.LESS,this.mask.level-1,255),b.stencilOp(b.KEEP,b.KEEP,b.KEEP)}if(a.Scene_data.context3D.setBlendParticleFactors(this.blenderMode),a.Scene_data.context3D.setProgram(this.program),this.setVc(),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),this.setTextureToGpu(),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum),this.mask&&a.Scene_data.context3D.renderContext.disable(a.Scene_data.context3D.renderContext.STENCIL_TEST),this.modelRenderList)for(var c=0;c<this.modelRenderList.length;c++)this.modelRenderList[c].update()}},b.prototype.setTextureToGpu=function(){this.uiAtlas?a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.uiAtlas.texture,0):a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.texture,0)},b.prototype.setVc=function(){for(var b=0;b<this._uiList.length;b++)this._uiList[b].update(),this._uiList[b].vcId!=b;a.Scene_data.context3D.setVc4fvLocation(this.uiProLocation,this.renderData),a.Scene_data.context3D.setVc4fvLocation(this.ui2ProLocation,this.renderData2)},b.prototype.addModel=function(a){this.modelRenderList||(this.modelRenderList=new Array);var b=this.modelRenderList.indexOf(a);-1==b&&this.modelRenderList.push(a)},b.prototype.removeModel=function(a){var b=this.modelRenderList.indexOf(a);-1!=b&&this.modelRenderList.splice(b,1)},b.prototype.insetUi=function(a){for(var b=0;b<this._uiList.length;b++)if(this._uiList[b].testPoint(a.x,a.y))return this._uiList[b];return null},b.prototype.interactiveEvent=function(b){if(this.mask&&!this.mask.testPoint(b.x,b.y))return!1;for(var c=!1,d=0;d<this._uiList.length;d++)if(this._uiList[d].interactiveEvent(b)&&a.UIManager.cando)return c=!0,a.UIManager.cando=!1,!0;return c},b.prototype.dispose=function(){this.objData.destory(),this.objData=null,this.uiAtlas&&(this.uiAtlas.dispose(),this.uiAtlas=null),this.mask&&(this.mask.dispose(),this.mask=null),this.renderData=null,this.renderData2=null},b}();a.UIRenderComponent=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.createList=function(){var b=new a.List;return b.uiRender=this,b},c.prototype.createGridList=function(){var b=new a.GridList;return b.uiRender=this,b},c}(a.UIRenderComponent);a.UIListRenderComponent=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._scaleData=[1,1],a._isFBO=!1,a.alpha=1,a}return __extends(c,b),c.prototype.initData=function(){this.objData=new a.ObjData,this.shader=a.ProgrmaManager.getInstance().getProgram(a.UIImageShader.UI_IMG_SHADER),this.program=this.shader.program,this.objData.vertices.push(-1,1,0,1,1,0,1,-1,0,-1,-1,0),this.objData.uvs.push(0,0,1,0,1,1,0,1),this.objData.indexs.push(0,1,2,0,2,3),this.objData.treNum=6,this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs)},c.prototype.resize=function(){this.appleyPos()},c.prototype.setImgInfo=function(a,b,c){this.setImgUrl(a),this._width=b,this._height=c},c.prototype.appleyPos=function(){var b=this._width/a.Scene_data.stageWidth,c=this._height/a.Scene_data.stageHeight;c>b?(this._scaleData[0]=1,this._scaleData[1]=this._height/a.Scene_data.stageHeight/b):(this._scaleData[0]=this._width/a.Scene_data.stageWidth/c,this._scaleData[1]=1)},c.prototype.setFbo=function(){this._isFBO=!0},c.prototype.update=function(){var b=!1;this._isFBO?(a.Scene_data.fbo&&(b=!0),a.Scene_data.context3D.clearContext(),a.Scene_data.context3D.setDepthTest(!1)):this.texture&&(b=!0),this.objData&&b&&(a.Scene_data.context3D.setBlendParticleFactors(0),a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,2,this.objData.uvBuffer),a.Scene_data.context3D.setVc2fv(this.shader,"scale",this._scaleData),this._isFBO?(a.Scene_data.context3D.setVc2fv(this.shader,"scale",[1,-1]),a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",a.Scene_data.fbo.texture,0)):a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.texture,0),a.Scene_data.context3D.setVcFloat(this.shader,"alpha",[this.alpha]),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum))},c.prototype.interactiveEvent=function(a){return!0},c}(a.UIRenderComponent);a.UIBackImg=b;var c=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.makeRenderDataVc=function(a){b.prototype.makeRenderDataVc.call(this,a);for(var c=0;c<this.renderData2.length/4;c++)this.renderData2[4*c+0]=1,this.renderData2[4*c+1]=1,this.renderData2[4*c+2]=0,this.renderData2[4*c+3]=0},c.prototype.update=function(){this.texture&&b.prototype.update.call(this)},c.prototype.setTextureToGpu=function(){a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.texture,0)},c.prototype.dispose=function(){b.prototype.dispose.call(this),this.textureRes&&this.textureRes.clearUseNum()},c}(a.UIRenderComponent);a.UIRenderOnlyPicComponent=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._x=0,this._y=0,this._width=0,this._height=0,this.absoluteX=0,this.absoluteY=0,this.absoluteWidth=0,this.absoluteHeight=0,this.scale=1,this.level=2,this._hasDisposed=!1,this.initData(),this.renderData=[0,0,0,0]}return b.prototype.initData=function(){this.objData=new a.ObjData,this.shader=a.ProgrmaManager.getInstance().getProgram(a.UIMaskShader.UI_MASK_SHADER),this.program=this.shader.program,this.applyObjData()},b.prototype.applyAbsolutePoint=function(){this.parent&&(this.absoluteX=this._x*this.scale*a.UIData.Scale+this.parent.x,this.absoluteY=this._y*this.scale*a.UIData.Scale+this.parent.y,this.absoluteWidth=this._width*a.UIData.Scale*this.scale,this.absoluteHeight=this._height*a.UIData.Scale*this.scale,this.applyRenderSize())},b.prototype.testPoint=function(a,b){return a>this.absoluteX&&a<this.absoluteX+this.absoluteWidth&&b>this.absoluteY&&b<this.absoluteY+this.absoluteHeight?!0:!1},b.prototype.applyRenderSize=function(){this.parent&&(this.renderData[0]=this.absoluteX/a.Scene_data.stageWidth,this.renderData[1]=this.absoluteY/a.Scene_data.stageHeight,this.renderData[2]=this.absoluteWidth/a.Scene_data.stageWidth,this.renderData[3]=this.absoluteHeight/a.Scene_data.stageHeight)},b.prototype.applyObjData=function(){this.objData.vertices.length=0,this.objData.uvs.length=0,this.objData.indexs.length=0,this.objData.vertices.push(0,0,0,1,0,0,1,-1,0,0,-1,0),this.objData.indexs.push(0,1,2,0,2,3),this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs)},b.prototype.update=function(){a.Scene_data.context3D.setBlendParticleFactors(0),a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVc4fv(this.shader,"ui",this.renderData),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)},Object.defineProperty(b.prototype,"x",{get:function(){return this._x},set:function(a){this._x=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"y",{get:function(){return this._y},set:function(a){this._y=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"width",{get:function(){return this._width},set:function(a){this._width=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"height",{get:function(){return this._height},set:function(a){this._height=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),b.prototype.dispose=function(){this._hasDisposed||(this.objData.destory(),this.objData=null,this.program=null,this.shader=null,this.renderData=null,this.parent=null,this._hasDisposed=!0)},b}();a.UIMask=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.trDown=new a.Rectangle,c._state=0,c._currentState=0,c}return __extends(c,b),c.prototype.update=function(){this._currentState!=this._state&&(this.applyRenderSize(),this._currentState=this._state)},c.prototype.applyRenderSize=function(){b.prototype.applyRenderSize.call(this),0==this._state?(this.renderData2[0]=this.tr.width,this.renderData2[1]=this.tr.height,this.renderData2[2]=this.tr.x,this.renderData2[3]=this.tr.y):1==this._state&&(this.renderData2[0]=this.trDown.width,this.renderData2[1]=this.trDown.height,this.renderData2[2]=this.trDown.x,this.renderData2[3]=this.trDown.y),this.uiRender.makeRenderDataVc(this.vcId)},c}(a.UICompenent);a.BaseButton=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.interactiveEvent=function(b){return a.prototype.interactiveEvent.call(this,b)},b}(a.BaseButton);a.Button=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._selected=!1,a}return __extends(c,b),Object.defineProperty(c.prototype,"selected",{get:function(){return this._selected},set:function(a){this._selected=a,this._selected?this._state=1:this._state=0},enumerable:!0,configurable:!0}),c.prototype.interactiveEvent=function(c){return this.enable?(c.type==a.InteractiveEvent.Down&&this.testPoint(c.x,c.y)&&(this._selected=!this._selected,this._selected?this._state=1:this._state=0),b.prototype.interactiveEvent.call(this,c)):!1},c}(a.BaseButton);a.SelectButton=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.pushVaData=function(a,b,c){for(var d=[0,0,0,this.ogw,0,0,this.width-this.ogw,0,0,this.width,0,0,0,-this.ogh,0,this.ogw,-this.ogh,0,this.width-this.ogw,-this.ogh,0,this.width,-this.ogh,0,0,this.ogh-this.height,0,this.ogw,this.ogh-this.height,0,this.width-this.ogw,this.ogh-this.height,0,this.width,this.ogh-this.height,0,0,-this.height,0,this.ogw,-this.height,0,this.width-this.ogw,-this.height,0,this.width,-this.height,0],e=0;e<d.length;e+=3)a.vertices.push(d[e]/this.width,d[e+1]/this.height,d[e+2]);a.uvs.push(0,0,b,this.gw,0,b,1-this.gw,0,b,1,0,b,0,this.gh,b,this.gw,this.gh,b,1-this.gw,this.gh,b,1,this.gh,b,0,1-this.gh,b,this.gw,1-this.gh,b,1-this.gw,1-this.gh,b,1,1-this.gh,b,0,1,b,this.gw,1,b,1-this.gw,1,b,1,1,b);for(var f=[0,1,5,0,5,4,1,2,6,1,6,5,2,3,7,2,7,6,4,5,9,4,9,8,5,6,10,5,10,9,6,7,11,6,11,10,8,9,13,8,13,12,9,10,14,9,14,13,10,11,15,10,15,14],e=0;e<f.length;e++)a.indexs.push(c+f[e]);return c+16},b}(a.UICompenent);a.Grid9Compenent=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.isTrue=!1,a.current=0,a.totalcurrent=0,a.speed=6,a.endFlag=!1,a.stopStatic=0,a.speedNum=0,a}return __extends(c,b),c.prototype.setFrameData=function(a){this._frameData=a,this.totalcurrent=this._frameData.cellX*this._frameData.cellY},c.prototype.applyRenderSize=function(){if(this.parent){this.renderX=this.absoluteX/a.Scene_data.stageWidth,this.renderY=this.absoluteY/a.Scene_data.stageHeight,this.renderWidth=this.absoluteWidth/a.Scene_data.stageWidth,this.renderHeight=this.absoluteHeight/a.Scene_data.stageHeight,this.renderData[0]=this.renderX,this.renderData[1]=this.renderY,this.renderData[2]=this.renderWidth*this._uvScale,this.renderData[3]=this.renderHeight;var b=this._frameData.cellX,c=this._frameData.cellY,d=this._frameData.width/b,e=this._frameData.height/c,f=new a.Rectangle(0,0,d,e),g=this.current%(b*c);f.x=g%b*d,f.y=float2int(g/b)*e,this.renderData2[0]=f.width*this._uvScale,this.renderData2[1]=f.height,this.renderData2[2]=f.x+this._frameData.x,this.renderData2[3]=f.y+this._frameData.y,this.uiRender.makeRenderDataVc(this.vcId)}},c.prototype.getSkinCtxRect=function(){var b=this._frameData,c=new a.Rectangle;return c.width=b.pixelWitdh/b.cellX,c.height=b.pixelHeight/b.cellY,c.x=this.current%b.cellX*c.width,c.y=Math.floor(this.current/b.cellX)*c.height,c},c.prototype.drawToCtx=function(a,b){var c=this._frameData,d=this.getSkinCtxRect();a.updateCtx(b,c.pixelX+d.x,c.pixelY+d.y)},c.prototype.update=function(){if(this._frameData&&2!=this.stopStatic){this.applyRenderSize(),this.speedNum++,this.speedNum>this.speed&&(this.current++,this.speedNum=0);var a=this._frameData.cellX,b=this._frameData.cellY;this.current>a*b-1&&(1==this.stopStatic?(this.stopStatic=2,this.endFlag=!0):this.current=0)}},c.prototype.goToAndPlay=function(a){this.stopStatic=1,this.current=a},c.prototype.goToAndStop=function(a){this.stopEnd(),this.current=a,this.applyRenderSize()},c.prototype.Invisible=function(){0!=this.renderData[2]&&0!=this.renderData[3]&&(this.stopEnd(),this.renderData[0]=0,this.renderData[1]=0,this.renderData[2]=0,this.renderData[3]=0,this.uiRender.makeRenderDataVc(this.vcId))},c.prototype.play=function(){this.stopStatic=0},c.prototype.stopEnd=function(){this.stopStatic=2;var a=this._frameData.cellX,b=this._frameData.cellY;this.current=a*b-1,this.applyRenderSize()},c}(a.UICompenent);a.FrameCompenent=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){var c=b.call(this)||this;return c._contentX=0,c._contentY=0,c._needScoller=!1,c.lastcontentY=0,c.addEventListener(a.InteractiveEvent.Down,c.onDown,c),c.addEventListener(a.InteractiveEvent.Up,c.onListUp,c),c}return __extends(d,b),d.prototype.applyAbsolutePoint=function(){this.parent&&(this.absoluteX=(this._x*this.scale+this._contentX)*a.UIData.Scale+this.parent.x,this.absoluteY=(this._y*this.scale+this._contentY)*a.UIData.Scale+this.parent.y,this.absoluteWidth=this.width*a.UIData.Scale,this.absoluteHeight=this.height*a.UIData.Scale,this.applyRenderSize())},Object.defineProperty(d.prototype,"contentX",{get:function(){return this._contentX},set:function(a){this._contentX=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),Object.defineProperty(d.prototype,"contentY",{get:function(){return this._contentY},set:function(a){this._contentY=a,this.applyAbsolutePoint()},enumerable:!0,configurable:!0}),d.prototype.testPoint=function(b,c){return b>this.absoluteX&&b<this.absoluteX+this._showWidth*a.UIData.Scale&&c>this.absoluteY&&c<this.absoluteY+this._showHeight*a.UIData.Scale?!0:!1},d.prototype.setData=function(a,b,d,e,f,g,h,i){void 0===h&&(h=256),void 0===i&&(i=300),this.uiRender.uiAtlas&&this.uiRender.uiAtlas.dispose(),this.width=f,this.height=g,this._showWidth=h,this._showHeight=i,this._itemWidth=d,this._itemHeight=e,this.data=a;var j=new c;this.uiRender.setAtlas(j),j.setData(f,g,d,e,a.length),this._itemRenderAry=new Array;for(var k=0;k<a.length;k++){var l=new b;l.setData(a[k],j,j.configData[k]),this._itemRenderAry.push(l)}this._oHeight=e*a.length,this._oHeight>this._showHeight?this._needScoller=!0:this._needScoller=!1,this.uiRender.applyObjData()},d.prototype.refresh=function(){for(var a=0;this._itemRenderAry&&a<this._itemRenderAry.length;a++)this._itemRenderAry[a].draw()},d.prototype.pushVaData=function(a,b,c){if(!this._itemRenderAry)return 0;for(var d=0;d<this._itemRenderAry.length;d++){var e=this._itemRenderAry[d].uvData;a.vertices.push(0,-e.y,0,1,-e.y,0),a.uvs.push(0,e.y,b,1,e.y,b)}a.vertices.push(0,-1,0,1,-1,0),a.uvs.push(0,1,b,1,1,b);for(var d=0;d<this._itemRenderAry.length;d++)a.indexs.push(c+2*d,1+c+2*d,3+c+2*d,c+2*d,3+c+2*d,2+c+2*d);return c+2*(this._itemRenderAry.length+1);
},d.prototype.onDown=function(b){this._ypos=b.y,this.lastcontentY=this.contentY,this._needScoller&&(a.Scene_data.uiStage.addEventListener(a.InteractiveEvent.Move,this.onMove,this),a.Scene_data.uiStage.addEventListener(a.InteractiveEvent.Up,this.onUp,this))},d.prototype.onListUp=function(b){if(this.uiRender.mask)this.uiRender.mask.testPoint(b.x,b.y)&&this.testItemClick(b.x,b.y);else if(Math.abs(this.contentY-this.lastcontentY)<1){var c=(b.y-this.absoluteY+this.contentY)/a.UIData.Scale;c>=0&&c<this._showHeight&&this.testItemClick(b.x,b.y)}},d.prototype.testItemClick=function(b,c){var d=b-this.absoluteX,e=c-this.absoluteY,f=this._itemHeight*a.UIData.Scale,g=Math.floor(e/f);g>=this._itemRenderAry.length||0>g||this._itemRenderAry[g].click(d,e-f*g)},d.prototype.onMove=function(a){this.contentY-=this._ypos-a.y,this.contentY>0?this.contentY=0:this.contentY<this._showHeight*this.scale-this._oHeight*this.scale&&(this.contentY=this._showHeight*this.scale-this._oHeight*this.scale),this._ypos=a.y},d.prototype.onUp=function(b){a.Scene_data.uiStage.removeEventListener(a.InteractiveEvent.Move,this.onMove,this),a.Scene_data.uiStage.removeEventListener(a.InteractiveEvent.Up,this.onUp,this)},d}(a.UICompenent);a.List=b;var c=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.setData=function(b,c,d,e,f){this.ctx=a.UIManager.getInstance().getContext2D(b,c,!1),this.textureRes=a.TextureManager.getInstance().getCanvasTexture(this.ctx),this.configData=new Array;for(var g=0;f>g;g++){var h=new Object;h.ox=0,h.oy=g*e,h.ow=d,h.oh=e,h.x=0,h.y=g*e/c,h.width=d/b,h.height=e/c,h.name=g.toString(),this.configData.push(h)}},c}(a.UIAtlas);a.ListAtlas=c;var d=function(){function a(){}return a}();a.ListItemData=d;var e=function(){function b(){}return b.prototype.setData=function(a,b,c){this._listItemData=a,this._listItemData.itemRender=this,this.uvData=c,this.atlas=b,this.draw()},Object.defineProperty(b.prototype,"listItemData",{get:function(){return this._listItemData},enumerable:!0,configurable:!0}),b.prototype.setNewData=function(a){},Object.defineProperty(b.prototype,"selected",{get:function(){return this._selected},set:function(a){this._selected=a},enumerable:!0,configurable:!0}),b.prototype.draw=function(){},b.prototype.redraw=function(){},b.prototype.click=function(b,c){if(this._listItemData.clickFun){if(this._listItemData.clickRect&&!this._listItemData.clickRect.isHitByPoint(b/a.UIData.Scale,c/a.UIData.Scale))return;this._listItemData.clickFun(this._listItemData)}},b}();a.ListItemRender=e}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function f(){var a=null!==b&&b.apply(this,arguments)||this;return a.p_scrollY=0,a.p_scrollX=0,a._showItemNum=0,a._allItemNum=0,a._topSize=0,a._bottomSize=0,a._outSize=0,a._showDataIndex=0,a.scrollLock=!1,a._minScrollY=0,a._maskLevel=2,a._mouseY=0,a._dragFlag=!1,a._dragY=0,a._dragMaxY=100,a}return __extends(f,b),f.prototype.setData=function(b,f,g,h,i,j,k,l,m,n,o,p){if(void 0===p&&(p=0),this.width=g,this._height=h,this.p_itemHeight=j,this.p_itemWidth=i,this._showIndexList=new Array,this._dataAry=b,this._showItemNum=k,this._allItemNum=n*o,this._contentX=n,this._contentY=o,this._outSize=(o-this._showItemNum)*j,this._topSize=0,this._bottomSize=this._outSize,this._showDataIndex=0,this._sAtlas=new e,this._sAtlas.setData(l,m,n,o),this.bgMask=new a.UIMask,this.bgMask.x=0,this.bgMask.y=0,this.bgMask.width=g,this.bgMask.height=h,this.bgMask.level=this._maskLevel,this.addMask(this.bgMask),this._bgRender=new c,this._bgRender.uiAtlas=this._sAtlas,this._bgRender.slist=this,this.addRender(this._bgRender),this._baseRender=new d,this._baseRender.uiAtlas=this._sAtlas,this.addRender(this._baseRender),this._bgRender.mask=this.bgMask,this._baseRender.mask=this.bgMask,0!=p){this.customRenderAry=new Array;for(var q=0;p>q;q++){var r=new d;r.uiAtlas=this._sAtlas,this.addRender(r),r.mask=this.bgMask,this.customRenderAry.push(r)}}this._itemList=new Array;for(var q=0;q<this._allItemNum;q++){var s=new f;s.baseY=float2int(q/n)*j,s.baseX=q%n*i,s.uiAtlas=this._sAtlas,s.index=q,s.parentTarget=this,s.create(this,this._bgRender,this._baseRender,this.customRenderAry),s.render(b[q]),this._itemList.push(s),this._showIndexList.push(q)}this._minScrollY=this._height-float2int(this._dataAry.length/this._contentX)*this.p_itemHeight,this.scrollY(0),Math.ceil(b.length/this._contentX)<=this._showItemNum?this.scrollLock=!0:this.scrollLock=!1,this.initComplte()},f.prototype.initComplte=function(){},f.prototype.setShowLevel=function(a){this._maskLevel=a,this.bgMask&&(this.bgMask.level=this._maskLevel)},f.prototype.setSelect=function(a){for(var b=0;b<this._itemList.length;b++)this._itemList[b]==a?(this._currentSelIdx=this._dataAry.indexOf(this._itemList[b].itdata),this._itemList[b].selected=!0):this._itemList[b].selected&&(this._itemList[b].selected=!1)},f.prototype.setSelectIndex=function(a){this._currentSelIdx=a;for(var b=0;b<this._itemList.length;b++)this._itemList[b].itdata&&this._itemList[b].itdata.id==a?this._itemList[b].selected=!0:this._itemList[b].selected&&(this._itemList[b].selected=!1)},f.prototype.getCurrentSelectIndex=function(){return this._currentSelIdx||(this._currentSelIdx=0),this._currentSelIdx},f.prototype.changeMinScrollY=function(){this._minScrollY=this._height-Math.ceil(this._dataAry.length/this._contentX)*this.p_itemHeight},f.prototype.refreshData=function(a){this._dataAry=a,this._showIndexList=new Array;for(var b=0;b<this._itemList.length;b++)this._itemList[b].render(a[b]),this._itemList[b].baseY=float2int(b/this._contentX)*this.p_itemHeight,this._showIndexList.push(b);this._outSize=(this._contentY-this._showItemNum)*this.p_itemHeight,this._topSize=0,this._bottomSize=this._outSize,this._showDataIndex=0,this._minScrollY=this._height-Math.ceil(this._dataAry.length/this._contentX)*this.p_itemHeight,this.scrollY(0),Math.ceil(a.length/this._contentX)<=this._showItemNum?this.scrollLock=!0:this.scrollLock=!1},f.prototype.setItemData=function(a,b){this._dataAry[b].data=a;for(var c=0;c<this._itemList.length;c++)if(this._itemList[c].itdata==this._dataAry[b]){this._itemList[c].refreshDraw();break}},f.prototype.clearItemByPos=function(a){this._dataAry[a].data=null;for(var b=0;b<this._itemList.length;b++)if(this._itemList[b].itdata==this._dataAry[a]){this._itemList[b].refreshDraw();break}},f.prototype.getDataSize=function(){return this._dataAry.length},f.prototype.refreshDraw=function(){for(var a=0;a<this._itemList.length;a++)this._itemList[a].refreshDraw()},f.prototype.scroll=function(){},f.prototype.interactiveEvent=function(b){return b.type==a.InteractiveEvent.Down?this.bgMask.testPoint(b.x,b.y)?(this._mouseY=b.y,(!this.scrollLock||this._dragFlag)&&(a.Scene_data.uiStage.addEventListener(a.InteractiveEvent.Move,this.onMove,this),a.Scene_data.uiStage.addEventListener(a.InteractiveEvent.Up,this.onUp,this)),!0):!1:b.type==a.InteractiveEvent.Up?this.bgMask.testPoint(b.x,b.y):!1},f.prototype.onMove=function(a){var b=a.y-this._mouseY;this._mouseY=a.y,0>b&&this.scrollLock||this.scrollY(b)},f.prototype.onUp=function(b){var c=this;a.Scene_data.uiStage.removeEventListener(a.InteractiveEvent.Move,this.onMove,this),a.Scene_data.uiStage.removeEventListener(a.InteractiveEvent.Up,this.onUp,this),this._dragFlag&&(this._dragY<0?this._dragDownFun&&this._dragDownFun():this._dragY>0&&this._dragUpFun&&this._dragUpFun(),0!=this._dragY&&TweenMoveTo(this,.5,{dragY:0,onUpdate:function(){c.refreshResultPos()}}))},f.prototype.setDragFun=function(a,b){this._dragUpFun=a,this._dragDownFun=b,a||b?this._dragFlag=!0:(this._dragFlag=!1,this._dragY=0)},Object.defineProperty(f.prototype,"dragY",{get:function(){return this._dragY},set:function(a){this._dragY=a},enumerable:!0,configurable:!0}),f.prototype.scrollIdx=function(a){var b=-this.p_itemHeight*a,c=b-this.p_scrollY,d=Math.ceil(Math.abs(c)/this.p_itemHeight);c/=d;for(var e=0;d>e;e++)this.scrollY(c)},f.prototype.getIdxY=function(a){return this.p_itemHeight*a},f.prototype.getIdxX=function(a){return this.p_itemWidth*a},f.prototype.scrollY=function(a){if(this._topSize-=a,this._bottomSize+=a,this._topSize<=0)if(this._bottomflag=!0,0==this._showDataIndex)this._topSize=0,this._bottomSize=this._outSize,this.p_scrollY=0,this._topflag=!1,this._dragFlag&&Math.abs(this._dragY)<this._dragMaxY&&(this._dragY+=a);else{for(var b=this._showIndexList[0],c=this._itemList[b].baseY-this.p_itemHeight,d=0;d<this._contentX;d++){var e=this._showIndexList.pop();this._showIndexList.unshift(e),this._itemList[e].baseY=c,this._itemList[e].render(this._dataAry[this._showDataIndex-1]),this._itemList[e].selected=this.getCurrentSelectIndex()==this._showDataIndex-1,this._showDataIndex--}this._bottomSize-=this.p_itemHeight,this._topSize+=this.p_itemHeight,this.p_scrollY+=a,this._topflag=!0}else if(this._bottomSize<=0)if(this._topflag=!0,this._showDataIndex+this._allItemNum>=this._dataAry.length)this._bottomSize=0,this._topSize=this._outSize,this.p_scrollY=-(Math.ceil(this._dataAry.length/this._contentX)-this._showItemNum)*this.p_itemHeight,this._bottomflag=!1;else{this._bottomflag=!0;for(var f=this._showIndexList[this._showIndexList.length-1],g=this._itemList[f].baseY+this.p_itemHeight,d=0;d<this._contentX;d++){var e=this._showIndexList.shift();this._showIndexList.push(e),this._itemList[e].baseY=g,this._itemList[e].render(this._dataAry[this._showDataIndex+this._allItemNum]),this._itemList[e].selected=this.getCurrentSelectIndex()==this._showDataIndex+this._allItemNum,this._showDataIndex++}this._bottomSize+=this.p_itemHeight,this._topSize-=this.p_itemHeight,this.p_scrollY+=a}else this._showItemNum>=this._dataAry.length?(this._topflag=!1,this._bottomflag=!1,this.p_scrollY=0):(this._topflag=!0,this._bottomflag=!0,this.p_scrollY+=a);this.p_scrollY<=this._minScrollY&&this._minScrollY<0&&(this.p_scrollY=this._minScrollY,this._topSize+=a,this._bottomSize-=a,this._topflag=!0,this._bottomflag=!1,this._dragFlag&&Math.abs(this._dragY)<this._dragMaxY&&(this._dragY+=a)),this.refreshResultPos(),this.backFun&&this.backFun(this._topflag,this._bottomflag,a)},f.prototype.refreshResultPos=function(){for(var a=0;a<this._itemList.length;a++)this._itemList[a].setY(this.p_scrollY+this._dragY)},f.prototype.dispose=function(){if(this._bgRender.dispose(),this._baseRender.dispose(),this.customRenderAry)for(var a=0;a<this.customRenderAry.length;a++)this.customRenderAry[a].dispose();this.bgMask.dispose()},f}(a.UIVirtualContainer);a.SList=b;var c=(function(){function b(){this._height=10,this._list=new Array,this.index=0,this.baseY=0,this.baseX=0,this._selected=!1}return b.prototype.addUI=function(a){this._list.push(a)},b.prototype.create=function(a,b,c,d){void 0===d&&(d=null),this._bgRender=b,this._baseRender=c,this._customRenderAry=d},b.prototype.render=function(a){},b.prototype.refreshDraw=function(){},b.prototype.setSelect=function(){this.parentTarget.setSelect(this)},b.prototype.unSetSelect=function(){this.selected=!1},Object.defineProperty(b.prototype,"selected",{get:function(){return this._selected},set:function(a){this._selected=a},enumerable:!0,configurable:!0}),b.prototype.creatSUI=function(a,b,c,d,e,f,g){var h=b.getLayoutData(c),i=c+this.index;this.uiAtlas.addConfig(i,this.index,h.rect);var j=a.creatBaseComponent(i),h=new Object;return j.name=c,j.x=h.x=d,j.y=h.y=e,j.width=h.width=f,j.height=h.height=g,j.baseRec=h,this._list.push(j),j},b.prototype.creatGrid9Component=function(b,c,d,e){var f=new a.Grid9Compenent,g=this.uiAtlas.getGridRec(c);return g.ogw=d,g.ogh=e,f.tr.setRec(g),f.ogw=g.ogw,f.ogh=g.ogh,f.gw=f.ogw/g.pixelWitdh,f.gh=f.ogh/g.pixelHeight,f.tr.setRec(g),f.skinName=c,f.uiRender=b,f},b.prototype.creatGrid9SUI=function(a,b,c,d,e,f,g,h,i){void 0===h&&(h=5),void 0===i&&(i=5);var j=b.getLayoutData(c),k=c+this.index;this.uiAtlas.addConfig(k,this.index,j.rect);var l=this.creatGrid9Component(a,k,h,i),j=new Object;return l.name=c,l.x=j.x=d,l.y=j.y=e,l.width=j.width=f,l.height=j.height=g,l.baseRec=j,this._list.push(l),l},b.prototype.getHeight=function(){return this._height},b.prototype.setItemUiX=function(a,b){a.baseRec.x=b,this.setY(this._sy)},b.prototype.setY=function(a){this._sy=a;for(var b=a+this.baseY,c=0;c<this._list.length;c++)this._list[c].y=this._list[c].baseRec.y+b,this._list[c].x=this._list[c].baseRec.x+this.baseX},b.prototype.setX=function(a){this._sx=a;for(var b=a+this.baseX,c=0;c<this._list.length;c++)this._list[c].y=this._list[c].baseRec.y+this.baseY,this._list[c].x=this._list[c].baseRec.x+b},b}(),function(){function a(){this.selected=!1}return a}(),function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.interactiveEvent=function(b){a.prototype.interactiveEvent.call(this,b);var c=this.slist.interactiveEvent(b);return c},b}(a.UIRenderComponent)),d=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.interactiveEvent=function(b){return a.prototype.interactiveEvent.call(this,b)},b}(a.UIRenderComponent),e=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.setData=function(b,c,d,e){this.ctx=a.UIManager.getInstance().getContext2D(b,c,!1),this.width=b,this.height=c,this.textureRes=a.TextureManager.getInstance().getCanvasTexture(this.ctx),this.xNum=d,this.yNum=e,this.itemWidth=b/this.xNum,this.itemHeight=c/this.yNum,this.configData=new Array},c.prototype.addConfig=function(a,b,c){var d=new Object,e=b%this.xNum*this.itemWidth,f=float2int(b/this.xNum)*this.itemHeight;d.ox=e+c.x,d.oy=f+c.y,d.ow=c.width,d.oh=c.height,d.x=d.ox/this.width,d.y=d.oy/this.height,d.width=d.ow/this.width,d.height=d.oh/this.height,d.name=a,this.configData.push(d)},c}(a.UIAtlas),f=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c._effRender=new a.FrameUIRender,c}return __extends(c,b),c.prototype.setEffectUrl=function(a,b,c,d){var e=this;void 0===d&&(d=1),this.effList&&this.effList.length>0?this.effectComplte():this._effRender.setImg(getEffectUIUrl(a),b,c,function(a){1==d?(e.effList=new Array,e.effList.push(a)):e.effList=a,e.effectComplte()},d)},c.prototype.initComplte=function(){this.addRender(this._effRender),this._effRender.mask=this.bgMask},c.prototype.effectComplte=function(){},c.prototype.refreshResultPos=function(){if(b.prototype.refreshResultPos.call(this),this.effList)for(var a=0;a<this.effList.length;a++)this.effList[a].y=this.effList[a].baseRec.y+this.p_scrollY,this.effList[a].x=this.effList[a].baseRec.x+this.p_scrollX},c.prototype.playEffect=function(a,b,c,d,e,f){void 0===f&&(f=3),this.effList&&this.effList.length>0&&(this.effList[a].x=b,this.effList[a].baseRec.y=c,this.effList[a].baseRec.x=b,this.effList[a].y=c+this.p_scrollY,this.effList[a].width=this.effList[a].baseRec.width*d,this.effList[a].height=this.effList[a].baseRec.height*e,this.effList[a].speed=f,this.effList[a].playOne(this))},c.prototype.effplay=function(a){a.parent||(this.addChild(a),a.play())},c.prototype.showEffect=function(a,b,c,d,e,f){void 0===f&&(f=3),this.effList&&this.effList.length>0&&(this.effList[a].x=b,this.effList[a].baseRec.y=c,this.effList[a].baseRec.x=b,this.effList[a].y=c+this.p_scrollY,this.effList[a].width=this.effList[a].baseRec.width*d,this.effList[a].height=this.effList[a].baseRec.height*e,this.effList[a].speed=f,this.effplay(this.effList[a]))},c.prototype.hideEffect=function(a){if(void 0===a&&(a=-1),this.effList&&this.effList.length>0)if(-1==a)for(var b=0;b<this.effList.length;b++)this.effList[b].parent&&this.effList[b].parent.removeChild(this.effList[b]);else a<this.effList.length&&a>=0&&this.effList[a].parent&&this.effList[a].parent.removeChild(this.effList[a])},c.prototype.dispose=function(){b.prototype.dispose.call(this),this._effRender.dispose()},c}(b);(function(b){function f(){var a=null!==b&&b.apply(this,arguments)||this;return a._minScrollX=0,a._mouseX=0,a}return __extends(f,b),f.prototype.setData=function(b,f,g,h,i,j,k,l,m,n,o,p){void 0===p&&(p=0),this.width=g,this._height=h,this.p_itemWidth=i,this.p_itemHeight=j,this._showIndexList=new Array,this._dataAry=b,this._showItemNum=k,this._allItemNum=n*o,this._contentX=n,this._contentY=o,this._outSize=(n-this._showItemNum)*i,this._topSize=0,this._bottomSize=this._outSize,this._showDataIndex=0,this._sAtlas=new e,this._sAtlas.setData(l,m,n,o),this.bgMask=new a.UIMask,this.bgMask.x=0,this.bgMask.y=0,this.bgMask.width=g,this.bgMask.height=h,this.bgMask.level=this._maskLevel,this.addMask(this.bgMask),this._bgRender=new c,this._bgRender.uiAtlas=this._sAtlas,this._bgRender.slist=this,this.addRender(this._bgRender),this._baseRender=new d,this._baseRender.uiAtlas=this._sAtlas,this.addRender(this._baseRender),this._bgRender.mask=this.bgMask,this._baseRender.mask=this.bgMask;var q;if(0!=p){q=new Array;for(var r=0;p>r;r++){var s=new d;s.uiAtlas=this._sAtlas,this.addRender(s),s.mask=this.bgMask,q.push(s)}}this._itemList=new Array;for(var r=0;r<this._allItemNum;r++){var t=new f;t.baseX=float2int(r/o)*i,t.baseY=r%o*j,t.uiAtlas=this._sAtlas,t.index=r,t.parentTarget=this,t.create(this,this._bgRender,this._baseRender,q),t.render(this._dataAry[r]),this._itemList.push(t),this._showIndexList.push(r)}this._minScrollX=this.width-float2int(this._dataAry.length/this._contentY)*this.p_itemWidth,this.scrollX(0),this.initComplte()},f.prototype.changeMinScrollX=function(){this._minScrollX=this.width-float2int(this._dataAry.length/this._contentY)*this.p_itemWidth},f.prototype.refreshData=function(a){this._dataAry=a,this._showIndexList=new Array;for(var b=0;b<this._itemList.length;b++)this._itemList[b].render(this._dataAry[b]),this._itemList[b].baseX=float2int(b/this._contentY)*this.p_itemWidth,this._showIndexList.push(b);this._outSize=(this._contentX-this._showItemNum)*this.p_itemWidth,this._topSize=0,this._bottomSize=this._outSize,this._showDataIndex=0,this._minScrollX=this.width-float2int(this._dataAry.length/this._contentY)*this.p_itemWidth,this.scrollX(0),Math.ceil(a.length/this._contentY)<=this._showItemNum?this.scrollLock=!0:this.scrollLock=!1},f.prototype.interactiveEvent=function(b){return b.type==a.InteractiveEvent.Down&&this.bgMask.testPoint(b.x,b.y)?(this._mouseX=b.x,this.scrollLock||(a.Scene_data.uiStage.addEventListener(a.InteractiveEvent.Move,this.onMove,this),a.Scene_data.uiStage.addEventListener(a.InteractiveEvent.Up,this.onUp,this)),!0):!1},f.prototype.onMove=function(a){var b=a.x-this._mouseX;this._mouseX=a.x,0>b&&this.scrollLock||this.scrollX(b)},f.prototype.onUp=function(b){a.Scene_data.uiStage.removeEventListener(a.InteractiveEvent.Move,this.onMove,this),a.Scene_data.uiStage.removeEventListener(a.InteractiveEvent.Up,this.onUp,this)},f.prototype.scrollX=function(a){if(this._topSize-=a,this._bottomSize+=a,this._topSize<=0)if(this._bottomflag=!0,0==this._showDataIndex)this._topSize=0,this._bottomSize=this._outSize,this.p_scrollX=0,this._topflag=!1;else{for(var b=this._showIndexList[0],c=this._itemList[b].baseX-this.p_itemWidth,d=0;d<this._contentY;d++){var e=this._showIndexList.pop();this._showIndexList.unshift(e),this._itemList[e].baseX=c,this._itemList[e].render(this._dataAry[this._showDataIndex-1]),this._itemList[e].selected=this.getCurrentSelectIndex()==this._showDataIndex-1,this._showDataIndex--}this._bottomSize-=this.p_itemWidth,this._topSize+=this.p_itemWidth,this.p_scrollX+=a,this._topflag=!0}else if(this._bottomSize<=0)if(this._topflag=!0,this._showDataIndex+this._allItemNum>=this._dataAry.length)this._bottomSize=0,this._topSize=this._outSize,this.p_scrollX=-(Math.ceil(this._dataAry.length/this._contentY)-this._showItemNum)*this.p_itemWidth,this._bottomflag=!1;else{this._bottomflag=!0;for(var f=this._showIndexList[this._showIndexList.length-1],g=this._itemList[f].baseX+this.p_itemWidth,d=0;d<this._contentY;d++){var e=this._showIndexList.shift();this._showIndexList.push(e),this._itemList[e].baseX=g,this._itemList[e].render(this._dataAry[this._showDataIndex+this._allItemNum]),this._itemList[e].selected=this.getCurrentSelectIndex()==this._showDataIndex+this._allItemNum,this._showDataIndex++}this._bottomSize+=this.p_itemWidth,this._topSize-=this.p_itemWidth,this.p_scrollX+=a}else this._showItemNum>=this._dataAry.length?(this._topflag=!1,this._bottomflag=!1,this.p_scrollX=0):(this._topflag=!0,this._bottomflag=!0,this.p_scrollX+=a);this.p_scrollX<=this._minScrollX&&this._minScrollX<0&&(this.p_scrollX=this._minScrollX,this._topSize+=a,this._bottomSize-=a,this._topflag=!0,this._bottomflag=!1),this.refreshResultPos(),this.backFun&&this.backFun(this._topflag,this._bottomflag,a)},f.prototype.scrollIdx=function(a){var b=-this.p_itemWidth*a,c=b-this.p_scrollX,d=Math.ceil(Math.abs(c)/this.p_itemWidth);c/=d;for(var e=0;d>e;e++)this.scrollX(c)},f.prototype.refreshResultPos=function(){for(var a=0;a<this._itemList.length;a++)this._itemList[a].setX(this.p_scrollX);if(this.effList)for(var a=0;a<this.effList.length;a++)this.effList[a].x=this.effList[a].baseRec.x+this.p_scrollX},f})(f)}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){return b.call(this)||this}return __extends(d,b),d.prototype.testPoint=function(b,c){return b>this.absoluteX&&b<this.absoluteX+this._showWidth*a.UIData.Scale&&c>this.absoluteY&&c<this.absoluteY+this._oHeight*a.UIData.Scale?!0:!1},d.prototype.setGridData=function(a,b,d,e,f,g,h,i,j){void 0===i&&(i=256),void 0===j&&(j=300),this.uiRender.uiAtlas&&this.uiRender.uiAtlas.dispose(),this.width=g,this.height=h,this._showWidth=i,this._showHeight=j,this.data=a,this.wNum=d,this._itemWidth=e,this._itemHeight=f;var k=new c;this.uiRender.setAtlas(k),k.setGridData(g,h,e,f,d,a.length),this._itemRenderAry=new Array;for(var l=0;l<a.length;l++){var m=new b;m.setData(a[l],k,k.configData[l]),this._itemRenderAry.push(m)}this._oHeight=f*Math.ceil(this._itemRenderAry.length/this.wNum),this._oHeight>this._showHeight?this._needScoller=!0:this._needScoller=!1,this.uiRender.applyObjData()},d.prototype.setGridItemData=function(a,b){var c=this._itemRenderAry[b].listItemData.data?!0:!1;return this._itemRenderAry[b].setNewData(a),c},d.prototype.setGridItemFun=function(a,b){this._itemRenderAry[b].listItemData.clickFun=a},d.prototype.clearItemByIndex=function(a){for(var b=0;b<this._itemRenderAry.length;b++)this._itemRenderAry[b].listItemData.data&&this._itemRenderAry[b].listItemData.data.dataIndex==a&&(this._itemRenderAry[b].setNewData(null),this._itemRenderAry[b].listItemData.clickFun=null)},d.prototype.clearItemByPos=function(a){this._itemRenderAry[a].setNewData(null),this._itemRenderAry[a].listItemData.clickFun=null},d.prototype.redraw=function(){for(var a=0;a<this._itemRenderAry.length;a++)this._itemRenderAry[a].redraw()},d.prototype.testItemClick=function(b,c){var d=b-this.absoluteX,e=c-this.absoluteY,f=this._itemHeight*a.UIData.Scale,g=this._itemWidth*a.UIData.Scale,h=float2int(d/g),i=float2int(e/f),j=i*this.wNum+h;j>=this._itemRenderAry.length||this._itemRenderAry[j].click(d-g*(h-1),e-f*(i-1))},d.prototype.pushVaData=function(a,b,c){if(!this._itemRenderAry)return 0;for(var d=Math.ceil(this._itemRenderAry.length/this.wNum),e=this._itemWidth/this.width,f=this._itemHeight/this.height,b=0;d+1>b;b++)for(var g=0;g<this.wNum+1;g++)a.vertices.push(g*e,-b*f,0),a.uvs.push(g*e,b*f,0);for(var h=d*this.wNum,g=0;h>g;g++){var i=g%this.wNum+float2int(g/this.wNum)*(this.wNum+1),j=i+c,k=i+1+c,l=i+this.wNum+1+c,m=i+1+this.wNum+1+c;a.indexs.push(j,k,m,j,m,l)}return c+2*(this._itemRenderAry.length+1)},d}(a.List);a.GridList=b;var c=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.getAlphaImg=function(a,b){for(var c=this.ctx.createImageData(a,b),d=0;d<c.data.length;d++)c.data[d]=0;return c},c.prototype.setGridData=function(b,c,d,e,f,g){this.ctx=a.UIManager.getInstance().getContext2D(b,c,!1),this.ctx.fillStyle="#ffffff",this.ctx.fillRect(0,0,b,c);var h=this.getAlphaImg(b,c);this.textureRes=new a.TextureRes,this.textureRes.texture=a.Scene_data.context3D.getTexture(h,0,0),this.configData=new Array;for(var i=Math.ceil(g/f),j=0,k=0;i>k;k++)for(var l=0;f>l;l++){j=k*f+l;var m=new Object;m.ox=l*d,m.oy=k*e,m.ow=d,m.oh=e,m.x=l*d/b,m.y=k*e/c,m.width=d/b,m.height=e/c,m.name=j.toString(),this.configData.push(m)}},c}(a.ListAtlas)}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function e(){var a=b.call(this)||this;return a.initProgram(),a}return __extends(e,b),e.prototype.setVc=function(){for(var a=0;a<this._uiList.length;a++)this._uiList[a].setVc(this.shader,a);b.prototype.setVc.call(this)},e.prototype.initProgram=function(){a.ProgrmaManager.getInstance().registe(d.CdUIShader,new d),this.shader=a.ProgrmaManager.getInstance().getProgram(d.CdUIShader),this.program=this.shader.program,this.uiProLocation=a.Scene_data.context3D.getLocation(this.program,"ui"),this.ui2ProLocation=a.Scene_data.context3D.getLocation(this.program,"ui2"),this.dataTProLocation=a.Scene_data.context3D.getLocation(this.program,"dataT")},e.prototype.getComponent=function(a){var b=this.uiAtlas.getLayoutData(a),c=this.creatBaseComponent(b.dataItem[0]);return c.width=b.rect.width,c.height=b.rect.height,c.x=b.rect.x,c.y=b.rect.y,c.baseRec=b.rect,c.name=a,c},e.prototype.creatBaseComponent=function(a){var b=new c;b.skinName=a;var d=this.uiAtlas.getRec(a);return b.tr.setRec(d),b.width=d.pixelWitdh,b.height=d.pixelHeight,b.uiRender=this,b},e}(a.UIRenderComponent);a.CdRenderComponent=b;var c=function(b){function c(){var a=b.call(this)||this;return a.cdTotalnum=0,a.lastTime=0,a._skipNum=0,a.isRound=!1,a.visible=!0,a.clockwise=!0,a._skipNum=float2int(360*Math.random()),a}return __extends(c,b),c.prototype.setCdNum=function(a){this._skipNum=360*a},Object.defineProperty(c.prototype,"isFinish",{get:function(){return this._skipNum>=360?!0:!1},enumerable:!0,configurable:!0}),c.prototype.update=function(){if(0!=this.cdTotalnum){var c=(a.TimeUtil.getTimer()-this.lastTime)/this.cdTotalnum;1>c?this.setCdNum(c):this.setCdNum(1)}b.prototype.update.call(this)},c.prototype.setVc=function(b,c){var d=this._skipNum%360/180*Math.PI;a.Scene_data.context3D.setVc4fv(b,"dataTime["+c+"]",[d,this.clockwise?0:1,0,1])},c}(a.UICompenent),d=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform vec4 ui[20];uniform vec4 ui2[20];uniform vec4 dataTime[20];varying vec2 v_pos;\nvarying vec2 u_pos;varying vec4 v_dataTime;void main(void){   vec4 data = ui2[int(v2uv.z)];   v_dataTime = dataTime[int(v2uv.z)];   v_pos = vec2(v3Pos.x ,v3Pos.y);   u_pos = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);   data = ui[int(v2uv.z)];   vec3 pos = vec3(0.0,0.0,0.0);   pos.xy = v3Pos.xy * data.zw * 2.0;   pos.x += data.x * 2.0 - 1.0;   pos.y += -data.y * 2.0 + 1.0;   vec4 vt0= vec4(pos, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 u_pos;\nvarying vec2 v_pos;varying vec4 v_dataTime;\nvoid main(void)\n{\nfloat alpha =1.0;\nfloat tx =v_pos.x*2.0 - 1.0;\nfloat ty =v_pos.y*2.0 + 1.0;\nfloat atanNum =atan(tx,ty);\nvec4 infoUv = texture2D(s_texture, u_pos.xy);\ninfoUv.xyz *= infoUv.w;\nif (tx>0.0) {\nif (v_dataTime.x<atanNum) {\nalpha=0.0;\n}; \n} else {\natanNum =atanNum+6.283;\nif (v_dataTime.x<atanNum) {\nalpha=0.0;\n}; \n}; \nif (v_dataTime.y==1.0) {\nalpha=1.0-alpha;\n}; \ngl_FragColor = infoUv*alpha;\n}";return a},b.CdUIShader="CdUIShader",b}(a.Shader3D)}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function b(){this.dtime=-1,this.time=0,this.oldPos=new a.Vector2D}return b.prototype.needUpData=function(b){return this.oldPos.x!=b.x||this.oldPos.y!=b.y||a.Scene_data.cam3D.needChange?(this.oldPos.x=b.x,this.oldPos.y=b.y,!0):!1},Object.defineProperty(b.prototype,"data",{get:function(){return this._data},set:function(a){this._data=a,this.makeData(),this.time=0,this.update()},enumerable:!0,configurable:!0}),b.prototype.makeData=function(){},b.prototype.update=function(){},b.prototype.Vector3DToVector2D=function(b){var c=a.Scene_data.cam3D.cameraMatrix.clone();c.append(a.Scene_data.viewMatrx3D.clone());var d=c.transformVector(b),e=new a.Vector2D;return e.x=(d.x/d.w+1)*(a.Scene_data.stageWidth/2)/a.UIData.Scale-this.ui.width/2,e.y=(-d.y/d.w+1)*(a.Scene_data.stageHeight/2)/a.UIData.Scale-this.ui.height/2,e},b.prototype.isEqualLastKey=function(a){return!1},b}();a.Disp2DBaseText=b;var c=function(b){function c(c,d,e){var f=b.call(this)||this;return f.width=a.UIData.designWidth,f.height=a.UIData.designHeight,f.creatBaseRender(),f.addRender(f._baseRender),f.initData(c,d,e),f}return __extends(c,b),c.prototype.creatBaseRender=function(){this._baseRender=new a.UIRenderComponent},c.prototype.initData=function(b,c,d){this._voNum=Math.floor(d),this._voRect=c,this._textureRect=new a.Rectangle(0,0,Math.pow(2,Math.ceil(Math.log(c.width)/Math.log(2))),Math.pow(2,Math.ceil(Math.log(c.height*this._voNum)/Math.log(2)))),this._baseRender.uiAtlas=new a.UIAtlas;var e=this._baseRender.uiAtlas;e.configData=new Array,e.ctx=a.UIManager.getInstance().getContext2D(this._textureRect.width,this._textureRect.height,!1),e.textureRes=a.TextureManager.getInstance().getCanvasTexture(e.ctx),this.makeBaseUi(b)},c.prototype.makeBaseUi=function(a){var b=this._baseRender.uiAtlas;this._uiItem=new Array,this._lostItem=new Array;for(var c=0;c<this._voNum;c++){var d=new a;this._uiItem.push(d),d.parent=this._baseRender,d.voRect=this._voRect,d.textureStr="id"+c,b.configData.push(b.getObject(d.textureStr,0,c*this._voRect.height,this._voRect.width,this._voRect.height,this._textureRect.width,this._textureRect.height)),d.ui=this._baseRender.creatBaseComponent(d.textureStr),d.ui.width*=1,d.ui.height*=1}},c.prototype.showTemp=function(a){this.clearLostItem();for(var b,c=0;c<this._uiItem.length;c++)if(null==this._uiItem[c].data&&this._uiItem[c].isEqualLastKey(a)){b=this._uiItem[c];break}if(!b)for(var d=0;d<this._uiItem.length;d++)if(null==this._uiItem[d].data){b=this._uiItem[d];break}return b?(b.data=a,this.addChild(b.ui)):this._lostItem.push(a),b},c.prototype.clearLostItem=function(){for(var a=this._lostItem.length-1;a>0;a--)this._lostItem[a].clear&&this._lostItem.splice(a,1)},c.prototype.playLost=function(){this._lostItem.length&&this.showTemp(this._lostItem.pop())},c.prototype.clearOneTemp=function(){for(var a=0;a<this._uiItem.length;a++)if(!this._uiItem[a].data)return;this._lostItem.length=0,this.clearTemp(this._uiItem[0].data)},c.prototype.clearTemp=function(a){for(var b=0;b<this._uiItem.length;b++)if(this._uiItem[b].data==a){this._uiItem[b].data=null,this.removeChild(this._uiItem[b].ui);break}this.playLost()},c.prototype.clearAll=function(){for(var a=0;a<this._uiItem.length;a++)this._uiItem[a].data&&this.clearTemp(this._uiItem[a].data);
},c.prototype.update=function(a){for(var b=0;b<this._uiItem.length;b++)this._uiItem[b].data&&this._uiItem[b].update()},c.prototype.getUiItemLen=function(){for(var a=0,b=0;b<this._uiItem.length;b++)this._uiItem[b].data&&a++;return a},c}(a.Dis2DUIContianerBase);a.Dis2DUIContianerPanel=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform vec4 ui[40];uniform vec4 ui2[40];uniform float alpha[40];varying vec2 v_texCoord;varying float v_alpha;void main(void){   vec4 data = ui2[int(v2uv.z)];   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);   v_alpha = alpha[int(v2uv.z)];   data = ui[int(v2uv.z)];   vec3 pos = vec3(0.0,0.0,0.0);   pos.xy = v3Pos.xy * data.zw * 2.0;   pos.x += data.x * 2.0 - 1.0;   pos.y += -data.y * 2.0 + 1.0;   vec4 vt0= vec4(pos, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvarying float v_alpha;void main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz *= infoUv.w;\ninfoUv *=v_alpha;\ngl_FragColor = infoUv;\n}";return a},b.AlphaUiShader="AlphaUiShader",b}(a.Shader3D);a.AlphaUIShader=b;var c=function(c){function f(){return c.call(this)||this}return __extends(f,c),f.prototype.update=function(){if(this.visible&&0!=this._uiList.length){a.Scene_data.context3D.setBlendParticleFactors(0),a.Scene_data.context3D.setProgram(this.program);for(var b=0;b<this._uiList.length;b++)this._uiList[b].update(),this._uiList[b].setVc(this.shader,b);a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),this.uiAtlas?a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.uiAtlas.texture,0):a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.texture,0),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)}},f.prototype.initData=function(){this._uiList=new Array,this.objData=new a.ObjData,a.ProgrmaManager.getInstance().registe(b.AlphaUiShader,new b),this.shader=a.ProgrmaManager.getInstance().getProgram(b.AlphaUiShader),this.program=this.shader.program,this.uiProLocation=a.Scene_data.context3D.getLocation(this.program,"ui"),this.ui2ProLocation=a.Scene_data.context3D.getLocation(this.program,"ui2"),this.alphaLocation=a.Scene_data.context3D.getLocation(this.program,"alpha")},f.prototype.creatBaseComponent=function(a){var b=new e;b.skinName=a;var c=this.uiAtlas.getRec(a);return b.tr.setRec(c),b.width=c.pixelWitdh,b.height=c.pixelHeight,b.uiRender=this,b},f.prototype.creatGrid9Component=function(a,b,c){var e=new d;e.skinName=a;var f=this.uiAtlas.getGridRec(a);return e.tr.setRec(f),e.ogw=f.ogw,e.ogh=f.ogh,e.gw=e.ogw/f.pixelWitdh,e.gh=e.ogh/f.pixelHeight,e.width=b,e.height=c,e.uiRender=this,e},f}(a.UIRenderComponent);a.AlphaUIRenderComponent=c;var d=function(b){function c(){var a=b.call(this)||this;return a.alpha=1,a}return __extends(c,b),c.prototype.setVc=function(b,c){a.Scene_data.context3D.setVc4fv(b,"ui["+c+"]",this.renderData),a.Scene_data.context3D.setVc4fv(b,"ui2["+c+"]",this.renderData2),a.Scene_data.context3D.setVc1fv(b,"alpha["+c+"]",[this.alpha])},c}(a.Grid9Compenent);a.AlphaGrid9UICompenent=d;var e=function(b){function c(){var a=b.call(this)||this;return a.alpha=1,a}return __extends(c,b),c.prototype.setVc=function(b,c){a.Scene_data.context3D.setVc4fv(b,"ui["+c+"]",this.renderData),a.Scene_data.context3D.setVc4fv(b,"ui2["+c+"]",this.renderData2),a.Scene_data.context3D.setVc1fv(b,"alpha["+c+"]",[this.alpha])},c}(a.UICompenent);a.AlphaUICompenent=e;var f=function(a){function b(b,c,d){return a.call(this,b,c,d)||this}return __extends(b,a),b.prototype.creatBaseRender=function(){this._baseRender=new c},b}(a.Dis2DUIContianerPanel);a.AlphaUiContianer=f}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform vec4 ui[40];uniform vec4 ui2[40];uniform vec2 paix[40];uniform float rotation[40];uniform float sc;varying vec2 v_texCoord;void main(void){   vec4 data = ui2[int(v2uv.z)];   v_texCoord = vec2(v2uv.x * data.x + data.z, v2uv.y * data.y + data.w);   float angle = rotation[int(v2uv.z)];   data = ui[int(v2uv.z)];vec3 pos = vec3(0.0,0.0,0.0);pos.x = v3Pos.x;pos.y = v3Pos.y ;pos.x = pos.x-0.5;pos.y = pos.y+0.5 ;pos.xy =pos.xy+ paix[int(v2uv.z)].xy;pos.xy = pos.xy * data.zw * 2.0;pos.y=pos.y/sc;vec3 ptpos = pos;vec4 np = vec4(sin(angle), cos(angle), 0, 0);\npos.x = np.x * ptpos.y + np.y * ptpos.x;\npos.y = np.y * ptpos.y - np.x * ptpos.x;\npos.y=pos.y*sc;   pos.x += data.x * 2.0 - 1.0;   pos.y += -data.y * 2.0 + 1.0;   vec4 vt0= vec4(pos, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ninfoUv.xyz *= infoUv.w;\ngl_FragColor = infoUv;\n}";return a},b.RoationUiShader="RoationUiShader",b}(a.Shader3D);a.RoationUIShader=b;var c=(function(d){function e(){return d.call(this)||this}return __extends(e,d),e.prototype.update=function(){if(this.visible&&0!=this._uiList.length){a.Scene_data.context3D.setBlendParticleFactors(0),a.Scene_data.context3D.setProgram(this.program);for(var b=0;b<this._uiList.length;b++)this._uiList[b].update(),this._uiList[b].setVc(this.shader,b);a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),this.uiAtlas?a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.uiAtlas.texture,0):a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.texture,0),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum)}},e.prototype.initData=function(){this._uiList=new Array,this.objData=new a.ObjData,a.ProgrmaManager.getInstance().registe(b.RoationUiShader,new b),this.shader=a.ProgrmaManager.getInstance().getProgram(b.RoationUiShader),this.program=this.shader.program,this.uiProLocation=a.Scene_data.context3D.getLocation(this.program,"ui"),this.ui2ProLocation=a.Scene_data.context3D.getLocation(this.program,"ui2"),this.alphaLocation=a.Scene_data.context3D.getLocation(this.program,"rotation")},e.prototype.creatBaseComponent=function(a){var b=new c;b.skinName=a;var d=this.uiAtlas.getRec(a);return b.tr.setRec(d),b.width=d.pixelWitdh,b.height=d.pixelHeight,b.uiRender=this,b},e}(a.UIRenderComponent),function(b){function c(){var c=b.call(this)||this;return c.rotation=0,c.aotuRotation=0,c.paix=new a.Vector2D(0,0),c}return __extends(c,b),c.prototype.setVc=function(b,c){this.rotation+=this.aotuRotation,a.Scene_data.context3D.setVc4fv(b,"ui["+c+"]",this.renderData),a.Scene_data.context3D.setVc4fv(b,"ui2["+c+"]",this.renderData2),a.Scene_data.context3D.setVc2fv(b,"paix["+c+"]",[this.paix.x,this.paix.y]),a.Scene_data.context3D.setVc1fv(b,"rotation["+c+"]",[this.rotation*Math.PI/180]),a.Scene_data.context3D.setVc1fv(b,"sc",[a.Scene_data.stageWidth/a.Scene_data.stageHeight])},c}(a.UICompenent))}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){return b.call(this)||this}return __extends(d,b),d.prototype.setImg=function(b,c,d,e,f){var g=this;void 0===f&&(f=1),a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+b,function(b){var h=new a.UIAtlas;if(h.textureRes=b,g.uiAtlas=h,1==f)e(g.getFrameTipComponent(c,d));else{for(var i=new Array,j=0;f>j;j++)i.push(g.getFrameTipComponent(c,d));e(i)}})},d.prototype.update=function(){b.prototype.update.call(this);for(var a=this._uiList.length-1;a>=0;a--)this._uiList[a]instanceof c&&this._uiList[a].updateEnd()},d.prototype.getFrameTipComponent=function(b,d){var e=new c,f=new a.UIRectangle;f.x=0,f.y=0,f.width=1,f.height=1,f.pixelWitdh=this.uiAtlas.textureRes.width,f.pixelHeight=this.uiAtlas.textureRes.height,f.pixelX=0,f.pixelY=0,f.type=2,f.cellX=b,f.cellY=d,e.setFrameData(f),e.uiRender=this;var g=new Object;return g.width=this.uiAtlas.textureRes.width/b,g.height=this.uiAtlas.textureRes.height/d,g.x=0,g.y=0,e.width=g.width,e.height=g.height,e.x=g.x,e.y=g.y,e.baseRec=g,e},d}(a.UIRenderComponent);a.FrameUIRender=b;var c=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.playOne=function(a){this.parent||a.addChild(this),this.endFlag=!1,this.goToAndPlay(0)},b.prototype.updateEnd=function(){this.endFlag&&this.parent.removeChild(this)},b}(a.FrameCompenent);a.FrameTipCompenent=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this._dic=new Object,this._loadDic=new Object}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a}();a.IconManager=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._scale=1}return Object.defineProperty(b.prototype,"ui",{get:function(){return this._ui},set:function(b){this._ui=b,this._baseRect=new a.Rectangle(this._ui.x,this._ui.y,this._ui.width,this._ui.height)},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"scale",{get:function(){return this._scale},set:function(a){this._scale=a,this._ui.width=this._baseRect.width*this._scale,this._ui.height=this._baseRect.height*this._scale,this._ui.x=this._baseRect.x+(this._baseRect.width-this._ui.width)/2,this._ui.y=this._baseRect.y+(this._baseRect.height-this._ui.height)/2},enumerable:!0,configurable:!0}),b.prototype.destory=function(){this._ui=null,this._scale=null,this._baseRect=null},b.getPosByPanel=function(b,c,d){if(void 0===c&&(c=null),void 0===d&&(d=null),this.baseUIConatiner||(this.baseUIConatiner=new a.UIConatiner),this.baseUIConatiner.width=a.UIData.designWidth,this.baseUIConatiner.height=a.UIData.designHeight,this.baseUIConatiner.middle=0,this.baseUIConatiner.center=0,c)for(var e in c)this.baseUIConatiner[e]=c[e];this.baseUIConatiner.resize();var f=new a.Vector2D;return f.x=b.x+this.baseUIConatiner.x/a.UIData.Scale,f.y=b.y+this.baseUIConatiner.y/a.UIData.Scale,d&&(f.x=f.x-d.x/a.UIData.Scale,f.y=f.y-d.y/a.UIData.Scale),f},b}();a.UiTweenVo=b;var c=function(){function a(){}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a.prototype.changeButSize=function(a){var c=this;this._uiTweenVo||(this._uiTweenVo=new b,this._uiTweenVo.ui=a,this._uiTweenVo.scale=1,TweenMoveTo(this._uiTweenVo,.07,{scale:1.2,onComplete:function(){c.changeButScale()}}))},a.prototype.changeButScale=function(){var a=this;this._uiTweenVo.scale=1.2,TweenMoveTo(this._uiTweenVo,.05,{scale:1,onComplete:function(){a.changeButEnd()}})},a.prototype.changeButEnd=function(){this._uiTweenVo.destory(),this._uiTweenVo=null},a}();a.UiTweenScale=c;var d=function(){function b(){this._eventItem=new Array,this.lastTime=0,a.Scene_data.uiStage=new a.UIStage,a.Scene_data.uiBlankStage=new a.UIStage,this._canvas=document.createElement("canvas"),this._canvas.style.zIndex="3",this._canvas.width=200,this._canvas.height=200,this._canvas.style.left=200,this._canvas.style.top=300,this._ctx=this._canvas.getContext("2d"),this._ctx.textBaseline=a.TextAlign.TOP}return b.getInstance=function(){var a=this;return this._instance||(this._instance=new b,b.popClikNameFun=function(b,c){void 0===c&&(c=0),a.uiClikName(b,c)}),this._instance},b.uiClikName=function(a,b){},b.prototype.getContext2D=function(b,c,d){return void 0===d&&(d=!0),this._canvas.width=b,this._canvas.height=c,this._ctx.clearRect(0,0,b,c),d=!0,d&&(this._ctx.textBaseline=a.TextAlign.TOP,this._ctx.textAlign=a.TextAlign.LEFT),this._ctx},b.prototype.getGrayImageDatabyImg=function(a){var c=b.getInstance().getContext2D(a.width,a.height,!1);c.drawImage(a,0,0);for(var d,e=c.getImageData(0,0,a.width,a.height),f=0;f<e.data.length;f+=4)d=Math.floor(.3*e.data[f+0])+Math.floor(.59*e.data[f+1])+Math.floor(.11*e.data[f+2]),e.data[f+0]=d,e.data[f+1]=d,e.data[f+2]=d;return e},b.prototype.makeCtxToGray=function(a,b){for(var c,d=a.getImageData(b.x,b.y,b.width,b.height),e=0;e<d.data.length;e+=4)c=Math.floor(.3*d.data[e+0])+Math.floor(.59*d.data[e+1])+Math.floor(.11*d.data[e+2]),c=.5*c+.5,d.data[e+0]=c,d.data[e+1]=c,d.data[e+2]=c;a.putImageData(d,b.x,b.y)},b.prototype.showCanvas=function(a,b){void 0===a&&(a=0),void 0===b&&(b=0),this._canvas.style.left=a,this._canvas.style.top=b,document.getElementById("root").appendChild(this._canvas)},b.prototype.init=function(){a.ProgrmaManager.getInstance().registe(a.UIShader.UI_SHADER,new a.UIShader),a.ProgrmaManager.getInstance().registe(a.UIImageShader.UI_IMG_SHADER,new a.UIImageShader),a.ProgrmaManager.getInstance().registe(a.UIMaskShader.UI_MASK_SHADER,new a.UIMaskShader),a.ProgrmaManager.getInstance().registe(a.Movie2DShader.MOVIE2D_SHADER,new a.Movie2DShader),a.ProgrmaManager.getInstance().registe(a.Sprite2DShader.SPRITE2D_SHADER,new a.Sprite2DShader),this._uiList=new Array,this._containerList=new Array,a.UIData.setDesignWH(480,854)},b.prototype.addUI=function(a){for(var b=0,c=this._uiList.length-1;c>=0;c--)if(this._uiList[c].sortnum<=a.sortnum){b=c+1;break}this._uiList.splice(b,0,a),a.rendering=!0},b.prototype.removeUI=function(a){var b=this._uiList.indexOf(a);a.rendering=!1,-1!=b&&this._uiList.splice(b,1)},b.prototype.addUIContainer=function(a){if(!a.hasStage){this._containerList.push(a),a.resize();for(var b=0;b<a.renderList.length;b++)this.addUI(a.renderList[b]);a.hasStage=!0}},b.prototype.removeAll=function(){for(;this._containerList.length;)this.removeUIContainer(this._containerList[this._containerList.length-1])},b.prototype.removeUIContainer=function(a){if(a.hasStage){var b=this._containerList.indexOf(a);a.hasStage=!1,-1!=b&&this._containerList.splice(b,1);for(var c=0;c<a.renderList.length;c++)this.removeUI(a.renderList[c])}},b.prototype.hasWindowUI=function(){return!1},b.prototype.removeNoInterfaceUI=function(){for(var a=this._containerList.length-1;a>=0;a--)this._containerList[a].interfaceUI||this.removeUIContainer(this._containerList[a])},b.prototype.resize=function(){if(this._uiList){a.UIData.resize();for(var b=0;b<this._uiList.length;b++)this._uiList[b].resize();for(var b=0;b<this._containerList.length;b++)this._containerList[b].resize()}},b.prototype.upBgGroundZero=function(){for(var a=0;a<this._uiList.length;a++)(-1==this._uiList[a].container.layer||-1==this._uiList[a].sortnum)&&this._uiList[a].update()},b.prototype.update=function(){for(var a=0;a<this._uiList.length;a++)this._uiList[a].container.layer>=0&&-1!=this._uiList[a].sortnum&&this._uiList[a].update()},b.prototype.regEvent=function(a){},b.prototype.onTouch=function(a){this.interactiveEvent(a)},b.prototype.onMouse=function(a){this.interactiveEvent(a)},b.prototype.interactiveEvent=function(b){var c,d=new a.Vector2D;if(b instanceof MouseEvent)b.type==a.MouseType.MouseDown?c=new a.InteractiveEvent(a.InteractiveEvent.Down):b.type==a.MouseType.MouseUp?c=new a.InteractiveEvent(a.InteractiveEvent.Up):b.type==a.MouseType.MouseMove?c=new a.InteractiveEvent(a.InteractiveEvent.Move):b.type==a.MouseType.MouseClick,d.x=b.pageX,d.y=b.pageY;else if(b.type==a.MouseType.TouchStart?(c=new a.InteractiveEvent(a.InteractiveEvent.Down),b.touches.length>1?(d.x=b.touches[b.touches.length-1].pageX,d.y=b.touches[b.touches.length-1].pageY):(d.x=b.pageX,d.y=b.pageY)):b.type==a.MouseType.TouchEnd?(c=new a.InteractiveEvent(a.InteractiveEvent.Up),d.x=b.changedTouches[0].pageX,d.y=b.changedTouches[0].pageY):b.type==a.MouseType.TouchMove&&(b.touches.length>1?(c=new a.InteractiveEvent(a.InteractiveEvent.Pinch),c.data=a.MathClass.math_distance(b.touches[0].clientX,b.touches[0].clientY,b.touches[1].clientX,b.touches[1].clientY)/this.lastSwipeDis,c.roation=180*(Math.atan2(b.touches[1].clientY-b.touches[0].clientY,b.touches[1].clientX-b.touches[0].clientX)-this.lastSwipeRot)/Math.PI):c=new a.InteractiveEvent(a.InteractiveEvent.Move),d.x=b.pageX,d.y=b.pageY),b.touches.length)for(var e=0;e<b.touches.length;e++)d.x=b.touches[e].clientX,d.y=b.touches[e].clientY;this.mouseEvetData(c,d)},b.prototype.disMoveNnum=function(b,c){return a.Vector2D.distance(b,this.lastMousePos)<c},b.prototype.mouseEvetData=function(c,d){b.cando=!0,a.Scene_data.verticalScene?(c.x=d.y,c.y=a.Scene_data.stageHeight-d.x):(c.x=d.x,c.y=d.y);var e=!1;if(!e)for(var f=this._uiList.length-1;f>=0;f--)if(this._uiList[f]&&0==this._uiList[f].container.interfaceUI&&this._uiList[f]&&this._uiList[f].interactiveEvent(c)){e=!0;break}if(!e)for(var f=this._uiList.length-1;f>=0;f--)if(this._uiList[f]&&1==this._uiList[f].container.interfaceUI&&this._uiList[f]&&this._uiList[f].interactiveEvent(c)){e=!0;break}if(c.type==a.InteractiveEvent.Down){this.lastMousePos=new a.Vector2D(c.x,c.y);var g=a.TimeUtil.getTimer()-this.lastTime;if(200>g)return!0;this.lastTime=a.TimeUtil.getTimer()}var h=a.Scene_data.uiStage.interactiveEvent(c);return e?!0:(a.Scene_data.uiBlankStage.interactiveEvent(c),h)},b.prototype.setUseMouseEventCon=function(a){this._eventItem.length=0,a&&this._eventItem.push(a)},b.prototype.getObjectsUnderPoint=function(a){for(var b=this._uiList.length-1;b>=0;b--)if(this._uiList[b]&&this._uiList[b]&&this._uiList[b].insetUi(a))return this._uiList[b].insetUi(a);return null},b.prototype.getcurrentList=function(){for(var a=new Array,b=this._uiList.length-1;b>0;b--)if(this._eventItem.length)for(var c=0;c<this._eventItem.length;c++)this._eventItem[c]!=this._uiList[b].container||(a.push(this._uiList[b]),c=this._eventItem.length);else a.push(this._uiList[b]);return a},b.cando=!0,b}();a.UIManager=d}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.width=a.UIData.designWidth,c.height=a.UIData.designHeight,c.center=0,c.middle=0,c.initData(),c}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.initData=function(){var b=this;this.atls=new a.UIAtlas,this.atls.configData=new Array,this.atls.configData.push(this.atls.getObject("load",0,0,256,256,256,256,4,4)),this.atls.loadImgUrl("ui/load/ui_loding.png",function(){b.loadCom()})},c.prototype.loadCom=function(){this._render=new a.UIRenderComponent,this._render.uiAtlas=this.atls;var b=this._render.createFrame("load");this.addChild(b),b.speed=1,b.width=100,b.height=100,b.x=(a.UIData.designWidth-b.width)/2,b.y=(a.UIData.designHeight-b.height)/2,this.addRender(this._render)},c.prototype.show=function(){a.UIManager.getInstance().addUIContainer(this)},c.prototype.hide=function(){a.UIManager.getInstance().removeUIContainer(this)},c}(a.UIConatiner);a.UILoading=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.interactiveEvent=function(a){var b=a.type,c=this._eventsMap;if(!c)return!1;var d=c[b];if(!d)return!1;var e=d.length;if(0==e)return!1;for(var f=e-1;f>=0;f--){var g=d[f];g.listener.call(g.thisObject,a)}return!0},b}(a.EventDispatcher);a.UIStage=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.A_HIGHT_F="A_hight_f",a.TAB_HIGHT="Tab_hight",a.A_HIGHT_C="A_hight_c",a.A_DELETEBTN="A_deletebtn",a.A_ZHENQI="A_zhenqi",a.A_SHOULING="A_SHOULING",a.A_JINGHUA="A_JINGHUA",a.A_JIANTOU="A_jiantou",a.A_WUPINKUANG="A_wupinkuang",a.A_BLACK_C="A_black_c",a.A_BLACK_F="A_black_f",a.A_BLACK_START="A_black_start",a.A_HIGHT_START="A_hight_start",a.A_BLACK_BASE="A_black_base ",a.A_RED_POINT="A_red_point",a.A_YINBI="A_yinbi",a.A_YUANBAO="A_yuanbao",a.A_BANGGONG="A_banggong",a.A_DOUHUN="A_DOUHUN",a.A_EXP="A_EXP",a.A_HONOR="A_HONOR",a.A_BANGYUAN="A_bangyuan",a.A_RIGHT_XING="A_RIGHT_XING",a.A_SSTART="A_SSTART",a.A_LEFT_XING="A_LEFT_XING",a.A_GOODS_PURPLE="A_GOODS_PURPLE",a.A_GOODS_BLUE="A_GOODS_BLUE",a.A_GOODS_RED="A_GOODS_RED",a.A_GOODS_GREEN="A_GOODS_GREEN",a.A_GOODS_WHITE="A_GOODS_WHITE",a.A_GOODS_ORANGE="A_GOODS_ORANGE",a.A_START_BG="A_START_BG",a.A_START="A_START",a.A_CHAIN="A_CHAIN",a.A_OK="A_OK",a.A_QIANWANG="A_QIANWANG",a.T_LEFT="T_LEFT",a.T_MID="T_MID",a.T_RIGHT="T_RIGHT",a.E_LEFT="E_LEFT",a.E_MID="E_MID",a.E_RIGHT="E_RIGHT",a.F_LEFT="F_LEFT",a.F_MID="F_MID",a.F_RIGHT="F_RIGHT",a.A_F_22="A_F_22",a.A_BLACK_BASE_66="A_BLACK_BASE_66 ",a.A_HIGHR_C_66="A_HIGHR_C_66",a.A_V="A_V",a.A_GIVING_BG="A_GIVING_BG",a.B_SUB="B_SUB",a.A_FACTION_ICON="A_FACTION_ICON",a.SELECT_1="SELECT_1",a.SELECT_0="SELECT_0",a.A_JIE="A_JIE",a.A_XING="A_XING",a.T_tips_txt_bg="T_tips_txt_bg",a.ITEMBG="ITEMBG",a.A_quest_top="A_quest_top",a.A_quest_mid="A_quest_mid",a.A_quest_bottom="A_quest_bottom",a.A_quest_ion0="A_quest_ion0",a.A_quest_ion1="A_quest_ion1",a.A_quest_ion2="A_quest_ion2",a.A_quest_ion3="A_quest_ion3",a.A_quest_finish="A_quest_finish",a.S_sys_tip0="S_sys_tip0",a.S_sys_tip1="S_sys_tip1",a.A_zhanli_label="A_zhanli_label",a.A_gou="A_gou",a.A_cha="A_cha",a.TYPE3="TYPE3",a.TYPE5="TYPE5",a.TYPE9="TYPE9",a.TYPE7="TYPE7",a.B_ZHUFUZHI="B_ZHUFUZHI",a.B_DABAOJI="B_DABAOJI",a.B_XIAOBAOJI="B_XIAOBAOJI",a.B_JINGYAN="B_JINGYAN",a.NewPicBg="NewPicBg",a.Select="Select",a.CostBg="CostBg",a.BG2="BG2",a.PropBg40="PropBg40",a.PropBg60="PropBg60",a.PropBg100="PropBg100",a.REWARD_BG1="REWARD_BG1",a.SKILL_BG68="SKILL_BG68",a.SKILL_BG58="SKILL_BG58",a.BG6="BG6",a.Slist_nselect="Slist_nselect",a.Slist_select="Slist_select",a.TXTBG="TXTBG",a.ARROW_TOP="ARROW_TOP",a.ARROW_RIGHT="ARROW_RIGHT",a.MASK="MASK",a.BTNADD="BTNADD",a.BOSSBG76="BOSSBG76",a.BOSSBG64="BOSSBG64",a.CIRCL74="CIRCL74",a.LISTITEMBG="LISTITEMBG",a.ADDITEM="ADDITEM",a.HASSEL="HASSEL",a.SKILL_LEV_BG="SKILL_LEV_BG",a.TITLEBG="TITLEBG",a.TITLEHIGHT="TITLEHIGHT",a.NEWLISTITEMBG="NEWLISTITEMBG",a.CHATBG="CHATBG",a.ITEMBIGBG="ITEMBIGBG",a.I1bg_2="I1bg_2",a.I1bg_1="I1bg_1",a.ARROWUP="ARROWUP",a.ARROWDOWN="ARROWDOWN",a.A_EQULEVBG="A_EQULEVBG",a.DISABLE="DISABLE",a.EQUBG="EQUBG",a.RESLISTBG="RESLISTBG",a.A_CARD_C="A_CARD_C",a.A_CARD_G="A_CARD_G",a.A_CARD_B="A_CARD_B",a.RESBG="RESBG",a.STATEUP_LISTBG="STATEUP_LISTBG",a.A_LEAGUELISTBG="A_LEAGUELISTBG",a.TEAMLISTBG="TEAMLISTBG",a.A_JJ0="A_JJ0",a.A_JJ1="A_JJ1",a.A_JJ2="A_JJ2",a.A_JJ3="A_JJ3",a.A_JJ4="A_JJ4",a.A_JJ5="A_JJ5",a.A_JJ6="A_JJ6",a.A_JJ7="A_JJ7",a.A_JJ8="A_JJ8",a.A_JJ9="A_JJ9",a.A_JJ10="A_JJ10",a}();a.PuiData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.destory=function(){a.Scene_data.context3D.deleteTexture(this.texture)},c}(a.ResCount);a.TextureRes=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function e(){var a=b.call(this)||this;return a._loadDic=new Object,a._resDic=new Object,a.initDefaultLightMapTexture(),a}return __extends(e,b),e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.hasTexture=function(a){return this._dic[a]?!0:!1},e.prototype.getTexture=function(b,d,e,f,g,h){var i=this;if(void 0===e&&(e=0),void 0===f&&(f=null),void 0===g&&(g=0),void 0===h&&(h=0),this._dic[b])return f?d(this._dic[b],f):d(this._dic[b]),void this._dic[b].useNum++;var j=new c(d,f,b,e,g,h);if(this._loadDic[b]){var k=this._loadDic[b];return void k.push(j)}this._loadDic[b]=new Array,this._loadDic[b].push(j),this._resDic[b]?(this.loadTextureCom(this._resDic[b],j),delete this._resDic[b]):a.LoadManager.getInstance().load(b,a.LoadManager.IMG_TYPE,function(a,b){i.loadTextureCom(a,b)},j)},e.prototype.getImageData=function(b,c){a.LoadManager.getInstance().load(b,a.LoadManager.IMG_TYPE,function(b){var d=a.UIManager.getInstance().getContext2D(b.width,b.height,!1);d.drawImage(b,0,0,b.width,b.height);var e=d.getImageData(0,0,b.width,b.height);c(e)})},e.prototype.getImgResByurl=function(a){return this._resDic[a]},e.prototype.addRes=function(a,b){this._dic[a]||this._resDic[a]||(this._resDic[a]=b)},e.prototype.addImgRes=function(b,c){this._resDic[b]=c;var d=a.Scene_data.context3D.getTexture(c),e=new a.TextureRes;e.texture=d,e.width=c.width,e.height=c.height,e.useNum++,this._dic[b]=e},e.prototype.getCanvasTexture=function(b){var c=new a.TextureRes,d=a.Scene_data.context3D.getTexture(b.canvas,0,0);return c.texture=d,c},e.prototype.getImageDataTexture=function(b){var c=a.Scene_data.context3D.getTexture(b,0,0);return c},e.prototype.getTextureRes=function(b){var c=new a.TextureRes,d=a.Scene_data.context3D.getTexture(b,0,0);return c.texture=d,c},e.prototype.updateTexture=function(b,c,d,e){a.Scene_data.context3D.updateTexture(b,c,d,e.canvas)},e.prototype.loadCubeTexture=function(a,b){var c=new d;c.loadCube(a,function(a){b(a)})},e.prototype.loadTextureCom=function(b,c){var d=a.Scene_data.context3D.getTexture(b,c.wrap,c.filter,c.mipmap),e=new a.TextureRes;e.texture=d,e.width=b.width,e.height=b.height;for(var f=this._loadDic[c.url],g=0;g<f.length;g++)f[g].info?f[g].fun(e,f[g].info):f[g].fun(e),e.useNum++;delete this._loadDic[c.url],this._dic[c.url]=e},e.prototype.initDefaultLightMapTexture=function(){var b=document.createElement("canvas"),c=b.getContext("2d");b.width=32,b.height=32,c.fillStyle="rgb(51,51,51)",c.fillRect(0,0,32,32),this.defaultLightMap=a.Scene_data.context3D.getTexture(b)},e.prototype.gc=function(){b.prototype.gc.call(this)},e}(a.ResGC);a.TextureManager=b;var c=function(){function a(a,b,c,d,e,f){this.fun=a,this.info=b,this.url=c,this.wrap=d,this.filter=e,this.mipmap=f}return a}();a.TextureLoad=c;var d=function(){function b(){this.ary=new Array(6),this.flagNum=0}return b.prototype.loadCube=function(b,c){var d=this;this.fun=c;for(var e=0;6>e;e++){var f=b+"0"+(e+1)+".jpg";a.LoadManager.getInstance().load(f,a.LoadManager.IMG_TYPE,function(a,b){d.loadCom(a,b)},{id:e})}},b.prototype.loadCom=function(b,c){var d=b.width/4,e=document.createElement("canvas"),f=e.getContext("2d");e.width=d,e.height=d;var g=a.Scene_data.context3D.renderContext,h=g.createTexture();g.bindTexture(g.TEXTURE_CUBE_MAP,h),f.drawImage(b,2*d,d,d,d,0,0,d,d),g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR),f.drawImage(b,0,d,d,d,0,0,d,d),g.texImage2D(g.TEXTURE_CUBE_MAP_NEGATIVE_X,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR),f.drawImage(b,d,0,d,d,0,0,d,d),g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_Y,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR),f.drawImage(b,d,2*d,d,d,0,0,d,d),g.texImage2D(g.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR),f.drawImage(b,d,d,d,d,0,0,d,d),g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_Z,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR),f.drawImage(b,3*d,d,d,d,0,0,d,d),g.texImage2D(g.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR),this.ary[c.id]=h,this.flagNum++,6==this.flagNum&&this.fun(this.ary)},b}();a.CubemapLoad=d}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.value=new a.Vector3D,this.offset=0}return Object.defineProperty(b.prototype,"id",{get:function(){return this._id},set:function(a){this._id=a,this.name="fc"+a,this.offset=4*a},enumerable:!0,configurable:!0}),b.prototype.creat=function(a){this.vecNum=a,this.vecNum[0+this.offset]=this.value.x,this.vecNum[1+this.offset]=this.value.y,this.vecNum[2+this.offset]=this.value.z,this.vecNum[3+this.offset]=this.value.w},b.prototype.setData=function(b){this.id=b.id,this.value=new a.Vector3D(b.value.x,b.value.y,b.value.z,b.value.w),this.paramName0=b.paramName0,this.param0Type=b.param0Type,this.param0Index=b.param0Index,this.paramName1=b.paramName1,this.param1Type=b.param1Type,this.param1Index=b.param1Index,this.paramName2=b.paramName2,this.param2Type=b.param2Type,this.param2Index=b.param2Index,this.paramName3=b.paramName3,this.param3Type=b.param3Type,this.param3Index=b.param3Index},b.prototype.setDynamicOffset=function(a){this.paramName0==a.paramName?a.targetOffset=this.param0Index+this.offset:this.paramName1==a.paramName?a.targetOffset=this.param1Index+this.offset:this.paramName2==a.paramName?a.targetOffset=this.param2Index+this.offset:this.paramName3==a.paramName&&(a.targetOffset=this.param3Index+this.offset)},b.prototype.setDynamicDirect=function(a,b){this.vecNum.set(a,b)},b.prototype.setDynamic=function(a){try{this.vecNum.set(a.currentValue,a.targetOffset)}catch(b){}},b}();a.ConstItem=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.prototype.destory=function(){this.textureRes&&this.textureRes.clearUseNum()},Object.defineProperty(a.prototype,"id",{get:function(){return this._id},set:function(a){this._id=a,this.name="fs"+a},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"texture",{get:function(){return this.textureRes?this.textureRes.texture:null},enumerable:!0,configurable:!0}),a.LIGHTMAP=1,a.LTUMAP=2,a.CUBEMAP=3,a.HEIGHTMAP=4,a.REFRACTIONMAP=5,a}();a.TexItem=b;
}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.texList=new Array,a.constList=new Array,a.killNum=0,a.writeZbuffer=!0,a.fogMode=0,a.fcNum=0,a}return __extends(c,b),c.prototype.update=function(a){this.updateTime(a),this.updateScene()},c.prototype.updateTime=function(a){this.hasTime&&(this.fcData[1]=a)},c.prototype.updateCam=function(a,b,c){if(this.usePbr||1==this.fogMode){var d=4*this.fcIDAry[0];this.fcData[0+d]=a,this.fcData[1+d]=b,this.fcData[2+d]=c}},c.prototype.updateScene=function(){if(this.sceneNumId!=a.Scene_data.sceneNumId){if(this.sceneNumId=a.Scene_data.sceneNumId,0!=this.fogMode){var b=4*this.fcIDAry[1];this.fcData[0+b]=a.Scene_data.fogColor[0],this.fcData[1+b]=a.Scene_data.fogColor[1],this.fcData[2+b]=a.Scene_data.fogColor[2]}if(this.scaleLightMap){var b=4*this.fcIDAry[2];this.fcData[0+b]=a.Scene_data.scaleLight[0]}}},c.prototype.initFcData=function(){if(this.fcData=new Float32Array(4*this.fcNum),!(this.fcNum<=0)){if(this.sceneNumId=a.Scene_data.sceneNumId,(this.hasTime||this.useKill||0!=this.fogMode)&&(this.useKill&&(this.fcData[0]=this.killNum),0!=this.fogMode&&(this.fcData[2]=a.Scene_data.fogData[0],this.fcData[3]=a.Scene_data.fogData[1])),this.usePbr||1==this.fogMode){var b=4*this.fcIDAry[0];this.fcData[0+b]=a.Scene_data.cam3D.x/100,this.fcData[1+b]=a.Scene_data.cam3D.y/100,this.fcData[2+b]=a.Scene_data.cam3D.z/100}if(0!=this.fogMode){var b=4*this.fcIDAry[1];this.fcData[0+b]=a.Scene_data.fogColor[0],this.fcData[1+b]=a.Scene_data.fogColor[1],this.fcData[2+b]=a.Scene_data.fogColor[2]}if(this.scaleLightMap){var b=4*this.fcIDAry[2];this.fcData[0+b]=a.Scene_data.scaleLight[0]}}},c.prototype.setCompileData=function(b){if(b){if(this.shaderStr=b.shaderStr,this.hasTime=b.hasTime,this.timeSpeed=b.timeSpeed,this.blendMode=b.blendMode,this.backCull=b.backCull,this.killNum=b.killNum,this.hasVertexColor=b.hasVertexColor,this.usePbr=b.usePbr,this.useNormal=b.useNormal,this.roughness=b.roughness,this.writeZbuffer=b.writeZbuffer,this.hasFresnel=b.hasFresnel,this.useDynamicIBL=b.useDynamicIBL,this.normalScale=b.normalScale,this.lightProbe=b.lightProbe,this.useKill=b.useKill,this.directLight=b.directLight,this.noLight=b.noLight,this.scaleLightMap=b.scaleLightMap,this.fogMode=b.fogMode,this.hasParticleColor=!1,this.initFcData(),b.texList){var c=b.texList;this.texList=new Array;for(var d=0;d<c.length;d++){var e=new a.TexItem;e.id=c[d].id,e.url=c[d].url,e.isDynamic=c[d].isDynamic,e.paramName=c[d].paramName,e.isMain=c[d].isMain,e.isParticleColor=c[d].isParticleColor,e.type=c[d].type,e.wrap=c[d].wrap,e.filter=c[d].filter,e.mipmap=c[d].mipmap,this.texList.push(e),e.isParticleColor&&(this.hasParticleColor=!0)}}if(b.constList)for(c=b.constList,this.constList=new Array,d=0;d<c.length;d++){var f=new a.ConstItem;f.setData(c[d]),f.creat(this.fcData),this.constList.push(f)}}},c.prototype.setByteData=function(a){var b=a,c=b.readInt();if(this.shaderStr=b.readUTF(),this.hasTime=b.readBoolean(),this.timeSpeed=b.readFloat(),this.blendMode=b.readFloat(),this.backCull=b.readBoolean(),this.killNum=b.readFloat(),this.hasVertexColor=b.readBoolean(),this.usePbr=b.readBoolean(),this.useNormal=b.readBoolean(),this.roughness=b.readFloat(),this.writeZbuffer=b.readBoolean(),this.hasFresnel=b.readBoolean(),this.useDynamicIBL=b.readBoolean(),this.normalScale=b.readFloat(),this.lightProbe=b.readBoolean(),this.useKill=b.readBoolean(),this.directLight=b.readBoolean(),this.noLight=b.readBoolean(),this.scaleLightMap=b.readBoolean(),c>2&&(this.fogMode=b.readInt()),c>=22){this.fcNum=b.readByte();var d=b.readByte();this.fcIDAry=new Array;for(var e=0;d>e;e++)this.fcIDAry.push(b.readByte())}this.hasParticleColor=!1,this.initFcData(),this.readTexList(b),this.readConstLis(b)},c.prototype.readConstLis=function(b){var c=b.readInt();this.constList=new Array;for(var d=0;c>d;d++){var e=new a.ConstItem;e.id=b.readFloat(),e.value=new a.Vector3D(b.readFloat(),b.readFloat(),b.readFloat(),b.readFloat()),e.paramName0=b.readUTF(),e.param0Type=b.readFloat(),e.param0Index=b.readFloat(),e.paramName1=b.readUTF(),e.param1Type=b.readFloat(),e.param1Index=b.readFloat(),e.paramName2=b.readUTF(),e.param2Type=b.readFloat(),e.param2Index=b.readFloat(),e.paramName3=b.readUTF(),e.param3Type=b.readFloat(),e.param3Index=b.readFloat(),e.creat(this.fcData),this.constList.push(e)}},c.prototype.readTexList=function(b){var c=b.readInt();this.texList=new Array;for(var d=0;c>d;d++){var e=new a.TexItem;e.id=b.readFloat(),e.url=b.readUTF(),e.isDynamic=b.readBoolean(),e.paramName=b.readUTF(),e.isMain=b.readBoolean(),e.isParticleColor=b.readBoolean(),e.type=b.readFloat(),e.wrap=b.readFloat(),e.filter=b.readFloat(),e.mipmap=b.readFloat(),e.isParticleColor&&(this.hasParticleColor=!0),this.texList.push(e)}},c.prototype.destory=function(){for(var a=0;a<this.texList.length;a++)this.texList[a].destory();this.texList=null,this.constList=null,this.shader&&this.shader.clearUseNum()},c}(a.ResCount);a.Material=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){var a=b.call(this)||this;return a._loadDic=new Object,a._resDic=new Object,a._regDic=new Object,a}return __extends(d,b),d.getInstance=function(){return this._instance||(this._instance=new d),this._instance},d.prototype.getMaterialByte=function(b,d,e,f,g,h){var i=this;if(void 0===e&&(e=null),void 0===f&&(f=!1),void 0===g&&(g=null),void 0===h&&(h=null),this._dic[b])return e?d(this._dic[b],e):d(this._dic[b]),void this._dic[b].useNum++;var j=new c(d,e,b,f,g,h);if(this._loadDic[b]){var k=this._loadDic[b];return void k.push(j)}this._loadDic[b]=new Array,this._loadDic[b].push(j),this._resDic[b]?(this.meshByteMaterialByt(this._resDic[b],j),this._regDic[b]&&(this._dic[b].useNum+=this._regDic[b],delete this._regDic[b]),delete this._resDic[b]):a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a,b){i.loadMaterialByteCom(a,b)},j)},d.prototype.meshByteMaterialByt=function(b,c){var d=new a.Material;d.setByteData(b),d.url=c.url,this.loadMaterial(d),c.autoReg&&(d.shader=a.ProgrmaManager.getInstance().getMaterialProgram(c.regName,c.shader3D,d,null,!0),d.program=d.shader.program);for(var e=this._loadDic[c.url],f=0;f<e.length;f++)e[f].info?e[f].fun(d,e[f].info):e[f].fun(d),d.useNum++;delete this._loadDic[c.url],this._dic[c.url]=d},d.prototype.loadMaterialByteCom=function(b,c){var d=new a.Pan3dByteArray(b);this.meshByteMaterialByt(d,c)},d.prototype.addResByte=function(a,b){this._dic[a]||this._resDic[a]||(this._resDic[a]=b)},d.prototype.registerUrl=function(a){a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt"),this._dic[a]?this._dic[a].useNum++:this._regDic[a]?this._regDic[a]++:1==this._regDic[a]},d.prototype.releaseUrl=function(a){a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt"),this._dic[a]&&this._dic[a].clearUseNum()},d.prototype.loadMaterial=function(b){for(var c=b.texList,d=0;d<c.length;d++)c[d].isParticleColor||c[d].isDynamic||0!=c[d].type||a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+c[d].url,function(a,b){b.textureRes=a},c[d].wrap,c[d],c[d].filter,c[d].mipmap)},d.prototype.loadDynamicTexUtil=function(b){for(var c=b.dynamicTexList,d=0;d<c.length;d++)c[d].isParticleColor?c[d].creatTextureByCurve():a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+c[d].url,function(a,b){b.textureRes=a},0,c[d],0,1)},d.prototype.gc=function(){b.prototype.gc.call(this)},d}(a.ResGC);a.MaterialManager=b;var c=function(){function a(a,b,c,d,e,f){this.fun=a,this.info=b,this.url=c,this.autoReg=d,this.regName=e,this.shader3D=f}return a}()}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.prototype.update=function(a){void 0===a&&(a=0),this.target&&this.target.setDynamic(this)},Object.defineProperty(a.prototype,"type",{get:function(){return this._type},set:function(a){this._type=a},enumerable:!0,configurable:!0}),a.prototype.setTargetInfo=function(a,b,c){this.target=a,this.paramName=b,this.type=c,this.target&&this.target.setDynamicOffset(this),this.currentValue=new Array(c)},a.prototype.setCurrentVal=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];for(var c=0;c<a.length;c++)this.currentValue[c]=a[c]},a}();a.DynamicBaseConstItem=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.prototype.destory=function(){this.textureRes&&this.textureRes.useNum--,this.target=null},Object.defineProperty(a.prototype,"texture",{get:function(){return this.textureRes?this.textureRes.texture:null},enumerable:!0,configurable:!0}),a}();a.DynamicBaseTexItem=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.destory=function(){for(var a=0;a<this.dynamicTexList.length;a++)this.dynamicTexList[a].destory();this.dynamicTexList=null,this.dynamicConstList=null},c.prototype.update=function(){if(this.material&&this.dynamicConstList)for(var a=0;a<this.dynamicConstList.length;a++)this.dynamicConstList[a].update()},c.prototype.setData=function(b,c){this.material=b,this.dynamicConstList=new Array,this.dynamicTexList=new Array;for(var d=b.constList,e=b.texList,f=0;f<c.length;f++){var g=c[f];if(0==g.type){var h=new a.DynamicBaseTexItem;h.paramName=g.name;for(var i=0;i<e.length;i++)if(h.paramName==e[i].paramName){h.target=e[i];break}var j=0;h.target&&(j=h.target.mipmap),j=0,a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+g.url,function(a){h.textureRes=a},0,null,0,j),this.dynamicTexList.push(h)}else{for(var k=g.name,l=null,i=0;i<d.length;i++)if(k==d[i].paramName0||k==d[i].paramName1||k==d[i].paramName2||k==d[i].paramName3){l=d[i];break}var m=new a.DynamicBaseConstItem;m.setTargetInfo(l,k,g.type),1==g.type?m.setCurrentVal(g.x):2==g.type?m.setCurrentVal(g.x,g.y):m.setCurrentVal(g.x,g.y,g.z),this.dynamicConstList.push(m)}}},c}(a.GC);a.MaterialBaseParam=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.destory=function(){this.material.useNum--,this.shader.useNum--,b.prototype.destory.call(this)},c.prototype.setMaterial=function(a){this.material=a,this.materialUrl=a.url,this.dynamicTexList=new Array,this.dynamicConstList=new Array,this.setTexList(),this.setConstList()},c.prototype.setLife=function(a){for(var b=0;b<this.dynamicTexList.length;b++)this.dynamicTexList[b].isParticleColor&&(this.dynamicTexList[b].life=a)},c.prototype.setTexList=function(){for(var b=this.material.texList,c=0;c<b.length;c++){var d;b[c].isParticleColor?(d=new a.DynamicTexItem,d.target=b[c],d.paramName=b[c].paramName,d.initCurve(4),this.dynamicTexList.push(d),d.isParticleColor=!0):b[c].isDynamic&&(d=new a.DynamicTexItem,d.target=b[c],d.paramName=b[c].paramName,this.dynamicTexList.push(d))}},c.prototype.setConstList=function(){for(var b=this.material.constList,c=0;c<b.length;c++){var d,e=b[c];0!=e.param0Type&&(d=new a.DynamicConstItem,d.setTargetInfo(e,e.paramName0,e.param0Type),this.dynamicConstList.push(d)),0!=e.param1Type&&(d=new a.DynamicConstItem,d.setTargetInfo(e,e.paramName1,e.param1Type),this.dynamicConstList.push(d)),0!=e.param2Type&&(d=new a.DynamicConstItem,d.setTargetInfo(e,e.paramName2,e.param2Type),this.dynamicConstList.push(d)),0!=e.param3Type&&(d=new a.DynamicConstItem,d.setTargetInfo(e,e.paramName3,e.param3Type),this.dynamicConstList.push(d))}},c.prototype.setTextObj=function(a){for(var b=0;b<a.length;b++)for(var c=a[b],d=0;d<this.dynamicTexList.length;d++)if(this.dynamicTexList[d].paramName==c.paramName){this.dynamicTexList[d].isParticleColor?this.dynamicTexList[d].curve.setData(c.curve):this.dynamicTexList[d].url=c.url;break}},c.prototype.setConstObj=function(a){for(var b=0;b<a.length;b++)for(var c=a[b],d=0;d<this.dynamicConstList.length;d++)if(this.dynamicConstList[d].paramName==c.paramName){this.dynamicConstList[d].curve.setData(c.curve);break}},c}(a.MaterialBaseParam);a.MaterialParam=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.update=function(a){void 0===a&&(a=0),this.currentValue=this.curve.getValue(a),this.target.setDynamic(this)},Object.defineProperty(c.prototype,"type",{set:function(b){this._type=b,this.curve=new a.Curve,this.curve.type=b},enumerable:!0,configurable:!0}),c}(a.DynamicBaseConstItem);a.DynamicConstItem=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.prototype.destory=function(){b.prototype.destory.call(this),this._textureDynamic&&a.Scene_data.context3D.deleteTexture(this._textureDynamic),this.target=null},c.prototype.initCurve=function(b){this.curve=new a.Curve,this.curve.type=b},Object.defineProperty(c.prototype,"texture",{get:function(){return this._textureDynamic?this._textureDynamic:this.textureRes?this.textureRes.texture:null},enumerable:!0,configurable:!0}),c.prototype.creatTextureByCurve=function(){for(var b=0,c=this.curve.valueVec.length-1,d=new Array,b=0;b<this.life;b++)if(b<this.curve.begintFrame)d.push(255*this.curve.valueVec[0][0],255*this.curve.valueVec[0][1],255*this.curve.valueVec[0][2],255*this.curve.valueVec[0][3]);else if(b>this.curve.maxFrame)0==this.curve.maxFrame&&this.curve.begintFrame<0?d.push(255,255,255,255):d.push(255*this.curve.valueVec[c][0],255*this.curve.valueVec[c][1],255*this.curve.valueVec[c][2],255*this.curve.valueVec[c][3]);else if(this.curve.begintFrame<0)d.push(255,255,255,255);else{var e=b-this.curve.begintFrame;d.push(255*this.curve.valueVec[e][0],255*this.curve.valueVec[e][1],255*this.curve.valueVec[e][2],255*this.curve.valueVec[e][3])}var f=a.ColorTransition.getInstance().getImageDataByVec(d,this.life);this._textureDynamic=a.Scene_data.context3D.getTexture(f)},Object.defineProperty(c.prototype,"life",{get:function(){return this._life},set:function(a){this._life=a},enumerable:!0,configurable:!0}),c}(a.DynamicBaseTexItem);a.DynamicTexItem=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(a,b,c,d,e,f){this.x=a,this.y=b,this.z=c,this.width=d,this.height=e,this.depth=f}return b.prototype.testViewFrustum=function(a,b){if(this.sun&&1==this.sun.length)return void this.sun[0].testViewFrustum(a,b);if(this.testViewFrustumResult(a)&&(this.target&&(this.target.isPerspective?this.testRay(b)||(this.target.sceneVisible=!0):this.target.sceneVisible=!0),this.sun))for(var c=0;c<this.sun.length;c++)this.sun[c].testViewFrustum(a,b)},b.prototype.testViewFrustumResult=function(b){for(var c=new a.Vector3D(this.x,this.y,this.z),d=new a.Vector3D(this.width,this.height,this.depth),e=!0,f=0;f<b.length;f++){var g=c,h=c.add(d),i=new a.Vector3D;b[f].x>0?i.x=h.x:i.x=g.x,b[f].y>0?i.y=h.y:i.y=g.y,b[f].z>0?i.z=h.z:i.z=g.z;var j=b[f].dot(i)+b[f].w;if(0>j){e=!1;break}}return e},b.prototype.testRay=function(a){var b,c,d,e,f,g,h=a.o.x,i=a.o.y,j=a.o.z,k=a.d.x,l=a.d.y,m=a.d.z,n=this.x,o=this.y,p=this.z,q=this.x+this.width,r=this.y+this.height,s=this.z+this.depth,t=1/k;t>=0?(b=(n-h)*t,e=(q-h)*t):(b=(q-h)*t,e=(n-h)*t);var u=1/l;u>=0?(c=(o-i)*u,f=(r-i)*u):(c=(r-i)*u,f=(o-i)*u);var v=1/m;v>=0?(d=(p-j)*v,g=(s-j)*v):(d=(s-j)*v,g=(p-j)*v);var w,x;w=b>c?b:c,d>w&&(w=d),x=f>e?e:f,x>g&&(x=g);var y=1e-4,z=0;return x>w&&x>y?(z=w>y?w:x,z<a.baseT?!0:void 0):!1},b}();a.QuadTreeNode=b;var c=function(){function b(){this.o=new a.Vector3D,this.d=new a.Vector3D,this.baseT=500}return b.prototype.setPos=function(a,b,c){this.o.x=a,this.o.y=b,this.o.z=c},b.prototype.setTarget=function(a,b,c){this.d.x=a-this.o.x,this.d.y=b-this.o.y,this.d.z=c-this.o.z,this.d.normalize()},b}();a.Ray=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.needUpdata=!1,this.panleAry=new Array}return b.prototype.init=function(b,c){this._circle=new a.Circle(1e4,1e4),this._sceneDic=c,this._rootNode=this.getNode(b),this._ray=new a.Ray},b.prototype.getNode=function(b){var c=new a.QuadTreeNode(b.x,b.y,b.z,b.width,b.height,b.depth);if(b.data){c.sun||(c.sun=new Array);for(var d=0;d<b.data.length;d++){var e,f=new a.QuadTreeNode(b.data[d].x,b.data[d].y,b.data[d].z,b.data[d].width,b.data[d].height,b.data[d].depth);1==b.data[d].type?e="build"+b.data[d].id:11==b.data[d].type?e="particle"+b.data[d].id:14==b.data[d].type&&(e="ground"+b.data[d].id),f.target=this._sceneDic[e],f.target.aabb=f,c.sun.push(f)}}if(b.sun){c.sun||(c.sun=new Array);for(var d=0;d<b.sun.length;d++)c.sun.push(this.getNode(b.sun[d]))}return c},b.prototype.setCircle=function(a,b,c){var d=a-this._circle.x,e=b-this._circle.y;Math.sqrt(d*d+e*e)<10?this.needUpdata=!1:(this._circle.setData(a,b,c),this.needUpdata=!0)},b.prototype.update=function(){a.MathClass.GetViewHitBoxDataCopy(a.Scene_data.cam3D.distance);var b=new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z),c=a.MathClass.viewBoxVecItem;this.panleAry.length=0,this.panleAry.push(this.getPanelByVec(b,c[0],c[1])),this.panleAry.push(this.getPanelByVec(b,c[1],c[2])),this.panleAry.push(this.getPanelByVec(b,c[2],c[3])),this.panleAry.push(this.getPanelByVec(b,c[3],c[0])),this._ray.setPos(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z),this._ray.setTarget(a.Scene_data.focus3D.x,a.Scene_data.focus3D.y,a.Scene_data.focus3D.z),this._ray.baseT=a.Scene_data.cam3D.distance,this._rootNode.testViewFrustum(this.panleAry,this._ray)},b.prototype.getPanelByVec=function(a,b,c){var d=b.subtract(a),e=c.subtract(a);return d=d.cross(e),d.normalize(),d.w=-d.dot(a),d},b.prototype.updateDraw=function(){this.capsuleLineSprite?(this.capsuleLineSprite.x=a.Scene_data.focus3D.x,this.capsuleLineSprite.y=a.Scene_data.focus3D.y+50,this.capsuleLineSprite.z=a.Scene_data.focus3D.z,this.capsuleLineSprite.update()):(this.capsuleLineSprite=new a.LineDisplaySprite,this.capsuleLineSprite.clear(),this.capsuleLineSprite.baseColor=new a.Vector3D(1,0,0,1),this.drawCylinder(this._circle.radius,10),this.capsuleLineSprite.upToGpu())},b.prototype.drawCylinder=function(b,c){var d,e,f,g=b,h=c,i=12;for(f=0;i>f;f++){var j=new a.Vector3D(g,0,0),k=new a.Vector3D(g,+h,0),l=new a.Matrix3D;l.appendRotation(f*(360/i),a.Vector3D.Y_AXIS);var m=l.transformVector(j),n=l.transformVector(k);this.capsuleLineSprite.makeLineMode(m,n),this.capsuleLineSprite.makeLineMode(n,new a.Vector3D(0,+h,0)),f==i-1&&(this.capsuleLineSprite.makeLineMode(m,j),this.capsuleLineSprite.makeLineMode(n,k)),(d||e)&&(this.capsuleLineSprite.makeLineMode(m,d),this.capsuleLineSprite.makeLineMode(n,e)),d=m.clone(),e=n.clone()}},b}();a.SceneQuadTree=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.prototype.init=function(){this.capsuleLineSprite=new a.LineDisplaySprite,a.SceneManager.getInstance().addDisplay(this.capsuleLineSprite)},b.prototype.setCam=function(){var b=a.Scene_data.cam3D.cameraMatrix.clone();b.append(a.Scene_data.viewMatrx3D);var c=b.m,d=c[0],e=c[1],f=c[2],g=c[3],h=c[4],i=c[5],j=c[6],k=c[7],l=c[8],m=c[9],n=c[10],o=c[11],p=c[12],q=c[13],r=c[14],s=c[15];this.panleAry=new Array;this.getPanle(-l+p,-m+q,-n+r,-o+s),this.getPanle(h+p,i+q,j+r,k+s),this.getPanle(-h+p,-i+q,-j+r,-k+s),this.getPanle(d+p,e+q,f+r,g+s),this.getPanle(-d+p,-e+q,-f+r,-g+s)},b.prototype.getPanle=function(b,c,d,e){var f=new a.Vector3D(b,c,d,e);return f.normalize(),f},b.prototype.getPanelByVec=function(a,b,c){var d=b.subtract(a),e=c.subtract(a);return d=d.cross(e),d.normalize(),d.w=-d.dot(a),d},b.prototype.setData=function(a){this.dataAry=a},b.prototype.setViewFrustum=function(){this.capsuleLineSprite||this.init(),this.setCam(),this.capsuleLineSprite.clear(),this.capsuleLineSprite.baseColor=new a.Vector3D(0,0,1,1),a.MathClass.GetViewHitBoxDataCopy(a.Scene_data.cam3D.distance);var b=new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z),c=a.MathClass.viewBoxVecItem;this.panleAry.push(this.getPanelByVec(b,c[0],c[1])),this.panleAry.push(this.getPanelByVec(b,c[1],c[2])),this.panleAry.push(this.getPanelByVec(b,c[2],c[3])),this.panleAry.push(this.getPanelByVec(b,c[3],c[0]));for(var d=0;d<this.dataAry.length;d++){for(var e=this.dataAry[d],f=new a.Vector3D(e.x,e.y,e.z),g=new a.Vector3D(e.width,e.height,e.depth),h=!1,i=0;i<this.panleAry.length;i++){var j=f,k=f.add(g),l=new a.Vector3D;this.panleAry[i].x>0?l.x=k.x:l.x=j.x,this.panleAry[i].y>0?l.y=k.y:l.y=j.y,this.panleAry[i].z>0?l.z=k.z:l.z=j.z;var m=this.panleAry[i].dot(l)+this.panleAry[i].w;if(0>m){h=!0;break}}h?this.capsuleLineSprite.baseColor=new a.Vector3D(1,0,0,1):this.capsuleLineSprite.baseColor=new a.Vector3D(0,0,1,1),this.capsuleLineSprite.makeLineMode(f,new a.Vector3D(f.x+g.x,f.y,f.z)),this.capsuleLineSprite.makeLineMode(f,new a.Vector3D(f.x,f.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x+g.x,f.y,f.z),new a.Vector3D(f.x+g.x,f.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x,f.y,f.z+g.z),new a.Vector3D(f.x+g.x,f.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x,f.y+g.y,f.z),new a.Vector3D(f.x+g.x,f.y+g.y,f.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x,f.y+g.y,f.z),new a.Vector3D(f.x,f.y+g.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x+g.x,f.y+g.y,f.z),new a.Vector3D(f.x+g.x,f.y+g.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x,f.y+g.y,f.z+g.z),new a.Vector3D(f.x+g.x,f.y+g.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x,f.y,f.z),new a.Vector3D(f.x,f.y+g.y,f.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x+g.x,f.y,f.z),new a.Vector3D(f.x+g.x,f.y+g.y,f.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x,f.y,f.z+g.z),new a.Vector3D(f.x,f.y+g.y,f.z+g.z)),this.capsuleLineSprite.makeLineMode(new a.Vector3D(f.x+g.x,f.y,f.z+g.z),new a.Vector3D(f.x+g.x,f.y+g.y,f.z+g.z))}this.capsuleLineSprite.upToGpu()},b}();a.ViewFrustum=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._ready=!1,this.render=!0,this.test=!1,this._displayList=new Array,this._displaySpriteList=new Array,this._displayRoleList=new Array,this._display2DList=new Array,this._sceneParticleList=new Array,this._time=a.TimeUtil.getTimer(),this._sceneDic=new Object,this.initScene(),this.viewFrustum=new a.ViewFrustum}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},Object.defineProperty(b.prototype,"displayList",{get:function(){return this._displayList},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"displayRoleList",{get:function(){return this._displayRoleList},enumerable:!0,configurable:!0}),Object.defineProperty(b.prototype,"displaySpriteList",{get:function(){return this._displaySpriteList},enumerable:!0,configurable:!0}),b.prototype.clearScene=function(){this._displayRoleList.length=0},b.prototype.clearStaticScene=function(){for(var b in this._sceneDic){var c=this._sceneDic[b];c instanceof a.CombineParticle?(a.ParticleManager.getInstance().removeParticle(c),c.destory()):c instanceof a.Display3DSprite&&(c.removeStage(),c.destory())}this._ready=!1,this._sceneDic=null,this._sceneQuadTree=null,this._displayList.length=0,this._sceneParticleList.length=0,a.AstarUtil.porcessBak(!1)},b.prototype.testUrl=function(a){return this._currentUrl==a},b.prototype.loadScene=function(b,c,d,e){var f=this;return this._currentUrl==b?(a.AstarUtil.porcessBak(!0),this._ready=!0,c(),void e()):(this.clearStaticScene(),this._ready=!1,a.ResManager.getInstance().loadSceneRes(b,c,d,function(a){f.loadSceneConfigCom(a),e()}),void(this._currentUrl=b))},b.prototype.addSceneImgBg=function(b){var c=new a.Display3dBg;c.setImgInfo(b.url,b.width,b.height),this.addDisplay(c)},b.prototype.getDisplayByID=function(a,b){return 0==a?this._sceneDic["build"+b]:1==a?this._sceneDic["particle"+b]:void 0},b.prototype.fixAstart=function(a){for(var b=0;b<this._displayRoleList.length;b++)this._displayRoleList[b].fixAstartData(a)},b.prototype.loadSceneConfigCom=function(b){this._sceneDic=new Object;var c=b.groundItem,d=b.buildItem;a.Scene_data.fogColor=[b.fogColor.x/255,b.fogColor.y/255,b.fogColor.z/255];var e=1*b.fogDistance,f=b.fogAttenuation;a.Scene_data.gameAngle=isNaN(b.gameAngle)?0:b.gameAngle,a.Scene_data.focus3D.rotationY=a.Scene_data.gameAngle,a.Scene_data.fogData=[e*f,1/((1-f)*e)],a.Scene_data.sceneNumId++;for(var g=0;c&&g<c.length;g++){var h=this.getGroundSprite(c[g],b.terrain);this.addDisplay(h)}for(var i=0;i<d.length;i++){var j=d[i];if(j.type==a.BaseRes.PREFAB_TYPE){var k=this.getBuildSprite(j);this.addDisplay(k)}else if(j.type==a.BaseRes.SCENE_PARTICLE_TYPE){var l=this.getParticleSprite(j);a.ParticleManager.getInstance().addParticle(l),this._sceneParticleList.push(l)}}a.Scene_data.light.setData(b.SunNrm,b.SunLigth,b.AmbientLight),a.LightProbeManager.getInstance().setLightProbeData(b.lightProbeItem),a.AstarUtil.setData(b.astar),this._ready=!0,b.quadTreeData?(this._sceneQuadTree=new a.SceneQuadTree,this._sceneQuadTree.init(b.quadTreeData,this._sceneDic)):this._sceneQuadTree=null,a.Scene_data.cam3D.astarRect=a.AstarUtil.areaRect},b.prototype.getGroundSprite=function(b,c){var d=new a.TerrainDisplay3DSprite;return d.setObjUrl(b.objsurl),d.setMaterialUrl(b.materialurl,b.materialInfoArr),d.materialInfoArr=b.materialInfoArr,d.setLightMapUrl(b.lighturl),d.scaleX=b.scaleX,d.scaleY=b.scaleY,d.scaleZ=b.scaleZ,d.x=b.x,d.y=b.y,d.z=b.z,d.rotationX=b.rotationX,d.rotationY=b.rotationY,d.rotationZ=b.rotationZ,d.objData.lightuvsOffsets=d.objData.uvsOffsets,c&&d.setGrounDataMesh(c[b.id]),this._sceneDic["ground"+b.id]=d,d},b.prototype.makeCollisioin=function(a){},Object.defineProperty(b.prototype,"ready",{get:function(){return this._ready},set:function(a){this._ready=a},enumerable:!0,configurable:!0}),b.prototype.getBuildSprite=function(b){var c=new a.Display3DSprite;return c.setObjUrl(b.objsurl),c.setMaterialUrl(b.materialurl,b.materialInfoArr),c.materialInfoArr=b.materialInfoArr,c.setLightMapUrl(b.lighturl),c.scaleX=b.scaleX,c.scaleY=b.scaleY,c.scaleZ=b.scaleZ,c.x=b.x,c.y=b.y,c.z=b.z,c.rotationX=b.rotationX,c.rotationY=b.rotationY,c.rotationZ=b.rotationZ,c.isPerspective=b.isPerspective,c.type=0,c.id=b.id,this._sceneDic["build"+b.id]=c,c},b.prototype.getParticleSprite=function(b){var c;return c=a.ParticleManager.getInstance().getParticleByte(a.Scene_data.fileRoot+b.url),c.scaleX=b.scaleX,c.scaleY=b.scaleY,c.scaleZ=b.scaleZ,c.x=b.x,c.y=b.y,c.z=b.z,c.rotationX=b.rotationX,c.rotationY=b.rotationY,c.rotationZ=b.rotationZ,c.type=0,this._sceneDic["particle"+b.id]=c,c},b.prototype.initScene=function(){},b.prototype.addDisplay=function(a){-1==this._displayList.indexOf(a)&&(this._displayList.push(a),a.addStage())},b.prototype.removeDisplay=function(a){var b=this._displayList.indexOf(a);-1!=b&&this._displayList.splice(b,1),a.removeStage()},b.prototype.addSpriteDisplay=function(a){if(-1==this._displaySpriteList.indexOf(a)){a.addStage();for(var b=0;b<this._displaySpriteList.length;b++)if(this._displaySpriteList[b].materialUrl==a.materialUrl)return void this._displaySpriteList.splice(b,0,a);this._displaySpriteList.push(a)}},b.prototype.removeSpriteDisplay=function(a){var b=this._displaySpriteList.indexOf(a);-1!=b&&this._displaySpriteList.splice(b,1),a.removeStage()},b.prototype.addMovieDisplay=function(a){this._displayRoleList.push(a),a.addStage()},b.prototype.addMovieDisplayTop=function(a){this._displayRoleList.unshift(a),a.addStage()},b.prototype.removeMovieDisplay=function(a){var b=this._displayRoleList.indexOf(a);-1!=b&&this._displayRoleList.splice(b,1),a.removeStage()},b.prototype.setParticleVisible=function(){for(var b=a.ParticleManager.getInstance().particleList,c=0;b&&c<b.length;c++)if(!b[c].dynamic&&b[c].bindVecter3d){var d=a.Vector3D.distance(new a.Vector3D(a.Scene_data.focus3D.x,a.Scene_data.focus3D.y,a.Scene_data.focus3D.z),new a.Vector3D(b[c].x,b[c].y,b[c].z));b[c].sceneVisible=1e3>d}},b.prototype.update=function(){if(!this.test){if(this._sceneQuadTree&&(this._sceneQuadTree.setCircle(a.Scene_data.focus3D.x,a.Scene_data.focus3D.z,b.mapQudaTreeDistance),this._sceneQuadTree.needUpdata)){for(var c=0;c<this._displayList.length;c++)this._displayList[c].sceneVisible=!1,this._displayList[c].sceneVisible=!0;this.setParticleVisible(),this._sceneQuadTree.update(),this.mathCamFar()}a.Scene_data.context3D.update(),a.Scene_data.context3D.setDepthTest(!1),a.UIManager.getInstance().upBgGroundZero(),a.Scene_data.context3D.setDepthTest(!0),this.updateMovieFrame(),a.MathClass.getCamView(a.Scene_data.cam3D,a.Scene_data.focus3D),this._ready&&(a.ParticleManager.getInstance().updateTime(),a.SkillManager.getInstance().update(),this.render&&(this.updateStaticDiplay(),this.updateSpriteDisplay(),a.Scene_data.context3D.setWriteDepth(!0),a.Scene_data.context3D.clearTest(),this.updateMovieDisplay(),a.ShadowManager.getInstance().update(),a.Scene_data.context3D.setWriteDepth(!1),a.ParticleManager.getInstance().update(),a.BloodManager.getInstance().update())),a.Scene_data.context3D.setDepthTest(!1),a.UIManager.getInstance().update();for(var c=0;c<this._display2DList.length;c++)this._display2DList[c].update()}},b.prototype.updateFBO=function(){a.Scene_data.fbo||(a.Scene_data.fbo=a.Scene_data.context3D.getFBO()),0!=this._displayList.length&&(a.Scene_data.context3D.updateFBO(a.Scene_data.fbo),a.Scene_data.viewMatrx3D.identity(),a.Scene_data.context3D.renderContext.viewport(0,0,a.FBO.fw,a.FBO.fh),a.Scene_data.viewMatrx3D.perspectiveFieldOfViewLH(2,1,50,a.Scene_data.camFar),a.Scene_data.viewMatrx3D.appendScale(2,2*(a.Scene_data.stageWidth/a.Scene_data.stageHeight),1),a.MathClass.updateVp(),this.updateStaticDiplay(),a.Engine.resetSize(),a.Scene_data.context3D.renderContext.bindFramebuffer(a.Scene_data.context3D.renderContext.FRAMEBUFFER,null))},b.prototype.addDisplay2DList=function(a){this._display2DList.push(a)},b.prototype.mathCamFar=function(){for(var b=new a.Vector3D,c=0,d=0;d<this._displayList.length;d++){var e=this._displayList[d];if(e.sceneVisible&&e.aabb){var f=e.posMatrix.clone();f.append(a.Scene_data.cam3D.cameraMatrix);for(var g=e.aabbVect,h=0;h<g.length;h++)b=a.Scene_data.cam3D.cameraMatrix.transformVector(g[h]),b.z>c&&(c=b.z)}}a.Scene_data.camFar=Math.max(500,c+100),
a.Engine.resetViewMatrx3D()},b.prototype.updateStaticDiplay=function(){for(var a=0;a<this._displayList.length;a++)this._displayList[a].update()},b.prototype.updateStaticBind=function(){},b.prototype.updateSpriteDisplay=function(){for(var a=0;a<this._displaySpriteList.length;a++)this._displaySpriteList[a].update()},b.prototype.updateMovieDisplay=function(){for(var b=0;b<this._displayRoleList.length;b++)this._displayRoleList[b].update();this._displayRoleList.length&&a.Scene_data.context3D.setVa(1,3,null)},b.prototype.updateMovieFrame=function(){var b=a.TimeUtil.getTimer(),c=b-this._time;this._time=b;for(var d=0;d<this._displayRoleList.length;d++)this._displayRoleList[d].updateFrame(c)},b.mapQudaTreeDistance=200,b}();a.SceneManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._time=0,a._skillDic=new Object,a._loadDic=new Object,a._skillAry=new Array,a._preLoadDic=new Object,a}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.update=function(){for(var b=a.TimeUtil.getTimer(),c=b-this._time,d=0;d<this._skillAry.length;d++)this._skillAry[d].update(c);this._time=b},c.prototype.preLoadSkill=function(b){var c=this;this._dic[b]||this._preLoadDic[b]||(a.ResManager.getInstance().loadSkillRes(a.Scene_data.fileRoot+b,function(d){var e=new a.SkillData;e.data=d.data,e.useNum++,c._dic[b]=e,c.addSrc(b,e)}),this._preLoadDic[b]=!0)},c.prototype.getSkill=function(b,c,d){var e=this;void 0===d&&(d=null);var f,g=b+c,h=this._skillDic[g];if(h)for(var i=0;i<h.length;i++)if(f=h[i],f.isDeath&&0==f.useNum)return f.reset(),f.isDeath=!1,f;if(f=new a.Skill,f.name=c,f.isDeath=!1,this._skillDic[g]||(this._skillDic[g]=new Array),this._skillDic[g].push(f),this._dic[b])return f.setData(this._dic[b].data[f.name],this._dic[b]),f.key=g,this._dic[b].useNum++,f;if(this._loadDic[b]){var j=new Object;return j.name=c,j.skill=f,j.callback=d,this._loadDic[b].push(j),f}this._loadDic[b]=new Array;var j=new Object;return j.name=c,j.skill=f,j.callback=d,this._loadDic[b].push(j),a.ResManager.getInstance().loadSkillRes(a.Scene_data.fileRoot+b,function(a){e.loadSkillCom(b,a)}),f},c.prototype.loadSkillCom=function(b,c){var d=new a.SkillData;d.data=c.data;for(var e=0;e<this._loadDic[b].length;e++){var f=this._loadDic[b][e];f.skill.hasDestory||(f.skill.setData(d.data[f.name],d),f.skill.key=b+f.name,d.useNum++)}this._dic[b]=d,this.addSrc(b,d);for(var e=0;e<this._loadDic[b].length;e++){var f=this._loadDic[b][e];f.callback&&f.callback()}this._loadDic[b].length=0,this._loadDic[b]=null},c.prototype.addSrc=function(b,c){for(var d in c.data){var e=new a.Skill;e.name=d,e.isDeath=!0,e.src=!0,e.setData(c.data[d],c),c.addSrcSkill(e);var f=b+d;this._skillDic[f]||(this._skillDic[f]=new Array),this._skillDic[f].push(e)}},c.prototype.playSkill=function(a){this._skillAry.push(a),a.play()},c.prototype.removeSkill=function(a){var b=this._skillAry.indexOf(a);-1!=b&&this._skillAry.splice(b,1)},c.prototype.gcSkill=function(a){for(var b in this._skillDic){var c=this._skillDic[b],d=c.indexOf(a);-1!=d&&c.splice(d,1)}},c.prototype.gc=function(){for(var b in this._dic){var c=this._dic[b];c.useNum<=0&&(c.idleTime++,c.idleTime>=a.ResCount.GCTime&&c.testDestory()&&(c.destory(),delete this._dic[b]))}for(var b in this._skillDic){for(var d=this._skillDic[b],e=d.length-1;e>=0;e--)d[e].isDeath&&d[e].useNum<=0&&(d[e].idleTime++,d[e].idleTime>=a.ResCount.GCTime&&(d[e].src||(d[e].destory(),d.splice(e,1))));0==d.length&&delete this._skillDic[b]}},c}(a.ResGC);a.SkillManager=b;var c=function(){function b(){var a=this;this.upFun=function(b){a.update(b)}}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.update=function(b){if(this.ctime+=b,this.ctime>this.time)return a.TimeUtil.removeFrameTick(this.upFun),void a.Scene_data.cam3D.offset.setTo(0,0,0);var c=(Math.random()-.5)*this.amp,d=(Math.random()-.5)*this.amp,e=(Math.random()-.5)*this.amp;a.Scene_data.cam3D.offset.setTo(c,d,e)},b.prototype.shock=function(b,c){this.time=b,this.ctime=0,this.amp=c,a.TimeUtil.addFrameTick(this.upFun)},b}();a.ShockUtil=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.isDeath=!0,a.src=!1,a.time=0,a.targetFlag=0,a.targetShockFlag=0,a.needSound=!1,a.hasDestory=!1,a.actionEnd=!1,a}return __extends(c,b),c.prototype.setData=function(b,c){this.hasDestory||(this.skillVo=new a.SkillVo,this.skillVo.setData(b),this.setKeyAry(),this.trajectoryAry=new Array,this._skillData=c)},c.prototype.getBloodTime=function(){return this.skillVo?this.skillVo.bloodTime:a.SkillVo.defaultBloodTime},c.prototype.play=function(){if(!this.skillVo)return void this.skillComplete();if(this.active&&this.active instanceof a.Display3dMovie){var b=this.active;b.play(this.skillVo.action,this.actionEnd?1:2,!1)}},c.prototype.setKeyAry=function(){var b=this;if(this.keyAry=new Array,this.skillVo.types==a.SkillType.FixEffect)for(var c=0;c<this.skillVo.keyAry.length;c++){var d=new a.SkillFixEffect;d.setInfo(this.skillVo.keyAry[c]),d.removeCallFun=function(a){b.removeKey(a)},d.active=this.active,this.keyAry.push(d)}else if(this.skillVo.types==a.SkillType.TrajectoryDynamicTarget||this.skillVo.types==a.SkillType.TrajectoryDynamicPoint)for(var c=0;c<this.skillVo.keyAry.length;c++){var e,f=this.skillVo.keyAry[c];e=1==f.multype?new a.SkillMulTrajectory:new a.SkillTrajectory,e.setInfo(this.skillVo.keyAry[c]),this.keyAry.push(e)}},c.prototype.removeKey=function(a){this.completeNum++,this.completeNum==this.keyAry.length&&this.skillComplete()},c.prototype.removeSkillForce=function(){if(this.keyAry)for(var a=0;a<this.keyAry.length;a++)this.keyAry[a].reset();this.skillComplete(),this.reset()},c.prototype.skillComplete=function(){a.SkillManager.getInstance().removeSkill(this),this.isDeath=!0,this.completeFun&&this.completeFun(),this.idleTime=0},c.prototype.reset=function(){this.time=0,this.completeNum=0,this.active=null,this.completeFun=null,this.targetFlag=0,this.targetShockFlag=0,this.soundPlay=!1,this.needSound=!1},c.prototype.update=function(a){this.time+=a,this.time>c.MaxTime&&this.skillComplete(),this.getKeyTarget(),this.getShockTarget(),this.updateTrajector(a)},c.prototype.updateTrajector=function(a){for(var b=0;b<this.trajectoryAry.length;b++)this.trajectoryAry[b].update(a)},c.prototype.getKeyTarget=function(){if(this.keyAry){for(var b=this.targetFlag;b<this.keyAry.length&&this.keyAry[b].time<this.time;b++){if(this.keyAry[b].addToRender(),this.skillVo.types==a.SkillType.TrajectoryDynamicTarget||this.skillVo.types==a.SkillType.TrajectoryDynamicPoint){var c=this.keyAry[b];this.trajectoryAry.push(c)}b++,this.targetFlag=b}this.getSound()}},c.prototype.getShockTarget=function(){if(this.skillVo.shockAry&&this.needSound)for(var b=this.targetShockFlag;b<this.skillVo.shockAry.length&&this.skillVo.shockAry[b].time<this.time;b++)a.ShockUtil.getInstance().shock(this.skillVo.shockAry[b].lasttime,this.skillVo.shockAry[b].amp),b++,this.targetShockFlag=b},c.prototype.getSound=function(){this.skillVo.sound&&!this.soundPlay&&this.needSound&&this.skillVo.sound.frame<this.time&&(a.SoundManager.getInstance().playSkillSound(this.skillVo.sound.url),this.soundPlay=!0)},c.prototype.configFixEffect=function(b,c,d){if(void 0===c&&(c=null),void 0===d&&(d=null),this.active=b,this.completeFun=c,this.keyAry)for(var e=0;e<this.keyAry.length;e++)if(this.skillVo.types==a.SkillType.FixEffect){var f=this.keyAry[e];f.active=b,d&&d.length?e>d.length-1?f.outPos=d[d.length-1]:f.outPos=d[e]:f.outPos=null}},c.prototype.configTrajectory=function(b,c,d,e,f){var g=this;if(void 0===d&&(d=null),void 0===e&&(e=0),void 0===f&&(f=null),this.active=b,this.completeFun=d,this.completeNum=0,this.keyAry)for(var h=0;h<this.keyAry.length;h++)if(this.skillVo.types==a.SkillType.TrajectoryDynamicTarget||this.skillVo.types==a.SkillType.TrajectoryDynamicPoint){var i=this.keyAry[h];i.setPlayData(b,c,function(a){g.removeTrajectory(a)},e,0==h?f:null)}},c.prototype.configMulTrajectory=function(b,c,d,e){var f=this;if(void 0===e&&(e=null),this.active=c,this.completeFun=e,this.completeNum=0,this.keyAry)for(var g=0;g<this.keyAry.length;g++)if(this.skillVo.types==a.SkillType.TrajectoryDynamicTarget){var h=this.keyAry[g];h.setMulPlayData(b,d,function(a){f.removeTrajectory(a)},2)}},c.prototype.removeTrajectory=function(a){var b=this.trajectoryAry.indexOf(a);-1!=b&&this.trajectoryAry.splice(b,1),this.completeNum++,this.completeNum==this.keyAry.length&&this.skillComplete()},c.prototype.destory=function(){if(this.skillVo=null,this.name=null,this.keyAry){for(var a=0;a<this.keyAry.length;a++)this.keyAry[a].destory();this.keyAry.length=0,this.keyAry=null}if(this.active=null,this.completeFun=null,this.trajectoryAry){for(var a=0;a<this.trajectoryAry.length;a++)this.trajectoryAry[a].destory();this.trajectoryAry.length=0,this.trajectoryAry=null}this._skillData&&this._skillData.useNum--,this._skillData=null,this.hasDestory=!0},c.MaxTime=5e3,c}(a.ResCount);a.Skill=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.srcList=new Array,a}return __extends(c,b),c.prototype.addSrcSkill=function(a){this.srcList.push(a)},c.prototype.destory=function(){for(var b=0;b<this.srcList.length;b++)this.srcList[b].destory(),a.SkillManager.getInstance().gcSkill(this.srcList[b])},c.prototype.testDestory=function(){for(var b=0;b<this.srcList.length;b++)if(!(this.srcList[b].isDeath&&this.srcList[b].idleTime>=a.ResCount.GCTime))return!1;return!0},c}(a.ResCount);a.SkillData=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.prototype.setData=function(b){this.keyAry=new Array,this.action=b.action,this.skillname=b.skillname,this.bloodTime=b.blood,this.types=b.type,this.types==c.FixEffect?this.keyAry=this.getFixEffect(b.data):(this.types==c.TrajectoryDynamicTarget||this.types==c.TrajectoryDynamicPoint)&&(this.keyAry=this.getTrajectoryDynamicTarget(b.data)),b.sound&&(this.sound=new a.SkillKeyVo,this.sound.frame=b.sound.time*a.Scene_data.frameTime,this.sound.url=b.sound.name),b.shock&&(this.shockAry=this.getShockAry(b.shock))},b.prototype.getShockAry=function(b){for(var c=new Array,d=0;d<b.length;d++){var e=new a.SkillShockVo;e.setData(b[d]),c.push(e)}return c},b.prototype.getFixEffect=function(b){for(var c=new Array,d=0;d<b.length;d++){var e=new a.SkillFixEffectKeyVo;e.setData(b[d]),c.push(e)}return c},b.prototype.getTrajectoryDynamicTarget=function(b){for(var c=new Array,d=0;d<b.length;d++){var e=new a.SkillTrajectoryTargetKeyVo;e.setData(b[d]),c.push(e)}return c},b.defaultBloodTime=250,b}();a.SkillVo=b;var c=function(){function a(){}return a.TrajectoryDynamicTarget=1,a.FixEffect=4,a.TrajectoryDynamicPoint=3,a}();a.SkillType=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function a(){this.frame=0}return a.prototype.setData=function(a){this.frame=a.frame,this.url=a.url},a}();a.SkillKeyVo=b;var c=function(){function b(){}return b.prototype.setData=function(b){this.time=b.time*a.Scene_data.frameTime,this.lasttime=b.lasttime*a.Scene_data.frameTime,this.amp=b.amp},b}();a.SkillShockVo=c;var d=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.setData=function(c){b.prototype.setData.call(this,c),this.hasSocket=c.hasSocket,this.hasSocket?this.socket=c.socket:(this.pos=new a.Vector3D(c.pos.x,c.pos.y,c.pos.z),this.rotation=new a.Vector3D(c.rotation.x,c.rotation.y,c.rotation.z))},c}(b);a.SkillFixEffectKeyVo=d;var e=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.setData=function(c){b.prototype.setData.call(this,c),this.beginType=c.beginType,0==this.beginType?this.beginPos=new a.Vector3D(c.beginPos.x,c.beginPos.y,c.beginPos.z):1==this.beginType&&(this.beginSocket=c.beginSocket),this.speed=c.speed,c.hitSocket&&(this.hitSocket=c.hitSocket),c.endParticle&&(this.endParticleUrl=c.endParticle),this.multype=c.multype},c}(b);a.SkillTrajectoryTargetKeyVo=e}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.time=0}return b.prototype.addToRender=function(){this.particle&&(this.particle.reset(),this.particle.sceneVisible=!0,a.ParticleManager.getInstance().addParticle(this.particle))},b.prototype.setInfo=function(b){this.time=b.frame*a.Scene_data.frameTime,this.particle=a.ParticleManager.getInstance().getParticleByte(a.Scene_data.fileRoot+b.url)},b.prototype.reset=function(){this.particle.reset(),a.ParticleManager.getInstance().removeParticle(this.particle)},b.prototype.destory=function(){this.particle.destory(),this.particle=null,this.removeCallFun=null},b}();a.SkillKey=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.addToRender=function(){b.prototype.addToRender.call(this),this.particle.addEventListener(a.BaseEvent.COMPLETE,this.onPlayCom,this)},c.prototype.onPlayCom=function(b){void 0===b&&(b=null),this.particle.removeEventListener(a.BaseEvent.COMPLETE,this.onPlayCom,this),a.ParticleManager.getInstance().removeParticle(this.particle),this.removeCallFun(this)},c}(a.SkillKey);a.SkillEffect=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function a(){}return a.prototype.getSocket=function(a,b){this.bindMatrix.clone(b)},a.prototype.getSunType=function(){return 1},a}();a.SkillBugBind=b;var c=function(c){function d(){return null!==c&&c.apply(this,arguments)||this}return __extends(d,c),d.prototype.setInfo=function(a){c.prototype.setInfo.call(this,a);var b=a;this.pos=b.pos,this.rotation=b.rotation,this.hasSocket=b.hasSocket,this.socket=b.socket},d.prototype.addToRender=function(){if(c.prototype.addToRender.call(this),this.outPos)this.particle.x=this.outPos.x,this.particle.y=this.outPos.y,this.particle.z=this.outPos.z,this.particle.rotationX=this.rotation.x,this.particle.rotationY=this.rotation.y+this.active.rotationY,this.particle.rotationZ=this.rotation.z,this.particle.bindTarget=null;else if(this.hasSocket){var d=this.active;this.particle.bindTarget=d,this.particle.bindSocket=this.socket}else{var e=new a.Matrix3D;e.appendRotation(this.active.rotationY,a.Vector3D.Y_AXIS);var f=e.transformVector(this.pos);f.x+=this.active.x,f.y+=this.active.y,f.z+=this.active.z;var g=new b;g.bindMatrix=new a.Matrix3D,g.bindMatrix.appendRotation(this.rotation.x,a.Vector3D.X_AXIS),g.bindMatrix.appendRotation(this.rotation.y,a.Vector3D.Y_AXIS),g.bindMatrix.appendRotation(this.rotation.z,a.Vector3D.Z_AXIS),g.bindMatrix.appendRotation(this.active.rotationY,a.Vector3D.Y_AXIS),g.bindMatrix.appendTranslation(f.x,f.y,f.z),this.particle.bindTarget=g}},d}(a.SkillEffect);a.SkillFixEffect=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._currentPos=new a.Vector3D,c.rotationMatrix=new a.Matrix3D,c._socketMaxrix=new a.Matrix3D,c._currentTargetPos=new a.Vector3D,c}return __extends(c,b),c.prototype.update=function(a){this.path.update(a)},c.prototype.reset=function(){b.prototype.reset.call(this),this.endParticle&&(a.ParticleManager.getInstance().addParticle(this.endParticle),this.endParticle.reset(),this.endParticle.setPos(this._currentTargetPos.x,this._currentTargetPos.y,this._currentTargetPos.z)),this.removeCallFun&&this.removeCallFun(this)},c.prototype.endPlayFun=function(b){void 0===b&&(b=null),a.ParticleManager.getInstance().removeParticle(this.endParticle),this.endParticle.removeEventListener(a.BaseEvent.COMPLETE,this.endPlayFun,this)},c.prototype.setCurrentPos=function(){if(this.data.hitSocket){var a=this.target;return a&&(a.getSocket(this.data.hitSocket,this._socketMaxrix),this._currentTargetPos.setTo(this._socketMaxrix.position.x,this._socketMaxrix.position.y,this._socketMaxrix.position.z)),!0}return this._currentTargetPos.x==this.target.x&&this._currentTargetPos.y==this.target.y&&this._currentTargetPos.z==this.target.z?!1:(this._currentTargetPos.setTo(this.target.x,this.target.y,this.target.z),!0)},c.prototype.addToRender=function(){b.prototype.addToRender.call(this);var c;if(0==this.data.beginType){var d=new a.Matrix3D;d.appendRotation(this.active.rotationY,a.Vector3D.Y_AXIS),c=d.transformVector(this.data.beginPos),this._currentPos.setTo(this.active.x+c.x,this.active.y+c.y,this.active.z+c.z)}else if(1==this.data.beginType){var e=new a.Matrix3D,f=this.active;f.getSocket(this.data.beginSocket,e),c=e.position,this._currentPos.setTo(c.x,c.y,c.z)}this.particle.setPos(this._currentPos.x,this._currentPos.y,this._currentPos.z),this.path.add()},c.prototype.getSocket=function(a,b){b.identity(),b.append(this.rotationMatrix),b.appendTranslation(this._currentPos.x,this._currentPos.y,this._currentPos.z)},c.prototype.getSunType=function(){return 0},c.prototype.setInfo=function(c){b.prototype.setInfo.call(this,c),this.particle.bindTarget=this,this.data=c,this.data.endParticleUrl&&(this.endParticle=a.ParticleManager.getInstance().getParticleByte(a.Scene_data.fileRoot+this.data.endParticleUrl),this.endParticle.addEventListener(a.BaseEvent.COMPLETE,this.endPlayFun,this))},c.prototype.setPlayData=function(b,c,d,e,f){var g=this;void 0===e&&(e=0),void 0===f&&(f=null),this.active=b,this.target=c,this.removeCallFun=d,this._currentPos.setTo(0,0,0),this.rotationMatrix.identity(),this._socketMaxrix.identity(),this._currentTargetPos.setTo(0,0,0),this.path||(this.path=a.PathManager.getNewPath(2),this.path.setData(this,function(){g.reset()},this._currentPos,this.rotationMatrix,this._currentTargetPos,f),this.path.speed=this.data.speed),this.path.reset()},c.prototype.destory=function(){b.prototype.destory.call(this),this.active=null,this.target=null,this.data=null,this._currentPos=null,this.rotationMatrix=null,this._socketMaxrix=null,this._currentTargetPos=null,this.path=null},c}(a.SkillKey);a.SkillTrajectory=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.update=function(a){this.pathMul.update(a)},c.prototype.getSunType=function(){return 1},c.prototype.addToRender=function(){if(this.particle){if(this.particle.reset(),a.ParticleManager.getInstance().addParticle(this.particle),this.currentPosList)for(var b=0;b<this.activeList.length;b++)this.currentPosList[b].setTo(this.activeList[b].x,this.activeList[b].y+10,this.activeList[b].z+5),this.currentPosList[b].w=0;else{this.currentPosList=new Array;for(var b=0;b<this.activeList.length;b++)this.currentPosList.push(new a.Vector3D(this.activeList[b].x,this.activeList[b].y+10,this.activeList[b].z+5));this.pathMul.setInitCurrentPos(this.currentPosList)}this.pathMul.add(),this.particle.setMulPos(this.pathMul.resultAry)}},c.prototype.setMulPlayData=function(b,c,d,e){var f=this;void 0===e&&(e=0),this.activeList=b,this.active=this.activeList[0],this.target=c,this.removeCallFun=d,this._currentPos.setTo(0,0,0),this.rotationMatrix.identity(),this._socketMaxrix.identity(),this._currentTargetPos.setTo(0,0,0),this.pathMul||(this.pathMul=a.PathManager.getNewPath(e),this.pathMul.setData(this,function(){f.reset()},this._currentPos,this.rotationMatrix,this._currentTargetPos),this.pathMul.speed=this.data.speed),this.pathMul.reset()},c.prototype.getMulSocket=function(a){a&&this.pathMul.applyData(a)},c}(a.SkillTrajectory);a.SkillMulTrajectory=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._currentDirect=new a.Vector3D}return b.prototype.update=function(b){if(this.time=b,this.hasReached)return this.endTime+=b,void(this.endTime>200&&this.applyArrive());if(this.skillTrajectory.setCurrentPos()&&(this._currentDirect.x=this.currentTargetPos.x-this.currentPos.x,this._currentDirect.y=this.currentTargetPos.y-this.currentPos.y,this._currentDirect.z=this.currentTargetPos.z-this.currentPos.z,this._currentDirect.normalize(),this._currentDirect.scaleBy(this.speed),this.setRotationMatrix(this.currentTargetPos.subtract(this.currentPos)),0==this._currentDirect.length))return void this.arrive();var c=this._currentDirect.length*this.time;if(!this.hasReached){var d=a.Vector3D.distance(this.currentPos,this.currentTargetPos);this.currentPos.x+=this._currentDirect.x*this.time,this.currentPos.y+=this._currentDirect.y*this.time,this.currentPos.z+=this._currentDirect.z*this.time}c>d&&this.arrive()},b.prototype.setRotationMatrix=function(b){b.normalize();var c=new a.Vector3D(0,0,1),d=c.cross(b);d.normalize();var e=Math.acos(b.dot(c)),f=new a.Quaternion;f.fromAxisAngle(d,e),f.toMatrix3D(this.rotationMatrix)},b.prototype.arrive=function(){this.hasReached=!0},b.prototype.applyArrive=function(){this.endFun(),this.bloodFun&&this.bloodFun()},b.prototype.reset=function(){this.hasReached=!1,this._currentDirect.setTo(0,0,0),this.endTime=0},b.prototype.add=function(){},b.prototype.setData=function(a,b,c,d,e,f){this.skillTrajectory=a,this.currentPos=c,this.rotationMatrix=d,this.currentTargetPos=e,this.endFun=b,this.bloodFun=f},b}();a.SkillPath=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c.basePos=new a.Vector3D,c}return __extends(c,b),c.prototype.add=function(){this.skillTrajectory.setCurrentPos();var b=new a.Vector3D;b.x=this.currentTargetPos.x-this.currentPos.x,b.y=this.currentTargetPos.y-this.currentPos.y,b.z=this.currentTargetPos.z-this.currentPos.z,this.basePos.setTo(this.currentPos.x,this.currentPos.y,this.currentPos.z),this.alltime=b.length/this.speed},c.prototype.update=function(b){if(this.time=b,this.lastTime+=b,this.hasReached)return this.endTime+=b,void(this.endTime>200&&this.applyArrive());this.skillTrajectory.setCurrentPos();var c=this.lastTime/this.alltime;c>1&&(c=1);var d=this.getOffset(c);if(this._currentDirect.x=this.currentTargetPos.x-this.basePos.x,this._currentDirect.y=this.currentTargetPos.y-this.basePos.y,this._currentDirect.z=this.currentTargetPos.z-this.basePos.z,this._currentDirect.normalize(),this._currentDirect.scaleBy(this.speed),this.setRotationMatrix(this.currentTargetPos.subtract(this.basePos)),0==this._currentDirect.length)return void this.arrive();var e=this._currentDirect.length*this.time;if(!this.hasReached){var f=a.Vector3D.distance(this.basePos,this.currentTargetPos);this.basePos.x+=this._currentDirect.x*this.time,this.basePos.y+=this._currentDirect.y*this.time,this.basePos.z+=this._currentDirect.z*this.time,this.setApplyPos(d)}e>f&&this.arrive()},c.prototype.setApplyPos=function(a){this.currentPos.x=this.basePos.x+a.x,this.currentPos.y=this.basePos.y+a.y,this.currentPos.z=this.basePos.z+a.z},c.prototype.getOffset=function(b){b=100*Math.sin(b*Math.PI);var c=this._currentDirect.cross(new a.Vector3D(0,1,0));return c.scaleBy(b),new a.Vector3D},c.prototype.reset=function(){b.prototype.reset.call(this),this.lastTime=0},c}(a.SkillPath);a.SkillSinPath=b;var c=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.getOffset=function(b){b=300*(b-b*b);var c=this._currentDirect.cross(new a.Vector3D(0,-1,0));return c.scaleBy(b),new a.Vector3D},c}(b);a.SkillCosPath=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.lastTime=0,a}return __extends(c,b),c.prototype.setInitCurrentPos=function(a){this.currentPosAry=a,this.allTimeList=new Array;for(var b=0;b<a.length;b++)this.allTimeList.push(0)},c.prototype.add=function(){this.skillTrajectory.setCurrentPos(),this.directAry=new Array;for(var b=0,c=0;c<this.currentPosAry.length;c++){var d=new a.Vector3D;d.x=this.currentTargetPos.x-this.currentPosAry[c].x,d.y=this.currentTargetPos.y-this.currentPosAry[c].y,d.z=this.currentTargetPos.z-this.currentPosAry[c].z;var e=d.length;e>b&&(b=e,this.maxV3d=this.currentPosAry[c]),this.allTimeList[c]=e/this.speed,d.normalize(),d.scaleBy(this.speed),this.directAry.push(d)}this.alltime=b/this.speed,this.setAllData()},c.prototype.setAllData=function(){var a=float2int(this.alltime/33)+8;this.resultAry=new Array;for(var b=0;b<this.currentPosAry.length;b++){var c=new Array;this.resultAry.push(c);for(var d=this.directAry[b],e=0;6>e;e++)c.push([this.currentPosAry[b].x,this.currentPosAry[b].y,this.currentPosAry[b].z]);for(var f=0;a>f;f++){this.lastTime=33*f;var g,h=this.lastTime/this.allTimeList[b],i=h;h>=1?(i=0,g=[this.currentTargetPos.x,this.currentTargetPos.y,this.currentTargetPos.z]):(i-=i*i,i*=250,g=[d.x*this.lastTime+this.currentPosAry[b].x,d.y*this.lastTime+i+this.currentPosAry[b].y,d.z*this.lastTime+this.currentPosAry[b].z]);var j;if(0==f)j=[0,1,0];else{var k=c[2*f-2];j=[g[0]-k[0],g[1]-k[1],g[2]-k[2]];var l=Math.sqrt(j[0]*j[0]+j[1]*j[1]+j[2]*j[2]);j[0]/=l,j[1]/=l,j[2]/=l}c.push(g,j)}}},c.prototype.update=function(b){if(this.time=b,this.lastTime+=b,this.hasReached)return this.endTime+=b,void(this.endTime>200&&this.applyArrive());this.skillTrajectory.setCurrentPos();for(var c=0;c<this.currentPosAry.length;c++){var d=this.lastTime/this.allTimeList[c];d-=d*d,d*=250;var e=this.currentPosAry[c];if(this._currentDirect.x=this.currentTargetPos.x-e.x,this._currentDirect.y=this.currentTargetPos.y-e.y,this._currentDirect.z=this.currentTargetPos.z-e.z,this._currentDirect.normalize(),this._currentDirect.scaleBy(this.speed),this.maxV3d==e&&(this.setRotationMatrix(this.currentTargetPos.subtract(e)),0==this._currentDirect.length))return void this.arrive();var f=this._currentDirect.length*this.time;if(!this.hasReached){var g=a.Vector3D.distance(e,this.currentTargetPos);e.x+=this._currentDirect.x*this.time,e.y+=this._currentDirect.y*this.time,e.z+=this._currentDirect.z*this.time,e.w=d}this.maxV3d==e&&f>g&&this.arrive()}this.currentPos.setTo(this.currentPosAry[0].x,this.currentPosAry[0].y+this.currentPosAry[0].w,this.currentPosAry[0].z)},c.prototype.setData=function(a,c,d,e,f){b.prototype.setData.call(this,a,c,d,e,f,null),this.skillMul=a},c.prototype.applyData=function(a){for(var b=0;b<a.length;b++)a[b].setTo(this.currentPosAry[b].x,this.currentPosAry[b].y+this.currentPosAry[b].w,this.currentPosAry[b].z)},c.prototype.reset=function(){b.prototype.reset.call(this),this.lastTime=0},c}(a.SkillPath);a.SkillMulPath=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.reg=function(a,b){this.dic[a]=b},b.getNewPath=function(a){var b=this.dic[a];return new b},b.init=function(){this.dic[0]=a.SkillPath,this.dic[1]=a.SkillSinPath,this.dic[2]=a.SkillCosPath},b.dic=new Object,b}();a.PathManager=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a.encode=function(a){var b,c=new Uint8Array(a),d=c.length,e="";for(b=0;d>b;b+=3)e+=this.chars[c[b]>>2],e+=this.chars[(3&c[b])<<4|c[b+1]>>4],e+=this.chars[(15&c[b+1])<<2|c[b+2]>>6],e+=this.chars[63&c[b+2]];return d%3===2?e=e.substring(0,e.length-1)+"=":d%3===1&&(e=e.substring(0,e.length-2)+"=="),e},a.decode=function(a){var b,c,d,e,f,g=.75*a.length,h=a.length,i=0;"="===a[a.length-1]&&(g--,"="===a[a.length-2]&&g--);var j=new ArrayBuffer(g),k=new Uint8Array(j);for(b=0;h>b;b+=4)c=this.chars.indexOf(a[b]),d=this.chars.indexOf(a[b+1]),e=this.chars.indexOf(a[b+2]),f=this.chars.indexOf(a[b+3]),k[i++]=c<<2|d>>4,k[i++]=(15&d)<<4|e>>2,k[i++]=(3&e)<<6|63&f;return j},a}();a.Base64=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._loadThreadList=new Array,this._waitLoadList=new Array;for(var a=0;10>a;a++)this._loadThreadList.push(new c)}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.getVersion=function(a){return""},b.prototype.load=function(c,e,f,g,h){if(void 0===g&&(g=null),void 0===h&&(h=null),c&&!(c.length<1)&&-1==c.search("undefined")){var i="/"+c.replace(a.Scene_data.fileRoot,""),j=b.getVersion(i);j&&""!=j||(j="0");var k=new d(c,e,f,g,h);k.version=j;for(var l=0;l<this._loadThreadList.length;l++)if(this._loadThreadList[l].idle)return void this._loadThreadList[l].load(k);this._waitLoadList.push(k)}},b.prototype.loadWaitList=function(){if(!(this._waitLoadList.length<=0))for(var a=0;a<this._loadThreadList.length;a++)if(this._loadThreadList[a].idle)return void this._loadThreadList[a].load(this._waitLoadList.shift())},b.BYTE_TYPE="BYTE_TYPE",b.IMG_TYPE="IMG_TYPE",b.XML_TYPE="XML_TYPE",b}();a.LoadManager=b;var c=function(){function c(){var a=this;this._xhr=new XMLHttpRequest,this._xhr.onreadystatechange=function(){return a._xhr&&4===a._xhr.readyState?0!==a._xhr.status&&200!==a._xhr.status?void a.loadError():void a.loadByteXML():void 0},this._xhr.onprogress=function(b){a._loadInfo.progressFun&&a._loadInfo.progressFun(b.loaded/b.total)},this._xhr.onerror=function(){a.loadError();
},this._img=new Image,this._img.onload=function(){a.loadImg()},this._img.onerror=function(){a.loadError()},this.idle=!0}return c.prototype.load=function(a){this._loadInfo=a,this.idle=!1,this._url=a.url,this._loadInfo.type==b.BYTE_TYPE?(this._xhr.open("GET",a.vurl,!0),this._xhr.responseType="arraybuffer",this._xhr.send()):this._loadInfo.type==b.XML_TYPE?(this._xhr.open("GET",a.vurl,!0),this._xhr.responseType="text",this._xhr.send()):this._loadInfo.type==b.IMG_TYPE&&(this._img.url==a.vurl?this.loadImg():(this._img.url=a.vurl,this._img.src=a.vurl))},c.prototype.loadError=function(){this.idle=!0,this._loadInfo=null,b.getInstance().loadWaitList()},c.prototype.loadByteXML=function(){this._loadInfo.info?this._loadInfo.fun(this._xhr.response,this._loadInfo.info):this._loadInfo.fun(this._xhr.response),this.idle=!0,this._loadInfo=null,b.getInstance().loadWaitList()},c.prototype.loadByteImg=function(){this._img.src="data:image/png;base64,"+a.Base64.encode(this._xhr.response)},c.prototype.loadImg=function(){this._loadInfo.info?this._loadInfo.fun(this._img,this._loadInfo.info):this._loadInfo.fun(this._img),this.idle=!0,this._loadInfo=null,b.getInstance().loadWaitList()},c}();a.LoaderThread=c;var d=function(){function a(a,b,c,d,e){void 0===d&&(d=null),void 0===e&&(e=null),this.url=a,this.type=b,this.fun=c,this.info=d,this.progressFun=e}return Object.defineProperty(a.prototype,"vurl",{get:function(){return this.url+"?v="+this.version},enumerable:!0,configurable:!0}),a}();a.LoadInfo=d}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._loadList=new Object,a}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.getObjData=function(b,c){var d=this;if(this._dic[b])return c(this._dic[b]),void this._dic[b].useNum++;var e;this._loadList[b]||(this._loadList[b]=new Array,a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a){d.loadObjCom(a,b)})),e=this._loadList[b],e.push(c)},c.prototype.registerUrl=function(a){this._dic[a]&&this._dic[a].useNum++},c.prototype.releaseUrl=function(a){this._dic[a]&&this._dic[a].clearUseNum()},c.prototype.gc=function(){b.prototype.gc.call(this)},c.prototype.readFloatNrm=function(a,b){var c=a.readInt();if(c>0)for(var d=0;c>d;d++)b.push(a.readFloat())},c.prototype.loadObjCom=function(b,c){if(!this._dic[c]){var d=new a.ObjData,e=new a.Pan3dByteArray(b),f=e.readInt();e.readUTF();f>=20?this.readObj2OneBuffer(e,d):(a.BaseRes.readFloatTwoByte(e,d.vertices),a.BaseRes.readFloatTwoByte(e,d.uvs),a.BaseRes.readFloatOneByte(e,d.lightuvs),a.BaseRes.readFloatTwoByte(e,d.normals),a.BaseRes.readIntForTwoByte(e,d.indexs),a.BaseRes.readFloatTwoByte(e,d.tangents),a.BaseRes.readFloatTwoByte(e,d.bitangents),d.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(d.vertices),d.uvBuffer=a.Scene_data.context3D.uploadBuff3D(d.uvs),d.lightUvBuffer=a.Scene_data.context3D.uploadBuff3D(d.lightuvs),d.normalsBuffer=a.Scene_data.context3D.uploadBuff3D(d.normals)),d.treNum=d.indexs.length,d.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(d.indexs),this._dic[c]=d;var g=this._loadList[c];if(g){for(var h=0;h<g.length;h++)g[h](d);delete this._loadList[c]}return d}},c.prototype.readObj2OneBuffer=function(b,c){for(var d,e=new Array,e=new Array,f=0,g=0;6>g;g++){var h=b.readBoolean();if(e.push(h),h)switch(g){case 1:f+=2;break;case 2:f+=2;break;default:f+=3}}d=b.readFloat();d*=4*f;var i=new ArrayBuffer(d),j=new DataView(i),k=3,l=k+2,m=e[2]?l+2:k+2,n=m+3,o=n+3;a.BaseRes.readBytes2ArrayBuffer(b,j,3,0,f),a.BaseRes.readBytes2ArrayBuffer(b,j,2,k,f),a.BaseRes.readBytes2ArrayBuffer(b,j,2,l,f,1),a.BaseRes.readBytes2ArrayBuffer(b,j,3,m,f),a.BaseRes.readBytes2ArrayBuffer(b,j,3,n,f),a.BaseRes.readBytes2ArrayBuffer(b,j,3,o,f),a.BaseRes.readIntForTwoByte(b,c.indexs),c.vertexBuffer=a.Scene_data.context3D.uploadBuff3DArrayBuffer(i),c.compressBuffer=!0,c.uvsOffsets=4*k,c.lightuvsOffsets=4*l,c.normalsOffsets=4*m,c.tangentsOffsets=4*n,c.bitangentsOffsets=4*o,c.stride=4*f},c.prototype.creatTBNBuffer=function(b){b.tangentBuffer=a.Scene_data.context3D.uploadBuff3D(b.tangents),b.bitangentBuffer=a.Scene_data.context3D.uploadBuff3D(b.bitangents)},c}(a.ResGC);a.ObjDataManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a._loadDic=new Object,a}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.getMeshData=function(b,c,d){var e=this;return void 0===d&&(d=1),this._dic[b]&&this._dic[b].ready?(c(this._dic[b]),void this._dic[b].useNum++):this._loadDic[b]?void this._loadDic[b].push(c):(this._loadDic[b]=new Array,this._loadDic[b].push(c),void a.ResManager.getInstance().loadRoleRes(a.Scene_data.fileRoot+b,function(a){e.roleResCom(a,c)},d))},c.prototype.roleResCom=function(a,b){var c=a.roleUrl,d=this._dic[c];d.loadMaterial(),d.setAction(a.actionAry,c),d.url=c,a.ambientLightColor&&(d.lightData=[[a.ambientLightColor.x,a.ambientLightColor.y,a.ambientLightColor.z],[a.nrmDircet.x,a.nrmDircet.y,a.nrmDircet.z],[a.sunLigthColor.x,a.sunLigthColor.y,a.sunLigthColor.z]]);for(var e=0;e<this._loadDic[c].length;e++)this._loadDic[c][e](d),d.useNum++;delete this._loadDic[c],d.ready=!0},c.prototype.gc=function(){b.prototype.gc.call(this)},c.prototype.readData=function(b,c,d,e){var f=new a.SkinMesh;f.fileScale=b.readFloat(),e>=19?f.tittleHeight=b.readFloat():f.tittleHeight=50,f.hitBox=new a.Vector2D(20,20),e>=23&&(f.hitBox.x=b.readFloat(),f.hitBox.y=b.readFloat()),f.makeHitBoxItem();for(var g=b.readInt(),h=new Object,i=0;g>i;i++){var j=new a.MeshData;e>=35&&(j.bindPosAry=this.readBindPosByte(b),j.getBindPosMatrix()),e>=21?this.readMesh2OneBuffer(b,j):(a.BaseRes.readFloatTwoByte(b,j.vertices),a.BaseRes.readFloatTwoByte(b,j.tangents),a.BaseRes.readFloatTwoByte(b,j.bitangents),a.BaseRes.readFloatTwoByte(b,j.normals),a.BaseRes.readFloatTwoByte(b,j.uvs),a.BaseRes.readIntForOneByte(b,j.boneIDAry),a.BaseRes.readFloatOneByte(b,j.boneWeightAry),a.BaseRes.readIntForTwoByte(b,j.indexs),a.BaseRes.readIntForTwoByte(b,j.boneNewIDAry),this.uploadMesh(j)),j.treNum=j.indexs.length,j.materialUrl=b.readUTF(),j.materialParamData=a.BaseRes.readMaterialParamData(b);for(var k=b.readInt(),l=0;k>l;l++){var m=new a.BindParticle(b.readUTF(),b.readUTF());j.particleAry.push(m),h[m.url]=!0}f.addMesh(j)}for(var n in h)a.ParticleManager.getInstance().registerUrl(n);if(f.allParticleDic=h,35>e)for(var o=this.readBindPosByte(b),p=0;p<f.meshAry.length;p++)f.meshAry[p].bindPosAry=o,f.meshAry[p].getBindPosMatrix();var q=b.readInt();f.boneSocketDic=new Object;for(var l=0;q>l;l++){var r=new a.BoneSocketData;r.name=b.readUTF(),r.boneName=b.readUTF(),r.index=b.readInt(),r.x=b.readFloat(),r.y=b.readFloat(),r.z=b.readFloat(),r.rotationX=b.readFloat(),r.rotationY=b.readFloat(),r.rotationZ=b.readFloat(),f.boneSocketDic[r.name]=r}return this._dic[d]=f,f},c.prototype.readBindPosByte=function(a){for(var b=a.readInt(),c=new Array,d=0;b>d;d++){var e=new Array(a.readFloat(),a.readFloat(),a.readFloat(),a.readFloat(),a.readFloat(),a.readFloat());c.push(e)}return c},c.prototype.readMesh2OneBuffer=function(b,c){for(var d=b.readInt(),e=new Array,f=0,g=0;5>g;g++){var h=b.readBoolean();e.push(h),h&&(f+=1==g?2:3)}f+=8,d*=4*f;var i,j=3,k=j+2,l=k+3,m=l+3;i=e[2]?e[4]?m+3:k+3:j+2;var n=i+4,o=new ArrayBuffer(d),p=new DataView(o);a.BaseRes.readBytes2ArrayBuffer(b,p,3,0,f),a.BaseRes.readBytes2ArrayBuffer(b,p,2,j,f),a.BaseRes.readBytes2ArrayBuffer(b,p,3,k,f),a.BaseRes.readBytes2ArrayBuffer(b,p,3,l,f),a.BaseRes.readBytes2ArrayBuffer(b,p,3,m,f),a.BaseRes.readBytes2ArrayBuffer(b,p,4,i,f,2),a.BaseRes.readBytes2ArrayBuffer(b,p,4,n,f,1),a.BaseRes.readIntForTwoByte(b,c.indexs),a.BaseRes.readIntForTwoByte(b,c.boneNewIDAry),c.compressBuffer=!0,c.uvsOffsets=4*j,c.normalsOffsets=4*k,c.tangentsOffsets=4*l,c.bitangentsOffsets=4*m,c.boneIDOffsets=4*i,c.boneWeightOffsets=4*n,c.stride=4*f,c.vertexBuffer=a.Scene_data.context3D.uploadBuff3DArrayBuffer(o),c.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(c.indexs)},c.prototype.cloneMeshData=function(a,b){var c=a.vertices,d=a.normals,e=a.uvs,f=a.boneIDAry,g=a.boneWeightAry,h=a.indexs;a.vertices=new Array,a.normals=new Array,a.uvs=new Array,a.boneIDAry=new Array,a.boneWeightAry=new Array,a.indexs=new Array;for(var i=c.length/3,j=0;b>j;j++){a.vertices=a.vertices.concat(c),a.normals=a.normals.concat(d),a.boneIDAry=a.boneIDAry.concat(f),a.boneWeightAry=a.boneWeightAry.concat(g);for(var k=0;k<e.length;k+=2)a.uvs.push(e[k],e[k+1],j);for(var k=0;k<h.length;k++)a.indexs.push(h[k]+j*i)}a.treNum=a.indexs.length},c.prototype.uploadMesh=function(b){b.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(b.vertices),b.uvBuffer=a.Scene_data.context3D.uploadBuff3D(b.uvs),b.boneIdBuffer=a.Scene_data.context3D.uploadBuff3D(b.boneIDAry),b.boneWeightBuffer=a.Scene_data.context3D.uploadBuff3D(b.boneWeightAry),b.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(b.indexs)},c.prototype.uploadPbrMesh=function(b,c){b.normalsBuffer=a.Scene_data.context3D.uploadBuff3D(b.normals),c&&(b.tangentBuffer=a.Scene_data.context3D.uploadBuff3D(b.tangents),b.bitangentBuffer=a.Scene_data.context3D.uploadBuff3D(b.bitangents))},c.prototype.preLoad=function(a){this.getMeshData(a,function(a){a.loadMaterial()})},c}(a.ResGC);a.MeshDataManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function b(){this._dic=new Object}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.getAnimData=function(b,c){var d=this;return this._dic[b]?void c(this._dic[b]):void a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(c,e){var f=d.readData(new a.Pan3dByteArray(c),b);e(f)},c)},b.prototype.getAnimDataImmediate=function(a){return this._dic[a]},b.prototype.clearAnim=function(a){delete this._dic[a]},b.prototype.readData=function(b,c){var e=new Array,f=new Array,g=new a.AnimData;g.inLoop=b.readInt();for(var h=b.readInt(),i=0;h>i;i++)g.inter.push(b.readInt());h=b.readInt();for(var i=0;h>i;i++)g.bounds.push(b.readVector3D());g.nameHeight=b.readInt(),h=b.readInt();for(var i=0;h>i;i++){var j=new d;j.father=b.readInt(),j.changtype=b.readInt(),j.startIndex=b.readInt(),j.tx=b.readFloat(),j.ty=b.readFloat(),j.tz=b.readFloat(),j.qx=b.readFloat(),j.qy=b.readFloat(),j.qz=b.readFloat(),e.push(j)}this.readFrameData(b,f),h=b.readInt();for(var i=0;h>i;i++)g.posAry.push(b.readVector3D());return g.matrixAry=this.processFrame(f,e),this._dic[c]=g,g},b.prototype.readFrameData=function(a,b){for(var c=this.readFrameTypeData(a),d=a.readBoolean(),e=a.readFloat(),f=a.readInt(),g=0;f>g;g++){var h=a.readInt(),i=new Array;b.push(i);for(var j=0;h>j;j++)c[j]?i.push(a.readFloatTwoByte(e)):d?i.push(a.readFloat()):i.push(a.readShort()/32767)}},b.prototype.readFrameTypeData=function(a){for(var b=new Array,c=a.readInt(),d=0;c>d;d++)b.push(a.readBoolean());return b},b.prototype.processFrame=function(a,b){for(var c=new Array,d=0;d<a.length;d++)c.push(this.frameToBone(a[d],b));return this.setFrameToMatrix(c)},b.prototype.frameToBone=function(a,b){for(var d=new Array,e=0;e<b.length;e++){var f=new c;f.father=b[e].father;var g=0;1&b[e].changtype?(f.tx=a[b[e].startIndex+g],++g):f.tx=b[e].tx,2&b[e].changtype?(f.ty=a[b[e].startIndex+g],++g):f.ty=b[e].ty,4&b[e].changtype?(f.tz=a[b[e].startIndex+g],++g):f.tz=b[e].tz,8&b[e].changtype?(f.qx=a[b[e].startIndex+g],++g):f.qx=b[e].qx,16&b[e].changtype?(f.qy=a[b[e].startIndex+g],++g):f.qy=b[e].qy,32&b[e].changtype?(f.qz=a[b[e].startIndex+g],++g):f.qz=b[e].qz,d.push(f)}return d},b.prototype.setFrameToMatrix=function(b){for(var c=new Array,d=0;d<b.length;d++){var e=b[d],f=new a.Quaternion,g=new a.Matrix3D,h=new Array;c.push(h);for(var i=0;i<e.length;i++){var j=e[i];if(f=new a.Quaternion(j.qx,j.qy,j.qz),f.w=this.getW(f.x,f.y,f.z),-1==j.father)g=f.toMatrix3D(),g.appendTranslation(j.tx,j.ty,j.tz),g.appendRotation(-90,a.Vector3D.X_AXIS),h.push(g);else{e[j.father];g=f.toMatrix3D(),g.appendTranslation(j.tx,j.ty,j.tz),g.append(h[j.father]),h.push(g)}}for(i=0;i<h.length;i++)h[i].appendScale(-1,1,1)}return c},b.prototype.getW=function(a,b,c){var d=1-(a*a+b*b+c*c);return d=0>d?0:-Math.sqrt(d)},b}();a.AnimManager=b;var c=function(){function a(){}return a}(),d=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.clone=function(){var a=new b;return a.tx=this.tx,a.ty=this.ty,a.tz=this.tz,a.tw=this.tw,a.qx=this.qx,a.qy=this.qy,a.qz=this.qz,a.qw=this.qw,a.changtype=this.changtype,a.name=this.name,a.father=this.father,a.startIndex=this.startIndex,a.matrix=this.matrix,a},b}(c)}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._defaultVec=new Array;for(var b=[.4444730390920146,-.3834955622240026,-.33124467509627725,.09365654209093091,-.05673310882817577,.2120523322966496,.02945768486978205,-.04965996229802928,-.1136529129285836],c=0;9>c;c++)this._defaultVec.push(new a.Vector3D(b[c],b[c],b[c]))}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.setLightProbeData=function(a){this._dataAry=a},b.prototype.clear=function(){this._dataAry=null},b.prototype.getData=function(a){if(!this._dataAry)return this._defaultVec;for(var b=0;b<this._dataAry.length;b++){var c=this._dataAry[b];if(this.testPoint(c,a)){var d=c.postion,e=a.subtract(d);return this.getResultData(c.posItem,float2int(e.x/c.betweenNum),float2int(e.z/c.betweenNum),float2int(e.y/c.betweenNum),c.betweenNum,e)}}return this._defaultVec},b.prototype.testPoint=function(a,b){var c=(a.cubeVec.x-1)*a.betweenNum,d=(a.cubeVec.y-1)*a.betweenNum,e=(a.cubeVec.z-1)*a.betweenNum,f=b.x-a.postion.x,g=b.y-a.postion.y,h=b.z-a.postion.z;return f>=0&&c>f&&g>=0&&d>g&&h>=0&&e>h?!0:!1},b.prototype.getResultData=function(b,d,e,f,g,h){var i=new Array;i.push(new c(b[d][e][f],h)),i.push(new c(b[d+1][e][f],h)),i.push(new c(b[d][e+1][f],h)),i.push(new c(b[d+1][e+1][f],h)),i.push(new c(b[d][e][f+1],h)),i.push(new c(b[d+1][e][f+1],h)),i.push(new c(b[d][e+1][f+1],h)),i.push(new c(b[d+1][e+1][f+1],h));for(var j=0,k=0;k<i.length;k++)j+=i[k].dis;for(k=0;k<i.length;k++)i[k].setBais(j);var l=0;for(k=0;k<i.length;k++)l+=i[k].bais;for(k=0;k<i.length;k++)i[k].bais=i[k].bais/l;var m=new Array;for(k=0;9>k;k++){for(var n=new a.Vector3D,o=0;o<i.length;o++){var p=new a.Vector3D(i[o].vecNum[k].x,i[o].vecNum[k].y,i[o].vecNum[k].z);p.scaleBy(i[o].bais),n=n.add(p)}m.push(n)}return m},b}();a.LightProbeManager=b;var c=function(){function b(b,c){this.pos=new a.Vector3D(b.x,b.y,b.z),this.vecNum=b.resultSHVec,this.dis=a.Vector3D.distance(this.pos,c)}return b.prototype.setBais=function(a){this.bais=this.dis/a*(this.dis/a),this.bais=1/this.bais},b}()}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a._loadDic=new Object,a}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.getGroupData=function(b,c){var d=this;if(this._dic[b]){var e=this._dic[b];return e.useNum++,void c(e)}if(this._loadDic[b])return void this._loadDic[b].push(c);this._loadDic[b]=new Array,this._loadDic[b].push(c);var f=new a.GroupRes;f.load(b,function(){for(var a=d._loadDic[b],c=0;c<a.length;c++){var e=a[c];e(f)}d._dic[b]=f,delete d._loadDic[b],f.initReg()})},c}(a.ResGC);a.GroupDataManager=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.setData=function(b){this.navmeshData=b,this.heightItem=this.navmeshData.heightItem,this.jumpItem=this.navmeshData.jumpItem,this.midu=this.navmeshData.midu,this.aPos=new a.Vector3D(this.navmeshData.aPos.x,this.navmeshData.aPos.y,this.navmeshData.aPos.z),this.makeStarGraph(this.navmeshData.astarItem),this.astarWidth=this.heightItem[0].length,this.astarHeight=this.heightItem.length,a.SceneManager.getInstance().fixAstart(new a.Vector2D(this.aPos.x,this.midu*this.astarHeight+this.aPos.z)),this.mathAreaRect(),this.mathMinMapRect()},Object.defineProperty(b,"sceneVectList",{set:function(a){this._sceneVectList=a,this._frist=!0},enumerable:!0,configurable:!0}),b.getJumpDataByV2d=function(a,b){return this.jumpItem&&this.jumpItem.length&&this.jumpItem[b]&&1==this.jumpItem[b][a]?!0:!1},b.mathMinMapRect=function(){var c=(b.navmeshData.midu,b.navmeshData.astarItem[0].length),d=b.navmeshData.astarItem.length,e=b.navmeshData.aPos.x+c*b.navmeshData.midu,f=b.navmeshData.aPos.z+d*b.navmeshData.midu;e=Math.max(Math.abs(b.navmeshData.aPos.x),Math.abs(e)),f=Math.max(Math.abs(b.navmeshData.aPos.z),Math.abs(f));var g=Math.max(e,f);g+=100,g=Math.round(g);var h=new a.Rectangle;h.x=-g,h.y=-g,h.width=2*g,h.height=2*g,h.x-=1,h.y-=1,h.width+=2,h.height+=2,h.width/=2,h.height/=2,this.minMapRect=h},b.mathAreaRect=function(){this.areaRect=new a.Rectangle,this.areaRect.x=this.aPos.x,this.areaRect.y=this.aPos.z,this.areaRect.width=this.astarWidth*this.midu,this.areaRect.height=this.astarHeight*this.midu},b.clear=function(){this.navmeshData&&(this._bakData=this.navmeshData,this.aPos.setTo(0,0,0),this.navmeshData=null)},b.porcessBak=function(a){a&&this.setData(this._bakData)},b.getHeightByPos=function(b){if(this.heightItem){var c=b.subtract(this.aPos).add(new a.Vector3D(this.midu/2,0,this.midu/2)),d=(this.astarWidth-1)*this.midu,e=(this.astarHeight-1)*this.midu;if(c.x>0&&c.x<=d&&c.z>0&&c.z<=e)return this.getBaseHeightByBitmapdata(c.x/this.midu,c.z/this.midu)}return-500},b.getBaseHeightByBitmapdata=function(a,b){var c=a-float2int(a),d=b-float2int(b),e=this.getBitmapDataHight(float2int(a),float2int(b)),f=this.getBitmapDataHight(float2int(a),Math.ceil(b)),g=this.getBitmapDataHight(Math.ceil(a),float2int(b)),h=this.getBitmapDataHight(Math.ceil(a),Math.ceil(b)),i=(1-c)*(1-d),j=(1-c)*d,k=c*(1-d),l=c*d,m=i*e+j*f+k*g+l*h;return m},b.getBitmapDataHight=function(a,b){return this.heightItem[this.heightItem.length-1-b][a]},b.findPath=function(a,b){return null},b.Path2dTo3d=function(a){for(var b=new Array,c=0;c<a.length;c++)b.push(this.getWorldPosByStart2D(a[c]));return b},b.getWorldPosByStart2D=function(b){if(this.navmeshData){var c=new a.Vector3D(b.x*this.midu,3,b.y*this.midu);return c.x=c.x+this.aPos.x+this.midu/2,c.z=this.aPos.z+this.midu*this.astarHeight-c.z-this.midu/2,c}return new a.Vector3D(10*b.x+this.midu/2,0,10*b.y-this.midu/2)},b.findPath3D=function(a,c){if(this.navmeshData){b.getPosIsCanMove(c)||(c=this.findNearLinePoint(a,c));var d=this.getGrapIndexByPos(a),e=this.getGrapIndexByPos(c);return this.getJumpDataByV2d(e.x,e.y)?null:this.isGridCanWalk(e)&&d?this.findStraightLine(d,e)?[d,e]:this.findPath2D(d,e):null}return[this.getGrapIndexByPos(a),this.getGrapIndexByPos(c)]},b.findStraightLine=function(b,c){var d=new a.Vector2D(c.x-b.x,c.y-b.y);d.normalize();for(var e=Math.round(a.Vector2D.distance(b,c)),f=new a.Vector2D,g=0;e>g;g++){if(f.x=Math.floor(b.x+g*d.x),f.y=Math.floor(b.y+g*d.y),!this.isGridCanWalk(f))return!1;if(f.x=Math.ceil(b.x+g*d.x),f.y=Math.ceil(b.y+g*d.y),!this.isGridCanWalk(f))return!1;if(f.x=Math.round(b.x+g*d.x),f.y=Math.round(b.y+g*d.y),!this.isGridCanWalk(f))return!1}return!0},b.isGridCanWalk=function(a){return a&&this.graphData.grid[a.y]&&this.graphData.grid[a.y][a.x]?0==this.graphData.grid[a.y][a.x].weight?!1:!0:!1},b.findPath2D=function(a,b){return null},b.turnLineAstar=function(a){if(a.length<2)return a;for(var b=[a[0]],c=2;c<a.length;c++)this.findStraightLine(b[b.length-1],a[c])||b.push(a[c-1]);return b.push(a[a.length-1]),a.length!=b.length?this.turnLineAstar(b):b},b.simplifyAstar=function(a){var b=0;if(a.length>1,a.length>2){var c=new Array;c.push(a[0]);for(var d=2;d<a.length;d++){var e=c[c.length-1],f=a[d-1],g=a[d];Math.atan2(f.y-e.y,f.x-e.x)!=Math.atan2(g.y-e.y,g.x-e.x)||b>126?c.push(f):b++}return c.push(a[a.length-1]),c}return a},b.findNearLinePoint=function(c,d){for(;a.Vector3D.distance(c,d)>5;)if(d=this.moveA2B(d,c,1),b.getPosIsCanMove(d))return d;return d},b.moveA2B=function(a,b,c){var d=b.subtract(a);return d.normalize(),d.scaleBy(c),d=d.add(a)},b.getPosIsCanMove=function(a){if(!this.graphData||!this.graphData.grid)return!1;var b=this.getGrapIndexByPos(a);return this.isGridCanWalk(b)},b.makeStarGraph=function(a){},b.blockAry=function(b){for(var c=new Array,d=0;d<b.length;d++)c.push([new a.Vector2D(b[d][0],b[d][1]),new a.Vector2D(b[d][2],b[d][3])]);this.blockList(c)},b.blockList=function(a){this.blockBakData&&this.unblock(),this.blockBakData=new Array;for(var b=0;b<a.length;b++)this.blockPoint(a[b][0],a[b][1])},b.blockPoint=function(b,c){var d=new a.Rectangle;d.y=Math.min(b.x,c.x),d.x=Math.min(b.y,c.y),d.height=Math.abs(b.x-c.x),d.width=Math.abs(b.y-c.y),this.blockRec(d)},b.blockRec=function(a){for(var b=0;b<a.width;b++){for(var c=new Array,d=0;d<a.height;d++){var e=b+a.x,f=d+a.y,g=this.graphData.grid[e][f];c.push({i:e,j:f,w:g.weight}),g.weight=0}this.blockBakData.push(c)}},b.unblock=function(){if(this.blockBakData){for(var a=0;a<this.blockBakData.length;a++)for(var b=0;b<this.blockBakData[a].length;b++){var c=this.blockBakData[a][b];this.graphData.grid[c.i][c.j].weight=c.w}this.blockBakData=null}},b.getGrapIndexByPos=function(b){if(!this.navmeshData)return new a.Vector2D(float2int(b.x/this.midu),float2int(b.z/this.midu));var c=b.subtract(this.aPos).add(new a.Vector3D(0,0,this.midu/2)),d=this.astarWidth*this.midu,e=this.astarHeight*this.midu;return c.x>0&&c.x<d&&c.z>0&&c.z<e?new a.Vector2D(float2int(c.x/this.midu),float2int(this.astarHeight-c.z/this.midu)):null},b.getScenePos=function(b,c){var d=a.Groundposition.getGroundPos(b,c);return this.getLookAtPos(d)},b.getLookAtPos=function(c){var d=new a.Vector3D(a.Scene_data.cam3D.x,a.Scene_data.cam3D.y,a.Scene_data.cam3D.z),e=c.subtract(d);e.normalize();for(var f,g=0;;){g+=2;var h=e.clone();h.scaleBy(g);var i=d.add(h),j=b.getHeightByPos(i);if(j>i.y){f=i;break}if(g>1e3){f=null;break}}return f},b.aPos=new a.Vector3D,b.midu=10,b.astarWidth=0,b.astarHeight=0,b._frist=!1,b.canwalkItem=[],b}();a.AstarUtil=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.A=65,a.B=66,a.C=67,a.D=68,a.E=69,a.F=70,a.G=71,a.H=72,a.I=73,a.J=74,a.K=75,a.L=76,a.M=77,a.N=78,a.O=79,a.P=80,a.Q=81,a.R=82,a.S=83,a.T=84,a.U=85,a.V=86,a.W=87,a.X=88,a.Y=89,a.Z=90,a.Left=37,a.Up=38,a.Right=39,a.Down=40,a.Delete=46,a.F1=112,a.F2=113,a}();a.KeyboardType=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.MouseDown="mousedown",a.MouseUp="mouseup",a.MouseMove="mousemove",a.MouseClick="mouseclick",a.KeyDown="keydown",a.KeyUp="keyup",a.MouseWheel="mousewheel",a.TouchStart="touchstart",a.TouchMove="touchmove",a.TouchEnd="touchend",a.TouchClick="touchstart",a}();a.MouseType=b;var c=function(){function c(){var b=this;this._isUpData=!0,this.speedNum=10,this._keyDic=new Object,this._lostMousePos=new a.Object3D,this._lastFousce=new a.Object3D,this._isMouseDown=!1,setInterval(function(){b.upData()},1e3/60)}return Object.defineProperty(c,"instance",{get:function(){return this._instance||(this._instance=new c),this._instance},enumerable:!0,configurable:!0}),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.init=function(){document.addEventListener(b.MouseDown,this.onMouseDown),document.addEventListener(b.MouseUp,this.onMouseUp),document.addEventListener(b.MouseMove,this.onMouseMove),document.addEventListener(b.KeyDown,this.onKeyDown),document.addEventListener(b.KeyUp,this.onKeyUp)},c.prototype.clearAllEvet=function(){document.removeEventListener(b.MouseDown,this.onMouseDown),document.removeEventListener(b.MouseUp,this.onMouseUp),document.removeEventListener(b.MouseMove,this.onMouseMove),document.removeEventListener(b.KeyDown,this.onKeyDown),document.removeEventListener(b.KeyUp,this.onKeyUp)},c.prototype.clearMouseEvent=function(){document.removeEventListener(b.MouseDown,this.onMouseDown),document.removeEventListener(b.MouseUp,this.onMouseUp),document.removeEventListener(b.MouseMove,this.onMouseMove),this._isUpData=!1},c.prototype.onMouseMove=function(b){var d=c.instance,e=new a.Object3D;e.x=b.pageX,e.y=b.pageY,d._isMouseDown&&(a.Scene_data.cam3D.rotationY=d._lastFousce.rotationY-(e.x-d._lostMousePos.x)/10,a.Scene_data.cam3D.rotationX=d._lastFousce.rotationX-(e.y-d._lostMousePos.y)/10)},c.prototype.onMouseDown=function(b){var d=c.instance;d._isMouseDown=!0,d._lostMousePos.x=b.pageX,d._lostMousePos.y=b.pageY,d._lastFousce.rotationX=a.Scene_data.cam3D.rotationX,d._lastFousce.rotationY=a.Scene_data.cam3D.rotationY},c.prototype.onMouseUp=function(a){var b=c.instance;b._isMouseDown=!1},c.prototype.upData=function(){if(this._isUpData){var b=this._keyDic;b[65]&&this.tureLeft(),b[83]&&this.tureDown(),b[68]&&this.tureRight(),b[87]&&this.tureUp(),b[81]&&(a.Scene_data.cam3D.y-=this.speedNum),b[69]&&(a.Scene_data.cam3D.y+=this.speedNum),a.MathClass.MathCam(a.Scene_data.cam3D)}},c.prototype.tureLeft=function(){var b=new a.Vector3D(-this.speedNum,0,0,1);new a.Matrix3D;this.mathFocus3D(b)},c.prototype.tureRight=function(){var b=new a.Vector3D(this.speedNum,0,0,1);this.mathFocus3D(b)},c.prototype.tureUp=function(){var b=new a.Vector3D(0,0,this.speedNum,1);this.mathFocus3D(b)},c.prototype.tureDown=function(){var b=new a.Vector3D(0,0,-this.speedNum,1);this.mathFocus3D(b)},c.prototype.mathFocus3D=function(b){var c=new a.Matrix3D;c.prependRotation(-a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),c.prependRotation(-a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS),b=c.transformVector(b),a.Scene_data.cam3D.x+=b.x,a.Scene_data.cam3D.y+=b.y,a.Scene_data.cam3D.z+=b.z},c.prototype.onKeyDown=function(a){var b=c.instance._keyDic;b[a.keyCode]=!0,0==a.keyCode},c.prototype.onKeyUp=function(a){var b=c.instance._keyDic;b[a.keyCode]=!1},c}();a.KeyControl=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.getTimer=function(){return Date.now()-a.START_TIME},a.getTimerSecond=function(){return a.getTimer()/1e3},a.saveNowTime=function(){this.lastTime=this.getTimer()},a.getUseTime=function(){return this.getTimer()-this.lastTime},a.getZeroTime=function(a){var b=new Date(1e3*a);return b.setHours(0),b.setMinutes(0),b.setSeconds(0),b.getTime()/1e3},a.getLocalTime=function(a){var b=new Date(1e3*a);return b.toLocaleDateString().replace(/\//g,"-")+" "+b.toTimeString().substr(0,5)},a.getLocalTime0=function(a){var b=new Date(1e3*a);return b.toLocaleDateString().replace(/\//g,"-")},a.getLocalTime1=function(a){var b=new Date(1e3*a);return b.toLocaleDateString().replace(/\//g,"-")+" "+b.toTimeString().substr(0,8)},a.getLocalTime2=function(a){var b=new Date(1e3*a);return b.toTimeString().substr(0,8)},a.getLocalTime6=function(a){var b=new Date(1e3*a);return b.toTimeString().substr(0,5)},a.getLocalTime3=function(a){var b=new Date(1e3*a);return b.toTimeString().substr(3,5)},a.getLocalTime4=function(a){return float2int(a/60)+"分"+a%60+"秒"},a.getLocalTime5=function(a){var b=new Date(1e3*a),c=b.toTimeString().substr(0,8),d=c.split(":");return d[0]+"时"+d[1]+"分"+d[2]+"秒"},a.getDiffTime1=function(a){var b=float2int(a/this.dayTime);a-=b*this.dayTime;var c=float2int(a/this.HourTime);a-=c*this.HourTime;var d=float2int(a/this.MinuteTime);return a-=d*this.MinuteTime,b+"天"+c+"时"+d+"分"+a+"秒"},a.getDiffTime2=function(a){var b=float2int(a/this.HourTime);a-=b*this.HourTime;var c=float2int(a/this.MinuteTime);return a-=c*this.MinuteTime,this.zeroStr(b)+":"+this.zeroStr(c)+":"+this.zeroStr(a)},a.zeroStr=function(a){return a>9?String(a):"0"+a},a.getDelayTimeStr=function(a){var b=Math.floor(a/3600),c="";return c=b>24?Math.floor(b/24)+"天前":b>=1?b+"小时前":"刚刚"},a.compareTime=function(a,b){return!1},a.init=function(){a.START_TIME=Date.now()},a.addTimeTick=function(b,d,e){void 0===e&&(e=0);var f=new c;f.alltime=b,f.fun=d,f.time=b-e,a.timefunAry.push(f)},a.removeTimeTick=function(b){for(var c=0;c<a.timefunAry.length;c++)if(a.timefunAry[c]&&a.timefunAry[c].fun==b){a.timefunAry[c]=null;break}},a.addTimeOut=function(b,c){if(!this.hasTimeOut(c)){var e=new d;e.alltime=b,e.fun=c,e.time=0,a.outTimeFunAry.push(e)}},a.removeTimeOut=function(b){for(var c=0;c<a.outTimeFunAry.length;c++)if(a.outTimeFunAry[c]&&a.outTimeFunAry[c].fun==b){a.outTimeFunAry[c]=null;break}},a.hasTimeOut=function(b){for(var c=0;c<a.outTimeFunAry.length;c++)if(a.outTimeFunAry[c]&&a.outTimeFunAry[c].fun==b)return!0;return!1},a.addFrameTick=function(b){-1==a.funAry.indexOf(b)&&a.funAry.push(b)},a.hasFrameTick=function(b){var c=a.funAry.indexOf(b);return-1!=c?!0:!1},a.removeFrameTick=function(b){var c=a.funAry.indexOf(b);-1!=c&&(a.funAry[c]=null)},a.update=function(){for(var b=a.getTimer()-a.time,c=0;c<a.funAry.length;c++)a.funAry[c]&&a.funAry[c](b);for(var c=0;c<a.timefunAry.length;c++)a.timefunAry[c]&&a.timefunAry[c].update(b);for(var c=a.outTimeFunAry.length-1;c>=0;c--)a.outTimeFunAry[c]&&a.outTimeFunAry[c].update(b)&&(a.outTimeFunAry[c]=null);for(var c=a.funAry.length-1;c>=0;c--)a.funAry[c]||a.funAry.splice(c,1);for(var c=a.timefunAry.length-1;c>=0;c--)a.timefunAry[c]||a.timefunAry.splice(c,1);for(var c=a.outTimeFunAry.length-1;c>=0;c--)a.outTimeFunAry[c]||a.outTimeFunAry.splice(c,1);a.time=a.getTimer()},a.funAry=new Array,a.timefunAry=new Array,a.outTimeFunAry=new Array,a.time=0,a.lastTime=0,a.dayTime=86400,a.HourTime=3600,a.MinuteTime=60,a}();a.TimeUtil=b;var c=function(){function a(){this.alltime=0,this.time=0}return a.prototype.update=function(a){this.time+=a,this.time>=this.alltime&&(this.fun(),this.time=0)},a}(),d=function(){function a(){this.alltime=0,this.time=0}return a.prototype.update=function(a){return this.time+=a,this.time>=this.alltime?(this.fun(),!0):!1},a}()}(Pan3d||(Pan3d={}));var keyChi=["零","一","二","三","四","五","六","七","八","九","十","十一","十二","十三","十四","十五"],Pan3d;!function(a){var b=function(){function b(){this._canvas=document.createElement("canvas"),this._cxt=this._canvas.getContext("2d"),this._gnt=this._cxt.createLinearGradient(0,0,128,0),this._canvas.style.zIndex="1"}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.getImageData=function(b){for(var c=b.pos.length,d=new a.Vector3D,e=0;c>e;e++)hexToArgb(b.color[e],!1,d),this._gnt.addColorStop(b.pos[e]/255,"rgba("+d.x+","+d.y+","+d.z+","+b.alpha[e]+")");return this._cxt.fillStyle=this._gnt,this._cxt.fillRect(0,0,128,2),this._cxt.getImageData(0,0,128,2)},b.prototype.getImageDataByVec=function(a,b){for(var c,d,e=this._cxt.createImageData(64,1),f=0;64>f;f++)c=4*f,d=4*float2int(f/64*b),e.data[c]=a[d],e.data[c+1]=a[d+1],e.data[c+2]=a[d+2],e.data[c+3]=a[d+3];return e},b.prototype.setData=function(){},b}();a.ColorTransition=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.fontData=new a.Dictionary([]),this.fontData_Unit=new a.Dictionary([]),this.makeFontRect()}return b.getInstance=function(){
return this._instance||(this._instance=new b),this._instance},b.prototype.makeFontRect=function(){this.fontData.Red=this.makeBase12pxNum(new a.Vector2D(0,0)),this.fontData.Green=this.makeBase12pxNum(new a.Vector2D(0,15)),this.fontData.Blue=this.makeBase12pxNum(new a.Vector2D(0,30)),this.fontData.White=this.makeBase12pxNum(new a.Vector2D(0,45)),this.fontData.Yellow=this.makeBase12pxNum(new a.Vector2D(0,75)),this.getXmlData()},b.prototype.getXmlData=function(){for(var b=a.UIData.getUiArrByKey(a.UIData.textlist),c=0;c<b.length;c++){var d=String(b[c].name);if(-1!=d.search("A_")){var e=Number(d.substring(5,d.length)),f=new a.UIRectangle;f.pixelX=Number(b[c].ox),f.pixelY=Number(b[c].oy),f.pixelWitdh=Number(b[c].ow),f.pixelHeight=Number(b[c].oh),f.cellX=Number(b[c].cellX),f.cellY=Number(b[c].cellY);for(var g=new a.Rectangle(0,0,f.pixelWitdh/f.cellX,f.pixelHeight),h=new Array,i=0;i<f.cellX;i++)h.push(new a.Rectangle(f.pixelX+i*g.width,f.pixelY,g.width,g.height));this.fontData["NUM"+e]=h}if(-1!=d.search("B_")){var e=Number(d.substring(5,d.length)),f=new a.UIRectangle;f.pixelX=Number(b[c].ox),f.pixelY=Number(b[c].oy),f.pixelWitdh=Number(b[c].ow),f.pixelHeight=Number(b[c].oh),f.cellX=Number(b[c].cellX),f.cellY=Number(b[c].cellY);for(var g=new a.Rectangle(0,0,f.pixelWitdh/f.cellX,f.pixelHeight),h=new Array,i=0;i<f.cellX;i++)h.push(new a.Rectangle(f.pixelX+i*g.width,f.pixelY,g.width,g.height));this.fontData_Unit["BNUM"+e]=h}}},b.prototype.makeBase12pxNum=function(b){var c=new Array;c.push(new a.Rectangle(3,0,9,14)),c.push(new a.Rectangle(14,0,9,14)),c.push(new a.Rectangle(25,0,9,14)),c.push(new a.Rectangle(36,0,9,14)),c.push(new a.Rectangle(47,0,9,14)),c.push(new a.Rectangle(59,0,9,14)),c.push(new a.Rectangle(70,0,9,14)),c.push(new a.Rectangle(81,0,9,14)),c.push(new a.Rectangle(92.5,0,9,14)),c.push(new a.Rectangle(104,0,9,14)),c.push(new a.Rectangle(116,0,9,14)),c.push(new a.Rectangle(126,0,9,14)),c.push(new a.Rectangle(136,0,9,14)),c.push(new a.Rectangle(144,0,9,13)),c.push(new a.Rectangle(154,0,9,13));for(var d=0;d<c.length;d++)c[d].x=c[d].x+b.x,c[d].y=c[d].y+b.y;return c},b.prototype.writeFontToCtxLeft=function(c,d,e,f,g,h){void 0===e&&(e=b.num1),void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=0);for(var i,j=this.fontData[e],k=0,l=0;l<d.length;l++){i=this.getCharId(d[l]);var m=this.getRect(i,e,j);if(!m)return;c.drawImage(a.UIData.textImg,m.x,m.y,m.width,m.height,k+f,g,m.width,m.height),k+=m.width-h}return k},b.prototype.writeFontToCtxRight=function(c,d,e,f,g,h){void 0===e&&(e=b.White),void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=0);for(var i,j=this.fontData[e],k=0,l=this.getAirFontWidth(c,d,e,h),m=0;m<d.length;m++){i=this.getCharId(d[m]);var n=this.getRect(i,e,j);c.drawImage(a.UIData.textImg,n.x,n.y,n.width,n.height,k+f-l,g,n.width,n.height),k+=n.width-h}return l},b.prototype.writeFontToCtxCenten=function(c,d,e,f,g,h){void 0===e&&(e=b.White),void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=0);for(var i,j=this.fontData[e],k=0,l=this.getAirFontWidth(c,d,e,h)/2,m=0;m<d.length;m++){i=this.getCharId(d[m]);var n=this.getRect(i,e,j);c.drawImage(a.UIData.textImg,n.x,n.y,n.width,n.height,k+f-l,g,n.width,n.height),k+=n.width-h}return l},b.prototype.writeFontToSkinName=function(c,d,e,f,g,h){void 0===f&&(f=b.ORANGE_TXT),void 0===g&&(g=a.TextAlign.LEFT),void 0===h&&(h=0);var i=c.getRec(d);c.ctx=a.UIManager.getInstance().getContext2D(i.pixelWitdh,i.pixelHeight,!1);var j;return g==a.TextAlign.LEFT?j=this.writeFontToCtxLeft(c.ctx,e,f,0,0,h):g==a.TextAlign.RIGHT?j=this.writeFontToCtxRight(c.ctx,e,f,i.pixelWitdh,0,h):g==a.TextAlign.CENTER&&(j=this.writeFontToCtxCenten(c.ctx,e,f,i.pixelWitdh/2,0,h)),a.TextureManager.getInstance().updateTexture(c.texture,i.pixelX,i.pixelY,c.ctx),j},b.prototype.writeFontToSkinNameCenter=function(c,d,e,f,g){void 0===f&&(f=b.ORANGE_TXT),void 0===g&&(g=0);var h=c.getRec(d);c.ctx=a.UIManager.getInstance().getContext2D(h.pixelWitdh,h.pixelHeight,!1);for(var i,j=h.pixelWitdh/2,k=h.pixelHeight/2,l=this.fontData[f],m=0,n=this.getAirFontWidth(c.ctx,e,f,g)/2,o=0;o<e.length;o++){i=this.getCharId(e[o]);var p=this.getRect(i,f,l);c.ctx.drawImage(a.UIData.textImg,p.x,p.y,p.width,p.height,m+j-n,k-p.height/2,p.width,p.height),m+=p.width-g}a.TextureManager.getInstance().updateTexture(c.texture,h.pixelX,h.pixelY,c.ctx)},b.prototype.getAirFontWidth=function(a,c,d,e){if(void 0===d&&(d=b.White),void 0===e&&(e=0),void 0==c)return 0;for(var f,g=this.fontData[d],h=0,i=0;i<c.length;i++){f=this.getCharId(c[i]);var j=this.getRect(f,d,g);h+=j.width-e}return h},b.prototype.getRect=function(a,b,c){var d;return d=a>15?this.fontData_Unit["B"+b][a-16]:c[a]},b.prototype.upArtFont=function(c,d,e,f,g,h){void 0===f&&(f=12),void 0===g&&(g=b.White),void 0===h&&(h=a.TextAlign.LEFT);var i=f/12,j=this.fontData[g],k=c.getRec(d);c.ctx=a.UIManager.getInstance().getContext2D(k.pixelWitdh,k.pixelHeight,!1);var l=this.getTotalWandDraw(k,e,j,i,c.ctx,!1),m=this.getXpos(h,l,new a.Rectangle(0,0,k.pixelWitdh,k.pixelHeight));this.getTotalWandDraw(k,e,j,i,c.ctx,!0,m),a.TextureManager.getInstance().updateTexture(c.texture,k.pixelX,k.pixelY,c.ctx)},b.prototype.upArtBase=function(c,d,e,f,g){void 0===f&&(f=b.White),void 0===g&&(g=a.TextAlign.LEFT);var h=1,i=this.fontData[f],j=c.getRec(d);c.ctx=a.UIManager.getInstance().getContext2D(j.pixelWitdh,j.pixelHeight,!1);var k=this.getTotalWandDraw(j,e,i,h,c.ctx,!1),l=this.getXpos(g,k,new a.Rectangle(0,0,j.pixelWitdh,j.pixelHeight));this.getTotalWandDraw(j,e,i,h,c.ctx,!0,l),a.TextureManager.getInstance().updateTexture(c.texture,j.pixelX,j.pixelY,c.ctx)},b.prototype.getXpos=function(b,c,d){var e=0;return b==a.TextAlign.LEFT?e=0:b==a.TextAlign.RIGHT?e=c-d.width:b==a.TextAlign.CENTER&&(e=(d.width-c)/2),e},b.prototype.getTotalWandDraw=function(b,c,d,e,f,g,h,i){void 0===h&&(h=0),void 0===i&&(i=0);for(var j,k=0,l=0;l<c.length;l++){j=this.getCharId(c[l]);var m=d[j];g&&f.drawImage(a.UIData.textImg,m.x,m.y,m.width,m.height,b.x+k+h,b.y,m.width*e,m.height*e),k+=(m.width-i)*e}return k},b.prototype.getCharId=function(a){return"+"==a||"x"==a||"X"==a?10:"-"==a?11:"/"==a?12:":"==a?13:"."==a?14:"%"==a?15:"万"==a?16:"亿"==a?17:"["==a?18:"]"==a?19:(NaN==Number(a)&&alert("MeshVo,GetCharId error:"+a),Number(a))},b.Red="Red",b.Green="Green",b.Blue="Blue",b.White="White",b.Yellow="Yellow",b.BOSSBIGTXT="NUM99",b.CN1="NUM100",b.num101="NUM101",b.num102="NUM102",b.BigYellow="NUM12",b.num99="NUM99",b.GARY_TXT="NUM1",b.ORANGE_TXT="NUM19",b.num1="NUM1",b.num2="NUM2",b.num3="NUM3",b.num4="NUM4",b.num5="NUM5",b.num6="NUM6",b.num7="NUM7",b.num10="NUM10",b.num8="NUM8",b.num9="NUM9",b.num11="NUM11",b.num12="NUM12",b.num13="NUM13",b.num14="NUM14",b.num15="NUM15",b.num16="NUM16",b.num17="NUM17",b.num18="NUM18",b.num19="NUM19",b.num20="NUM20",b.num21="NUM21",b.num22="NUM22",b.num23="NUM23",b.num24="NUM24",b.num25="NUM24",b.num26="NUM26",b.num27="NUM27",b.num28="NUM28",b.num30="NUM30",b.num51="NUM51",b.num52="NUM52",b.num53="NUM53",b.num54="NUM54",b.num55="NUM55",b.num56="NUM56",b.num57="NUM57",b.num58="NUM58",b.num59="NUM59",b.num60="NUM60",b.num61="NUM61",b.numVip="NUM62",b.num63="NUM63",b.num64="NUM64",b.num65="NUM65",b.num66="NUM66",b}();a.ArtFont=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a}();a.TextRegVo=b;var c=function(){function c(){}return c.pushStr=function(a){this.item=new Array;for(var d,e=/\[\]|\[[A-Za-z0-9]{6}\]/g;null!=(d=e.exec(a));){var f=new b;f.begin=d.index,f.end=e.lastIndex,f.color=d.toString(),f.color=f.color.replace("[",""),f.color=f.color.replace("]",""),f.color.length<5?f.color=c.defaultColor:f.color="#"+f.color,this.item.push(f)}},c.pushStrCopy=function(a){this.item=new Array;for(var d,e=/\[\]|\[[A-Za-z0-9]{6}\]/g,f=a;null!=(d=e.exec(a));){var g=new b;g.begin=d.index,g.end=e.lastIndex,g.color=d.toString(),f=f.replace(g.color,"#"),g.color=g.color.replace("[",""),g.color=g.color.replace("]",""),g.color.length<5?g.color=c.defaultColor:(a.replace("["+g.color+"]","#"),g.color="#"+g.color),this.item.push(g)}return f},c.isColor=function(a,b){for(var c=0;c<this.item.length;c++)if(a>=this.item[c].begin&&a<this.item[c].end)return b&&(b.fillStyle=this.item[c].color),!0;return!1},c.getTextMetrics=function(a,b){b||(b=""),this.pushStr(b);for(var c=b,d="",e=0;e<c.length;e++)this.isColor(e,a)||(d+=c[e]);var f=a.measureText(d);return f},c.getTextOnlyTxt=function(a,b){b||(b=""),this.pushStr(b);for(var c=b,d="",e=0;e<c.length;e++)this.isColor(e,a)||(d+=c[e]);return d},c.getNextWords=function(b,c){var d=-1;if("/"==b[c]&&b.length>c+2)for(var e=b[c+0]+b[c+1]+b[c+2],f=0;f<a.UIData.faceItem.length;f++)if(a.UIData.faceItem[f]==e)return f+1;return d},c.wrapText=function(b,d,e,f,g,h,i,j,k,l,m){void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=500),void 0===i&&(i=10),void 0===j&&(j=12),void 0===k&&(k=""),void 0===l&&(l=4),void 0===m&&(m=1),c.defaultColor=e,h=.98*h,""!=k&&(-1!=k.indexOf("[")&&(k="#"+k.substr(1,6)),b.strokeStyle=k,b.lineWidth=l),this.pushStr(d);for(var n=d,o="",p=0,q=1,r=0;n&&r<n.length;r++)if(!this.isColor(r,b)){var s=b.measureText(o.replace("\n","")),t=this.getNextWords(n,r);if(-1==t)s.width>h||"\n"==n[r]?(p+=i,o="",q++,"\n"!=n[r]&&(""!=k&&b.strokeText(n[r],f,g+p),b.fillText(n[r],f,g+p))):(""!=k&&b.strokeText(n[r],f+s.width*m,g+p),b.fillText(n[r],f+s.width*m,g+p)),"\n"!=n[r]&&(o+=n[r]);else{var u=1.4*j,v=new a.Rectangle(f+1*s.width+0,g+p-u/10,u,u);s.width>h&&(p+=i,o="",q++,v=new a.Rectangle(f+0,g+p-u/10,u,u)),this.drawFaceIcon(b,v,t),r+=2,o+="脸1"}}return q},c.wrapTextVertical=function(a,b,d,e,f,g,h,i,j,k,l){void 0===e&&(e=0),void 0===f&&(f=0),void 0===g&&(g=500),void 0===h&&(h=10),void 0===i&&(i=12),void 0===j&&(j=""),void 0===k&&(k=4),void 0===l&&(l=1),c.defaultColor=d,""!=j&&(-1!=j.indexOf("[")&&(j="#"+j.substr(1,6)),a.strokeStyle=j,a.lineWidth=k),this.pushStr(b);for(var m=b,n="",o=2,p=1,q=0,r=0;m&&r<m.length;r++)if(!this.isColor(r,a)){var s=this.getNextWords(m,r);-1==s&&(q>g||"\n"==m[r]?(o+=h,n="",q=0,"\n"!=m[r]&&(""!=j&&a.strokeText(m[r],e+o,q),a.fillText(m[r],e+o,q)),p++):(q+=i+5,""!=j&&a.strokeText(m[r],e+o,q),a.fillText(m[r],e+o,q)),n+=m[r])}return p},c.drawText=function(a,b,e,f,g,h){void 0===f&&(f=500),void 0===g&&(g=10),void 0===h&&(h=12),c.defaultColor=e;for(var i=this.pushStrCopy(b),j=0,k=0,l="",m=0,n=new Array,o=i.split("#"),p=0;p<o.length;p++){var q=o[p];if(""!=q){a.fillStyle=p>0?this.item[p-1].color:e;for(var r=0;r<q.length;r++)if("\n"==q[r]){var s=new d(l,k,a.measureText(l).width,a.fillStyle,f);n.push(s),m=0,l="",k+=g}else{var t=l+q[r],u=a.measureText(t),v=u.width+m;if(j=Math.min(f,v),v>f){var s=new d(l,k,a.measureText(l).width,a.fillStyle,f);n.push(s),l=q[r]+"",k+=g,m=0}else l=t}var w=a.measureText(l).width;m+=w;var s=new d(l,k,a.measureText(l).width,a.fillStyle,f);n.push(s),l=""}}for(var x,y=-1e4,z=0;z<n.length;z++)y!=n[z].posy&&(y=n[z].posy,x=this.getStartPoint(n[z],n),x=Math.max(x,0)),a.fillStyle=n[z].color,a.fillText(n[z].str,x,y),x+=n[z].width;return k+=g,[j,k]},c.getStartPoint=function(a,b){for(var c=new Array,d=0;d<b.length;d++){var e=b[d];a.posy==e.posy&&c.push(e)}for(var f=0,g=0;g<c.length;g++)f+=c[g].width;return(a.maxwidth-f)/2},c.drawFaceIcon=function(b,c,d){a.UiDraw.cxtDrawImg(b,"F_FACE_"+d,c,a.UIData.publicUi)},c.defaultColor="#000000",c}();a.TextRegExp=c;var d=function(){function a(a,b,c,d,e){this.str=a,this.posy=b,this.width=c,this.color=d,this.maxwidth=e}return a}();a.TextCell=d;var e=function(){function b(){}return b.writeSingleLabel=function(b,d,e,f,g,h,i,j,k,l){void 0===f&&(f=12),void 0===g&&(g=a.TextAlign.CENTER),void 0===h&&(h="#ffffff"),void 0===i&&(i=""),void 0===j&&(j=0),void 0===k&&(k=4),void 0===l&&(l=!0),-1!=h.indexOf("[")&&(h="#"+h.substr(1,6));var m=b.getRec(d),n=a.UIManager.getInstance().getContext2D(m.pixelWitdh,m.pixelHeight,!1);n.fillStyle=h,n.font=(l?"bolder ":"")+" "+f+"px "+a.UIData.font;var o=c.getTextMetrics(n,e),p=0;return g==a.TextAlign.CENTER?p=(m.pixelWitdh-o.width)/2:g==a.TextAlign.RIGHT&&(p=m.pixelWitdh-o.width),c.wrapText(n,e,h,p,j,m.pixelWitdh-f/2,20,f,i,k),b.updateCtx(n,m.pixelX,m.pixelY),o.width},b.writeTextLabel=function(b,d,e,f,g,h,i,j,k,l,m){void 0===f&&(f=12),void 0===g&&(g=a.TextAlign.CENTER),void 0===h&&(h=500),void 0===i&&(i="#ffffff"),void 0===j&&(j=""),void 0===k&&(k=0),void 0===l&&(l=4),void 0===m&&(m=!0),-1!=i.indexOf("[")&&(i="#"+i.substr(1,6));var n=f+4,o=b.getRec(d),p=a.UIManager.getInstance().getContext2D(o.pixelWitdh,o.pixelHeight,!1);p.fillStyle=i,p.textAlign=g,p.font=(m?"bolder ":"")+" "+f+"px "+a.UIData.font;var q=c.getTextMetrics(p,e),r=c.wrapText(p,e,i,0,k,h,n,f,j,l);return b.updateCtx(p,o.pixelX,o.pixelY),[q.width,r*n]},b.writeSingleLabelToCtx=function(b,d,e,f,g,h,i,j,k){void 0===e&&(e=12),void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=a.TextAlign.CENTER),void 0===i&&(i="#ffffff"),void 0===j&&(j=""),void 0===k&&(k=!0),-1!=i.indexOf("[")&&(i="#"+i.substr(1,6)),b.fillStyle=i,b.font=(k?"bolder ":"")+" "+e+"px "+a.UIData.font;var l=c.getTextMetrics(b,d);return h==a.TextAlign.CENTER?f+=(b.canvas.width-l.width)/2:h==a.TextAlign.RIGHT&&(f+=b.canvas.width-l.width),c.wrapText(b,d,i,f,g,9999,20,e,j),l.width},b.writeSingleLabelToCtxByVertical=function(b,d,e,f,g,h,i,j){void 0===e&&(e=12),void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h="#ffffff"),void 0===i&&(i=""),void 0===j&&(j=!0),-1!=h.indexOf("[")&&(h="#"+h.substr(1,6)),b.fillStyle=h,b.font=(j?"bolder ":"")+" "+e+"px "+a.UIData.font,c.wrapTextVertical(b,d,h,f,g,9999,20,e,i)},b.writeSingleLabelToCtxSetAnchor=function(b,d,e,f,g,h,i,j,k){void 0===e&&(e=12),void 0===f&&(f=0),void 0===g&&(g=0),void 0===h&&(h=a.TextAlign.CENTER),void 0===i&&(i="#ffffff"),void 0===j&&(j=""),void 0===k&&(k=!0),-1!=i.indexOf("[")&&(i="#"+i.substr(1,6)),b.fillStyle=i,b.font=(k?"bolder ":"")+" "+e+"px "+a.UIData.font;var l=c.getTextMetrics(b,d);return h==a.TextAlign.CENTER?f-=l.width/2:h==a.TextAlign.RIGHT&&(f-=l.width),c.wrapText(b,d,i,f,g,9999,20,e,j),l.width},b.writeText=function(b,c,d,e,f,g,h,i,j,k){void 0===i&&(i=0),void 0===j&&(j=!1),void 0===k&&(k=a.TextAlign.LEFT),-1!=h.indexOf("[")&&(h="#"+h.substr(1,6));var l=[10,10],m=b.getRec(c),n=a.UIManager.getInstance().getContext2D(m.pixelWitdh,m.pixelHeight,!1);n.fillStyle=h,n.font=(j?"bolder ":"")+g+"px "+a.UIData.font,n.textAlign=k;this.getTextxpos(k,n);return l=this.wrapText(n,f,d,e,i,g+5),b.updateCtx(n,m.pixelX,m.pixelY),l},b.writeTextAutoCenterByAnchor=function(b,d,e,f,g,h,i,j){void 0===i&&(i=!0),void 0===j&&(j=""),-1!=g.indexOf("[")&&(g="#"+g.substr(1,6));var k=b.getRec(d),l=a.UIManager.getInstance().getContext2D(k.pixelWitdh,k.pixelHeight,!1);l.fillStyle=g,l.font=(i?"bolder ":"")+f+"px "+a.UIData.font,l.textAlign=a.TextAlign.LEFT;var m=c.drawText(l,e,g,h,f+5,f);return b.updateCtx(l,k.pixelX,k.pixelY),m},b.writeTextAutoVerticalCenter=function(b,d,e,f,g,h,i,j){void 0===i&&(i=""),void 0===j&&(j=!1),-1!=g.indexOf("[")&&(g="#"+g.substr(1,6));var k=b.getRec(d),l=a.UIManager.getInstance().getContext2D(k.pixelWitdh,k.pixelHeight,!1);l.fillStyle=g,l.font=(j?"bolder ":"")+f+"px "+a.UIData.font;var m=0,n=0;this.getTextxpos(a.TextAlign.LEFT,l);h>0&&(this.isNewline(l,e,h)||(n=k.pixelHeight/2-f/2),c.wrapText(l,e,g,m,n,h,f+3,f,i)),b.updateCtx(l,k.pixelX,k.pixelY)},b.writeTextAutoCenter=function(b,d,e,f,g,h,i){void 0===i&&(i=!1),-1!=g.indexOf("[")&&(g="#"+g.substr(1,6));var j=b.getRec(d),k=a.UIManager.getInstance().getContext2D(j.pixelWitdh,j.pixelHeight,!1);k.fillStyle=g,k.font=(i?"bolder ":"")+f+"px "+a.UIData.font;var l=0,m=0;this.getTextxpos(a.TextAlign.LEFT,k);if(h>0){if(!this.isNewline(k,e,h)){var n=k.measureText(e);m=j.pixelHeight/2-f/2,l=j.pixelWitdh/2-n.width/2}c.wrapText(k,e,g,l,m,h,f+3)}b.updateCtx(k,j.pixelX,j.pixelY)},b.isNewline=function(a,b,c){var d=b,e=a.measureText(d),f=e.width;return f>c?!0:!1},b.getTextxpos=function(b,c){var d=0;return b==a.TextAlign.LEFT?d=0:b==a.TextAlign.RIGHT?d=c.canvas.width:b==a.TextAlign.CENTER&&(d=c.canvas.width/2),d},b.wrapText=function(a,b,c,d,e,f){for(var g=0,h=d,i=b,j="",k=0;k<i.length;k++)if("\n"==i[k])a.fillText(j,c,h),j="",h+=f;else{var l=j+i[k],m=a.measureText(l),n=m.width;g=Math.max(g,n),n>e?(a.fillText(j,c,h),j=i[k]+"",h+=f):j=l}return a.fillText(j,c,h),h=h-d+f,[g,h]},b.clearLabel=function(b,c){var d=b.getRec(c),e=a.UIManager.getInstance().getContext2D(d.pixelWitdh,d.pixelHeight,!1);b.updateCtx(e,d.pixelX,d.pixelY)},b}();a.LabelTextFont=e}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.init=!1,this._volume=1,this._skillSoundDic=new Object,this._skillVolume=1}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.playSound=function(){this.initSound(),this.audio.play()},b.prototype.initSound=function(){this.init||(this.audio=new Audio(a.Scene_data.fileRoot+"sound/sound_3521.mp3"),this.audio.loop=!0,this.audio.volume=this._volume,this.audio.play(),this.init=!0)},b.prototype.stopSound=function(){this.audio&&this.audio.pause()},b.prototype.setVolume=function(a){this._volume=a,this._volume>0?this.playSound():this.stopSound(),this.audio&&(this.audio.volume=this._volume)},b.prototype.setSkillVolume=function(a){this._skillVolume=a;for(var b in this._skillSoundDic)this._skillSoundDic[b].volume=this._skillVolume},b.prototype.playSkillSound=function(b){if(!(this._skillVolume<=0))if(this._skillSoundDic[b])this._skillSoundDic[b].play();else{var c=new Audio(a.Scene_data.fileRoot+"skill/sound/"+b);c.loop=!1,c.volume=this._skillVolume,c.play(),this._skillSoundDic[b]=c}},b}();a.SoundManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(){function a(){}return a.NORMALDAMAGE=1,a.CRIT=2,a.DODGE=3,a.TREATMENT=4,a.VERTIGO=5,a.FREEZE=6,a.ATTACKADD=7,a.ATTACKREDUCE=8,a.EXPERIENCE=9,a.NORMALDAMAGEUP=11,a.CRITUP=12,a.MYNORMALDAMAGE=13,a.MYNORMALDAMAGEUP=14,a.MISS=15,a}();a.TextJumpType=b;var c=function(){function a(){}return a}();a.TextJumpUiVo=c;var d=function(c){function d(){return null!==c&&c.apply(this,arguments)||this}return __extends(d,c),d.prototype.makeData=function(){if(this._data){var a=this._data;switch(this.dtime=a.endtime,this.pos=a.pos,a.type){case b.EXPERIENCE:this._width=this.drawTxtBydigitalAndtext(a)}}},d.prototype.drawTxtBydigitalAndtext=function(c){var d,e=this.parent.uiAtlas.getRec(this.textureStr),f=a.UIManager.getInstance().getContext2D(e.pixelWitdh,e.pixelHeight,!1),g=c.type,h=50,i=25;c.type==b.EXPERIENCE&&(d=a.ArtFont.num54);var j=a.ArtFont.getInstance().getAirFontWidth(f,String(this._data.str),d);return j+=h,a.UiDraw.cxtDrawImg(f,"TYPE"+g,new a.Rectangle(e.pixelWitdh-j,e.pixelHeight-i,h,i),a.UIData.publicUi),a.ArtFont.getInstance().writeFontToCtxLeft(f,String(this._data.str),d,e.pixelWitdh-j+h+2,e.pixelHeight-i),a.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture,e.pixelX,e.pixelY,f),j},d.prototype.update=function(){if(this._data){if(this.time=a.TimeUtil.getTimer(),this.time>=this.dtime)return this.ui&&this.ui.parent&&this.ui.parent.removeChild(this.ui),void(this._data=null);var b=(this._data,this.changerules(this.time));this.ui.width=256*b[2],this.ui.height=50*b[3],this.ui.y=b[1]-this.ui.height,this.ui.x=b[0]-this.ui.width/2+25,this.ui.alpha=b[4]}},d.prototype.changerules=function(b){var c=new Array,d=this._data;b=(b-d.starttime)/1e3*60;var e=0,f=0,g=0,h=0,i=0;if(d.type==a.TextJumpType.EXPERIENCE){var j=new a.Vector2D;0>b?j.x=-9999:(j.x=300/a.UIData.Scale,j.y=a.Scene_data.stageHeight/a.UIData.Scale-50),f=j.y-=15,f-=.5*b,40>b?(e=j.x,g=1.8,h=1.8,i=1):60>b&&(e=j.x,g=1.8,h=1.8,i=1-(b-39)/20)}return c.push(e),c.push(f),c.push(g),c.push(h),c.push(i),c.push(j.x),c.push(j.y),this._lastchange=c,c},d}(a.Disp2DBaseText);a.ExpTextJumpUiDrawAndRefreash=d;var e=function(c){function d(){return null!==c&&c.apply(this,arguments)||this}return __extends(d,c),d.prototype.makeData=function(){if(this._data){var c=this._data;switch(this.dtime=c.endtime,this.pos=c.pos,c.type){case b.NORMALDAMAGE:case b.TREATMENT:a.ArtFont.getInstance().writeFontToSkinName(this.parent.uiAtlas,this.textureStr,String(c.str),"NUM"+(c.type+50),a.TextAlign.RIGHT);break;case b.MYNORMALDAMAGEUP:case b.MYNORMALDAMAGE:a.ArtFont.getInstance().writeFontToSkinName(this.parent.uiAtlas,this.textureStr,String(c.str),a.ArtFont.num53,a.TextAlign.RIGHT);break;case b.NORMALDAMAGEUP:a.ArtFont.getInstance().writeFontToSkinName(this.parent.uiAtlas,this.textureStr,String(c.str),"NUM"+(c.type+40),a.TextAlign.RIGHT);break;case b.DODGE:case b.VERTIGO:case b.FREEZE:case b.MISS:this.drawTxtBytext(c);break;case b.ATTACKADD:case b.ATTACKREDUCE:case b.EXPERIENCE:case b.CRIT:case b.CRITUP:this._width=this.drawTxtBydigitalAndtext(c)}}},d.prototype.drawTxtBytext=function(c){var d=this.parent.uiAtlas.getRec(this.textureStr),e=a.UIManager.getInstance().getContext2D(d.pixelWitdh,d.pixelHeight,!1),f=50;return c.type==b.MISS&&(f=67),a.UiDraw.cxtDrawImg(e,"TYPE"+c.type,new a.Rectangle(d.pixelWitdh-f,d.pixelHeight-25,f,25),a.UIData.publicUi),a.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture,d.pixelX,d.pixelY,e),50},d.prototype.drawTxtBydigitalAndtext=function(c){var d,e=this.parent.uiAtlas.getRec(this.textureStr),f=a.UIManager.getInstance().getContext2D(e.pixelWitdh,e.pixelHeight,!1),g=c.type,h=50,i=25;c.type==b.ATTACKREDUCE?(g=b.ATTACKADD,d=a.ArtFont.num53):c.type==b.ATTACKADD?d=a.ArtFont.num54:c.type==b.EXPERIENCE?d=a.ArtFont.num54:c.type==b.CRIT?(d=a.ArtFont.num55,h=78,i=50):c.type==b.CRITUP&&(g-=10,h=78,i=50,d=a.ArtFont.num55);var j=a.ArtFont.getInstance().getAirFontWidth(f,String(this._data.str),d);return j+=h,a.UiDraw.cxtDrawImg(f,"TYPE"+g,new a.Rectangle(e.pixelWitdh-j,e.pixelHeight-i,h,i),a.UIData.publicUi),a.ArtFont.getInstance().writeFontToCtxLeft(f,String(this._data.str),d,e.pixelWitdh-j+h+2,e.pixelHeight-i),a.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture,e.pixelX,e.pixelY,f),j},d.prototype.update=function(){if(this._data){if(this.time=a.TimeUtil.getTimer(),this.time>=this.dtime)return this.ui&&this.ui.parent&&this.ui.parent.removeChild(this.ui),void(this._data=null);var b=(this._data,this.changerules(this.time));this.ui.width=256*b[2],this.ui.height=50*b[3],this.ui.y=b[1]-this.ui.height,this.ui.x=b[0]-this.ui.width/2+25,this.ui.alpha=b[4]}},d.prototype.changerules=function(b){var c=this._data;b=(b-c.starttime)/1e3*60;var d=new Array,e=this.Vector3DToVector2D(new a.Vector3D(this.pos.x,this.pos.y,this.pos.z));0>b&&(e.x=-9999),c.type==a.TextJumpType.EXPERIENCE&&(e.x=300/a.UIData.Scale,e.y=a.Scene_data.stageHeight/a.UIData.Scale-50);var f,g,h,i,j;switch(c.type){case a.TextJumpType.NORMALDAMAGE:case a.TextJumpType.MYNORMALDAMAGE:f=e.x,4>b?(g=e.y-4*b,h=b/4*1.3+.2,h>1.5&&(h=1.5),i=h,j=b/3*.8+.2,j>1&&(j=1)):8>b?(g=this._lastchange[1]-2,h=this._lastchange[2]-1/6,i=h,j=b/3*.8+.2,j>1&&(j=1)):15>b?(g=this._lastchange[1]-2,h=this._lastchange[2]+1/6,i=h,j=b/3*.8+.2,j>1&&(j=1)):30>b?(g=this._lastchange[1]-2,h=this._lastchange[2]-.05,i=h,j=b/3*.8+.2,j>1&&(j=1)):72>b&&(g=50>b?this._lastchange[1]-2:this._lastchange[1]+2,f=this._lastchange[0]-1.5,h=this._lastchange[2],i=h,j=this._lastchange[4]-.01,0>j&&(j=0));break;case a.TextJumpType.CRIT:f=e.x,4>b?(g=e.y-4*b,h=b/4*1.3+.2,h>1.5&&(h=1.5),i=h,j=b/3*.8+.2,j>1&&(j=1)):8>b?(g=this._lastchange[1]-2,h=this._lastchange[2]-1/6,i=h,j=b/3*.8+.2,j>1&&(j=1)):15>b?(g=this._lastchange[1]-2,h=this._lastchange[2]+.25,i=h,j=b/3*.8+.2,j>1&&(j=1)):30>b?(g=this._lastchange[1]-2,h=this._lastchange[2]-.05,i=h,j=b/3*.8+.2,j>1&&(j=1)):100>b&&(g=50>b?this._lastchange[1]-2:this._lastchange[1]+2,f=this._lastchange[0]-1.5,h=this._lastchange[2],i=h,j=this._lastchange[4]-.01,0>j&&(j=0));break;case a.TextJumpType.NORMALDAMAGEUP:case a.TextJumpType.CRITUP:case a.TextJumpType.MYNORMALDAMAGEUP:f=e.x,4>b?(g=e.y-4*b,h=b/4*1.5+.2,h>1.7&&(h=1.7),i=h,j=b/3*.3+.2,j>.5&&(j=.5)):8>b?(g=this._lastchange[1]-2,h=this._lastchange[2]-.25,i=h,j=b/3*.3+.2,j>.5&&(j=.5)):15>b?(g=this._lastchange[1]-2,h=this._lastchange[2]+.25,i=h,j=b/3*.3+.2,j>.5&&(j=.5)):30>b&&(g=this._lastchange[1]-2,h=this._lastchange[2]-1/15,i=h,j=this._lastchange[4]-1/80,0>j&&(j=0));break;case a.TextJumpType.TREATMENT:f=e.x,g=e.y-1.5*b,12>b?(h=Math.ceil(b)/12*.8+.2,i=h,j=Math.ceil(b)/12*.8+.2):60>b&&(h=1,i=h,j=1-(b-11)/48);break;case a.TextJumpType.EXPERIENCE:g=e.y-=15,g-=.5*b,40>b?(f=e.x,h=1.3,i=1.3,j=1):60>b&&(f=e.x,h=1.3,i=1.3,j=1-(b-39)/20);break;case a.TextJumpType.ATTACKADD:case a.TextJumpType.ATTACKREDUCE:f=e.x+=110,g=e.y-1.8*b,12>b?(h=Math.ceil(b)/12*1.3+.1,i=h,j=Math.ceil(b)/12*.8+.2):24>b?(h=1.4-(b-11)/12*.4,i=h,j=1):60>b&&(h=1,i=h,j=1-(b-23)/36);break;case a.TextJumpType.DODGE:case a.TextJumpType.MISS:case a.TextJumpType.VERTIGO:case a.TextJumpType.FREEZE:f=e.x-=50,12>b?(g=e.y-3*b,h=1,i=h,j=Math.ceil(b)/12):36>b?(g=e.y-33,h=1,i=h,j=1):72>b&&(g=e.y-33-1.5*(b-36),h=1,i=h,j=1-(b-35)/36)}return d.push(f),d.push(g),d.push(h),d.push(i),d.push(j),d.push(e.x),d.push(e.y),this._lastchange=d,d},d}(a.Disp2DBaseText);a.TextJumpUiDrawAndRefreash=e;var f=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c.tempMatrix=new a.Matrix3D,c}return __extends(c,b),c.prototype.makeData=function(){this._data&&(this.charNameMeshVo=this.data,this.lastKey!=this.charNameMeshVo.name&&(this.ui.width=179.2,this.ui.height=22*.7,this.lastKey=this.charNameMeshVo.name,a.LabelTextFont.writeSingleLabel(this.parent.uiAtlas,this.textureStr,this.charNameMeshVo.name,20,a.TextAlign.CENTER,"#ffffff","#27262e")),this.charNameMeshVo.needDraw=!1)},c.prototype.update=function(){if(this.charNameMeshVo){if(this.charNameMeshVo.needDraw&&this.makeData(),this.charNameMeshVo.pos)if(this.charNameMeshVo.visible){if(this.needUpData(this.charNameMeshVo.pos)||this.charNameMeshVo.visibleChange){var b=a.Scene_data.cam3D.cameraMatrix.clone(this.tempMatrix);b.append(a.Scene_data.viewMatrx3D);var c=b.transformVector(this.charNameMeshVo.pos);this.ui.x=(c.x/c.w+1)*(a.Scene_data.stageWidth/2)/a.UIData.Scale-this.ui.width/2,this.ui.y=(-c.y/c.w+1)*(a.Scene_data.stageHeight/2)/a.UIData.Scale-this.ui.height/2,this.oldPos.x=this.charNameMeshVo.pos.x,this.oldPos.y=this.charNameMeshVo.pos.y,this.charNameMeshVo.visibleChange=!1}}else this.ui.x=1e4;this.charNameMeshVo.clear&&(this.ui.parent.removeChild(this.ui),this._data=null)}},c}(a.Disp2DBaseText);a.CharNameUiVo=f;var g=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c.tempMatrix=new a.Matrix3D,c}return __extends(c,b),c.prototype.makeData=function(){var b=this;this._data&&(this._charTitleMeshVo=this.data,a.LoadManager.getInstance().load(a.Scene_data.fileRoot+getUItittleUrl(String(this._charTitleMeshVo.num)),a.LoadManager.IMG_TYPE,function(c){var d=b.parent.uiAtlas.getRec(b.textureStr);b.parent.uiAtlas.ctx=a.UIManager.getInstance().getContext2D(d.pixelWitdh,d.pixelHeight,!1);var e=Math.min(d.pixelWitdh/c.width,d.pixelHeight/c.height);e=Math.min(e,1);var f=c.width*e,g=c.height*e;b.parent.uiAtlas.ctx.drawImage(c,(d.pixelWitdh-f)/2,(d.pixelHeight-g)/2,f,g),a.TextureManager.getInstance().updateTexture(b.parent.uiAtlas.texture,d.pixelX,d.pixelY,b.parent.uiAtlas.ctx)}))},c.prototype.update=function(){if(this._charTitleMeshVo){if(this._charTitleMeshVo.needDraw&&(this.makeData(),this._charTitleMeshVo.needDraw=!1),this._charTitleMeshVo.pos)if(this._charTitleMeshVo.visible){if(this.needUpData(this._charTitleMeshVo.pos)){var b=a.Scene_data.cam3D.cameraMatrix.clone(this.tempMatrix);b.append(a.Scene_data.viewMatrx3D);var c=b.transformVector(this._charTitleMeshVo.pos);this.ui.x=(c.x/c.w+1)*(a.Scene_data.stageWidth/2)/a.UIData.Scale-this.ui.width/2,this.ui.y=(-c.y/c.w+1)*(a.Scene_data.stageHeight/2)/a.UIData.Scale-this.ui.height/2,this.oldPos.x=this._charTitleMeshVo.pos.x,this.oldPos.y=this._charTitleMeshVo.pos.y}}else this.ui.x=1e4;this._charTitleMeshVo.clear&&(this.ui.parent.removeChild(this.ui),this._data=null)}},c}(a.Disp2DBaseText);a.CharTitleUiVo=g;var h=function(){function a(){this._visible=!0,this.visibleChange=!1,this.clear=!1}return Object.defineProperty(a.prototype,"visible",{get:function(){return this._visible},set:function(a){this._visible=a,this.visibleChange=!0},enumerable:!0,configurable:!0}),a}();a.baseMeshVo=h}(Pan3d||(Pan3d={})),function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Pos"),a.bindAttribLocation(this.program,1,"v2uv")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Pos;attribute vec3 v2uv;uniform vec4 ui[30];uniform vec4 lifenum[30];varying vec2 v_texCoord;\nvarying vec4 v_lifenum;\nvoid main(void){ v_lifenum = lifenum[int(v2uv.z)]; v_texCoord = vec2(v2uv.x , v2uv.y ); vec4  data = ui[int(v2uv.z)];   vec3 pos = vec3(0.0,0.0,0.0);   pos.xy = v3Pos.xy *data.zw * 2.0;   pos.x += data.x * 2.0 - 1.0;   pos.y += -data.y * 2.0 + 1.0;   vec4 vt0= vec4(pos, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvarying vec4 v_lifenum;\nvoid main(void)\n{\nvec2  v_uv = v_texCoord;if(v_texCoord.x<v_lifenum.x){;\nv_uv.y = v_uv.y+v_lifenum.y;};\nvec4 infoUv = texture2D(s_texture, v_uv.xy);\ninfoUv.xyz *= infoUv.w;\ngl_FragColor = infoUv;\n}";return a},b.BloodUIShader="BloodUIShader",b}(a.Shader3D);a.BloodUIShader=b;var c=function(a){function b(){var b=a.call(this)||this;return b.lifeNum=100,b.colortype=0,b}return __extends(b,a),b.prototype.pushVaData=function(a,b,c){return a.vertices.push(0,0,0,1,0,0,1,-1,0,0,-1,0),a.uvs.push(0,0,b,1,0,b,1,.25,b,0,.25,b),a.indexs.push(c,1+c,2+c,c,2+c,3+c),c+4},b}(a.UICompenent);a.BloodUICompenent=c;var d=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c.tempMatrix=new a.Matrix3D,c}return __extends(c,b),c.prototype.makeData=function(){this._data&&(this.bloodLineMeshVo=this.data)},c.prototype.update=function(){if(this.bloodLineMeshVo){if(this.bloodLineMeshVo.pos)if(this.bloodLineMeshVo.visible){if(this.needUpData(this.bloodLineMeshVo.pos)||this.bloodLineMeshVo.visibleChange){var b=a.Scene_data.cam3D.cameraMatrix.clone(this.tempMatrix);b.append(a.Scene_data.viewMatrx3D);var c=b.transformVector(new a.Vector3D(this.bloodLineMeshVo.pos.x,this.bloodLineMeshVo.pos.y,this.bloodLineMeshVo.pos.z));this.ui.x=(c.x/c.w+1)*(a.Scene_data.stageWidth/2)/a.UIData.Scale-this.ui.width/2,this.ui.y=(-c.y/c.w+1)*(a.Scene_data.stageHeight/2)/a.UIData.Scale-this.ui.height/2,this.bloodLineMeshVo.visibleChange=!1}this.ui.lifeNum=this.bloodLineMeshVo.num,this.ui.colortype=this.bloodLineMeshVo.colortype}else this.ui.x=1e4;this.bloodLineMeshVo.clear&&(this.ui.parent.removeChild(this.ui),this._data=null)}},c}(a.Disp2DBaseText);a.BloodDisp2DBaseText=d;var e=function(d){function e(){var a=d.call(this)||this;return a.nextTime=0,a}return __extends(e,d),e.prototype.initData=function(){this._uiList=new Array,this.objData=new a.ObjData,a.ProgrmaManager.getInstance().registe(b.BloodUIShader,new b),this.shader=a.ProgrmaManager.getInstance().getProgram(b.BloodUIShader),this.program=this.shader.program,this.uiProLocation=a.Scene_data.context3D.getLocation(this.program,"ui"),this.ui2ProLocation=a.Scene_data.context3D.getLocation(this.program,"lifenum")},e.prototype.update=function(){if(this.visible&&0!=this._uiList.length){if(a.Scene_data.context3D.setBlendParticleFactors(this.blenderMode),a.Scene_data.context3D.setProgram(this.program),this.nextTime<a.TimeUtil.getTimer()||this.renderData2.length!=4*this._uiList.length){this.renderData2.length!=4*this._uiList.length&&(this.renderData2=new Float32Array(4*this._uiList.length));for(var b=0;b<this._uiList.length;b++){var c=this._uiList[b],d=c.lifeNum/100,e=8*(c.colortype+1)/32;this.renderData2[4*b+0]=d,this.renderData2[4*b+1]=e}this.nextTime=a.TimeUtil.getTimer()+300}if(a.Scene_data.context3D.setVc4fvLocation(this.uiProLocation,this.renderData),
a.Scene_data.context3D.setVc4fvLocation(this.ui2ProLocation,this.renderData2),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.uvBuffer),this.uiAtlas&&a.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this.uiAtlas.texture,0),a.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum),this.modelRenderList)for(var b=0;b<this.modelRenderList.length;b++)this.modelRenderList[b].update()}},e.prototype.creatBaseComponent=function(b){var d=new c;return d.tr.setRec(new a.UIRectangle(0,0,1,1)),d.width=64,d.height=8,d.uiRender=this,d.lifeNum=100,d},e.prototype.makeRenderDataVc=function(a){if((!this.renderData||this.renderData&&this.renderData.length!=4*this._uiList.length)&&(this.renderData=new Float32Array(4*this._uiList.length)),-1==a)for(var b=0;this._uiList&&b<this._uiList.length;b++)this._uiList[b].vcId=b,this.renderData[4*b+0]=this._uiList[b].renderData[0],this.renderData[4*b+1]=this._uiList[b].renderData[1],this.renderData[4*b+2]=this._uiList[b].renderData[2],this.renderData[4*b+3]=this._uiList[b].renderData[3];else a<this._uiList.length&&(this.renderData[4*a+0]=this._uiList[a].renderData[0],this.renderData[4*a+1]=this._uiList[a].renderData[1],this.renderData[4*a+2]=this._uiList[a].renderData[2],this.renderData[4*a+3]=this._uiList[a].renderData[3])},e}(a.UIRenderComponent);a.BloodUIRenderComponent=e;var f=function(b){function c(){var c=b.call(this)||this;return c.width=a.UIData.designWidth,c.height=a.UIData.designHeight,c._baseRender=new e,c.addRender(c._baseRender),c._baseRender.uiAtlas=new a.UIAtlas,c._baseRender.uiAtlas.configData=new Array,c._uiItem=new Array,c.loadBloodTexture(),c}return __extends(c,b),c.prototype.loadBloodTexture=function(){var b=this;a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+"ui/load/blood.png",function(a){b._baseRender.uiAtlas.textureRes=a})},c.prototype.update=function(a){if(this._baseRender.uiAtlas.textureRes)for(var b=0;b<this._uiItem.length;b++)this._uiItem[b].data&&this._uiItem[b].update()},c.prototype.removeChild=function(a){for(var c=0;c<this._uiItem.length;c++)if(this._uiItem[c].ui==a){this._uiItem.splice(c,1);break}b.prototype.removeChild.call(this,a)},c.prototype.clearOneTemp=function(){for(;this._uiItem.length>25;)this.removeChild(this._uiItem[0].ui)},c.prototype.showTemp=function(a){if(!(this._uiItem.length>=40)){var b=new d;b.parent=this._baseRender,b.ui=this._baseRender.creatBaseComponent("test"),b.data=a,this.addChild(b.ui),this._uiItem.push(b)}},c}(a.UIConatiner);a.BloodLineUIConatiner=f}(Pan3d||(Pan3d={})),function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.destory=function(){this.pos=null,this._num=null,this.clear=!0},Object.defineProperty(b.prototype,"num",{get:function(){return this._num},set:function(a){this._num=a,this.needDraw=!0},enumerable:!0,configurable:!0}),b}(a.baseMeshVo);a.CharTitleMeshVo=b;var c=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),Object.defineProperty(b.prototype,"name",{get:function(){return this._name},set:function(a){this._name=a,this.needDraw=!0},enumerable:!0,configurable:!0}),b.prototype.destory=function(){this.pos=null,this._name=null,this.needDraw=null,this.clear=!0},b}(a.baseMeshVo);a.CharNameMeshVo=c;var d=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.destory=function(){this.pos=null,this.num=null,this.colortype=null,this.clear=!0},b}(a.baseMeshVo);a.BloodLineMeshVo=d;var e=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.destory=function(){this.pos=null,this.clear=!0},b}(a.baseMeshVo);a.JumpTextMeshVo=e;var f=function(a){function b(b,c,d){return a.call(this,b,c,d)||this}return __extends(b,a),b}(a.Dis2DUIContianerPanel);a.JumpTxtContianerPanel=f;var g=function(){function e(){this.uiContianerItem=new Array,this._charTitleContianerPanel=new a.Dis2DUIContianerPanel(a.CharTitleUiVo,new a.Rectangle(0,0,131,69),10),this._charNameContianerPanel=new a.Dis2DUIContianerPanel(a.CharNameUiVo,new a.Rectangle(0,0,256,24),50),this._jumpTxtContianerPanel=new a.AlphaUiContianer(a.TextJumpUiDrawAndRefreash,new a.Rectangle(0,0,256,50),10),this._expjumpTxtContianerPanel=new a.AlphaUiContianer(a.ExpTextJumpUiDrawAndRefreash,new a.Rectangle(0,0,512,100),5),this._bloodLineUIConatiner=new a.BloodLineUIConatiner,this.uiContianerItem.push(this._charTitleContianerPanel),this.uiContianerItem.push(this._charNameContianerPanel),this.uiContianerItem.push(this._jumpTxtContianerPanel),this.uiContianerItem.push(this._expjumpTxtContianerPanel),this.uiContianerItem.push(this._bloodLineUIConatiner)}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.clearOneTemp=function(){for(var a=0;a<this.uiContianerItem.length;a++)this.uiContianerItem[a].clearOneTemp()},e.prototype.getCharTitleMeshVo=function(c){void 0===c&&(c=0);var d=new b;return d.num=c,d.pos=new a.Vector3D(0,50,0),this._charTitleContianerPanel.showTemp(d),d},e.prototype.getCharNameMeshVo=function(b){void 0===b&&(b="测试名");var d=new c;return d.name=b,d.pos=new a.Vector3D(0,50,0),this._charNameContianerPanel.showTemp(d),d},e.prototype.getBloodLineMeshVo=function(){var b=new d;return b.num=100,b.colortype=0,b.pos=new a.Vector3D(0,50,0),this._bloodLineUIConatiner.showTemp(b),b},e.prototype.setJumpNum=function(a){this._jumpTxtContianerPanel.showTemp(a)},e.prototype.setExpJumpNum=function(a){this._expjumpTxtContianerPanel.showTemp(a)},e.prototype.update=function(){for(var a=0;a<this.uiContianerItem.length;a++){this.uiContianerItem[a].update(0);for(var b=0;b<this._bloodLineUIConatiner.renderList.length;b++)this.uiContianerItem[a].renderList[b].update()}},e.prototype.resize=function(){this._jumpTxtContianerPanel.resize();for(var b=0;b<this.uiContianerItem.length;b++)this.uiContianerItem[b].resize();a.Scene_data.cam3D.needChange=!0},e}();a.BloodManager=g}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.valueV3d=[1,1,1,1]}return b.prototype.getValue=function(b){if(!this.valueVec||-1==this.begintFrame)return this.valueV3d;var c=float2int(b/a.Scene_data.frameTime-this.begintFrame);return 0>c?c=0:c>this.maxFrame-this.begintFrame&&(c=this.maxFrame-this.begintFrame),this.valueVec[c]},b.prototype.setData=function(a){this.type=a.type,this.maxFrame=a.maxFrame,a.items.length?this.begintFrame=a.items[0].frame:this.begintFrame=-1;for(var b=a.values[0].length,c=new Array,d=0;b>d;d++){var e=new Array;if(1==this.type)e.push(a.values[0][d]);else if(2==this.type)e.push(a.values[0][d],a.values[1][d]);else if(3==this.type)e.push(a.values[0][d],a.values[1][d],a.values[2][d]);else if(4==this.type){var f=a.values[3][d];e.push(a.values[0][d]*f,a.values[1][d]*f,a.values[2][d]*f,f)}c.push(e)}this.valueVec=c},b}();a.Curve=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this._visible=!1,this.data=[0,0,0,5]}return Object.defineProperty(a.prototype,"visible",{get:function(){return this._visible},set:function(a){this._visible=a,this.display.stateChage()},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"x",{get:function(){return this.data[0]},set:function(a){this.data[0]=a},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"y",{get:function(){return this.data[1]},set:function(a){this.data[1]=a},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"z",{get:function(){return this.data[2]},set:function(a){this.data[2]=a},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"size",{get:function(){return this.data[3]},set:function(a){this.data[3]=a},enumerable:!0,configurable:!0}),a}();a.Shadow=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._displayList=new Array,a.ProgrmaManager.getInstance().registe(a.Display3DShadowShader.Display3DShadowShader,new a.Display3DShadowShader)}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.addShadow=function(){var b=this.getIdleShadow(),c=new a.Shadow;return b.addShadow(c),c},b.prototype.removeShadow=function(a){a.display.removeShadow(a)},b.prototype.update=function(){if(this._displayList.length){a.Scene_data.context3D.setWriteDepth(!1);for(var b=0;b<this._displayList.length;b++)this._displayList[b].update();a.Scene_data.context3D.setWriteDepth(!0)}},b.prototype.getIdleShadow=function(){for(var b=0;b<this._displayList.length;b++)if(this._displayList[b].hasIdle())return this._displayList[b];var c=new a.Display3dShadow;return this._displayList.push(c),c},b}();a.ShadowManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a.allImgBytes=1e7,a}return __extends(c,b),c.prototype.read=function(b){void 0===b&&(b=null),this._imgFun=b;var d=this._byte.readInt();d==c.IMG_TYPE?a.Scene_data.supportBlob?this.readImg():this.readImgLow():d==c.OBJS_TYPE?this.readObj(this._byte):d==c.MATERIAL_TYPE?this.readMaterial():d==c.PARTICLE_TYPE?this.readParticle():d==c.ZIP_OBJS_TYPE&&this.readZipObj()},c.prototype.readZipObj=function(){var b=this._byte.readInt(),c=this._byte.buffer.slice(this._byte.position,this._byte.position+b);this._byte.position+=b;var d=unZip(c),e=new a.Pan3dByteArray(d);this.readObj(e)},c.prototype.readImg=function(){var b=this;this.imgNum=this._byte.readInt(),this.imgLoadNum=0;for(var c=0;c<this.imgNum;c++){var d=a.Scene_data.fileRoot+this._byte.readUTF(),e=this._byte.readInt();if(-1==d.search(".jpng")){var f=this._byte.buffer.slice(this._byte.position,this._byte.position+e);this._byte.position+=e;var g=new Image;g.url=d,g.onload=function(a){b.loadImg(a.target);a.target};var h=d.substr(d.lastIndexOf(".")+1).toLocaleLowerCase();g.src="data:image/"+h+";base64,"+a.Base64.encode(f)}else this.readJpngImg(d)}},c.prototype.readJpngImg=function(b){var c=this,d=this._byte.readInt(),e=this._byte.buffer.slice(this._byte.position,this._byte.position+d);this._byte.position+=d;var f=this._byte.readInt(),g=this._byte.buffer.slice(this._byte.position,this._byte.position+f);this._byte.position+=f;var h=new Image,i=new Image,j=0,k=function(d){if(j++,!(2>j)){var e=a.UIManager.getInstance().getContext2D(h.width,h.height);e.drawImage(h,0,0);var f=e.getImageData(0,0,h.width,h.height);e.clearRect(0,0,h.width,h.height),e.drawImage(i,0,0);for(var g=e.getImageData(0,0,h.width,h.height),k=0;k<f.data.length;k+=4){g.data[k]/255;f.data[k+3]=g.data[k]}c.addImg(b.replace(".jpng",".png"),f)}};h.onload=k,i.onload=k,h.src="data:image/png;base64,"+a.Base64.encode(e),i.src="data:image/png;base64,"+a.Base64.encode(g)},c.prototype.readImgLow=function(){var b=this;this.imgNum=this._byte.readInt(),this.imgLoadNum=0;for(var c=(a.TimeUtil.getTimer(),0),d=0;d<this.imgNum;d++){var e=a.Scene_data.fileRoot+this._byte.readUTF(),f=this._byte.readInt();c+=f;var g=new Image;g.url=e,g.onload=function(a){b.loadImg(a.target)},g.src=e}this.allImgBytes=c},c.prototype.loadImg=function(b){a.TextureManager.getInstance().addRes(b.url,b),this.countImg()},c.prototype.addImg=function(b,c){a.TextureManager.getInstance().addRes(b,c),this.countImg()},c.prototype.countImg=function(){this.imgLoadNum++,this.imgLoadNum==this.imgNum&&(this._imgComplete=!0,this.allResCom())},c.prototype.readObj=function(b){for(var c=b.readInt(),d=0;c>d;d++){var e=a.Scene_data.fileRoot+b.readUTF(),f=b.readInt(),g=new a.Pan3dByteArray;g.length=f,b.readBytes(g,0,f);a.ObjDataManager.getInstance().loadObjCom(g.buffer,e)}this._imgFun&&this._imgFun()},c.prototype.readMaterial=function(){for(var b=this._byte.readInt(),c=(a.TimeUtil.getTimer(),0);b>c;c++){var d=a.Scene_data.fileRoot+this._byte.readUTF(),e=this._byte.readInt(),f=new a.Pan3dByteArray;f.length=e,this._byte.readBytes(f,0,e),a.MaterialManager.getInstance().addResByte(d,f)}},c.prototype.readParticle=function(){for(var b=this._byte.readInt(),c=(a.TimeUtil.getTimer(),0);b>c;c++){var d=a.Scene_data.fileRoot+this._byte.readUTF(),e=this._byte.readInt(),f=new a.Pan3dByteArray;f.length=e,this._byte.readBytes(f,0,e),a.ParticleManager.getInstance().addResByte(d,f)}},c.prototype.readMaterialInfo=function(){var a=this._byte.readInt();if(a>0){for(var b=new Array,c=0;a>c;c++){var d=new Object;d.type=this._byte.readInt(),d.name=this._byte.readUTF(),0==d.type&&(d.url=this._byte.readUTF()),1==d.type&&(d.x=this._byte.readFloat()),2==d.type&&(d.x=this._byte.readFloat(),d.y=this._byte.readFloat()),3==d.type&&(d.x=this._byte.readFloat(),d.y=this._byte.readFloat(),d.z=this._byte.readFloat()),b.push(d)}return b}return null},c.readFloatTwoByte=function(a,b){var c=a.readInt();if(c>0){var d=a.readFloat();b.length=0;for(var e=0;c>e;e++)b.push(a.readFloatTwoByte(d))}},c.readFloatOneByte=function(a,b){var c=a.readInt();if(c>0)for(var d=0;c>d;d++)b.push((a.readByte()+128)/256)},c.readIntForTwoByte=function(a,b){for(var c=a.readInt(),d=0;c>d;d++)b.push(a.readShort())},c.readIntForOneByte=function(a,b){for(var c=a.readInt(),d=0;c>d;d++)b.push(a.readByte())},c.readBytes2ArrayBuffer=function(a,b,c,d,e,f){void 0===f&&(f=0);var g=a.readInt();if(!(0>=g)){var h;0==f&&(h=a.readFloat());for(var i=g/c,j=0;i>j;j++)for(var k=e*j+d,l=0;c>l;l++)0==f?b.setFloat32(4*(k+l),a.readFloatTwoByte(h),!0):1==f?b.setFloat32(4*(k+l),a.readFloatOneByte(),!0):2==f?b.setFloat32(4*(k+l),a.readByte(),!0):3==f?b.setFloat32(4*(k+l),(a.readByte()+128)/255,!0):4==f&&b.setFloat32(4*(k+l),a.readFloat(),!0)}},c.readMaterialParamData=function(a){var b=a.readInt();if(b>0){for(var c=new Array,d=0;b>d;d++){var e=new Object;e.name=a.readUTF(),e.type=a.readByte(),0==e.type?e.url=a.readUTF():1==e.type?e.x=a.readFloat():2==e.type?(e.x=a.readFloat(),e.y=a.readFloat()):3==e.type&&(e.x=a.readFloat(),e.y=a.readFloat(),e.z=a.readFloat()),c.push(e)}return c}return null},c.prototype.allResCom=function(){this._imgFun&&this._imgFun()},c.IMG_TYPE=1,c.OBJS_TYPE=2,c.MATERIAL_TYPE=3,c.PARTICLE_TYPE=4,c.SCENE_TYPE=5,c.ZIP_OBJS_TYPE=6,c.PREFAB_TYPE=1,c.SCENE_PARTICLE_TYPE=11,c}(a.ResCount);a.BaseRes=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.loadRoleRes=function(b,c,d){var e=new a.RoleRes;e.meshBatchNum=d,e.load(b,function(){c(e)})},c.prototype.loadSkillRes=function(b,c){var d=new a.SkillRes;d.load(b,function(){c(d)})},c.prototype.loadSceneRes=function(b,c,d,e){var f;return this._dic[b]?f=this._dic[b]:(f=new a.SceneRes,this._dic[b]=f),f.load(b,c,d,e),this.clearSceneUse(f),f},c.prototype.clearSceneUse=function(a){for(var b in this._dic){var c=this._dic[b];c.useNum>0&&c!=a&&(c.useNum=0)}a.useNum=1},c.prototype.gc=function(){for(var b in this._dic){var c=this._dic[b];c.useNum<=0&&(c.idleTime++,c.idleTime>=a.ResCount.GCTime&&(c.destory(),delete this._dic[b]))}},c}(a.ResGC);a.ResManager=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.meshBatchNum=1,a}return __extends(c,b),c.prototype.load=function(b,c){var d=this;this._fun=c,a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a){d.loadComplete(a)})},c.prototype.loadComplete=function(b){this._byte=new a.Pan3dByteArray(b),this._byte.position=0,this.version=this._byte.readInt(),this.readMesh()},c.prototype.readMesh=function(){this.roleUrl=this._byte.readUTF(),this.version>=16&&(this.ambientLightColor=new a.Vector3D,this.sunLigthColor=new a.Vector3D,this.nrmDircet=new a.Vector3D,this.ambientLightColor.x=this._byte.readFloat(),this.ambientLightColor.y=this._byte.readFloat(),this.ambientLightColor.z=this._byte.readFloat(),this.ambientLightIntensity=this._byte.readFloat(),this.ambientLightColor.scaleBy(this.ambientLightIntensity),this.sunLigthColor.x=this._byte.readFloat(),this.sunLigthColor.y=this._byte.readFloat(),this.sunLigthColor.z=this._byte.readFloat(),this.sunLigthIntensity=this._byte.readFloat(),this.sunLigthColor.scaleBy(this.sunLigthIntensity),this.nrmDircet.x=this._byte.readFloat(),this.nrmDircet.y=this._byte.readFloat(),this.nrmDircet.z=this._byte.readFloat()),a.MeshDataManager.getInstance().readData(this._byte,this.meshBatchNum,this.roleUrl,this.version),this.readAction()},c.prototype.readAction=function(){var b,c=this;b=this.version>=30?getZipByte(this._byte):this._byte,this.actionAry=new Array;for(var d=b.readInt(),e=0;d>e;e++){var f=b.readUTF();a.AnimManager.getInstance().readData(b,this.roleUrl+f),this.actionAry.push(f)}this.read(function(){c.readNext()})},c.prototype.readNext=function(){this.read(),this.read(),this._fun()},c}(a.BaseRes);a.RoleRes=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.meshBatchNum=1,a}return __extends(c,b),c.prototype.load=function(b,c){var d=this;this._fun=c,a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a){d.loadComplete(a)})},c.prototype.loadComplete=function(b){var c=this;this._byte=new a.Pan3dByteArray(b),this._byte.position=0,this.version=this._byte.readInt(),this.skillUrl=this._byte.readUTF(),this.read(function(){c.readNext()})},c.prototype.readNext=function(){if(this.read(),this.read(),this.version<27){this._byte.readUTF()}this.data=this.readData(this._byte),this._fun()},c.prototype.readData=function(b){for(var c=b.readInt(),d=new Object,e=0;c>e;e++){var f=new Object,g=b.readUTF(),h=b.readUTF();if(f.skillname=g,f.action=h,f.type=b.readFloat(),this.version>=26?(f.blood=b.readInt(),0==f.blood&&(f.blood=a.SkillVo.defaultBloodTime)):f.blood=a.SkillVo.defaultBloodTime,this.version>=32){var i=b.readInt();if(i>0){var j=b.readUTF();f.sound={time:i,name:j}}}if(this.version>=33){var k=b.readInt();if(k){for(var l=new Array,m=0;k>m;m++){var n=new Object;n.time=b.readInt(),n.lasttime=b.readInt(),n.amp=b.readFloat(),l.push(n)}f.shock=l}}f.data=new Array;for(var o=b.readInt(),p=0;o>p;p++){var q=new Object;switch(q.url=b.readUTF(),q.frame=b.readFloat(),f.type){case 1:q.beginType=b.readInt(),0==q.beginType?(q.beginPos=new a.Vector3D,q.beginPos.x=b.readFloat(),q.beginPos.y=b.readFloat(),q.beginPos.z=b.readFloat()):1==q.beginType&&(q.beginSocket=b.readUTF()),q.hitSocket=b.readUTF(),q.endParticle=b.readUTF(),q.multype=b.readInt(),q.speed=b.readFloat();break;case 3:q.beginSocket=b.readUTF(),q.beginType=b.readFloat(),q.multype=b.readFloat(),q.speed=b.readFloat();break;case 4:if(this.version>=27){var r=b.readBoolean();q.hasSocket=r,r?q.socket=b.readUTF():(q.pos=this.readV3d(b),q.rotation=this.readV3d(b))}else q.hasSocket=!1,q.pos=this.readV3d(b),q.rotation=this.readV3d(b);break;default:alert("没有类型readData")}f.data.push(q)}d[g]=f}return d},c.prototype.readV3d=function(b){var c=new a.Vector3D;return c.x=b.readFloat(),c.y=b.readFloat(),c.z=b.readFloat(),c.w=b.readFloat(),c},c}(a.BaseRes);a.SkillRes=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b}(a.RoleRes);a.RoleResLow=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.load=function(b,c){var d=this;this._fun=c,a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a){d.loadComplete(a)})},c.prototype.loadComplete=function(b){var c=this;this._byte=new a.Pan3dByteArray(b),this._byte.position=0,this.read(function(){c.readNexte()})},c.prototype.readNexte=function(){this.read(),this.read(),this.objUrl=this._byte.readUTF(),this.materialUrl=this._byte.readUTF(),this._byte.readBoolean()&&(this.light=new a.LightVo,this.light.ambientColor[0]=this._byte.readFloat(),this.light.ambientColor[1]=this._byte.readFloat(),this.light.ambientColor[2]=this._byte.readFloat(),this.light.sunColor[0]=this._byte.readFloat(),this.light.sunColor[1]=this._byte.readFloat(),this.light.sunColor[2]=this._byte.readFloat(),this.light.sunDirect[0]=this._byte.readFloat(),this.light.sunDirect[1]=this._byte.readFloat(),this.light.sunDirect[2]=this._byte.readFloat()),this._fun()},c}(a.BaseRes);a.ModelRes=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){return null!==b&&b.apply(this,arguments)||this}return __extends(d,b),d.prototype.load=function(b,c){var d=this;this._fun=c,a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a){d.loadComplete(a)})},d.prototype.loadComplete=function(b){var c=this;this.dataAry=new Array,this._byte=new a.Pan3dByteArray(b),this._byte.position=0,this.version=this._byte.readInt(),this.read(function(){c.readNext()})},d.prototype.readNext=function(){this.read(),this.read(),this.read();var a=this._byte.readBoolean();if(a)for(var b=this._byte.readInt(),c=0;b>c;c++)this.readItem(!0);else this.readItem(!1);this._fun(),this._fun=null,this._byte=null},d.prototype.readItem=function(b){var d=this._byte.readInt(),e=new c;e.isGroup=b,b&&(e.x=this._byte.readFloat(),e.y=this._byte.readFloat(),e.z=this._byte.readFloat(),e.scaleX=this._byte.readFloat(),e.scaleY=this._byte.readFloat(),e.scaleZ=this._byte.readFloat(),e.rotationX=this._byte.readFloat(),e.rotationY=this._byte.readFloat(),e.rotationZ=this._byte.readFloat()),d==a.BaseRes.PREFAB_TYPE?(e.objUrl=this._byte.readUTF(),e.materialUrl=this._byte.readUTF(),this.version>=4&&(e.materialInfoArr=this.readMaterialInfo()),e.types=a.BaseRes.PREFAB_TYPE):d==a.BaseRes.SCENE_PARTICLE_TYPE&&(e.particleUrl=this._byte.readUTF(),e.types=a.BaseRes.SCENE_PARTICLE_TYPE),this.dataAry.push(e)},d.prototype.initReg=function(){this._objDic=new Object,this._materialDic=new Object,this._particleDic=new Object;for(var b=0;b<this.dataAry.length;b++){var c=this.dataAry[b];c.objUrl&&(this._objDic[a.Scene_data.fileRoot+c.objUrl]=!0),c.materialUrl&&(this._materialDic[a.Scene_data.fileRoot+c.materialUrl]=!0),c.particleUrl&&(this._particleDic[a.Scene_data.fileRoot+c.particleUrl]=!0)}for(var d in this._objDic)a.ObjDataManager.getInstance().registerUrl(d);for(var d in this._materialDic)a.MaterialManager.getInstance().registerUrl(d);for(var d in this._particleDic)a.ParticleManager.getInstance().registerUrl(d)},d.prototype.destory=function(){b.prototype.destory.call(this);for(var c in this._objDic)a.ObjDataManager.getInstance().releaseUrl(c);for(var c in this._materialDic)a.MaterialManager.getInstance().releaseUrl(c);for(var c in this._particleDic)a.ParticleManager.getInstance().releaseUrl(c);this.dataAry=null,this._objDic=null,this._particleDic=null,this._materialDic=null},d}(a.BaseRes);a.GroupRes=b;var c=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b}(a.Object3D);a.GroupItem=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function d(){return null!==b&&b.apply(this,arguments)||this}return __extends(d,b),d.prototype.load=function(b,c,e,f){var g=this;if(this.sceneData)return void(this.isNeedReload()?(c(),e(1),this.applyByteArray()):(c(),e(1),f(this.sceneData)));this._completeFun=c,this._readDataFun=f,this._progressFun=e;var h=d.sceneConfigData;h&&h[b]?this.loadZipMap(b,h[b].len):(b=a.Scene_data.fileRoot+getMapUrl(b),a.LoadManager.getInstance().load(b,a.LoadManager.BYTE_TYPE,function(a){g.loadComplete(a)},null,e))},d.prototype.loadZipMap=function(b,c){for(var d=this,e=new Array,f=new Array,g=0,h=new Array,i=0;c>i;i++)h[i]=0;for(var j=function(a){var b=a.response,c=e.indexOf(a);if(f[c]=b,g++,g==e.length){for(var h=0,i=0;i<f.length;i++)h+=f[i].byteLength;for(var j=new Uint8Array(h),k=0,i=0;i<f.length;i++)j.set(new Uint8Array(f[i]),k),k+=f[i].byteLength;d.loadComplete(j.buffer)}},k=function(a,b){var f=e.indexOf(a);h[f]=b;for(var g=0,i=0;c>i;i++)g+=h[i];g/=c,d._progressFun(g)},i=0;c>i;i++){var l=new XMLHttpRequest;l.onreadystatechange=function(a){var b=a.target;200==b.status&&4==b.readyState&&j(b)},l.onprogress=function(a){var b=a.target;k(b,a.loaded/a.total)};var m=a.Scene_data.fileRoot+getZipMapUrl(b)+i+".txt";e.push(l),l.open("GET",m,!0),l.responseType="arraybuffer",l.send()}},d.prototype.isNeedReload=function(){for(var b=this.sceneData.buildItem,c=0;c<b.length;c++)if(b[c].type==a.BaseRes.PREFAB_TYPE&&b[c].lighturl){var d=a.Scene_data.fileRoot+b[c].lighturl;return a.TextureManager.getInstance().hasTexture(d)?!1:!0}return a.ResCount.GCTime-this.idleTime<10},d.prototype.loadComplete=function(b){this._byte=new a.Pan3dByteArray(b),this._completeFun(),this.applyByteArray()},d.prototype.applyByteArray=function(){var a=this;this._byte.position=0,this.version=this._byte.readInt(),this.read(function(){a.readNext()})},d.prototype.readNext=function(){this.read(),this.read(),this.read(),this.readScene(),this._readDataFun(this.sceneData)},d.prototype.readScene=function(){this._byte.readInt();this.readAstat(),this.version>=28&&this.readTerrainIdInfoBitmapData(this._byte);var a=this._byte.readInt();this.sceneData=JSON.parse(this._byte.readUTFBytes(a)),this.sceneData.astar=this._astarDataMesh,this.sceneData.terrain=this._terrainDataItem},d.prototype.readTerrainIdInfoBitmapData=function(b){var c=b.readInt();if(c){var d=c,e=b.buffer.slice(b.position,b.position+d);b.position+=d;var f=unZip(e),g=new a.Pan3dByteArray(f);this._terrainDataItem=a.GroundDataMesh.meshAllgroundData(g)}},d.prototype.readAstat=function(){var b=this._byte.readBoolean();if(b){this._astarDataMesh=new c,this._astarDataMesh.aPos=new a.Vector3D,this._astarDataMesh.astarItem=new Array,this._astarDataMesh.heightItem=new Array,this._astarDataMesh.jumpItem=new Array,this._astarDataMesh.midu=this._byte.readFloat(),this._astarDataMesh.aPos.x=this._byte.readFloat(),this._astarDataMesh.aPos.y=this._byte.readFloat(),this._astarDataMesh.aPos.z=this._byte.readFloat();var d,e,f=this._byte.readInt(),g=this._byte.readInt();if(this._astarDataMesh.width=f,this._astarDataMesh.height=g,this.version<25){for(d=0;g>d;d++){var h=new Array;for(e=0;f>e;e++)h.push(this._byte.readFloat());this._astarDataMesh.astarItem.push(h)}for(d=0;g>d;d++){var i=new Array;for(e=0;f>e;e++)i.push(this._byte.readFloat());this._astarDataMesh.heightItem.push(i)}}else{var j=this._byte.readFloat(),k=this.readAstarFromByte(this._byte),l=this.readAstarFromByte(this._byte),m=0,n=0;for(d=0;g>d;d++){var h=new Array,o=new Array;for(e=0;f>e;e++){var p=k[m++];if(h.push(p),1==p){var q=l[n++];o.push(q)}else o.push(0)}this._astarDataMesh.astarItem.push(h),this._astarDataMesh.jumpItem.push(o)}for(this._astarDataMesh.jumpItem,d=0;g>d;d++){var i=new Array;for(e=0;f>e;e++)i.push(this._byte.readShort()/j);this._astarDataMesh.heightItem.push(i)}}}},d.prototype.readAstarFromByte=function(a){for(var b=a.readUnsignedInt(),c=Math.ceil(b/32),d=new Array,e=0;c>e;e++)for(var f=a.readUnsignedInt(),g=0;32>g;g++){var h=1&f;d.length<b&&d.push(h),f>>=1}return d},d}(a.BaseRes);a.SceneRes=b;var c=function(){function a(){}return a}()}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(b){void 0===b&&(b=0),this._callback_index=0,this._event_key_type=b,b==a.KEY_TYPE_STRING?this._event_id_str=new Array:b==a.KEY_TYPE_INT?this._event_id_int=new Array:b==a.KEY_TYPE_INT_MASK&&(this._event_id_int_mask=new Array),this._event_callback=new Array,this._event_index=new Array}return a.prototype.DispatchIndex=function(b){var c;if(this._event_key_type==a.KEY_TYPE_STRING)for(c in this._event_index)this._event_callback[this._event_index[c]](b);else if(this._event_key_type==a.KEY_TYPE_INT)for(c in this._event_index)this._event_callback[this._event_index[c]](b);else if(this._event_key_type==a.KEY_TYPE_INT_MASK)for(c in this._event_index)this._event_callback[this._event_index[c]](b)},a.prototype.DispatchString=function(b,c){if(this._event_key_type!=a.KEY_TYPE_STRING)throw new Error("this.DispatchIndex/this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING");this._event_index.length=0;for(var d=this._event_callback.length,e=0;d>e;e++)b==this._event_id_str[e]&&this._event_index.unshift(e);this._event_index.length&&this.DispatchIndex(c)},a.prototype.DispatchInt=function(b,c){if(this._event_key_type!=a.KEY_TYPE_INT)throw new Error("this.DispatchIndex/this._event_key_type != NetEventDispatcher.KEY_TYPE_INT");this._event_index.length=0;for(var d=this._event_callback.length,e=0;d>e;e++)b==this._event_id_int[e]&&this._event_index.unshift(e);this._event_index.length&&this.DispatchIndex(c)},a.prototype.DispatchIntMask=function(b,c){if(this._event_key_type!=a.KEY_TYPE_INT_MASK)throw new Error("this.DispatchIndex/this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK");this._event_index.length=0;for(var d=this._event_callback.length,e=0;d>e;e++)this._event_id_int_mask[e].test(b)&&this._event_index.unshift(e);this._event_index.length&&this.DispatchIndex(c)},a.prototype.Dispatch=function(a,b){this._event_index.length=0;for(var c=this._event_callback.length,d=0;c>d;d++)b(this._event_id_int[d],a)&&this._event_index.unshift(d);this._event_index.length&&this.DispatchIndex(a)},a.prototype.AddListenInt=function(b,c){if(this._event_key_type!=a.KEY_TYPE_INT)throw new Error("AddListenInt but (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)");for(var d=0;d<this._event_id_int.length;d++)if(this._event_id_int[d]==b&&this._event_callback[d]==c)return;this._event_id_int.push(b),this._event_callback.push(c)},a.prototype.AddListenString=function(b,c){if(this._event_key_type!=a.KEY_TYPE_STRING)throw new Error("AddListenString but (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)");
for(var d=0;d<this._event_id_str.length;d++)if(this._event_id_str[d]==b&&this._event_callback[d]==c)return;this._event_id_str.push(b),this._event_callback.push(c)},a.prototype.AddListenIntMask=function(b,c){if(this._event_key_type!=a.KEY_TYPE_INT_MASK)throw new Error("AddListenString but (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT_MASK)");for(var d=0;d<this._event_id_int_mask.length;d++)if(this._event_id_int_mask[d].equals(b)&&this._event_callback[d]==c)return;this._event_id_int_mask.push(b.clone()),this._event_callback.push(c)},a.prototype.removeListenerInt=function(b,c){if(void 0===c&&(c=null),this._event_key_type!=a.KEY_TYPE_INT)throw new Error("removeListenerInt but (this._event_key_type != NetEventDispatcher.KEY_TYPE_INT)");for(var d=0;d<this._event_id_int.length;)this._event_id_int[d]!=b||null!=c&&this._event_callback[d]!=c?d++:(this._event_id_int.splice(d,1),this._event_callback.splice(d,1))},a.prototype.removeListenerString=function(b,c){if(void 0===c&&(c=null),this._event_key_type!=a.KEY_TYPE_STRING)throw new Error("removeListenerString but (this._event_key_type != NetEventDispatcher.KEY_TYPE_STRING)");for(var d=0;d<this._event_id_str.length;)this._event_id_str[d]!=b||null!=c&&this._event_callback[d]!=c?d++:(this._event_id_str.splice(d,1),this._event_callback.splice(d,1))},a.prototype.removeListenerUpdateMask=function(b,c){if(void 0===c&&(c=null),this._event_key_type!=a.KEY_TYPE_INT_MASK)throw new Error("removeListenerUpdateMask but ()");for(var d=0;d<this._event_id_int_mask.length;)!this._event_id_int_mask[d].equals(b)||null!=c&&this._event_callback[d]!=c?d++:(this._event_id_int_mask.splice(d,1),this._event_callback.splice(d,1))},a.prototype.AddCallback=function(b){if(this._event_key_type==a.KEY_TYPE_STRING)throw new Error("AddCallback but (this._event_key_type == NetEventDispatcher.KEY_TYPE_STRING)");var c=this._callback_index+1;do{c=this._callback_index+1;for(var d in this._event_id_int)0!=c&&c!=Number(d);this._callback_index=c}while(!1);return this.AddListenInt(c,b),c},a.prototype.Clear=function(){this._event_callback&&(this._event_callback.length=0),this._event_id_int&&(this._event_id_int.length=0),this._event_id_str&&(this._event_id_str.length=0),this._event_index&&(this._event_index.length=0),this._event_id_int_mask&&(this._event_id_int_mask.length=0)},a.KEY_TYPE_INT=0,a.KEY_TYPE_STRING=1,a.KEY_TYPE_INT_MASK=2,a}();a.NetEventDispatcher=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this._bytes=new a.Pan3dByteArray,this._bytes.endian=a.Endian.LITTLE_ENDIAN}return Object.defineProperty(b.prototype,"baseByteArray",{get:function(){return this._bytes},enumerable:!0,configurable:!0}),b.prototype.Clear=function(){this._bytes.clear()},b.prototype.GetBits=function(a,b){void 0===b&&(b=1);for(var c=0;b>c;c++)if(this.GetBit(a+c))return!0;return!1},b.prototype.GetBit=function(a){return a>>3<this._bytes.length?0!=(this._bytes.getByte(a>>3)&1<<(7&a)):!1},b.prototype.SetBit=function(a){a>>3>=this._bytes.length&&(this._bytes.length=(a>>3)+1),this._bytes.setByte(a>>3,this._bytes.getByte(a>>3)|1<<(7&a))},b.prototype.WriteTo=function(a){return this._bytes.position=0,a.writeShort(this._bytes.length),this._bytes.length&&a.writeBytes(this._bytes),!0},b.prototype.ReadFrom=function(a){this._bytes.clear();var b=a.readUnsignedShort();return this._bytes.length=b,b&&a.readBytes(this._bytes,0,b),!0},b.prototype.GetCount=function(){return this._bytes.length<<3},b.prototype.SetCount=function(a){this._bytes.length=a+7>>3},b.prototype.empty=function(){for(var a=0;a<this._bytes.length;a++)if(0!=this._bytes.getByte(a))return!1;return!0},b.prototype.or=function(a){var b=a._bytes.length;this._bytes.length<b&&(this._bytes.length=b);for(var c=0;b>c;c++)this._bytes[c]|=a._bytes[c]},b.prototype.test=function(a){for(var b=this._bytes.length>a._bytes.length?a._bytes.length:this._bytes.length,c=0;b>c;c++)if(this._bytes[c]&a._bytes[c])return!0;return!1},b.prototype.condense=function(){for(var a=this._bytes.length;a>0&&(a--,0==this._bytes[a]);)this._bytes.length--},b.prototype.equals=function(a){if(this.condense(),a.condense(),this._bytes.length!=a._bytes.length)return!1;for(var b=0;b<this._bytes.length;b++)if(this._bytes[b]!=a._bytes[b])return!1;return!0},b.prototype.clone=function(){for(var a=new b,c=0;c<this._bytes.length;c++)a._bytes[c]=this._bytes[c];return a},b}();a.UpdateMask=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this._indexerExp=new Array,this._objs=new Array,this._evFilter=new Array}return a.prototype.createIndex=function(a){var b=this.getIndex(a);return-1==b&&(b=this._indexerExp.length,this._indexerExp[b]=new RegExp(a,"g"),this._objs[b]=new Array,this._evFilter[b]=null),b},a.prototype.getIndex=function(a){var b=-1;for(var c in this._indexerExp){b++;var d=this._indexerExp[c];if(d.source==a)return b}return-1},a.prototype.releaseIndex=function(a){var b=this.getIndex(a);-1!=b&&(this._indexerExp.splice(b,1),this._objs.splice(b,1),this._evFilter.splice(b,1))},a.prototype.test=function(a){for(var b=0;b<this._indexerExp.length;b++)if(this._indexerExp[b].lastIndex=0,this._indexerExp[b].test(a))return b;return-1},a.prototype.insert=function(a){var b=this.test(a.guid);b>=0&&this._objs[b]&&-1==this._objs[b].indexOf(a)&&(this._objs[b][this._objs[b].length]=a)},a.prototype.remove=function(a){var b=this.test(a);if(-1!=b)for(var c=0;c<this._objs[b].length;c++)if(this._objs[b][c].guid==a)return void this._objs[b].splice(c,1)},a.prototype.query=function(a){var b=this.getIndex(a);return-1==b?null:this._objs[b]},a.prototype.get=function(a){return 0>a||a>=this._objs.length?null:this._objs[a]},a.prototype.matchObject=function(a){if(!a)return null;var b=this.test(a.guid);return b>=0?this._evFilter[b]:null},a.prototype.filter=function(a,b){var c=this.getIndex(a);if(0>c||c>=this._objs.length)throw new Error("indexTyp < 0 || indexTyp >= this._objs.length");if(c>=this._evFilter.length)throw new Error("indexTyp >= this._evFilter.length");this._evFilter[c]=b},a.prototype.Clear=function(){if(this._indexerExp&&(this._indexerExp.length=0,this._indexerExp=null),this._objs&&(this._objs.length=0,this._objs=null),this._evFilter)for(;this._evFilter.length;){var a=this._evFilter.shift();a&&a.Clear()}},a}();a.StringIndexer=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.init=function(){b.tmpValueBytes=new a.Pan3dByteArray,b.tmpValueBytes.endian=a.Endian.LITTLE_ENDIAN},b.OBJ_OPT_NEW=1,b.OBJ_OPT_DELETE=2,b.OBJ_OPT_UPDATE=4,b.OBJ_OPT_BINLOG=8,b.OBJ_OPT_U_GUID=16,b.OPT_SET=1,b.OPT_UNSET=2,b.OPT_ADD=4,b.OPT_SUB=8,b.TYPE_UINT32=0,b.TYPE_UINT16=1,b.TYPE_UINT8=2,b.TYPE_BIT=3,b.TYPE_UINT64=4,b.TYPE_INT32=5,b.TYPE_STRING=6,b.TYPE_INT16=7,b.TYPE_FLOAT=9,b.TYPE_DOUBLE=10,b.ATOMIC_OPT_RESULT_NO=0,b.ATOMIC_OPT_RESULT_TRY=1,b.ATOMIC_OPT_RESULT_OK=2,b.ATOMIC_OPT_RESULT_FAILED=-1,b}();a.SyncEvent=b,b.init()}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=null!==b&&b.apply(this,arguments)||this;return a._value_u32_buffer=new DataView(new ArrayBuffer(4)),a._old_value_u32_buffer=new DataView(new ArrayBuffer(4)),a}return __extends(c,b),c.malloc=function(){return 0==c._pool.length?new c:c._pool.pop()},c.free=function(a){a.Clear(),c._pool[c._pool.length]=a},c.prototype.BinLogStru=function(){this.Clear()},Object.defineProperty(c.prototype,"opt",{get:function(){return this._opt},set:function(a){this._opt=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"index",{get:function(){return this._index},set:function(a){this._index=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"offset",{get:function(){return this._value_u32_buffer.getUint8(0)},set:function(a){this._value_u32_buffer.setUint8(0,a)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"typ",{get:function(){return this._typ},set:function(a){this._typ=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"atomic_opt",{get:function(){return this._atomic_opt},set:function(a){this._atomic_opt=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"callback_idx",{get:function(){return this._callback_index},set:function(a){this._callback_index=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"uint32",{get:function(){return this._value_u32_buffer.getUint32(0,!0)},set:function(b){this._typ=a.SyncEvent.TYPE_UINT32,this._value_u32_buffer.setUint32(0,b,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"int32",{get:function(){if(this._typ!=a.SyncEvent.TYPE_INT32)throw new Error("get int32 but _typ != SyncEvent.TYPE_INT32!");return this._value_u32_buffer.getInt32(0,!0)},set:function(b){this._typ=a.SyncEvent.TYPE_INT32,this._value_u32_buffer.setInt32(0,b,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"bit",{get:function(){if(this._typ!=a.SyncEvent.TYPE_BIT)throw new Error("get bit but _typ != SyncEvent.TYPE_BIT");return this._value_u32_buffer.getUint32(0,!0)},set:function(b){this._typ=a.SyncEvent.TYPE_BIT,this._value_u32_buffer.setUint32(0,b,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"old_int32",{get:function(){if(this._typ!=a.SyncEvent.TYPE_INT32)throw new Error("get int32 but _typ != SyncEvent.TYPE_INT32!");return this._old_value_u32_buffer.getInt32(0,!0)},set:function(b){if(this._typ!=a.SyncEvent.TYPE_INT32)throw new Error("get int32 but _typ != SyncEvent.TYPE_INT32!");this._old_value_u32_buffer.setInt32(0,b,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"uint16",{get:function(){if(this._typ!=a.SyncEvent.TYPE_UINT16)throw new Error("get uint16 but _typ != SyncEvent.TYPE_UINT16!");return this._value_u32_buffer.getUint16(2,!0)},set:function(b){this._typ=a.SyncEvent.TYPE_UINT16,this._value_u32_buffer.setUint16(2,b,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"int16",{get:function(){if(this._typ!=a.SyncEvent.TYPE_INT16)throw new Error("get int16 but _typ != SyncEvent.TYPE_INT16!");return this._value_u32_buffer.getInt16(2,!0)},set:function(b){this._typ=a.SyncEvent.TYPE_INT16,this._value_u32_buffer.setInt16(2,b,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"byte",{get:function(){if(this._typ!=a.SyncEvent.TYPE_UINT8)throw new Error("get uint8 but _typ != SyncEvent.TYPE_UINT8!");return this._value_u32_buffer.getInt8(2)},set:function(b){this._typ=a.SyncEvent.TYPE_UINT8,this._value_u32_buffer.setInt8(2,b)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"double",{get:function(){return this._value_dbe},set:function(a){this._value_dbe=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"float",{get:function(){return this._value_u32_buffer.getFloat32(0,!0)},set:function(a){this._value_u32_buffer.setFloat32(0,a,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"str",{get:function(){if(this._typ!=a.SyncEvent.TYPE_STRING)throw new Error("get str but _typ != SyncEvent.TYPE_STRING!");return this._value_str},set:function(b){this._typ=a.SyncEvent.TYPE_STRING,this._value_str=b},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"old_str",{get:function(){if(this._typ!=a.SyncEvent.TYPE_STRING)throw new Error("get old_str but _typ != SyncEvent.TYPE_STRING!");return this._old_value_str},set:function(b){if(this._typ!=a.SyncEvent.TYPE_STRING)throw new Error("set old_str but _typ != SyncEvent.TYPE_STRING!");this._old_value_str=b},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"value",{get:function(){return this._value_u32_buffer.getUint32(0,!0)},set:function(a){this._value_u32_buffer.setUint32(0,a,!0)},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"old_value",{get:function(){return this._old_value_u32_buffer.getUint32(0,!0)},set:function(a){this._old_value_u32_buffer.setUint32(0,a,!0)},enumerable:!0,configurable:!0}),c.prototype.Clear=function(){this._opt=0,this._typ=0,this._index=0,this._atomic_opt=a.SyncEvent.ATOMIC_OPT_RESULT_NO,this._value_u32_buffer.setUint32(0,0,!0),this._value_dbe=0,this._value_str="",this._callback_index=0,this._old_value_u32_buffer.setUint32(0,0,!0),this._old_value_dbe=0,this._old_value_str=""},c.prototype.ReadFrom=function(b){return this._opt=b.readUnsignedByte(),this._typ=b.readUnsignedByte(),this._index=b.readShort(),this._atomic_opt=b.readByte(),this._typ==a.SyncEvent.TYPE_STRING?this._value_str=b.readUTF():this._typ==a.SyncEvent.TYPE_DOUBLE?this._value_dbe=b.readDouble():this.value=b.readUnsignedInt(),this._atomic_opt&&(this._callback_index=b.readUnsignedInt(),this._typ==a.SyncEvent.TYPE_STRING?this._old_value_str=b.readUTF():this._typ==a.SyncEvent.TYPE_DOUBLE?this._old_value_dbe=b.readDouble():this.old_value=b.readUnsignedInt()),!0},c.prototype.WriteTo=function(b){b.writeByte(this._opt),b.writeByte(this._typ),b.writeShort(this._index),b.writeByte(this._atomic_opt),this._typ==a.SyncEvent.TYPE_STRING?b.writeUTF(this._value_str?this._value_str:""):this._typ==a.SyncEvent.TYPE_DOUBLE?b.writeDouble(this._value_dbe):b.writeUnsignedInt(this.value),this._atomic_opt&&(b.writeUnsignedInt(this._callback_index),this._typ==a.SyncEvent.TYPE_STRING?b.writeUTF(this._old_value_str?this._old_value_str:""):this._typ==a.SyncEvent.TYPE_DOUBLE?b.writeDouble(this._old_value_dbe):b.writeUnsignedInt(this.old_value))},c.prototype.clone=function(){var a=c.malloc();return a._opt=this._opt,a._typ=this._typ,a._index=this._index,a._atomic_opt=this._atomic_opt,a.value=this.value,a._value_dbe=this._value_dbe,a._value_str=this._value_str,a._callback_index=this._callback_index,a.old_value=this.old_value,a._old_value_dbe=this._old_value_dbe,a._old_value_str=this._old_value_str,a},c._pool=new Array,c}(a.SyncEvent);a.BinLogStru=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._events_value=new a.NetEventDispatcher,c._events_str_values=new a.NetEventDispatcher,c._events_mask=new a.NetEventDispatcher(a.NetEventDispatcher.KEY_TYPE_INT_MASK),c._events_callback=new a.NetEventDispatcher,c._uint32_values_len=0,c._str_values_len=0,c._str_values=new Array,c._guid="",c._tmpBinlog=new a.BinLogStru,c._afterUpdateIntObj=new Object,c._afterUpdateStrObj=new Object,c._uint32_values_buffer=new DataView(new ArrayBuffer(0)),c}return __extends(c,b),Object.defineProperty(c.prototype,"guid",{get:function(){return this._guid},set:function(a){this._guid=a},enumerable:!0,configurable:!0}),c.prototype.Reset=function(){this._events_value.Clear(),this._events_str_values.Clear(),this._events_callback.Clear(),this.clearValues()},c.prototype.clearValues=function(){this._uint32_values_len=0,this._uint32_values_buffer=new DataView(new ArrayBuffer(0)),this._str_values_len=0,this._str_values.length=this._str_values_len},c.prototype.checkIntSize=function(a){for(var b=!1;a>=this._uint32_values_len;)this._uint32_values_len+=8,b=!0;if(b){var c=new Uint8Array(new ArrayBuffer(this._uint32_values_len<<2));c.set(new Uint8Array(this._uint32_values_buffer.buffer,0,this._uint32_values_buffer.buffer.byteLength)),this._uint32_values_buffer=new DataView(c.buffer)}},c.prototype.checkStrSize=function(a){for(;a>=this._str_values_len;)this._str_values_len+=8,this._str_values.length=this._str_values_len},c.prototype.OnEventSyncBinLog=function(b){this._after_update&&(b.typ==a.SyncEvent.TYPE_STRING?this._afterUpdateStrObj[b.index]=!0:this._afterUpdateIntObj[b.index]=!0),b.atomic_opt?this._events_callback.DispatchInt(b.callback_idx,b):b.typ==a.SyncEvent.TYPE_STRING?this._events_str_values.DispatchInt(b.index,b):this._events_value.DispatchInt(b.index,b)},c.prototype.AddListen=function(a,b){this._events_value.AddListenInt(a,b)},c.prototype.AddListens=function(a,b){void 0===b&&(b=null);for(var d=[],e=2;e<arguments.length;e++)d[e-2]=arguments[e];c.addListens_mask.Clear();for(var f=0;f<d.length;f++)c.addListens_mask.SetBit(a+d[f]);this._events_mask.AddListenIntMask(c.addListens_mask,b)},c.prototype.removeListene=function(a,b){void 0===b&&(b=null),this._events_value.removeListenerInt(a,b)},c.prototype.removeListenes=function(a,b){void 0===b&&(b=null);for(var d=[],e=2;e<arguments.length;e++)d[e-2]=arguments[e];c.addListens_mask.Clear();for(var f=0;f<d.length;f++)c.addListens_mask.SetBit(a+d[f]);this._events_mask.removeListenerUpdateMask(c.addListens_mask,b)},c.prototype.AddListenString=function(a,b){this._events_str_values.AddListenInt(a,b)},c.prototype.removeListeneString=function(a,b){void 0===b&&(b=null),this._events_str_values.removeListenerInt(a,b)},c.prototype.GetDouble=function(a){return a+1<this._uint32_values_len?this._uint32_values_buffer.getFloat64(a<<2,!0):0},c.prototype.GetUInt32=function(a){return a<this._uint32_values_len?this._uint32_values_buffer.getUint32(a<<2,!0):0},c.prototype.GetInt32=function(a){return a<this._uint32_values_len?this._uint32_values_buffer.getInt32(a<<2,!0):0},c.prototype.GetUInt16=function(a,b){return a<this._uint32_values_len?this._uint32_values_buffer.getUint16((a<<2)+(b<<1),!0):0},c.prototype.GetInt16=function(a,b){return a<this._uint32_values_len?this._uint32_values_buffer.getInt16((a<<2)+(b<<1),!0):0},c.prototype.GetFloat=function(a){return a<this._uint32_values_len?this._uint32_values_buffer.getFloat32(a<<2,!0):0},c.prototype.GetByte=function(a,b){return a<this._uint32_values_len?this._uint32_values_buffer.getInt8((a<<2)+b):0},c.prototype.GetUInt8=function(a,b){return a<this._uint32_values_len?this._uint32_values_buffer.getUint8((a<<2)+b):0},c.prototype.GetBit=function(a,b){return a+=b>>5,a<this._uint32_values_len?Boolean(this._uint32_values_buffer.getUint32(a<<2,!0)>>(31&b)&1):!1},c.prototype.SetBit=function(a,b,c){var d=this._uint32_values_buffer.getUint32(a<<2,!0);d=d&(4294967295^1<<b)|(c?1:0)<<b,this._uint32_values_buffer.setUint32(a<<2,d,!0)},c.prototype.GetStr=function(a){return a<this._str_values_len&&this._str_values[a]?this._str_values[a]:""},c.prototype.SetDouble=function(a,b){this.checkIntSize(a+1),this._uint32_values_buffer.setFloat64(a<<2,b,!0)},c.prototype.AddDouble=function(a,b){this.checkIntSize(a+1),this.SetDouble(a,this.GetDouble(a)+b)},c.prototype.SubDouble=function(a,b){this.checkIntSize(a+1),this.SetDouble(a,this.GetDouble(a)-b)},c.prototype.SetUInt32=function(a,b){this.checkIntSize(a),this._uint32_values_buffer.setUint32(a<<2,b,!0)},c.prototype.AddUInt32=function(a,b){this.SetUInt32(a,this.GetUInt32(a)+b)},c.prototype.SubUInt32=function(a,b){this.SetUInt32(a,this.GetUInt32(a)-b)},c.prototype.SetInt32=function(a,b){this.checkIntSize(a),this._uint32_values_buffer.setInt32(a<<2,b,!0)},c.prototype.AddInt32=function(a,b){this.SetInt32(a,this.GetInt32(a)+b)},c.prototype.SubInt32=function(a,b){this.SetInt32(a,this.GetInt32(a)-b)},c.prototype.SetUInt16=function(a,b,c){this.checkIntSize(a),this._uint32_values_buffer.setUint16((a<<2)+(b<<1),c,!0)},c.prototype.AddUInt16=function(a,b,c){this.checkIntSize(a),this.SetUInt16(a,b,this.GetUInt16(a,b)+c)},c.prototype.SubUInt16=function(a,b,c){this.checkIntSize(a),this.SetUInt16(a,b,this.GetUInt16(a,b)-c)},c.prototype.SetInt16=function(a,b,c){this.checkIntSize(a),this._uint32_values_buffer.setInt16((a<<2)+(b<<1),c,!0)},c.prototype.AddInt16=function(a,b,c){this.SetInt16(a,b,this.GetInt16(a,b)+c)},c.prototype.SubInt16=function(a,b,c){this.SetInt16(a,b,this.GetInt16(a,b)-c)},c.prototype.SetFloat=function(a,b){this.checkIntSize(a),this._uint32_values_buffer.setFloat32(a<<2,b,!0)},c.prototype.SetByte=function(a,b,c){this.checkIntSize(a),this._uint32_values_buffer.setInt8((a<<2)+b,c)},c.prototype.AddByte=function(a,b,c){this.SetByte(a,b,this.GetByte(a,b)+c)},c.prototype.SubByte=function(a,b,c){this.SetByte(a,b,this.GetByte(a,b)-c)},c.prototype.SetStr=function(a,b){this.checkStrSize(a),this._str_values[a]=b},c.prototype.ReadValues=function(b,c,d){for(var e=b.GetCount(),f=0;e>f;f++)if(b.GetBit(f)){this.checkIntSize(f);var g=d?null:a.BinLogStru.malloc();g&&(g.typ=a.SyncEvent.TYPE_UINT32,g.index=f,g.old_value=this.GetUInt32(f)),this.SetUInt32(f,c.readUnsignedInt()),g&&(g.value=this.GetUInt32(f),this._events_value.DispatchInt(g.index,g),a.BinLogStru.free(g),this._after_update&&(this._afterUpdateIntObj[f]=!0))}return!0},c.prototype.ReadStringValues=function(b,c,d){for(var e=b.GetCount(),f=0;e>f;f++)if(b.GetBit(f)){this.checkStrSize(f);var g=d?null:a.BinLogStru.malloc();g&&(g.index=f,g.typ=a.SyncEvent.TYPE_STRING,g.old_str=this._str_values[f]),this._str_values[f]=c.readUTF(),g&&(g.str=this._str_values[f],this._events_str_values.DispatchInt(g.index,g),a.BinLogStru.free(g),this._after_update&&(this._afterUpdateStrObj[f]=!0))}return!0},c.prototype.GetCreateMask=function(a){a.Clear();for(var b=0;b<this._uint32_values_len;b++)this.GetUInt32(b)&&a.SetBit(b)},c.prototype.GetCreateStringMask=function(a){a.Clear();for(var b=0;b<this._str_values_len;b++)this._str_values[b]&&this._str_values[b].length>0&&a.SetBit(b)},c.prototype.ApplyAtomicBinLog=function(b){if(b.atomic_opt==a.SyncEvent.ATOMIC_OPT_RESULT_FAILED||b.atomic_opt==a.SyncEvent.ATOMIC_OPT_RESULT_OK)return void this._events_callback.DispatchInt(b.callback_idx,b);if(b._typ==a.SyncEvent.TYPE_STRING)return this.checkStrSize(b._index),void(b._old_value_str!=this._str_values[b._index]?(b._old_value_str=b._value_str,b._value_str=this._str_values[b._index],b._atomic_opt=a.SyncEvent.ATOMIC_OPT_RESULT_FAILED):(b._atomic_opt=a.SyncEvent.ATOMIC_OPT_RESULT_OK,this.ApplyBinLog(b)));this.checkIntSize(b._index);var c=this.GetUInt32(b.index);b.old_value!=c?(b.old_value=b.value,b.value=c,b._atomic_opt=a.SyncEvent.ATOMIC_OPT_RESULT_FAILED):(b._atomic_opt=a.SyncEvent.ATOMIC_OPT_RESULT_OK,this.ApplyBinLog(b))},c.prototype.ApplyBinLog=function(b){var c=b.index;if(b._typ==a.SyncEvent.TYPE_STRING)return this.checkStrSize(c),b.old_str=this._str_values[c]?this._str_values[c]:"",void(this._str_values[c]=b._value_str);if(b.typ==a.SyncEvent.TYPE_DOUBLE?(this._uint32_values_len>c+1&&(b._old_value_dbe=this.GetDouble(c)),this.checkIntSize(c+1)):(b.typ!=a.SyncEvent.TYPE_BIT&&this._uint32_values_len>c&&(b.old_value=this.GetUInt32(c)),this.checkIntSize(c)),b.typ==a.SyncEvent.TYPE_UINT32||b.typ==a.SyncEvent.TYPE_INT32||b.typ==a.SyncEvent.TYPE_FLOAT)switch(b.opt){case a.SyncEvent.OPT_SET:this.SetUInt32(c,b.uint32);break;case a.SyncEvent.OPT_ADD:this.AddUInt32(c,b.uint32);break;case a.SyncEvent.OPT_SUB:this.SubUInt32(c,b.uint32)}else if(b.typ==a.SyncEvent.TYPE_DOUBLE)switch(b.opt){case a.SyncEvent.OPT_SET:this.SetDouble(c,b["double"]);break;case a.SyncEvent.OPT_ADD:this.AddDouble(c,b["double"]);break;case a.SyncEvent.OPT_SUB:this.SubDouble(c,b["double"])}else if(b.typ==a.SyncEvent.TYPE_BIT)switch(b.opt){case a.SyncEvent.OPT_SET:this.SetBit(c,b.uint32,!0);break;case a.SyncEvent.OPT_UNSET:this.SetBit(c,b.uint32,!1);break;default:throw"JLC_BinLogObject_BIT:op type is error."}else{var d=0;switch(b.typ){case a.SyncEvent.TYPE_UINT16:switch(b.opt){case a.SyncEvent.OPT_SET:this.SetUInt16(c,b.offset,b.uint16);break;case a.SyncEvent.OPT_ADD:this.AddUInt16(c,b.offset,b.uint16);break;case a.SyncEvent.OPT_SUB:this.SubUInt16(c,b.offset,b.uint16);break;default:throw"JLC_BinLogObject_UINT16:unknow OP type"}break;case a.SyncEvent.TYPE_INT16:switch(b.opt){case a.SyncEvent.OPT_SET:this.SetInt16(c,b.offset,b.int16);break;case a.SyncEvent.OPT_ADD:this.AddInt16(c,b.offset,b.int16);break;case a.SyncEvent.OPT_SUB:this.SubInt16(c,b.offset,b.int16);break;default:throw"JLC_BinLogObject_UINT16:unknow OP type"}break;case a.SyncEvent.TYPE_UINT8:switch(d=0,b.opt){case a.SyncEvent.OPT_SET:this.SetByte(c,b.offset,b["byte"]);break;case a.SyncEvent.OPT_ADD:this.AddByte(c,b.offset,b["byte"]);break;case a.SyncEvent.OPT_SUB:this.SubByte(c,b.offset,b["byte"]);break;default:throw"JLC_BinLogObject_UINT8:op type is error."}break;default:throw"JLC_BinLogObject:op type is error."}}},c.prototype.clearAfterUpdateObj=function(){if(this._after_update){for(var a in this._afterUpdateIntObj)delete this._afterUpdateIntObj[a];for(var a in this._afterUpdateStrObj)delete this._afterUpdateStrObj[a]}},c.prototype.ReadFrom=function(b,d,e,f){void 0===e&&(e=null),void 0===f&&(f=!0);var g=Boolean(b&a.SyncEvent.OBJ_OPT_NEW);if(g&&this.clearValues(),(g||b&a.SyncEvent.OBJ_OPT_UPDATE)&&(e&&e.pushNew(),this.clearAfterUpdateObj(),c.tmpIntMask.ReadFrom(d),c.tmpStrMask.ReadFrom(d),this.ReadValues(c.tmpIntMask,d,g),this.ReadStringValues(c.tmpStrMask,d,g),null!=this._after_update&&f&&this._after_update(b,this._afterUpdateIntObj,this._afterUpdateStrObj)),b&a.SyncEvent.OBJ_OPT_BINLOG){c.tmpIntMask.Clear(),c.tmpStrMask.Clear(),this.clearAfterUpdateObj();for(var h=d.readUnsignedShort(),i=0;h>i;i++)this._tmpBinlog.ReadFrom(d),this._tmpBinlog._atomic_opt?this.ApplyAtomicBinLog(this._tmpBinlog):(e&&e.pushBinlog(this._tmpBinlog),this.ApplyBinLog(this._tmpBinlog)),this.OnEventSyncBinLog(this._tmpBinlog);null!=this._after_update&&this._after_update(b,this._afterUpdateIntObj,this._afterUpdateStrObj)}return g&&this.onBaseCreated(),!0},c.prototype.onBaseCreated=function(){},c.prototype.GetHashCode=function(){for(var b=2166136261,c=16777619,d=b,e=0;e<this._uint32_values_len;e++){var f=this.GetUInt32(e);d^=f,d*=c}var g=new a.Pan3dByteArray;g.endian=a.Endian.LITTLE_ENDIAN;var h=b;g.writeUTFBytes(this._guid);for(var e=0;e<g.length;e++)h^=g.getByte(e),h*=c;for(var i in this._str_values)for(g.clear(),g.writeUTFBytes(i?i:""),e=0;e<g.length;e++)h^=g[e],h*=c;return d^h<<1},c.prototype.Equals=function(a){return this._uint32_values_len>a._uint32_values_len?a.checkIntSize(this._uint32_values_len):this._uint32_values_len<a._uint32_values_len&&this.checkIntSize(a._uint32_values_len),this._str_values_len>a._str_values_len?a.checkStrSize(this._str_values_len):this._str_values_len>a._str_values_len&&this.checkStrSize(a._str_values_len),this.GetHashCode()==a.GetHashCode()},c.prototype.DeleteThis=function(){},c.prototype.dispose=function(){this.clearValues(),this._events_value.Clear(),this._events_str_values.Clear(),this._events_mask.Clear(),this._events_callback.Clear(),this._after_update=null},c.addListens_mask=new a.UpdateMask,c.tmpIntMask=new a.UpdateMask,c.tmpStrMask=new a.UpdateMask,c}(a.SyncEvent);a.SyncEventRecorder=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(b){void 0===b&&(b="");var c=a.call(this)||this;return c._ref=0,c.guid=b,c}return __extends(b,a),b.prototype.add_ref=function(a){this._ref=this._ref+a},Object.defineProperty(b.prototype,"ref",{get:function(){return this._ref},enumerable:!0,configurable:!0}),b.prototype.getName=function(){return"ccav"},b.prototype.getGuid=function(){return"991199"},b}(a.SyncEventRecorder);a.GuidObject=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._objs=new Object,c._hashGUID=null,c._u_2_guid=new Object,c._packet_pool=new Array,c._newEvent=new a.NetEventDispatcher(a.NetEventDispatcher.KEY_TYPE_STRING),c._delEvent=new a.NetEventDispatcher(a.NetEventDispatcher.KEY_TYPE_STRING),c._indexer=new a.StringIndexer,c}return __extends(c,b),c.prototype.Get=function(a){return this._objs[a]},Object.defineProperty(c.prototype,"indexer",{get:function(){return this._indexer},enumerable:!0,configurable:!0}),c.prototype.CreateObject=function(b){var c=this._objs[b];return c||(c=new a.GuidObject,c.guid=b,this.AttachObject(c)),c},c.prototype.ReleaseObject=function(a){var b=a.guid,c=this._objs[b];c&&this.DetachObject(c)},c.prototype.ReleaseKey=function(a){var b=this._objs[a];b&&this.DetachObject(b)},c.prototype.AttachObject=function(a){if(null==a)throw new Error("AttachObject,o==null");a.add_ref(1),this._objs[a.guid]=a,this._indexer.insert(a);var b=0;null!=this._hashGUID&&(b=this._hashGUID(a.guid),0!=b&&(this._u_2_guid[b]=a.guid))},c.prototype.DetachObject=function(a){if(a.add_ref(-1),a.ref<=0){this._indexer.remove(a.guid),delete this._objs[a.guid];var b=0;null!=this._hashGUID&&(b=this._hashGUID(a.guid),0!=b&&delete this._u_2_guid[b])}},c.prototype.msgClientsubscription=function(a){},c.prototype.ApplyBlock=function(b){for(;b.bytesAvailable;){var d,e=b.readUnsignedByte();if(e&a.SyncEvent.OBJ_OPT_U_GUID){var f=b.readUnsignedInt();d=this._u_2_guid[f]?this._u_2_guid[f]:"",0==d.length}else d=b.readUTF();if(0==d.length)return!1;var g,h=this.Get(d);if(e&a.SyncEvent.OBJ_OPT_DELETE)this._delEvent.DispatchString(d,h),this.ReleaseKey(d),g=this._indexer.matchObject(h),null!=g&&(g.beginPush(h),g.pushDelete(),g.endPush()),h.dispose();else{var i=0==(e&a.SyncEvent.OBJ_OPT_NEW);h||(e&a.SyncEvent.OBJ_OPT_NEW?(i=!this._objs[d],h=this.CreateObject(d)):h=c.applyBlock_tmp_obj),e&a.SyncEvent.OBJ_OPT_UPDATE,g=this._indexer.matchObject(h),g&&g.beginPush(h),h.ReadFrom(e,b,g,i),g&&g.endPush(),e&a.SyncEvent.OBJ_OPT_NEW&&this._newEvent.DispatchString(h.guid.charAt(0),h)}}return!0},c.prototype.SearchObject=function(a,b){var c=new RegExp(a);b.length=0;for(var d in this._objs)c.test(d)&&b.push(d)},c.prototype.ForEachObject=function(a){for(var b in this._objs)a(this._objs[b])},c.prototype.RegisterCreateEvent=function(a,b){this._newEvent.AddListenString(a,b)},c.prototype.RegisterReleaseEvent=function(a,b){this._delEvent.AddListenString(a,b)},c.prototype.newPacket=function(b){void 0===b&&(b=0);var c=null;return 0==this._packet_pool.length?(c=new a.Pan3dByteArray,c.endian=a.Endian.LITTLE_ENDIAN):(c=this._packet_pool.shift(),c.clear()),b&&c.writeShort(b),c},c.prototype.freePacket=function(a){a.clear(),this._packet_pool.push(a)},c.prototype.clearObjs=function(){for(var b in this._objs){if(this._objs[b]instanceof a.GuidObject){var c=this._objs[b];this.removeObject(c.guid,c),c.dispose()}delete this._objs[b]}},c.prototype.removeObject=function(a,b){this._delEvent.DispatchString(a,b),this.ReleaseKey(a);var c=this._indexer.matchObject(b);null!=c&&(c.beginPush(b),c.pushDelete(),c.endPush())},c.prototype.dispose=function(){this._newEvent.Clear(),this._delEvent.Clear();for(var a in this._objs){var b=this._objs[a];b&&b.dispose()}this._objs=new Object},c.applyBlock_tmp_obj=new a.GuidObject,c}(a.SyncEvent);a.GuidObjectTable=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.open=function(){this._opening||(this._opening=!0)},c.prototype.close=function(){this._opening&&(this._opening=!1,this._curObj=null,this._curEventCount=0,this._eventObjs.length=0,this._eventParams.clear())},c.prototype.SyncEventFilter=function(){this._opening=!1,this._curObj=null,this._curEventCount=0,
this._eventParams=new a.Pan3dByteArray,this._eventParams.endian=a.Endian.LITTLE_ENDIAN,this._eventObjs=new Array},c.prototype.beginPush=function(a){return this._curObj&&this.endPush(),this._curObj=a,this._eventObjs.push(a.guid),this._eventParams.writeShort(0),!0},c.prototype.endPush=function(){if(this._curEventCount){var a=this._eventParams.position;this._eventParams.position-=8*this._curEventCount,this._eventParams.position-=2,this._eventParams.writeShort(this._curEventCount),this._curEventCount=0,this._eventParams.position=a}else this._eventObjs.splice(this._eventObjs.length-1,1),this._eventParams.position-=2;this._curObj=null},c.prototype.writeParam=function(a,b,c){this._eventParams.writeShort(a),this._eventParams.writeShort(b),this._eventParams.writeInt(c),this._curEventCount++},c.prototype.pushDelete=function(){this.writeParam(c.EV_DEL,0,0)},c.prototype.pushNew=function(){this.writeParam(c.EV_NEW,0,0)},c.prototype.pushUpdateMask=function(b,d){var e,f=d.GetCount();if(b==a.SyncEvent.TYPE_STRING)for(e=0;f>e;e++)d.GetBit(e)&&this.writeParam(c.EV_UPDATE_S,e,0);else for(e=0;f>e;e++)d.GetBit(e)&&this.writeParam(c.EV_UPDATE_I,e,this._curObj.GetInt32(e))},c.prototype.pushBinlog=function(b){if(0==b._atomic_opt){var d=b._typ==a.SyncEvent.TYPE_STRING?c.EV_UPDATE_S:c.EV_UPDATE_I;this.writeParam(d,b.index,this._curObj.GetInt32(b.index))}},c.prototype.beginPop=function(){this._eventParams.position=0},c.prototype.pop=function(a){if(0==this._eventObjs.length)return"";a.length=0;for(var b=this._eventParams.readShort(),c=0;b>c;c++)a.push(this._eventParams.readShort()),a.push(this._eventParams.readShort()),a.push(this._eventParams.readInt());return this._eventObjs.shift()},c.prototype.endPop=function(){0==this._eventObjs.length&&this._eventParams.clear()},c.prototype.Clear=function(){this._curObj=null,this._eventObjs=null,this._eventParams&&(this._eventParams.clear(),this._eventParams=null)},c.EV_NEW=0,c.EV_DEL=1,c.EV_UPDATE_I=2,c.EV_UPDATE_S=3,c}(a.SyncEvent);a.SyncEventFilter=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.getPrefix=function(a){return a.charAt(0)},a.getGUIDIndex=function(a){var b=a.indexOf(".");return b=b>0?b-1:Number.MAX_VALUE,Number(a.substr(1,b))},a.testUG=function(a,b){var c=a.indexOf(".");if(-1!=c){var d=a.substr(c+1);return d==b}return!1},a.MAP="M",a.UNIT="U",a.STRENGTH="B",a.PLAYER="p",a.BAG="I",a.FACTION="L",a.GROW="X",a.INSTANCE="C",a.SOCIAL="s",a.EMAIL="g",a.GLOBEL="G",a.QUEST="Q",a.LOOT="O",a.TEAM="T",a.GLOBAL_VALUE="G.globalvalue",a.GAME_CONFIG="G.gameconfig",a}();a.ObjectDef=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.optcode=0}return b.read=function(b,c){null==this.input&&(this.input=new a.Pan3dByteArray),this.input=c,b.mstime_now=this.input.readUint32(),b.time_now=this.input.readUint32(),b.open_time=this.input.readUint32()},b.param_count=3,b.optname="onSync_mstime",b}();a.both_sync_mstime=b;var c=function(){function b(){this.optcode=0}return b.read=function(b,c){null==this.input&&(this.input=new a.Pan3dByteArray),this.input=c,b.mstime_now=this.input.readUint32(),b.time_now=this.input.readUint32(),b.open_time=this.input.readUint32()},b.param_count=3,b.optname="onSync_mstime_app",b}();a.both_sync_mstime_app=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(b){this._stream=new a.Pan3dByteArray,this._FUNCS=new Object,this._send_func=b,this._stream.endian=a.Endian.LITTLE_ENDIAN}return b.prototype.getFuncName=function(a){return this._FUNCS[a]?this._FUNCS[a]:null},b}();a.Protocols=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a.prototype.read=function(a){this.pos_x=a.readFloat(),this.pos_y=a.readFloat()},a.prototype.write=function(a){a.writeFloat(this.pos_x),a.writeFloat(this.pos_y)},a}();a.point=b;var c=function(){function a(){this.taxi_text=""}return a.prototype.read=function(a){this.id=a.readInt32(),this.taxi_text=a.readStringByLen(50),this.map_id=a.readUint32(),this.pos_x=a.readUint16(),this.pos_y=a.readUint16()},a.prototype.write=function(a){a.writeInt32(this.id),a.writeStringByLen(this.taxi_text,50),a.writeUint32(this.map_id),a.writeUint16(this.pos_x),a.writeUint16(this.pos_y)},a}();a.taxi_menu_info=c;var d=function(){function a(){this.name="",this.guid="",this.inviteGuid="",this.faction_name=""}return a.prototype.read=function(a){this.name=a.readStringByLen(50),this.faction=a.readUint8(),this.gender=a.readUint8(),this.level=a.readUint16(),this.guid=a.readStringByLen(50),this.head_id=a.readUint32(),this.hair_id=a.readUint32(),this.race=a.readUint8(),this.inviteGuid=a.readStringByLen(50),this.faction_name=a.readStringByLen(50),this.icon=a.readUint8()},a.prototype.write=function(a){a.writeStringByLen(this.name,50),a.writeUint8(this.faction),a.writeUint8(this.gender),a.writeUint16(this.level),a.writeStringByLen(this.guid,50),a.writeUint32(this.head_id),a.writeUint32(this.hair_id),a.writeUint8(this.race),a.writeStringByLen(this.inviteGuid,50),a.writeStringByLen(this.faction_name,50),a.writeUint8(this.icon)},a}();a.char_create_info=d;var e=function(){function a(){this.quest_title=""}return a.prototype.read=function(a){this.quest_id=a.readUint32(),this.quest_icon=a.readUint32(),this.quest_level=a.readUint16(),this.quest_title=a.readStringByLen(50),this.flags=a.readUint32()},a.prototype.write=function(a){a.writeUint32(this.quest_id),a.writeUint32(this.quest_icon),a.writeUint16(this.quest_level),a.writeStringByLen(this.quest_title,50),a.writeUint32(this.flags)},a}();a.quest_option=e;var f=function(){function a(){this.title=""}return a.prototype.read=function(a){this.quest_id=a.readUint32(),this.quest_type=a.readUint8(),this.title=a.readStringByLen(50),this.npc_id=a.readUint32(),this.quest_level=a.readUint32()},a.prototype.write=function(a){a.writeUint32(this.quest_id),a.writeUint8(this.quest_type),a.writeStringByLen(this.title,50),a.writeUint32(this.npc_id),a.writeUint32(this.quest_level)},a}();a.quest_canaccept_info=f;var g=function(){function a(){this.option_title=""}return a.prototype.read=function(a){this.id=a.readInt32(),this.option_icon=a.readInt32(),this.option_title=a.readStringByLen(200)},a.prototype.write=function(a){a.writeInt32(this.id),a.writeInt32(this.option_icon),a.writeStringByLen(this.option_title,200)},a}();a.gossip_menu_option_info=g;var h=function(){function a(){}return a.prototype.read=function(a){this.item=a.readUint32(),this.cooldown=a.readUint32()},a.prototype.write=function(a){a.writeUint32(this.item),a.writeUint32(this.cooldown)},a}();a.item_cooldown_info=h;var i=function(){function a(){}return a.prototype.read=function(a){this.quest_id=a.readUint16(),this.status=a.readUint8()},a.prototype.write=function(a){a.writeUint16(this.quest_id),a.writeUint8(this.status)},a}();a.quest_status=i;var j=function(){function a(){}return a.prototype.read=function(a){this.item_id=a.readUint16(),this.num=a.readUint32()},a.prototype.write=function(a){a.writeUint16(this.item_id),a.writeUint32(this.num)},a}();a.item_reward_info=j;var k=function(){function a(){this.guid="",this.name="",this.faction=""}return a.prototype.read=function(a){this.guid=a.readStringByLen(50),this.name=a.readStringByLen(50),this.faction=a.readStringByLen(50),this.level=a.readUint16(),this.icon=a.readUint16(),this.vip=a.readUint16()},a.prototype.write=function(a){a.writeStringByLen(this.guid,50),a.writeStringByLen(this.name,50),a.writeStringByLen(this.faction,50),a.writeUint16(this.level),a.writeUint16(this.icon),a.writeUint16(this.vip)},a}();a.social_friend_info=k;var l=function(){function a(){this.faction_guid="",this.faction_name="",this.faction_bz="",this.faction_gg=""}return a.prototype.read=function(a){this.faction_guid=a.readStringByLen(50),this.faction_name=a.readStringByLen(50),this.faction_bz=a.readStringByLen(50),this.faction_gg=a.readStringByLen(108),this.level=a.readUint16(),this.icon=a.readUint8(),this.player_count=a.readUint16(),this.minlev=a.readUint16()},a.prototype.write=function(a){a.writeStringByLen(this.faction_guid,50),a.writeStringByLen(this.faction_name,50),a.writeStringByLen(this.faction_bz,50),a.writeStringByLen(this.faction_gg,108),a.writeUint16(this.level),a.writeUint8(this.icon),a.writeUint16(this.player_count),a.writeUint16(this.minlev)},a}();a.faction_info=l;var m=function(){function a(){this.name=""}return a.prototype.read=function(a){this.name=a.readStringByLen(50),this.value=a.readFloat()},a.prototype.write=function(a){a.writeStringByLen(this.name,50),a.writeFloat(this.value)},a}();a.rank_info=m;var n=function(){function a(){}return a.prototype.read=function(a){this.lineNo=a.readUint16(),this.rate=a.readUint8()},a.prototype.write=function(a){a.writeUint16(this.lineNo),a.writeUint8(this.rate)},a}();a.line_info=n;var o=function(){function a(){this.name=""}return a.prototype.read=function(a){this.name=a.readStringByLen(50),this.state=a.readInt8()},a.prototype.write=function(a){a.writeStringByLen(this.name,50),a.writeInt8(this.state)},a}();a.wait_info=o;var p=function(){function a(){this.name=""}return a.prototype.read=function(a){this.index=a.readUint32(),this.name=a.readStringByLen(50),this.level=a.readUint32(),this.weapon=a.readUint32(),this.avatar=a.readUint32(),this.divine=a.readUint32(),this.force=a.readUint32(),this.chest=a.readUint32(),this.gender=a.readUint32()},a.prototype.write=function(a){a.writeUint32(this.index),a.writeStringByLen(this.name,50),a.writeUint32(this.level),a.writeUint32(this.weapon),a.writeUint32(this.avatar),a.writeUint32(this.divine),a.writeUint32(this.force),a.writeUint32(this.chest),a.writeUint32(this.gender)},a}();a.cultivation_rivals_info=p;var q=function(){function a(){this.guid="",this.msg="",this.item_list="",this.reply_list=""}return a.prototype.read=function(a){this.rank=a.readUint32(),this.id=a.readUint32(),this.point=a.readUint32(),this.thank=a.readUint32(),this.reply=a.readUint32(),this.time=a.readUint32(),this.count_id=a.readUint32(),this.guid=a.readStringByLen(50),this.msg=a.readStringByLen(50),this.item_list=a.readStringByLen(150),this.reply_list=a.readStringByLen(100)},a.prototype.write=function(a){a.writeUint32(this.rank),a.writeUint32(this.id),a.writeUint32(this.point),a.writeUint32(this.thank),a.writeUint32(this.reply),a.writeUint32(this.time),a.writeUint32(this.count_id),a.writeStringByLen(this.guid,50),a.writeStringByLen(this.msg,50),a.writeStringByLen(this.item_list,150),a.writeStringByLen(this.reply_list,100)},a}();a.faction_gift_info=q;var r=function(){function a(){this.queen_name="",this.faction_name="",this.guard_name=""}return a.prototype.read=function(a){this.rank=a.readUint32(),this.point=a.readUint32(),this.queen_name=a.readStringByLen(50),this.faction_name=a.readStringByLen(50),this.guard_name=a.readStringByLen(50),this.faction_flag=a.readUint32(),this.queen_vip=a.readUint32(),this.guard_vip=a.readUint32()},a.prototype.write=function(a){a.writeUint32(this.rank),a.writeUint32(this.point),a.writeStringByLen(this.queen_name,50),a.writeStringByLen(this.faction_name,50),a.writeStringByLen(this.guard_name,50),a.writeUint32(this.faction_flag),a.writeUint32(this.queen_vip),a.writeUint32(this.guard_vip)},a}();a.faction_gift_rank_info=r;var s=function(){function a(){}return a.prototype.read=function(a){this.id=a.readUint8(),this.state=a.readUint8(),this.time=a.readUint32(),this.percent=a.readUint8(),this.count=a.readUint16()},a.prototype.write=function(a){a.writeUint8(this.id),a.writeUint8(this.state),a.writeUint32(this.time),a.writeUint8(this.percent),a.writeUint16(this.count)},a}();a.mass_boss_info=s;var t=function(){function a(){this.name=""}return a.prototype.read=function(a){this.name=a.readStringByLen(50),this.dam=a.readDouble()},a.prototype.write=function(a){a.writeStringByLen(this.name,50),a.writeDouble(this.dam)},a}();a.mass_boss_rank_info=t;var u=function(){function a(){this.equip=""}return a.prototype.read=function(a){this.equip=a.readStringByLen(50),this.strength_lv=a.readUint32(),this.refine_rank=a.readUint32(),this.refine_star=a.readUint32(),this.gem1_lv=a.readUint32(),this.gem2_lv=a.readUint32(),this.gem3_lv=a.readUint32()},a.prototype.write=function(a){a.writeStringByLen(this.equip,50),a.writeUint32(this.strength_lv),a.writeUint32(this.refine_rank),a.writeUint32(this.refine_star),a.writeUint32(this.gem1_lv),a.writeUint32(this.gem2_lv),a.writeUint32(this.gem3_lv)},a}();a.equip_info=u;var v=function(){function a(){this.name=""}return a.prototype.read=function(a){this.name=a.readStringByLen(50),this.value=a.readUint32()},a.prototype.write=function(a){a.writeStringByLen(this.name,50),a.writeUint32(this.value)},a}();a.act_rank_info=v;var w=function(){function a(){this.name="",this.guid=""}return a.prototype.read=function(a){this.name=a.readStringByLen(50),this.result=a.readUint32(),this.rank=a.readUint32(),this.guid=a.readStringByLen(50)},a.prototype.write=function(a){a.writeStringByLen(this.name,50),a.writeUint32(this.result),a.writeUint32(this.rank),a.writeStringByLen(this.guid,50)},a}();a.faction_match_info=w;var x=function(){function a(){this.guid="",this.cap_guid="",this.cap_name=""}return a.prototype.read=function(a){this.guid=a.readStringByLen(50),this.cap_guid=a.readStringByLen(50),this.cap_name=a.readStringByLen(50),this.members=a.readUint32()},a.prototype.write=function(a){a.writeStringByLen(this.guid,50),a.writeStringByLen(this.cap_guid,50),a.writeStringByLen(this.cap_name,50),a.writeUint32(this.members)},a}();a.group_search_info=x}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){var b=this;this.connectState=0,this._handlerMap=new Object,this.protocolos=new a.Protocols(function(a){b.send(a)})}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.connect=function(a,b,c){var d=this;this._socket=new WebSocket("ws://"+a+":"+b),this._socket.binaryType="arraybuffer",this._socket.onopen=function(a){d.onopenEvent(a)},this._socket.onmessage=function(a){d.onmessageEvent(a)},this._socket.onclose=function(a){d.oncloseEvent(a)},this._socket.onerror=function(a){d.onErrorEvent(a)},this._connetFun=c,this.connectState=1},b.prototype.onErrorEvent=function(a){console.log("socket error",a),this.connectState=0},b.prototype.onopenEvent=function(a){this._connetFun(),this.connectState=2},b.prototype.onmessageEvent=function(b){var c=new a.Pan3dByteArray(b.data);c.endian=a.Endian.LITTLE_ENDIAN;var d=c.readUnsignedShort();this._handlerMap[d]?this._handlerMap[d](c):console.log("未注册的消息号:"+d+":"+this.protocolos.getFuncName(d))},b.prototype.oncloseEvent=function(a){this.connectState=2,console.log("服务器断开")},b.prototype.reg=function(a){var b=a.getHanderMap();for(var c in b)this._handlerMap[c]=b[c]},b.prototype.unReg=function(a){delete this._handlerMap[a]},b.prototype.send=function(a){this._socket.send(a.buffer)},b.prototype.close=function(){this._socket.close()},b}();a.NetManager=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a}();a.DualQuatFloat32Array=b;var c=function(){function c(){this.inLoop=0,this.inter=new Array,this.bounds=new Array,this.nameHeight=0,this.posAry=new Array,this.hasProcess=!1}return c.prototype.processMesh=function(a){this.hasProcess||(this.makeArrBoneQPAry(a),this.hasProcess=!0)},c.prototype.makeArrBoneQPAry=function(b){this.meshBoneQPAryDic=new a.Dictionary([]);for(var c=0;c<b.meshAry.length;c++){for(var d=this.conleMatrixArr(),e=0;e<d.length;e++)for(var f=d[e],g=0;g<f.length;g++)b.meshAry[c].bindPosMatrixAry[g]&&f[g].prepend(b.meshAry[c].bindPosMatrixAry[g]);var h=this.makeFrameDualQuatFloatArray(b,d);this.meshBoneQPAryDic[b.meshAry[c].uid]=h,this.boneQPAry=h}this.matrixAry=d},c.prototype.getBoneQPAryByMesh=function(a){return this.meshBoneQPAryDic[a.uid]},c.prototype.conleMatrixArr=function(){for(var a=new Array,b=0;b<this.matrixAry.length;b++){for(var c=this.matrixAry[b],d=new Array,e=0;e<c.length;e++)d.push(c[e].clone());a.push(d)}return a},c.prototype.makeFrameDualQuatFloatArray=function(c,d){for(var e=new Array,f=new a.Matrix3D,g=0;g<c.meshAry.length;g++){for(var h=new Array,i=c.meshAry[g].boneNewIDAry,j=0;j<d.length;j++){var k=d[j],l=new b;l.quat=new Float32Array(4*i.length),l.pos=new Float32Array(3*i.length);for(var m=0;m<i.length;m++){var n=k[i[m]].clone(f);n.appendScale(-1,1,1);var o=new a.Quaternion;o.fromMatrix(n);var p=n.position;l.quat[4*m+0]=o.x,l.quat[4*m+1]=o.y,l.quat[4*m+2]=o.z,l.quat[4*m+3]=o.w,l.pos[3*m+0]=p.x,l.pos[3*m+1]=p.y,l.pos[3*m+2]=p.z}h.push(l)}e.push(h)}return e},c}();a.AnimData=c}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=null!==b&&b.apply(this,arguments)||this;return c.meshAry=new Array,c.fileScale=1,c.tittleHeight=0,c.hitBox=new a.Vector2D(0,0),c.type=0,c.animDic=new Object,c.ready=!1,c.hasDestory=!1,c}return __extends(c,b),c.prototype.makeHitBoxItem=function(){this.hitPosItem=new Array;var b=this.hitBox.x,c=this.hitBox.y,d=new a.Vector3D(-b,0,-b),e=new a.Vector3D(b,0,-b),f=new a.Vector3D(b,0,b),g=new a.Vector3D(-b,0,b);this.hitPosItem.push(d),this.hitPosItem.push(e),this.hitPosItem.push(f),this.hitPosItem.push(g);var h=new a.Vector3D(-b,c,-b),i=new a.Vector3D(b,c,-b),j=new a.Vector3D(b,c,b),k=new a.Vector3D(-b,c,b);this.hitPosItem.push(h),this.hitPosItem.push(i),this.hitPosItem.push(j),this.hitPosItem.push(k)},c.prototype.addMesh=function(a){a.uid=this.meshAry.length,this.meshAry.push(a)},c.prototype.loadParticle=function(){},c.prototype.loadMaterial=function(a){void 0===a&&(a=null);for(var b=0;b<this.meshAry.length;b++)this.loadByteMeshDataMaterial(this.meshAry[b],a)},c.prototype.loadByteMeshDataMaterial=function(b,c){void 0===c&&(c=null);var d=a.Scene_data.fileRoot+b.materialUrl;d=d.replace("_byte.txt",".txt"),d=d.replace(".txt","_byte.txt"),a.MaterialManager.getInstance().getMaterialByte(d,function(d){b.material=d,d.usePbr?a.MeshDataManager.getInstance().uploadPbrMesh(b,d.useNormal):(d.lightProbe||d.directLight)&&a.MeshDataManager.getInstance().uploadPbrMesh(b,!1),b.materialParamData&&(b.materialParam=new a.MaterialBaseParam,b.materialParam.setData(b.material,b.materialParamData)),c&&c(d)},null,!0,a.MaterialAnimShader.MATERIAL_ANIM_SHADER,a.MaterialAnimShader)},c.prototype.setAction=function(b,c){this.animUrlAry=new Array;for(var d=0;d<b.length;d++){var e=b[d],f=c+b[d],g=a.AnimManager.getInstance().getAnimDataImmediate(f);g.processMesh(this),this.animDic[e]=g,this.animUrlAry.push(f)}},c.prototype.destory=function(){if(this.allParticleDic){for(var b in this.allParticleDic)a.ParticleManager.getInstance().releaseUrl(b);this.allParticleDic=null}for(var c=0;c<this.meshAry.length;c++)this.meshAry[c].destory();this.meshAry.length=0,this.meshAry=null,this.boneSocketDic=null;for(var c=0;c<this.animUrlAry.length;c++)a.AnimManager.getInstance().clearAnim(this.animUrlAry[c]);for(var b in this.animDic)delete this.animDic[b];this.animDic=null,this.hasDestory=!0},c}(a.ResCount);a.SkinMesh=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){}return a}();a.BoneSocketData=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(b,c,d){return void 0===b&&(b=0),void 0===c&&(c=0),void 0===d&&(d=0),a.call(this)||this}return __extends(b,a),b}(a.Object3D);a.CollisionVo=b;var c=function(){function a(){}return a}();a.CollisionItemVo=c;var d=function(){function a(){}return a.Polygon=0,a.BOX=1,a.BALL=2,a.Cylinder=3,a.Cone=4,a}();a.CollisionType=d}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(a,b){this.radius=a,this.height=b}return a}();a.CapsuleVo=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this.sunDirect=new Array(0,1,0),this.sunColor=new Array(2,0,0),this.ambientColor=new Array(0,0,0)}return a.prototype.setData=function(a,b,c){this.sunDirect[0]=a.x,this.sunDirect[1]=a.y,this.sunDirect[2]=a.z,this.sunColor[0]=b.x,this.sunColor[1]=b.y,this.sunColor[2]=b.z,this.ambientColor[0]=c.x,this.ambientColor[1]=c.y,this.ambientColor[2]=c.z},a}();a.LightVo=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v3Color")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec3 v3Color;uniform mat4 viewMatrix3D;uniform mat4 camMatrix3D;uniform mat4 posMatrix3D;varying vec4 colorData;void main(void){   vec4 vt0= vec4(v3Position, 1.0);   colorData =vec4(v3Color,1) ;   vt0 = posMatrix3D * vt0;   vt0 = camMatrix3D * vt0;   vt0 = viewMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a=" precision mediump float;\nvarying vec4 colorData;\nvoid main(void)\n{\ngl_FragColor =colorData;\n}";return a},b.LineShader="LineShader",b}(a.Shader3D);a.LineDisplayShader=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var c=b.call(this)||this;return c.baseColor=new a.Vector3D(1,0,0),c.objData=new a.ObjData,c.shader=a.ProgrmaManager.getInstance().getProgram(a.LineDisplayShader.LineShader),c.program=c.shader.program,c.makeLineMode(new a.Vector3D(0,0,0),new a.Vector3D(100,0,0),new a.Vector3D),c.makeLineMode(new a.Vector3D(0,0,0),new a.Vector3D(100,0,100),new a.Vector3D),c.makeLineMode(new a.Vector3D(100,0,0),new a.Vector3D(100,0,100),new a.Vector3D),c.upToGpu(),c}return __extends(c,b),c.prototype.makeLineMode=function(a,b,c){void 0===c&&(c=null),this.lineVecPos&&this.lineIndex||this.clear(),c&&(this.baseColor=c),this.lineVecPos.push(a.x,a.y,a.z),this.lineVecPos.push(b.x,b.y,b.z),this.lineColor.push(this.baseColor.x,this.baseColor.y,this.baseColor.z),this.lineColor.push(this.baseColor.x,this.baseColor.y,this.baseColor.z),this.lineIndex.push(this.lineIndex.length+0,this.lineIndex.length+1)},c.prototype.clear=function(){this.lineVecPos=new Array,this.lineIndex=new Array,this.lineColor=new Array,this.objData.indexBuffer&&(this.objData.indexBuffer=null)},c.prototype.upToGpu=function(){this.lineIndex.length&&(this.objData.treNum=this.lineIndex.length,this.objData.vertexBuffer=a.Scene_data.context3D.uploadBuff3D(this.lineVecPos),this.objData.normalsBuffer=a.Scene_data.context3D.uploadBuff3D(this.lineColor),this.objData.indexBuffer=a.Scene_data.context3D.uploadIndexBuff3D(this.lineIndex))},c.prototype.update=function(){this.objData&&this.objData.indexBuffer&&(a.Scene_data.context3D.setProgram(this.program),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"viewMatrix3D",a.Scene_data.viewMatrx3D.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"camMatrix3D",a.Scene_data.cam3D.cameraMatrix.m),a.Scene_data.context3D.setVcMatrix4fv(this.shader,"posMatrix3D",this.posMatrix.m),a.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),a.Scene_data.context3D.setVa(1,3,this.objData.normalsBuffer),a.Scene_data.context3D.drawLine(this.objData.indexBuffer,this.objData.treNum))},c}(a.Display3D);a.LineDisplaySprite=b;var c=function(a){function c(){var b=a.call(this)||this;return b.itemSprite||(b.itemSprite=new Array),b}return __extends(c,a),c.prototype.makeLineMode=function(b,c,d){void 0===d&&(d=null),a.prototype.makeLineMode.call(this,b,c,d);var e=this.getSprite();e.makeLineMode(b,c,d)},c.prototype.getSprite=function(){var a=Math.floor(this.lineIndex.length/1e4);if(!this.itemSprite[a]){var c=new b;c.clear(),c.baseColor=this.baseColor,this.itemSprite.push(c)}return this.itemSprite[a]},c.prototype.update=function(){for(var a=0;a<this.itemSprite.length;a++)this.itemSprite[a].posMatrix=this.posMatrix,this.itemSprite[a].update()},c.prototype.upToGpu=function(){for(var a=0;a<this.itemSprite.length;a++)this.itemSprite[a].upToGpu()},c.prototype.clear=function(){a.prototype.clear.call(this),this.itemSprite||(this.itemSprite=new Array);for(var b=0;this.itemSprite&&b<this.itemSprite.length;b++)this.itemSprite[b].clear()},c}(b);a.MulLineSprite=c;var d=function(b){function c(){var a=b.call(this)||this;return a.makeGridData(),a}return __extends(c,b),c.prototype.makeGridData=function(){var b=100,c=10,d=b/c;this.clear();var e,f;e=new a.Vector3D(0,0,+b),f=new a.Vector3D(0,0,-b),this.makeLineMode(e,f,new a.Vector3D(0,0,1,1)),e=new a.Vector3D(+b,0,0),f=new a.Vector3D(-b,0,0),this.makeLineMode(e,f,new a.Vector3D(1,0,0,1)),this.baseColor=new a.Vector3D(128/255,128/255,128/255,1);for(var g=1;c>=g;g++)e=new a.Vector3D(+g*d,0,+b),f=new a.Vector3D(+g*d,0,-b),this.makeLineMode(e,f),e=new a.Vector3D(-g*d,0,+b),f=new a.Vector3D(-g*d,0,-b),this.makeLineMode(e,f),e=new a.Vector3D(+b,0,+g*d),f=new a.Vector3D(-b,0,+g*d),this.makeLineMode(e,f),e=new a.Vector3D(+b,0,-g*d),f=new a.Vector3D(-b,0,-g*d),this.makeLineMode(e,f);this.upToGpu()},c}(b);a.GridLineSprite=d}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function a(){this.drawNum=0,this.fpsStr=""}return a.update=function(){},a.prototype.getStr=function(){return a.fpsNowNum=Math.min(this.drawNum,600),this.fpsStr="Fps:"+String(a.fpsNowNum)+"-"+a.tipStr,this.fpsStr},a.addFps=0,a.fpsNowNum=0,a.tipStr="",a}();a.FpsMc=b;var c=function(){function c(){this.lastTime=0,this.cPos=new a.Vector2D(150,100)}return c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.init=function(c,d){var e=this;this.canvas2D=c,this.loadCav=d,this.fps=new b,this.canvasUi=this.canvas2D.getContext("2d"),this.loadCtx=this.loadCav.getContext("2d"),a.TimeUtil.addFrameTick(function(){e.upData()})},c.prototype.showLoadInfo=function(a){},c.prototype.removeShowLoad=function(){this.loadCav.parentElement&&this.loadCav.parentElement.removeChild(this.loadCav),c.showFps=!0},c.prototype.upData=function(){if(this.fps.drawNum++,!(this.lastTime>=a.TimeUtil.getTimer()-1e3)){if(this.lastTime=a.TimeUtil.getTimer(),!c.showFps)return void this.canvasUi.clearRect(0,0,this.canvas2D.width,this.canvas2D.height);this.canvasUi.font="40px Helvetica";var b=this.canvasUi.measureText(this.fps.getStr()).width;this.canvas2D.width=b,this.canvas2D.height=30,this.canvasUi.clearRect(50,0,this.canvas2D.width-50,this.canvas2D.height),this.canvasUi.fillStyle="#000000",this.canvasUi.fillRect(50,0,this.canvas2D.width-50,this.canvas2D.height),this.canvasUi.font="30px Helvetica",this.canvasUi.fillStyle="#ffffff",this.canvasUi.textBaseline=a.TextAlign.TOP,this.canvasUi.textAlign=a.TextAlign.LEFT,this.canvasUi.fillText(this.fps.getStr(),50,0),this.fps.drawNum=0}},c.prototype.makeXyzLine=function(){var b=new a.Vector3D(80,0,0),c=new a.Vector3D(0,70,0),d=new a.Vector3D(0,0,80),e=new a.Matrix3D;e.appendRotation(a.Scene_data.cam3D.rotationY,a.Vector3D.Y_AXIS),e.appendRotation(a.Scene_data.cam3D.rotationX,a.Vector3D.X_AXIS),b=e.transformVector(b),c=e.transformVector(c),d=e.transformVector(d),this.drawLine(new a.Vector2D(0,0),new a.Vector2D(b.x,-b.y),"#ff0000"),this.drawLine(new a.Vector2D(0,0),new a.Vector2D(c.x,-c.y),"#00ff00"),this.drawLine(new a.Vector2D(0,0),new a.Vector2D(d.x,-d.y),"#0000ff"),this.canvasUi.font="12px Helvetica",this.canvasUi.fillStyle="#ff0000",this.canvasUi.fillText("x",b.x+this.cPos.x,-b.y+this.cPos.y),this.canvasUi.fillStyle="#00ff00",this.canvasUi.fillText("y",c.x+this.cPos.x,-c.y+this.cPos.y),this.canvasUi.fillStyle="#0000ff",this.canvasUi.fillText("z",d.x+this.cPos.x,-d.y+this.cPos.y)},c.prototype.drawLine=function(a,b,c){void 0===c&&(c="red"),this.canvasUi.beginPath(),this.canvasUi.lineWidth=2,this.canvasUi.strokeStyle=c,this.canvasUi.moveTo(a.x+this.cPos.x,a.y+this.cPos.y),this.canvasUi.lineTo(b.x+this.cPos.x,b.y+this.cPos.y),this.canvasUi.stroke()},c.prototype.resetSize=function(){this.cPos=new a.Vector2D(150,a.Scene_data.stageHeight-100)},c.showFps=!1,c}();a.FpsStage=c}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.processorMap=new Object}return b.prototype.getModuleName=function(){throw new Error("module必须复写命名")},b.prototype.listProcessors=function(){return null},b.prototype.registerProcessors=function(){var a=this.listProcessors();if(null!=a&&a.length>0)for(var b=0;b<a.length;b++)this.registerProcessor(a[b])},b.prototype.registerProcessor=function(b){if(null!=this.processorMap[b.getName()])throw new Error("同一Module不能注册两个相同的Processor");this.processorMap[b.getName()]=b,b.registerEvents(),a.NetManager.getInstance().reg(b)},b.registerModule=function(a){if(null!=b.moduleMap[a.getModuleName()])throw new Error("不能注册两个相同的Module");b.moduleMap[a.getModuleName()]=a,a.registerProcessors()},b.moduleMap=new Object,b}();a.Module=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.prototype.getName=function(){throw new Error("process必须复写命名")},b.prototype.receivedModuleEvent=function(a){},b.prototype.listenModuleEvents=function(){return null},b.prototype.registerEvents=function(){var b=this.listenModuleEvents();null!=b&&b.length>0&&a.ModuleEventManager.addEvents(b,this.receivedModuleEvent,this)},b.prototype.getHanderMap=function(){var a=new Object;return a},b}();a.Processor=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){}return b.addEvents=function(a,c,d){for(var e=0;e<a.length;e++)b._instance.addEventListener(a[e].type,c,d)},b.dispatchEvent=function(a){b._instance.dispatchEvent(a)},b._instance=new a.EventDispatcher,b}();a.ModuleEventManager=b}(Pan3d||(Pan3d={}));var GameVersion=function(){function a(){}return a.init=function(a){for(var b=a.split("\n"),c=0;c<b.length;c++){var d=b[c].split("	");2==d.length&&(this._dic[d[0]]=d[1])}},a.getVersion=function(a){return this._dic[a]},a._dic=new Object,a}(),Pan3d;!function(a){var b=function(){function a(){}return a.STANAD="stand",a.WALK="walk",a.DEATH="death",a.JUMP="jump",a.SIT="sit",a.ATTACK_01="attack_01",a.ATTACK_02="attack_02",a.ATTACK_03="attack_03",a.ATTACK_04="attack_04",a.ATTACK_05="attack_05",a.ATTACK_06="attack_06",a.ATTACK_010="attack_010",a.ATTACK_020="attack_020",a.STAND_MOUNT="stand_mount_01",a.WALK_MOUNT="walk_mount_01",a.s_attack_01="s_attack_01",a}();a.CharAction=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b.path=new Array,b.isMain=!1,b.originalRotation=0,b}return __extends(b,a),b}(a.GuidObject);a.Unit=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,
new d)}}(),Pan3d;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b._avatar=-1,b._visible=!0,b}return __extends(b,a),Object.defineProperty(b.prototype,"visible",{get:function(){return this._visible},set:function(a){this._visible=a},enumerable:!0,configurable:!0}),b.prototype.setAvatar=function(a){this._avatar!=a&&(this._avatar=a,this.setRoleUrl(this.getSceneCharAvatarUrl(a)))},b.prototype.update=function(){this.visible&&a.prototype.update.call(this),this._shadow&&(this._shadow._visible=this.visible)},b.prototype.getSceneCharAvatarUrl=function(a){getRoleUrl(String(a));return getRoleUrl(String(a))},b.prototype.getSceneCharWeaponUrl=function(a,b){return void 0===b&&(b=""),getModelUrl(String(a+b))},b}(a.Display3dMovie);a.SceneBaseChar=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(b){function c(){var a=b.call(this)||this;return a.speedTX=.075,a.life=0,a.isMount=!1,a._px=0,a._py=0,a._pz=0,a._pRotationY=0,a._isBoss=!1,a._optimization=!1,a._weaponNum=-1,a._wingID=-1,a.lastBloodcolorType=0,a.tittleHeight=50,a.toRotationY=0,a._resultVisible=!0,a._showHitBox=!1,a.triIndex=[0,1,2,0,2,3,4,5,6,4,6,7,0,4,5,0,5,1,1,5,6,1,6,2,2,6,7,2,7,3,3,7,4,3,4,0],a.shadow=!0,a.skillitem=new Array,a}return __extends(c,b),Object.defineProperty(c.prototype,"isDeath",{get:function(){return!1},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"isBoss",{get:function(){return this._isBoss},set:function(a){this._isBoss=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"px",{get:function(){return this._px},set:function(a){this._px=a,this.isMount?(this.mountChar.x=a,this._shadow&&(this._shadow.x=a)):this.x=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"py",{get:function(){return this._py},set:function(a){this._py=a,this.isMount?(this.mountChar.y=a,this._shadow&&(this._shadow.y=a)):this.y=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"pz",{get:function(){return this._pz},set:function(a){this._pz=a,this.isMount?(this.mountChar.z=a,this._shadow&&(this._shadow.z=a)):this.z=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"forceRotationY",{set:function(a){this.pRotationY=a,this.rotationY=a,this.toRotationY=a},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"pRotationY",{get:function(){return this._pRotationY},set:function(a){this._pRotationY=a,this.isMount?this.mountChar.rotationY=a:this.rotationY=a},enumerable:!0,configurable:!0}),c.prototype.play=function(c,d,e){return void 0===d&&(d=0),void 0===e&&(e=!0),this.isSinging&&(d=0,c==a.CharAction.WALK||c==a.CharAction.STANAD)?!0:this.isMount?(this.mountChar.visible=Boolean(c!=a.CharAction.JUMP),c==a.CharAction.STANAD?b.prototype.play.call(this,a.CharAction.STAND_MOUNT):c==a.CharAction.WALK?b.prototype.play.call(this,a.CharAction.WALK_MOUNT):this.mountChar.visible?b.prototype.play.call(this,a.CharAction.STAND_MOUNT):b.prototype.play.call(this,a.CharAction.JUMP),this.mountChar.play(c,d,e)):b.prototype.play.call(this,c,d,e)},c.prototype.getCurrentAction=function(){return this.isMount?this.mountChar.curentAction:this.curentAction},c.prototype.getSceneCharAvatarUrl=function(a){var b=String(a);if(0==a)throw new Error("衣服为getSceneCharAvatarUrl");var c=getRoleUrl(b);return c},c.prototype.setMount=function(){},c.prototype.setWeapon=function(a){this._weaponNum!=a&&(this._weaponNum=a,0>=a&&this.removePart(c.WEAPON_PART))},c.prototype.setWeaponByAvatar=function(a,b){void 0===b&&(b="")},c.prototype.addTestWeapon=function(){this.addPart("test"+Math.random(),c.WEAPON_DEFAULT_SLOT,this.getSceneCharWeaponUrl(Math.random()>.5?5202:5201))},c.prototype.refreshTittle=function(){this.refreshPos()},c.prototype.showName=function(b){void 0===b&&(b=null);var c=this.unit.getName().split(","),d=c[c.length-1];b="[00ff00]";var e=b+d;this._charNameVo?this._charNameVo.name=e:this._charNameVo=a.BloodManager.getInstance().getCharNameMeshVo(e),this.refreshPos()},c.prototype.showBlood=function(b){void 0===b&&(b=0),this.lastBloodcolorType=b,this._charBloodVo?this._charBloodVo.colortype=b:(this._charBloodVo=a.BloodManager.getInstance().getBloodLineMeshVo(),this._charBloodVo.colortype=b),this.refreshPos()},c.prototype.onMeshLoaded=function(){this._skinMesh&&(this.tittleHeight=this._skinMesh.tittleHeight)},c.prototype.refreshPos=function(){this._charBloodVo&&(this._charBloodVo.pos.x=this.px,this.isMount?this._charBloodVo.pos.y=this.py+this.tittleHeight-6+20:this._charBloodVo.pos.y=this.py+this.tittleHeight-6,this._charBloodVo.pos.z=this.pz,this._charBloodVo.visible=this._resultVisible),this._charNameVo&&(this._charNameVo.pos.x=this.px,this.isMount?this._charNameVo.pos.y=this.py+this.tittleHeight+20:this._charNameVo.pos.y=this.py+this.tittleHeight,this._charNameVo.pos.z=this.pz,this._charNameVo.visible=this._resultVisible),this._charTitleVo&&(this._charTitleVo.pos.x=this.px,this.isMount?this._charTitleVo.pos.y=this.py+this.tittleHeight+20+10:this._charTitleVo.pos.y=this.py+this.tittleHeight+10,this._charTitleVo.pos.z=this.pz,this._charTitleVo.visible=this._resultVisible)},Object.defineProperty(c.prototype,"walkPath",{set:function(b){0!=b.length&&((this.curentAction==a.CharAction.STANAD||this.curentAction==a.CharAction.STAND_MOUNT)&&this.play(a.CharAction.WALK),this._walkPath=b,this.setTarget(),this._speedDirect=null)},enumerable:!0,configurable:!0}),c.prototype.fixAstartData=function(b){if(this._walkPath)for(var c=0;c<this._walkPath.length;c++)this._walkPath[c].x+=b.x,this._walkPath[c].z=b.y-this._walkPath[c].z,this._walkPath[c].y=a.AstarUtil.getHeightByPos(this._walkPath[c]);this.px+=b.x,this.pz=b.y-this.pz,this._astatTopos&&(this._astatTopos.x+=b.x,this._astatTopos.z=b.y-this._astatTopos.z,this.setAstarNrmAndRotation()),this.refreshY()},c.prototype.applyWalk=function(b){if(b&&2==b.length&&b[0].x==b[1].x&&b[0].y==b[1].y){this._speedDirect=null,this._walkPath=null,this.curentAction==a.CharAction.WALK&&this.play(a.CharAction.STANAD);var c=a.AstarUtil.getWorldPosByStart2D(b[0]);return this.px=c.x,void(this.pz=c.z)}this.walkPath=a.AstarUtil.Path2dTo3d(b)},Object.defineProperty(c.prototype,"moveToPos2D",{set:function(b){this._walkPath=null,this.play(this._defaultAction);var c=a.AstarUtil.getWorldPosByStart2D(b);this.px=c.x,this.pz=c.z,this.refreshY()},enumerable:!0,configurable:!0}),c.prototype.stopToPos=function(b){var c=a.AstarUtil.getWorldPosByStart2D(b),d=new Array;d.push(c),this.walkPath=d},c.prototype.moveTile=function(b,c){this.moveToPos2D=new a.Vector2D(b,c)},c.prototype.updateFrame=function(a){b.prototype.updateFrame.call(this,a)},c.prototype.refreshY=function(){this.py=a.AstarUtil.getHeightByPos(this.getCurrentPos()),this.refreshPos()},c.prototype.refreshHP=function(){},c.prototype.rotationToNew=function(a,b){void 0===b&&(b=1);var c=a-this.pRotationY;if(0!=c){if(1>c)return void(this.pRotationY=a);var d=((a-this.pRotationY)%360+360)%360;d>180?this.pRotationY-=(360-d)/b:this.pRotationY+=d/b}},Object.defineProperty(c.prototype,"speedUseTime",{set:function(a){this.speedTX=.01*(a/10)},enumerable:!0,configurable:!0}),c.prototype.refreshSpeed=function(){this.speedUseTime=1},c.prototype.walkAstar=function(b){this.unit&&this.unit.isMain;var c=Math.min(b,50),d=a.Vector3D.distance(new a.Vector3D(this.px,0,this.pz),this._astatTopos);if(d>5){var e=c*this.speedTX;if(e>d){this.px=this._astatTopos.x,this.pz=this._astatTopos.z;var f=(e-d)/this.speedTX;this.walkAstar(f)}else this.px+=this._astarDirect.x*e,this.pz+=this._astarDirect.z*e}else this.setTarget(),this._walkPath?this.walkAstar(b):(this.px=this._astatTopos.x,this.pz=this._astatTopos.z,this.walkComplete())},c.prototype.walkComplete=function(){this.walkCompleteBackFun&&this.walkCompleteBackFun()},c.prototype.setTarget=function(){if(this._walkPath){if(0==this._walkPath.length)return this._walkPath=null,void this.play(a.CharAction.STANAD);this._astatTopos=this._walkPath.shift(),this.setAstarNrmAndRotation()}},c.prototype.setAstarNrmAndRotation=function(){this._astatTopos&&(this._astarDirect=this._astatTopos.subtract(this.getCurrentPos()),this._astarDirect.y=0,this._astarDirect.normalize(),a.Vector3D.distance(this.getCurrentPos(),this._astatTopos)>10&&(this.toRotationY=this.mathAngle(this._astatTopos.z,this._astatTopos.x,this.pz,this.px)+180))},c.prototype.mathAngle=function(a,b,c,d){return 180*Math.atan2(d-b,c-a)/Math.PI},c.prototype.setSpeedDirect=function(b){this.isDeath||(this._speedDirect=b,(this.curentAction==a.CharAction.STANAD||this.curentAction==a.CharAction.STAND_MOUNT)&&this.play(a.CharAction.WALK),this._walkPath=null)},c.prototype.stopMove=function(){this._speedDirect=null,this._walkPath=null,this.play(a.CharAction.STANAD)},c.prototype.getEndWalkPathPos=function(){return this._walkPath?this._walkPath[this._walkPath.length-1]:null},c.prototype.watch=function(a,b){if(void 0===b&&(b=!1),a){var c=a.x-this.px,d=a.z-this.pz,e=Math.sqrt(c*c+d*d);c/=e,d/=e;var f=Math.asin(c)/Math.PI*180;0>=d&&(f=180-f),isNaN(f)||(this.forceRotationY=f)}},c.prototype.getCurrentPos=function(){return new a.Vector3D(this.px,this.py,this.pz)},c.prototype.getAstarPos=function(){return a.AstarUtil.getGrapIndexByPos(this.getCurrentPos())},c.prototype.changeAction=function(c){if(this.unit&&this.unit.isMain)switch(c){case a.CharAction.ATTACK_01:this.play(a.CharAction.ATTACK_010,2);break;case a.CharAction.ATTACK_02:this.play(a.CharAction.ATTACK_020,2);break;default:b.prototype.changeAction.call(this,c)}else b.prototype.changeAction.call(this,c)},c.prototype.playSkill=function(b){this._walkPath=null,a.SkillManager.getInstance().playSkill(b),this.skillVo=b},c.prototype.msgSpellStop=function(){this.skillVo&&(this.skillVo.removeSkillForce(),this.changeAction(this._defaultAction),this.skillVo=null),this.isSinging=!1},c.prototype.destory=function(){this._hasDestory||(b.prototype.destory.call(this),this.destoryName(),this._isBoss,this.skillVo&&(this.skillVo.removeSkillForce(),this.skillVo=null),this._wingDisplay&&this._wingDisplay.destory(),this._hasDestory=!0)},c.prototype.destoryName=function(){this._charNameVo&&(this._charNameVo.destory(),this._charNameVo=null),this._charBloodVo&&(this._charBloodVo.destory(),this._charBloodVo=null),this._charTitleVo&&(this._charTitleVo.destory(),this._charTitleVo=null)},c.prototype.removeStage=function(){b.prototype.removeStage.call(this),this._charNameVo&&(this._charNameVo.visible=!1),this._charBloodVo&&(this._charBloodVo.visible=!1),this.mountChar&&a.SceneManager.getInstance().removeMovieDisplay(this.mountChar),this._wingDisplay&&a.SceneManager.getInstance().removeMovieDisplay(this._wingDisplay)},c.prototype.addStage=function(){b.prototype.addStage.call(this),this._charNameVo&&(this._charNameVo.visible=!0),this._charBloodVo&&(this._charBloodVo.visible=!0),this.mountChar&&a.SceneManager.getInstance().addMovieDisplay(this.mountChar),this._wingDisplay&&a.SceneManager.getInstance().addMovieDisplay(this._wingDisplay)},c.prototype.math_distance=function(b){return a.MathClass.math_distance(this.px,this.pz,b.x,b.z)},Object.defineProperty(c.prototype,"visible",{get:function(){return this._visible},set:function(a){this._visible=a,this.applyVisible()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"optimization",{get:function(){return this._optimization},set:function(a){this._optimization=a,this.applyVisible()},enumerable:!0,configurable:!0}),Object.defineProperty(c.prototype,"resultVisible",{get:function(){return this._resultVisible},enumerable:!0,configurable:!0}),c.prototype.applyVisible=function(){var a=this._visible;if(a=this._visible?this._optimization?!1:!0:!1,this._partDic&&this._partDic[c.WEAPON_PART])for(var b=0,d=this._partDic[c.WEAPON_PART];b<d.length;b++){var e=d[b];e.sceneVisible=a}this._wingDisplay&&(this._wingDisplay.visible=a),a||this.destoryName(),this.shadow=a,this._resultVisible=a},c.prototype.update=function(){if(this._skinMesh&&!this._optimization&&(b.prototype.update.call(this),this._showHitBox)){if(!this.lineSprite){a.ProgrmaManager.getInstance().registe(a.LineDisplayShader.LineShader,new a.LineDisplayShader),this.lineSprite=new a.LineDisplaySprite,this.lineSprite.clear();for(var c=0;c<this.triIndex.length/3;c++){var d=this._skinMesh.hitPosItem[this.triIndex[3*c+0]],e=this._skinMesh.hitPosItem[this.triIndex[3*c+1]],f=this._skinMesh.hitPosItem[this.triIndex[3*c+2]];this.lineSprite.makeLineMode(d,e),this.lineSprite.makeLineMode(e,f),this.lineSprite.makeLineMode(f,d)}this.lineSprite.upToGpu()}this.lineSprite.posMatrix=this.posMatrix.clone(),this.lineSprite.update()}},c.prototype.mouseClik=function(b,c){var d=a.Scene_data.cam3D.cameraMatrix.transformVector(this.getCurrentPos());if(d.z<a.Scene_data.cam3D.distance/3)return null;var e=a.MathUtil.math3DWorldtoDisplay2DPos(c);if(this._skinMesh){this.hitBox2DItem||(this.hitBox2DItem=new Array),this.hitBox2DItem.length=0;for(var f=0;f<this._skinMesh.hitPosItem.length;f++){var g=this.posMatrix.transformVector(this._skinMesh.hitPosItem[f]);this.hitBox2DItem.push(a.MathUtil.math3DWorldtoDisplay2DPos(g))}for(var h=0;h<this.triIndex.length/3;h++)if(a.TestTriangle.baseTri.p1=this.hitBox2DItem[this.triIndex[3*h+0]],a.TestTriangle.baseTri.p2=this.hitBox2DItem[this.triIndex[3*h+1]],a.TestTriangle.baseTri.p3=this.hitBox2DItem[this.triIndex[3*h+2]],a.TestTriangle.baseTri.checkPointIn(e))return!0}else if(a.Vector2D.distance(e,a.MathUtil.math3DWorldtoDisplay2DPos(this.posMatrix.position))<20)return!0;return!1},c.WEAPON_PART="weapon",c.WEAPON_DEFAULT_SLOT="w_01",c.MOUNT_SLOT="mount_01",c.WING_SLOT="wing_01",c.SEL_PART="select",c.QUEST_ICON="questicon",c.NONE_SLOT="none",c.Defaul_Man_Avatar=2002,c.Defaul_WoMan_Avater=2012,c}(a.SceneBaseChar);a.SceneChar=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.setData=function(a,b){if(b>0){var c={},d=c.mountID;return void this.setAvatar(d)}if(a>0){var c={},d=c.mountID;this.setAvatar(d)}},b}(a.SceneBaseChar);a.MountChar=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Pan3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b}(a.Processor);a.BaseProcessor=b}(Pan3d||(Pan3d={}));var Pan3d;!function(a){var b=function(){function b(){this.dataReady=!1,this.uiReadyNum=0,this.uiAllNum=0}return b.prototype.init=function(){var c=this;a.TextureManager.getInstance().getTexture(a.Scene_data.fileRoot+"ui/load/001.jpg",function(a){}),b.outNet&&(b.GM=!1);var d=new Array;d.push({xmlurl:"ui/arpgui/textlist.xml",picurl:"ui/arpgui/textlist.png",name:a.UIData.textlist}),d.push({xmlurl:"ui/uidata/public/public.xml",picurl:"ui/uidata/public/public.png",name:a.UIData.publicUi}),this.uiAllNum=a.UIData.init(d,function(){c.loadAll()},function(b){c.uiReadyNum=b,c.dataReady&&a.FpsStage.getInstance().showLoadInfo("读取UI数据："+c.uiReadyNum+"/"+c.uiAllNum)})},b.prototype.loadAll=function(){this.uiReadyNum==this.uiAllNum&&this.dataReady&&(this.loadDataComplet(),a.FpsStage.getInstance().showLoadInfo("正在连接服务器"),b.ready=!0)},b.prototype.loadDataComplet=function(){b.outNet&&(b.GM=!1)},b.outNet=!1,b.GM=!0,b.ready=!1,b.appVersion=0,b}();a.GameStart=b}(Pan3d||(Pan3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scenedis;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.onMeshLoaded=function(){a.prototype.onMeshLoaded.call(this),this.loadFinishFun&&this.loadFinishFun()},b.prototype.changeAction=function(a){this.curentAction=this._defaultAction,this.changeActionFun&&this.changeActionFun(a)},b.prototype.setWeaponByAvatar=function(a,b){void 0===b&&(b="")},b}(Pan3d.SceneChar);a.SkillSceneChar=b}(scenedis||(scenedis={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scenedis;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.setWeaponByAvatar=function(a,b){void 0===b&&(b=""),this.addPart(Pan3d.SceneChar.WEAPON_PART,Pan3d.SceneChar.WEAPON_DEFAULT_SLOT,this.getSceneCharWeaponUrl(a,b))},b.prototype.setWingByID=function(a){this._wingDisplay||(this._wingDisplay=new Pan3d.SceneBaseChar),this._wingDisplay.setRoleUrl(getRoleUrl(a)),this._wingDisplay.setBind(this,Pan3d.SceneChar.WING_SLOT),Pan3d.SceneManager.getInstance().addMovieDisplay(this._wingDisplay)},b.prototype.setMountById=function(a){this.mountChar||(this.mountChar=new Pan3d.MountChar),this.mountChar.setRoleUrl(getRoleUrl(a)),this.setBind(this.mountChar,Pan3d.SceneChar.MOUNT_SLOT),Pan3d.SceneManager.getInstance().addMovieDisplay(this.mountChar),this.isMount=!0},b}(Pan3d.SceneChar);a.ModelSceneChar=b}(scenedis||(scenedis={}));var scenedis;!function(a){var b=function(){function a(){}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a.prototype.addMouseEvent=function(){var a=this;Pan3d.Scene_data.isPc?(document.addEventListener(Pan3d.MouseType.MouseDown,function(b){a.onMouse(b)}),document.addEventListener(Pan3d.MouseType.MouseUp,function(b){a.onMouse(b)}),document.addEventListener(Pan3d.MouseType.MouseMove,function(b){a.onMouse(b)}),document.addEventListener(Pan3d.MouseType.MouseWheel,function(b){a.onMouseWheel(b)})):(document.addEventListener(Pan3d.MouseType.TouchMove,function(b){a.mouseToEvent(b)}),document.addEventListener(Pan3d.MouseType.TouchEnd,function(b){a.mouseToEvent(b)}),document.addEventListener(Pan3d.MouseType.TouchStart,function(b){a.mouseToEvent(b)}))},a.prototype.onMouseWheel=function(a){},a.prototype.onMouse=function(a){var b,c=new Pan3d.Vector2D;a instanceof MouseEvent&&(a.type==Pan3d.MouseType.MouseDown?b=new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down):a.type==Pan3d.MouseType.MouseUp?b=new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up):a.type==Pan3d.MouseType.MouseMove?b=new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move):a.type==Pan3d.MouseType.MouseClick,c.x=a.pageX,c.y=a.pageY),this.makeMouseEvent(b,c)},a.prototype.mouseToEvent=function(a){var b,c=new Pan3d.Vector2D;a.type==Pan3d.MouseType.TouchStart?b=new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down):a.type==Pan3d.MouseType.TouchEnd?(b=new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Up),c.x=a.changedTouches[0].pageX,c.y=a.changedTouches[0].pageY):a.type==Pan3d.MouseType.TouchMove&&(b=new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Move)),a.touches.length&&(c.x=a.touches[a.touches.length-1].clientX,c.y=a.touches[a.touches.length-1].clientY),this.makeMouseEvent(b,c)},a.prototype.makeMouseEvent=function(a,b){var c=Pan3d.UIManager.getInstance().mouseEvetData(a,b);c||a.type==Pan3d.InteractiveEvent.Up&&this.clikSceneGround(b)},a.prototype.clikSceneGround=function(a){},a.prototype.walkPathComplete=function(){},a}();a.ModelshowMouseManager=b}(scenedis||(scenedis={}));var scenedis;!function(a){var b=function(){function a(){this.lastRotationY=0,this.lastRotationX=0,this._lastMousePos=new Pan3d.Vector2D}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a.prototype.initSceneFocueEvent=function(){var a=this;Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Down,this.onMouseDown,this),Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Up,this.onMouseUp,this),Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Move,this.onMouseMove,this),document.addEventListener(Pan3d.MouseType.MouseWheel,function(b){a.onMouseWheel(b)})},a.prototype.onMouseWheel=function(a){Pan3d.Scene_data.cam3D.distance+=a.wheelDelta/10},a.prototype.onMouseMove=function(a){if(this._isMouseDown){var b=a.x-this._lastMousePos.x;Pan3d.Scene_data.focus3D.rotationY=this.lastRotationY-b;var c=a.y-this._lastMousePos.y;Pan3d.Scene_data.focus3D.rotationX=this.lastRotationX-c}},a.prototype.onMouseDown=function(a){this._lastMousePos.x=a.x,this._lastMousePos.y=a.y,this.lastRotationY=Pan3d.Scene_data.focus3D.rotationY,this.lastRotationX=Pan3d.Scene_data.focus3D.rotationX,this._isMouseDown=!0},a.prototype.onMouseUp=function(a){this._isMouseDown=!1},a}();a.SceneMouseEventModel=b}(scenedis||(scenedis={}));var scenedis;!function(a){var b=function(){function b(){this.addModelChar()}return b.prototype.addModelChar=function(){var b=new a.ModelSceneChar;b.setRoleUrl(getRoleUrl("50003")),b.setWingByID("901"),b.setMountById("4103"),b.setWeaponByAvatar(50011),b.play(Pan3d.CharAction.STAND_MOUNT),Pan3d.SceneManager.getInstance().addMovieDisplay(b)},b}();a.CharModelShow=b}(scenedis||(scenedis={}));var scenedis;!function(a){var b=function(){function b(){this.skillFileName="jichu_1",this.charIdstr="50001",this.weaponNum=50011,this.skipId=1,this.skillEffectItem=["skill_01","skill_02","skill_03","m_skill_01","m_skill_02","m_skill_03"],this.initSkillPlay()}return b.prototype.initSkillPlay=function(){getUrlParam("id")?(this.makeUrlParam(),this.makeMainChar()):window.location.href="index.html?id="+random(10)},b.prototype.makeUrlParam=function(){this.paramId=Number(getUrlParam("id")),isNaN(this.paramId)&&(this.paramId=0),this.paramId=Math.floor(this.paramId),this.paramId=this.paramId%6+1,(this.paramId<=0||this.paramId>6)&&(this.paramId=1),(3==this.paramId||4==this.paramId)&&this.makeAttackChar(),this.skillFileName="jichu_"+Math.ceil(this.paramId/2),this.charIdstr="5000"+this.paramId,this.weaponNum=50010+this.paramId},b.prototype.makeAttackChar=function(){var a=new Pan3d.SceneChar;a.z=100,a.setRoleUrl(getRoleUrl("7001")),Pan3d.SceneManager.getInstance().addMovieDisplay(a),this.attackTarget=a,this.attackTarget.x=random(50)+30,this.attackTarget.z=random(50)+30},b.prototype.makeMainChar=function(){var b=this;Pan3d.SkillManager.getInstance().preLoadSkill(getSkillUrl(this.skillFileName));var c=new a.SkillSceneChar;c.setRoleUrl(getRoleUrl(this.charIdstr)),Pan3d.SceneManager.getInstance().addMovieDisplay(c),c.setWeaponByAvatar(this.weaponNum),this.mainChar=c,c.changeActionFun=function(){b.playSkill()},c.loadFinishFun=function(){Pan3d.ResManager.getInstance().loadSkillRes(Pan3d.Scene_data.fileRoot+getSkillUrl(b.skillFileName),function(a){Pan3d.SkillManager.getInstance().preLoadSkill(getSkillUrl(b.skillFileName)),Pan3d.TimeUtil.addTimeOut(1e3,function(){b.playSkill()}),console.log(Pan3d.TimeUtil.getTimer())})}},b.prototype.playSkill=function(){var a=this.skillEffectItem[this.skipId%this.skillEffectItem.length],b=Pan3d.SkillManager.getInstance().getSkill(getSkillUrl(this.skillFileName),a);if(b.keyAry){if(this.textPlaySkillFun&&(Pan3d.TimeUtil.removeTimeTick(this.textPlaySkillFun),this.textPlaySkillFun=null),b&&(b.reset(),b.isDeath=!1),3==this.paramId||4==this.paramId){if("m_skill_01"==a)b.configFixEffect(this.mainChar);else{this.attackTarget.x=random(50)+30,this.attackTarget.z=random(50)+30;var c=new Pan3d.Vector3D(this.attackTarget.x,this.attackTarget.y,this.attackTarget.z),d=new Array;d.push(c),b.configFixEffect(this.mainChar,null,d)}this.mainChar.watch(this.attackTarget,!0)}else b.configFixEffect(this.mainChar);this.mainChar.playSkill(b),this.skipId++}},b}();a.CharSkillPlayModel=b}(scenedis||(scenedis={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.initConfig=function(){var a=this;Pan3d.Engine.update=function(){a.update()},Pan3d.Engine.init=function(b){a.init(b)},Pan3d.Engine.resetSize=function(b,c){a.resetSize(b,c)}},b.update=function(){Pan3d.TimeUtil.update(),Pan3d.SceneManager.getInstance().update()},b.resetSize=function(a,b){Pan3d.Scene_data.stageWidth=a,Pan3d.Scene_data.stageHeight=b,Pan3d.Scene_data.canvas3D.width=Pan3d.Scene_data.stageWidth,Pan3d.Scene_data.canvas3D.height=Pan3d.Scene_data.stageHeight,Pan3d.Scene_data.context3D.resetSize(Pan3d.Scene_data.stageWidth,Pan3d.Scene_data.stageHeight),Pan3d.UIManager.getInstance().resize(),Pan3d.BloodManager.getInstance().resize(),Pan3d.Engine.resetViewMatrx3D()},b.init=function(a){var b=/ipad/i.test(navigator.userAgent),c=/iPhone/i.test(navigator.userAgent),d=/android/i.test(navigator.userAgent);/iindow/i.test(navigator.userAgent),navigator.userAgent.toLowerCase();b||c||d?Pan3d.Scene_data.isPc=!1:Pan3d.Scene_data.isPc=!0,Pan3d.Scene_data.vpMatrix=new Pan3d.Matrix3D,Pan3d.Scene_data.canvas3D=a,Pan3d.Scene_data.context3D=new Pan3d.Context3D,Pan3d.Scene_data.context3D.init(a),Pan3d.UIManager.getInstance().init(),Pan3d.Scene_data.cam3D=new Pan3d.Camera3D,Pan3d.Scene_data.focus3D=new Pan3d.Object3D,Pan3d.Scene_data.focus3D.x=0,Pan3d.Scene_data.focus3D.y=0,Pan3d.Scene_data.focus3D.z=0,Pan3d.Scene_data.focus3D.rotationY=135,Pan3d.Scene_data.focus3D.rotationX=-45,Pan3d.Scene_data.light=new Pan3d.LightVo,Pan3d.TimeUtil.init(),Pan3d.Scene_data.supportBlob=!0},b}(Pan3d.Engine);a.OverrideEngine=b}(scene3d||(scene3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene3d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.initConfig=function(){Pan3d.SceneManager._instance=new b},b.prototype.update=function(){Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D,Pan3d.Scene_data.focus3D),Pan3d.Scene_data.context3D._contextSetTest.clear(),isNaN(this._time)&&(this._time=Pan3d.TimeUtil.getTimer()),this.updateMovieFrame(),this._ready&&(Pan3d.ParticleManager.getInstance().updateTime(),Pan3d.SkillManager.getInstance().update(),this.render&&(Pan3d.Scene_data.context3D.cullFaceBack(!1),Pan3d.Scene_data.context3D.cullFaceBack(!0),Pan3d.Scene_data.context3D.cullFaceBack(!0),Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setDepthTest(!0),this.updateStaticDiplay(),this.updateSpriteDisplay(),this.updateMovieDisplay(),Pan3d.Scene_data.context3D.setWriteDepth(!1),Pan3d.ParticleManager.getInstance().update(),Pan3d.BloodManager.getInstance().update(),Pan3d.Scene_data.context3D.setBlendParticleFactors(0),Pan3d.Scene_data.context3D.setWriteDepth(!0)),Pan3d.Scene_data.context3D.setDepthTest(!1),Pan3d.UIManager.getInstance().update())},b}(Pan3d.SceneManager);a.OverrideSceneManager=b}(scene3d||(scene3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene3d;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.drawTxtBydigitalAndtext=function(a){var b,c=this.parent.uiAtlas.getRec(this.textureStr),d=Pan3d.UIManager.getInstance().getContext2D(c.pixelWitdh,c.pixelHeight,!1),e=a.type,f=50,g=25;a.type==Pan3d.TextJumpType.EXPERIENCE&&(b=Pan3d.ArtFont.num54);var h=Pan3d.ArtFont.getInstance().getAirFontWidth(d,String(this._data.str),b);return h+=f,Pan3d.UiDraw.cxtDrawImg(d,"TYPE"+e,new Pan3d.Rectangle(c.pixelWitdh-h,c.pixelHeight-g,f,g),Pan3d.UIData.publicUi),Pan3d.ArtFont.getInstance().writeFontToCtxLeft(d,String(this._data.str),b,c.pixelWitdh-h+f+2,c.pixelHeight-g),Pan3d.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture,c.pixelX,c.pixelY,d),h},b}(Pan3d.ExpTextJumpUiDrawAndRefreash);a.ExpTextJumpUiDrawAndRefreash256=b}(scene3d||(scene3d={})),function(a){var b=function(b){function c(){var c=b.call(this)||this;return c._jumpText256_256=new Pan3d.AlphaUiContianer(a.ExpTextJumpUiDrawAndRefreash256,new Pan3d.Rectangle(0,0,256,256),2),c.uiContianerItem.push(c._jumpText256_256),c}return __extends(c,b),c.getInstance=function(){return Pan3d.BloodManager._instance||(console.log("一定要到这里--->复写飘字"),Pan3d.BloodManager._instance=new c),Pan3d.BloodManager._instance},c.prototype.setExpJump256_256Num=function(a){this._jumpText256_256.showTemp(a),console.log(a)},c}(Pan3d.BloodManager);a.OverrideBloodManager=b}(scene3d||(scene3d={}));var scene3d;!function(a){var b=function(){function b(){}return b.initData=function(){a.OverrideSceneManager.initConfig(),a.OverrideEngine.initConfig(),Pan3d.Engine.init(mainpan3d.canvas),a.OverrideBloodManager.getInstance(),Pan3d.Engine.resetSize(mainpan3d.canvas.width,mainpan3d.canvas.height),Pan3d.Engine.initPbr(),b.isConfig=!0,Pan3d.SceneManager.getInstance().ready=!0},b.isConfig=!1,b}();a.Scene3dInit=b}(scene3d||(scene3d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene2d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.initConfig=function(){var a=this;Pan3d.Engine.update=function(){a.update()},Pan3d.Engine.init=function(b){a.init(b)},Pan3d.Engine.resetSize=function(b,c){a.resetSize(b,c)},Pan3d.Engine.resetViewMatrx3D=function(){a.resetViewMatrx3D()}},c.resetSize=function(b,c){isNaN(b)&&(b=document.body.clientWidth),isNaN(c)&&(c=document.body.clientHeight),Pan3d.Scene_data.stageWidth=b,Pan3d.Scene_data.stageHeight=c,Pan3d.Scene_data.context3D.resetSize(Pan3d.Scene_data.stageWidth,Pan3d.Scene_data.stageHeight),Pan3d.UIManager.getInstance().resize(),Pan3d.BloodManager.getInstance().resize(),Pan3d.Engine.resetViewMatrx3D(),a.CanvasPostionModel.getInstance().resetSize()},c.init=function(a){scene3d.OverrideEngine.init(a),Pan3d.Scene_data.focus3D.x=0,Pan3d.Scene_data.focus3D.y=0,Pan3d.Scene_data.focus3D.z=0,Pan3d.Scene_data.focus3D.rotationY=0,Pan3d.Scene_data.focus3D.rotationX=-45,Pan3d.Scene_data.cam3D.distance=250},c.resetViewMatrx3D=function(){Pan3d.Scene_data.viewMatrx3D?Pan3d.Scene_data.viewMatrx3D.identity():Pan3d.Scene_data.viewMatrx3D=new Pan3d.Matrix3D;var a=Pan3d.Scene_data.stageWidth,b=Pan3d.Scene_data.stageHeight;Pan3d.Scene_data.sceneViewHW=Math.max(a,b),Pan3d.Scene_data.viewMatrx3D.appendScale(1/Pan3d.Scene_data.sceneViewHW*2,1/Pan3d.Scene_data.sceneViewHW*2,.001),
Pan3d.Scene_data.viewMatrx3D.appendScale(1*(Pan3d.Scene_data.sceneViewHW/a*2),a/b*(Pan3d.Scene_data.sceneViewHW/a*2),1),Pan3d.Scene_data.viewMatrx3D.appendScale(2*this.htmlScale,2*this.htmlScale,1)},c.htmlScale=.5,c}(scene3d.OverrideEngine);a.Override2dEngine=b}(scene2d||(scene2d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene2d;!function(a){var b=function(b){function c(){return b.call(this)||this}return __extends(c,b),c.initConfig=function(){Pan3d.SceneManager._instance=new c},c.prototype.update=function(){Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D,Pan3d.Scene_data.focus3D),Pan3d.Scene_data.context3D._contextSetTest.clear(),isNaN(this._time)&&(this._time=Pan3d.TimeUtil.getTimer()),a.GroundModel.getInstance().update(),this.updateMovieFrame(),this._ready&&(Pan3d.ParticleManager.getInstance().updateTime(),Pan3d.SkillManager.getInstance().update(),this.render&&(Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setDepthTest(!0),this.updateStaticDiplay(),this.updateSpriteDisplay(),this.updateMovieDisplay(),Pan3d.Scene_data.context3D.setWriteDepth(!1),Pan3d.ParticleManager.getInstance().update(),Pan3d.BloodManager.getInstance().update(),Pan3d.Scene_data.context3D.setBlendParticleFactors(0),Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setWriteDepth(!1)),Pan3d.Scene_data.context3D.setDepthTest(!1),Pan3d.UIManager.getInstance().update())},c}(scene3d.OverrideSceneManager);a.Override2dSceneManager=b}(scene2d||(scene2d={}));var scene2d;!function(a){var b=function(){function b(){this.lastPostionV2d=new Pan3d.Vector2D,this._lastMousePos=new Pan3d.Vector2D,this.tureMoveV2d=new Pan3d.Vector2D(0,0),this.initSceneFocueEvent()}return b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.initSceneFocueEvent=function(){Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Down,this.onMouseDown,this),Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Up,this.onMouseUp,this),Pan3d.Scene_data.uiBlankStage.addEventListener(Pan3d.InteractiveEvent.Move,this.onMouseMove,this)},b.prototype.onMouseMove=function(a){this._isMouseDown&&(this.tureMoveV2d.x=this.lastPostionV2d.x+a.x-this._lastMousePos.x,this.tureMoveV2d.y=this.lastPostionV2d.y+a.y-this._lastMousePos.y,this.resetSize())},b.prototype.onMouseDown=function(a){this._lastMousePos.x=a.x,this._lastMousePos.y=a.y,this.lastPostionV2d=new Pan3d.Vector2D(this.tureMoveV2d.x,this.tureMoveV2d.y),this._isMouseDown=!0},b.prototype.onMouseUp=function(a){this._isMouseDown=!1},b.prototype.resetSize=function(){var c=.25/a.Override2dEngine.htmlScale;Pan3d.Scene_data.focus3D.x=0+Pan3d.Scene_data.stageWidth/2*c,Pan3d.Scene_data.focus3D.z=0-Pan3d.Scene_data.stageHeight/2*c/Math.sin(b.scene2dRotation45*Math.PI/180),Pan3d.Scene_data.focus3D.x-=this.tureMoveV2d.x*c,Pan3d.Scene_data.focus3D.z+=this.tureMoveV2d.y*c/Math.sin(b.scene2dRotation45*Math.PI/180),a.Ground2dBaseSprite.perentpos=this.tureMoveV2d},b.scene2dRotation45=45,b}();a.CanvasPostionModel=b}(scene2d||(scene2d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene2d;!function(a){var b=function(b){function c(){return null!==b&&b.apply(this,arguments)||this}return __extends(c,b),c.prototype.setWeaponByAvatar=function(a,b){void 0===b&&(b=""),this.addPart(Pan3d.SceneChar.WEAPON_PART,Pan3d.SceneChar.WEAPON_DEFAULT_SLOT,this.getSceneCharWeaponUrl(a,b))},c.prototype.setWingByID=function(a){this._wingDisplay||(this._wingDisplay=new Pan3d.SceneBaseChar),this._wingDisplay.setRoleUrl(getRoleUrl(a)),this._wingDisplay.setBind(this,Pan3d.SceneChar.WING_SLOT),Pan3d.SceneManager.getInstance().addMovieDisplay(this._wingDisplay)},c.prototype.setMountById=function(a){this.mountChar||(this.mountChar=new Pan3d.MountChar),this.mountChar.setRoleUrl(getRoleUrl(a)),this.setBind(this.mountChar,Pan3d.SceneChar.MOUNT_SLOT),Pan3d.SceneManager.getInstance().addMovieDisplay(this.mountChar),this.isMount=!0},c.prototype.set2dPos=function(b,c){this.x=b*a.Override2dEngine.htmlScale,this.z=c*a.Override2dEngine.htmlScale/Math.sin(a.CanvasPostionModel.scene2dRotation45*Math.PI/180)*-1,this.mountChar&&(this.mountChar.x=this.x,this.mountChar.z=this.z)},Object.defineProperty(c.prototype,"rotationY",{set:function(a){this._rotationY=a,this.mountChar&&(this.mountChar.rotationY=this._rotationY),this.updateMatrix(),this.updateRotationMatrix()},enumerable:!0,configurable:!0}),c}(Pan3d.SceneChar);a.Scene2dChar=b}(scene2d||(scene2d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),scene2d;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"u2Texture")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 u2Texture;varying vec2 v_texCoord;uniform vec4 movesize;void main(void){   v_texCoord = vec2(u2Texture.x, u2Texture.y);   vec4 vt0= vec4(v3Position, 1.0);   vt0.xy*=movesize.zw;   vt0.xy+=movesize.xy;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ngl_FragColor =infoUv;\n}";return a},b.Ground2dBaseShader="Ground2dBaseShader",b}(Pan3d.Shader3D);a.Ground2dBaseShader=b;var c=function(a){function c(){var b=a.call(this)||this;return b.x=0,b.y=0,b.width=100,b.height=100,b.initData(),b}return __extends(c,a),c.prototype.initData=function(){Pan3d.ProgrmaManager.getInstance().registe(b.Ground2dBaseShader,new b),this.shader=Pan3d.ProgrmaManager.getInstance().getProgram(b.Ground2dBaseShader),this.program=this.shader.program,this.objData=new Pan3d.ObjData,this.objData.vertices=new Array,this.objData.vertices.push(0,-1,0),this.objData.vertices.push(1,-1,0),this.objData.vertices.push(1,0,0),this.objData.vertices.push(0,0,0),this.objData.uvs=new Array,this.objData.uvs.push(0,1),this.objData.uvs.push(1,1),this.objData.uvs.push(1,0),this.objData.uvs.push(0,0),this.objData.indexs=new Array,this.objData.indexs.push(0,1,2),this.objData.indexs.push(0,2,3),this.loadTexture(),this.upToGpu()},c.prototype.loadTexture=function(){var a=Pan3d.UIManager.getInstance().getContext2D(128,128,!1);a.fillStyle="rgb(255,255,255)",a.fillRect(0,0,128,128),this._uvTextureRes=Pan3d.TextureManager.getInstance().getCanvasTexture(a)},c.prototype.setPicUrl=function(a){var b=this;Pan3d.TextureManager.getInstance().getTexture(a,function(a){b._uvTextureRes=a})},c.prototype.upToGpu=function(){this.objData.indexs.length&&(this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer=Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.vertices),this.objData.uvBuffer=Pan3d.Scene_data.context3D.uploadBuff3D(this.objData.uvs),this.objData.indexBuffer=Pan3d.Scene_data.context3D.uploadIndexBuff3D(this.objData.indexs))},c.prototype.update=function(){this.objData&&this.objData.indexBuffer&&this._uvTextureRes&&(Pan3d.Scene_data.context3D.setProgram(this.program),Pan3d.Scene_data.context3D.setVa(0,3,this.objData.vertexBuffer),Pan3d.Scene_data.context3D.setVa(1,2,this.objData.uvBuffer),Pan3d.Scene_data.context3D.setVc4fv(this.shader,"movesize",this.getMoveSizeData()),Pan3d.Scene_data.context3D.setRenderTexture(this.shader,"s_texture",this._uvTextureRes.texture,0),Pan3d.Scene_data.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum))},c.prototype.getMoveSizeData=function(){var a=(this.x+c.perentpos.x)/(Pan3d.Scene_data.stageWidth/2)-1,b=1-(this.y+c.perentpos.y)/(Pan3d.Scene_data.stageHeight/2),d=this.width/(Pan3d.Scene_data.stageWidth/2),e=this.height/(Pan3d.Scene_data.stageHeight/2);return[a,b,d,e]},c.perentpos=new Pan3d.Vector2D,c}(Pan3d.Display3D);a.Ground2dBaseSprite=c;var d=function(){function a(){this._groundItem=new Array}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a.prototype.update=function(){Pan3d.Scene_data.context3D.setWriteDepth(!1),Pan3d.Scene_data.context3D.setDepthTest(!1);for(var a=0;a<this._groundItem.length;a++)this._groundItem[a].update()},a.prototype.addGroundPicByeUrl=function(a,b){void 0===a&&(a=null),void 0===b&&(b=null);var d=new c;return a&&d.setPicUrl(a),b&&(d.x=b.x,d.y=b.y,d.width=b.width,d.height=b.height),this._groundItem.push(d),d},a}();a.GroundModel=d}(scene2d||(scene2d={}));var scene2d;!function(a){var b=function(){function b(){}return b.initData=function(){a.Override2dSceneManager.initConfig(),a.Override2dEngine.initConfig(),Pan3d.Scene_data.fileRoot=" http://"+document.domain+"/res/",Pan3d.Engine.init(mainpan3d.canvas),Pan3d.Engine.resetSize(mainpan3d.canvas.width,mainpan3d.canvas.height),Pan3d.Engine.initPbr(),b.isConfig=!0,Pan3d.SceneManager.getInstance().ready=!0},b.addGridLineSprite=function(){Pan3d.ProgrmaManager.getInstance().registe(Pan3d.LineDisplayShader.LineShader,new Pan3d.LineDisplayShader),Pan3d.SceneManager.getInstance().addDisplay(new Pan3d.GridLineSprite)},b.isConfig=!1,b}();a.Scene2dInit=b}(scene2d||(scene2d={}));var scene2d;!function(a){var b=function(){function b(){}return b.math3dto2Darpg=function(b){var c=Pan3d.Scene_data.vpMatrix.transformVector(b),d=Pan3d.Scene_data.stageWidth/4/a.Override2dEngine.htmlScale,e=Pan3d.Scene_data.stageHeight/4/a.Override2dEngine.htmlScale,f=d+c.x*d,g=e-c.y*e;return new Pan3d.Vector2D(f,g)},b.getScene2DBy3Dpostion=function(a){var c=this.math3dto2Darpg(a);return c.x-=b.sceneStagePos.x,c.y-=b.sceneStagePos.y,c},b.math2Dto3DGroundarpg=function(a){this._vpMatrixInver=Pan3d.Scene_data.vpMatrix.clone(),this._vpMatrixInver.invert();var b=this.math2dto3Darpg(a,100),c=this.math2dto3Darpg(a,200);return this.triItem||(this.triItem=new Array,this.triItem.push(new Pan3d.Vector3D(0,0,0)),this.triItem.push(new Pan3d.Vector3D(-100,0,100)),this.triItem.push(new Pan3d.Vector3D(100,0,100))),Pan3d.MathUtil.getLinePlaneInterectPointByTri(b,c,this.triItem)},b.math2dto3Darpg=function(a,b){void 0===b&&(b=100);var c=Pan3d.Scene_data.stageWidth/4,d=Pan3d.Scene_data.stageHeight/4,e=a.x,f=a.y,g=new Pan3d.Vector3D;return g.y=(d-f)/d,g.x=(e-c)/c,g.z=b,g=this._vpMatrixInver.transformVector(g)},b.refrishPos=function(a){b.sceneStagePos.x=a.x,b.sceneStagePos.y=a.y,Pan3d.Scene_data.focus3D.x=-b.sceneStagePos.x/2,Pan3d.Scene_data.focus3D.z=b.sceneStagePos.y/2/Math.sin(45*Math.PI/180)},b.resetSelfPosCenter=function(){if(Pan3d.GameInstance.mainChar){var b=this.getScene2DBy3Dpostion(new Pan3d.Vector3D(Pan3d.GameInstance.mainChar.x,0,Pan3d.GameInstance.mainChar.z)),c=Pan3d.Scene_data.stageWidth/4/a.Override2dEngine.htmlScale,d=Pan3d.Scene_data.stageHeight/4/a.Override2dEngine.htmlScale,e=new Pan3d.Vector2D(c-b.x,d-b.y);this.refrishPos(e)}},b.sceneStagePos=new Pan3d.Vector2D,b.lockMainChar=!0,b}();a.AppDataArpg=b}(scene2d||(scene2d={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),shadow;!function(a){var b=Pan3d.ProgrmaManager,c=Pan3d.UIManager,d=Pan3d.Vector3D,e=Pan3d.TextureManager,f=Pan3d.Scene_data,g=Pan3d.Shader3D,h=Pan3d.Matrix3D,i=Pan3d.FBO,j=Pan3d.MathClass,k=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"u2Texture")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 u2Texture;uniform mat4 vpMatrix3D;uniform mat4 posMatrix3D;varying vec2 v_texCoord;void main(void){   v_texCoord = vec2(u2Texture.x, u2Texture.y);   vec4 vt0= vec4(v3Position, 1.0);   vt0 = posMatrix3D * vt0;   vt0 = vpMatrix3D * vt0;   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D s_texture;\nvarying vec2 v_texCoord;\nvoid main(void)\n{\nvec4 infoUv = texture2D(s_texture, v_texCoord.xy);\ngl_FragColor = vec4(gl_FragCoord.z,gl_FragCoord.z,0.1236,1);\n}";return a},b.BaseShadowShader="BaseShadowShader",b}(g);a.BaseShadowShader=k;var l=function(){function a(){this.sunRotationX=-90,this.sunRotationY=0,this.sunDistens100=200}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a.prototype.getFBO=function(){i.fw=1024,i.fh=1024,this.renderContext=f.context3D.renderContext;var a=f.context3D.renderContext,b=new i;return b.texture=a.createTexture(),a.bindTexture(a.TEXTURE_2D,b.texture),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,i.fw,i.fh,0,a.RGBA,a.UNSIGNED_BYTE,null),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR),b.frameBuffer=a.createFramebuffer(),b.depthBuffer=a.createRenderbuffer(),a.bindRenderbuffer(a.RENDERBUFFER,b.depthBuffer),a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_COMPONENT16,i.fw,i.fh),b},a.prototype.updateDepthTexture=function(a){var b=f.context3D.renderContext;b.bindFramebuffer(b.FRAMEBUFFER,a.frameBuffer),b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,a.texture,0),b.framebufferRenderbuffer(b.FRAMEBUFFER,b.DEPTH_ATTACHMENT,b.RENDERBUFFER,a.depthBuffer)},a.prototype.makeUseShadowView=function(){f.viewMatrx3D.appendTranslation(1,1,1),f.viewMatrx3D.appendScale(.5,.5,.5),j.updateVp(),a.shadowViewMatx3D=f.vpMatrix.clone()},a.prototype.updateDepth=function(b){a.getInstance().sunRotationY=45,b.fbo||(b.fbo=this.getFBO());var c=Pan3d.Scene_data.vpMatrix.clone(),e=Pan3d.Scene_data.viewMatrx3D.clone();this.updateDepthTexture(b.fbo),this.renderContext.viewport(0,0,i.fw,i.fh),this.renderContext.clearColor(1,1,1,1),this.renderContext.clearDepth(1),this.renderContext.enable(this.renderContext.DEPTH_TEST),this.renderContext.depthMask(!0),this.renderContext.frontFace(this.renderContext.CW),this.renderContext.clear(this.renderContext.COLOR_BUFFER_BIT|this.renderContext.DEPTH_BUFFER_BIT),Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setDepthTest(!0),f.viewMatrx3D.identity(),f.viewMatrx3D.appendScale(.002,.002,1/600),f.cam3D.cameraMatrix.identity(),f.cam3D.cameraMatrix.prependRotation(this.sunRotationX,d.X_AXIS),f.cam3D.cameraMatrix.prependRotation(this.sunRotationY,d.Y_AXIS),f.cam3D.cameraMatrix.prependTranslation(-f.focus3D.x,0,-f.focus3D.z);var g=new d(0,0,-1),k=new h;k.appendRotation(-this.sunRotationX,d.X_AXIS),k.appendRotation(-this.sunRotationY,d.Y_AXIS),g=k.transformVector(g),g.normalize(),b.light.sunDirect[0]=g.x,b.light.sunDirect[1]=g.y,b.light.sunDirect[2]=g.z,j.updateVp(),a.shadowViewMatx3D=f.vpMatrix.clone(),f.context3D.setProgram(null);for(var l=0;l<b.displaySpriteList.length;l++){var m=b.displaySpriteList[l];this.drawTempSprite(m.objData,m.posMatrix)}for(var n=0;n<b.displayList.length;n++){var o=b.displayList[n];if(o&&o.needScanShadow)for(var p=0;p<o.groupItem.length;p++)this.drawTempSprite(o.groupItem[p].objData,o.posMatrix)}var q=f.context3D.renderContext;q.bindFramebuffer(q.FRAMEBUFFER,null),q.bindTexture(q.TEXTURE_2D,null),q.bindRenderbuffer(q.RENDERBUFFER,null),this.makeUseShadowView(),f.context3D.resetSize(f.stageWidth,f.stageHeight),Pan3d.Scene_data.vpMatrix=c,Pan3d.Scene_data.viewMatrx3D=e},a.prototype.drawTempSprite=function(a,d){b.getInstance().registe(k.BaseShadowShader,new k);var g=b.getInstance().getProgram(k.BaseShadowShader);if(!this._uvTextureRes){var h=c.getInstance().getContext2D(128,128,!1);h.fillStyle="rgb(255,0,255)",h.fillRect(0,0,128,128),this._uvTextureRes=e.getInstance().getCanvasTexture(h)}f.context3D.setProgram(g.program),f.context3D.setVcMatrix4fv(g,"vpMatrix3D",f.vpMatrix.m),f.context3D.setVcMatrix4fv(g,"posMatrix3D",d.m);f.context3D.pushVa(a.vertexBuffer);f.context3D.setVaOffset(0,3,a.stride,0),f.context3D.setVaOffset(1,2,a.stride,a.uvsOffsets),f.context3D.setRenderTexture(g,"s_texture",this._uvTextureRes.texture,0),f.context3D.drawCall(a.indexBuffer,a.treNum)},a}();a.ShadowModel=l}(shadow||(shadow={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),shadow;!function(a){var b=Pan3d.ProgrmaManager,c=Pan3d.TextureManager,d=Pan3d.Scene_data,e=Pan3d.ObjDataManager,f=Pan3d.Shader3D,g=Pan3d.Display3DSprite,h=Pan3d.GroupDataManager,i=Pan3d.BaseRes,j=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2CubeTexST"),a.bindAttribLocation(this.program,2,"v3Normal")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 v2CubeTexST;varying vec2 v0;varying vec3 v_PositionFromLight;varying vec3 v2;varying float cosTheta;varying float onsunFace;varying vec3 ambientColorF;attribute vec3 v3Normal;uniform vec3 sunDirect;uniform vec3 sunColor;uniform vec3 ambientColor;uniform mat4 vpMatrix3D;uniform mat4 posMatrix3D;uniform mat4 shadowViewMatx3D;uniform mat3 rotationMatrix3D;void main(void){;ambientColorF =ambientColor;v0 = vec2(v2CubeTexST.x, v2CubeTexST.y); vec4 vt0= vec4(v3Position, 1.0);vt0 = posMatrix3D * vt0;vt0 = vpMatrix3D * vt0;   vec4 vt1= vec4(v3Position, 1.0);   vt1 = posMatrix3D * vt1;   vt1 = shadowViewMatx3D * vt1;   v_PositionFromLight = vec3(vt1.x, vt1.y,vt1.z);vec3 n = rotationMatrix3D * v3Normal;float suncos = dot(n.xyz,sunDirect.xyz);onsunFace = suncos;cosTheta =1.0-abs(suncos);suncos = clamp(suncos,0.0,1.0);v2 = sunColor * suncos ;gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D fs0;\nuniform sampler2D fs1;\nvarying vec2 v0;\nvarying vec3 v_PositionFromLight;\nvarying vec3 v2;varying float cosTheta;varying float onsunFace;varying vec3 ambientColorF;void main(void)\n{\nvec4 ft5 = texture2D(fs1, v_PositionFromLight.xy); float  bias  = 0.01*cosTheta; bias = clamp(bias, 0.003, 0.01); float visibility = (v_PositionFromLight.z > ft5.x + bias) ? 0.9 : 1.0;\nvisibility =onsunFace<0.0?1.0:visibility ; vec4 ft0 = texture2D(fs0, v0); vec4 ft1 = vec4(v2.xyz, 1.0); vec4 ft2 = vec4(1, 1, 1, 1); float isalp = (ft5.z >0.1254) ? 1.0 : 0.2;\ngl_FragColor = vec4((ft1.xyz*visibility+ambientColorF.xyz)*ft0.rgb , 1.0); }";return a},b.DirectShadowDisplay3DShader="DirectShadowDisplay3DShader",b}(f);a.DirectShadowDisplay3DShader=j;var k=function(f){function k(){var a=f.call(this)||this;return a.needScanShadow=!0,a.nrmFlag=0,a.initData(),a}return __extends(k,f),k.prototype.initData=function(){b.getInstance().registe(j.DirectShadowDisplay3DShader,new j),this.modelShder=b.getInstance().getProgram(j.DirectShadowDisplay3DShader)},k.prototype.setObjUrl=function(a){var b=this;e.getInstance().getObjData(d.fileRoot+a,function(a){b.objData=a})},k.prototype.update=function(){for(var a=0;a<this.groupItem.length;a++)this.drawTemp(this.groupItem[a])},k.prototype.drawTemp=function(b){if(this._scene.fbo&&a.ShadowModel.shadowViewMatx3D){var c=b.objData,e=this.modelShder;c&&c.indexBuffer&&this._uvTextureRes&&(d.context3D.setProgram(e.program),d.context3D.setVc3fv(e,"sunDirect",this._scene.light.sunDirect),d.context3D.setVc3fv(e,"sunColor",this._scene.light.sunColor),d.context3D.setVc3fv(e,"ambientColor",this._scene.light.ambientColor),d.context3D.setVcMatrix4fv(e,"shadowViewMatx3D",a.ShadowModel.shadowViewMatx3D.m),d.context3D.setVcMatrix3fv(e,"rotationMatrix3D",b._rotationData),d.context3D.setVcMatrix4fv(e,"vpMatrix3D",d.vpMatrix.m),d.context3D.setVcMatrix4fv(e,"posMatrix3D",this.posMatrix.m),d.context3D.renderContext.bindBuffer(d.context3D.renderContext.ARRAY_BUFFER,c.vertexBuffer),d.context3D.setVaOffset(0,3,c.stride,0),d.context3D.setVaOffset(1,2,c.stride,c.uvsOffsets),d.context3D.setVaOffset(2,3,c.stride,c.normalsOffsets),d.context3D.setRenderTexture(e,"fs0",this._uvTextureRes.texture,0),d.context3D.setRenderTexture(e,"fs1",this._scene.fbo.texture,1),d.context3D.drawCall(c.indexBuffer,c.treNum))}},k.prototype.updateRotationMatrix=function(){f.prototype.updateRotationMatrix.call(this);for(var a=0;this.groupItem&&a<this.groupItem.length;a++){var b=this.groupItem[a];b&&b._rotationData&&b._rotationData&&this._rotationMatrix.getRotaion(b._rotationData)}},k.prototype.setPicUrl=function(a){var b=this;c.getInstance().getTexture(d.fileRoot+a,function(a){b._uvTextureRes=a})},k.prototype.setModelById=function(a){var b=this;this.groupItem=new Array,h.getInstance().getGroupData(d.fileRoot+getModelUrl(a),function(a){for(var c=0;c<a.dataAry.length;c++){var d=a.dataAry[c];if(d.types==i.PREFAB_TYPE){var e=new g;e.setObjUrl(d.objUrl),e._rotationData=new Float32Array(9),b.groupItem.push(e),d.materialInfoArr&&d.materialInfoArr.length?b.setPicUrl(d.materialInfoArr[0].url):console.log("没有指定贴图")}}b.updateRotationMatrix()})},k}(g);a.DirectShadowDisplay3DSprite=k}(shadow||(shadow={}));var mainpan3d=function(){function a(){}return a}(),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.reset=function(){this.particle.reset(),this.skill.skillManager.sceneManager.particleManager.removeParticle(this.particle),this.endParticle&&(this.endParticle.reset(),this.skill.skillManager.sceneManager.particleManager.addParticle(this.endParticle),this.endParticle.setPos(this._currentTargetPos.x,this._currentTargetPos.y,this._currentTargetPos.z)),this.removeCallFun&&this.removeCallFun(this)},b.prototype.addToRender=function(){if(this.particle){this.particle.reset(),this.particle.sceneVisible=!0,this.skill.skillManager.sceneManager.particleManager.addParticle(this.particle);var a;if(0==this.data.beginType){var b=new Pan3d.Matrix3D;b.appendRotation(this.active.rotationY,Pan3d.Vector3D.Y_AXIS),a=b.transformVector(this.data.beginPos),this._currentPos.setTo(this.active.x+a.x,this.active.y+a.y,this.active.z+a.z)}else if(1==this.data.beginType){var c=new Pan3d.Matrix3D,d=this.active;d.getSocket(this.data.beginSocket,c),a=c.position,this._currentPos.setTo(a.x,a.y,a.z)}this.particle.setPos(this._currentPos.x,this._currentPos.y,this._currentPos.z),this.path.add()}},b.prototype.endPlayFun=function(a){void 0===a&&(a=null),this.skill.skillManager.sceneManager.particleManager.removeParticle(this.endParticle),this.endParticle.removeEventListener(Pan3d.BaseEvent.COMPLETE,this.endPlayFun,this)},b.prototype.setInfo=function(a){this.time=a.frame*Pan3d.Scene_data.frameTime,this.particle=this.skill.skillManager.sceneManager.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot+a.url),this.particle.bindTarget=this,this.data=a,this.data.endParticleUrl&&(this.endParticle=this.skill.skillManager.sceneManager.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot+this.data.endParticleUrl),this.endParticle.addEventListener(Pan3d.BaseEvent.COMPLETE,this.endPlayFun,this))},b}(Pan3d.SkillTrajectory);a.OverrideSkillTrajectory=b}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=function(a){function b(){var b=a.call(this)||this;return console.log("OverrideSkillFixEffectKeyVo"),b}return __extends(b,a),b}(Pan3d.SkillFixEffectKeyVo);a.OverrideSkillFixEffectKeyVo=b}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=Pan3d.SkillType,c=Pan3d.SkillVo,d=function(d){function e(a){void 0===a&&(a=null);var b=d.call(this)||this;return b.baseName="OverrideSkill",b.skillManager=a,b}return __extends(e,d),e.prototype.skillComplete=function(){this.skillManager.removeSkill(this),this.isDeath=!0,this.completeFun&&this.completeFun(),this.idleTime=0},e.prototype.setData=function(a,b){this.hasDestory||(this.skillVo=new c,this.skillVo.setData(a),this.setKeyAry(),this.trajectoryAry=new Array,this._skillData=b)},e.prototype.setKeyAry=function(){var c=this;if(this.keyAry=new Array,this.skillVo.types==b.FixEffect)for(var d=0;d<this.skillVo.keyAry.length;d++){var e=new a.OverrideSkillFixEffect(this);e.setInfo(this.skillVo.keyAry[d]),e.removeCallFun=function(a){c.removeKey(a)},e.active=this.active,this.keyAry.push(e)}else if(this.skillVo.types==b.TrajectoryDynamicTarget||this.skillVo.types==b.TrajectoryDynamicPoint)for(var d=0;d<this.skillVo.keyAry.length;d++){var f,g=this.skillVo.keyAry[d];1==g.multype||(f=new a.OverrideSkillTrajectory,f.skill=this),f.setInfo(this.skillVo.keyAry[d]),this.keyAry.push(f)}},e}(Pan3d.Skill);a.OverrideSkill=d}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=Pan3d.BaseEvent,c=Pan3d.Vector3D,d=Pan3d.Matrix3D,e=function(a){function e(b){var c=a.call(this)||this;return c.skill=b,c}return __extends(e,a),e.prototype.onPlayCom=function(a){void 0===a&&(a=null),this.particle.removeEventListener(b.COMPLETE,this.onPlayCom,this),this.skill.skillManager.sceneManager.particleManager.removeParticle(this.particle),this.removeCallFun(this)},e.prototype.addToRender=function(){if(this.particle)if(this.particle.reset(),this.particle.sceneVisible=!0,this.skill.skillManager.sceneManager.particleManager.addParticle(this.particle),this.particle.addEventListener(b.COMPLETE,this.onPlayCom,this),this.outPos)this.particle.x=this.outPos.x,this.particle.y=this.outPos.y,this.particle.z=this.outPos.z,this.particle.rotationX=this.rotation.x,this.particle.rotationY=this.rotation.y+this.active.rotationY,this.particle.rotationZ=this.rotation.z,this.particle.bindTarget=null;else if(this.hasSocket){var a=this.active;this.particle.bindTarget=a,this.particle.bindSocket=this.socket}else{var e=new d;e.appendRotation(this.active.rotationY,c.Y_AXIS);var f=e.transformVector(this.pos);f.x+=this.active.x,f.y+=this.active.y,f.z+=this.active.z;var g=new Pan3d.SkillBugBind;g.bindMatrix=new d,g.bindMatrix.appendRotation(this.rotation.x,c.X_AXIS),g.bindMatrix.appendRotation(this.rotation.y,c.Y_AXIS),g.bindMatrix.appendRotation(this.rotation.z,c.Z_AXIS),g.bindMatrix.appendRotation(this.active.rotationY,c.Y_AXIS),g.bindMatrix.appendTranslation(f.x,f.y,f.z),this.particle.bindTarget=g}},e}(Pan3d.SkillFixEffect);a.OverrideSkillFixEffect=e}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=Pan3d.CombineParticle,c=Pan3d.CombineParticleData,d=Pan3d.ParticleManager,e=function(a){function e(){return a.call(this)||this}return __extends(e,a),e.prototype.getParticleByte=function(a){a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt");var c=new b,e=a;if(d.getInstance()._dic[e]){var f=d.getInstance()._dic[e];c=f.getCombineParticle()}return c.url=e,c},e.prototype.registerUrl=function(a){if(a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt"),d.getInstance()._dic[a]){var b=d.getInstance()._dic[a];b.useNum++}},e.prototype.releaseUrl=function(a){if(a=a.replace("_byte.txt",".txt"),a=a.replace(".txt","_byte.txt"),d.getInstance()._dic[a]){var b=d.getInstance()._dic[a];b.clearUseNum()}},e.prototype.addResByte=function(a,b){if(!d.getInstance()._dic[a]){var e=new c;e.setDataByte(b),d.getInstance()._dic[a]=e}},e}(d);a.LayaOverride2dParticleManager=e}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.initConfig=function(){var a=this;Pan3d.UIData.resize=function(){a.uiScaleresize()},Pan3d.Engine.update=function(){a.update()},Pan3d.Engine.init=function(a){scene2d.Override2dEngine.init(a)},Pan3d.Engine.resetSize=function(a,b){scene2d.Override2dEngine.resetSize(a,b)},Pan3d.Engine.resetViewMatrx3D=function(){scene2d.Override2dEngine.resetViewMatrx3D()}},b.uiScaleresize=function(){console.log("重置什么也不做"),Pan3d.UIData.Scale=1},b}(scene3d.OverrideEngine);a.LayaOverride2dEngine=b}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=Pan3d.ResManager,c=Pan3d.Scene_data,d=Pan3d.SkillData,e=Pan3d.SkillManager,f=function(f){function g(a){var b=f.call(this)||this;return b.sceneManager=a,b}return __extends(g,f),g.prototype.addSrc=function(b,c){for(var d in c.data){var f=new a.OverrideSkill(this);f.name=d,f.isDeath=!0,f.src=!0,f.setData(c.data[d],c),c.addSrcSkill(f),e.getInstance();var g=b+d;e.getInstance()._skillDic[g]||(e.getInstance()._skillDic[g]=new Array),e.getInstance()._skillDic[g].push(f)}},g.prototype.playSkill=function(a){a.skillManager=this,f.prototype.playSkill.call(this,a)},g.prototype.getSkill=function(d,f,g){var h=this;void 0===g&&(g=null);var i,j=d+f,k=e.getInstance()._skillDic[j];if(k)for(var l=0;l<k.length;l++)if(i=k[l],i.isDeath&&0==i.useNum)return i.reset(),i.isDeath=!1,i;if(i=new a.OverrideSkill(this),i.name=f,i.isDeath=!1,e.getInstance()._skillDic[j]||(e.getInstance()._skillDic[j]=new Array),e.getInstance()._skillDic[j].push(i),this._dic[d])return i.setData(this._dic[d].data[i.name],this._dic[d]),
i.key=j,this._dic[d].useNum++,i;if(e.getInstance()._loadDic[d]){var m=new Object;return m.name=f,m.skill=i,m.callback=g,e.getInstance()._loadDic[d].push(m),i}e.getInstance()._loadDic[d]=new Array;var m=new Object;return m.name=f,m.skill=i,m.callback=g,e.getInstance()._loadDic[d].push(m),b.getInstance().loadSkillRes(c.fileRoot+d,function(a){h.loadSkillCom(d,a)}),i},g.prototype.loadSkillCom=function(a,b){var c=new d;c.data=b.data;for(var f=0;f<e.getInstance()._loadDic[a].length;f++){var g=e.getInstance()._loadDic[a][f];g.skill.hasDestory||(g.skill.setData(c.data[g.name],c),g.skill.key=a+g.name,c.useNum++)}this._dic[a]=c,this.addSrc(a,c);for(var f=0;f<e.getInstance()._loadDic[a].length;f++){var g=e.getInstance()._loadDic[a][f];g.callback&&g.callback()}e.getInstance()._loadDic[a].length=0,e.getInstance()._loadDic[a]=null},g}(e);a.LayaOverride2dSkillManager=f}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.readParticle=function(){for(var a=this._byte.readInt(),b=(Pan3d.TimeUtil.getTimer(),0);a>b;b++){var c=Pan3d.Scene_data.fileRoot+this._byte.readUTF(),d=this._byte.readInt(),e=new Pan3d.Pan3dByteArray;e.length=d,this._byte.readBytes(e,0,d),this.scene.particleManager.addResByte(c,e)}},b}(Pan3d.GroupRes);a.LayaGroupRes=b;var c=function(a){function c(){return null!==a&&a.apply(this,arguments)||this}return __extends(c,a),c.prototype.getGroupData=function(a,c){var d=this;if(this._dic[a]){var e=this._dic[a];return e.useNum++,void c(e)}if(this._loadDic[a])return void this._loadDic[a].push(c);this._loadDic[a]=new Array,this._loadDic[a].push(c);var f=new b;f.scene=this.scene,f.load(a,function(){for(var b=d._loadDic[a],c=0;c<b.length;c++){var e=b[c];e(f)}d._dic[a]=f,delete d._loadDic[a],f.initReg()})},c}(Pan3d.GroupDataManager);a.LayaOverrideGroupDataManager=c}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=function(b){function c(){var d=b.call(this)||this;return d.particleManager=new a.LayaOverride2dParticleManager,d.skillManager=new a.LayaOverride2dSkillManager(d),d.bloodManager=new Pan3d.BloodManager,d.groupDataManager=new a.LayaOverrideGroupDataManager,console.log("创建场景=>",c.sceneNum++),d}return __extends(c,b),c.initConfig=function(){Pan3d.SceneManager._instance=new c},c.prototype.update=function(){Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D,Pan3d.Scene_data.focus3D),scene2d.GroundModel.getInstance().update(),this.upFrame()},c.prototype.changeBloodManager=function(a){this.bloodManager=a},c.prototype.addMovieDisplay=function(a){a._scene=this,this._displayRoleList.push(a),a.addStage()},c.prototype.loadSceneConfigCom=function(a){var c=Pan3d.Scene_data.focus3D.rotationY;b.prototype.loadSceneConfigCom.call(this,a),Pan3d.Scene_data.focus3D.rotationY=c},c.prototype.playLyf=function(a,b,c){var d=this;void 0===c&&(c=0),this.groupDataManager.scene=this,this.groupDataManager.getGroupData(Pan3d.Scene_data.fileRoot+a,function(a){for(var e=0;e<a.dataAry.length;e++){var f=a.dataAry[e];if(f.types==Pan3d.BaseRes.SCENE_PARTICLE_TYPE){var g=d.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot+f.particleUrl);g.x=b.x,g.y=b.y,g.z=b.z,g.rotationY=c,d.particleManager.addParticle(g),g.addEventListener(Pan3d.BaseEvent.COMPLETE,d.onPlayCom,d)}else console.log("播放的不是单纯特效")}})},c.prototype.charPlaySkill=function(a,b){if(a._scene.ready){var c=this.skillManager.getSkill(getSkillUrl(b),"skill_01");c.keyAry&&(c&&(c.reset(),c.isDeath=!1),c.configFixEffect(a),this.skillManager.playSkill(c))}},c.prototype.onPlayCom=function(a){this.particleManager.removeParticle(a.target)},c.prototype.upFrame=function(){Pan3d.Scene_data.context3D._contextSetTest.clear(),isNaN(this._time)&&(this._time=Pan3d.TimeUtil.getTimer()),this.updateMovieFrame(),this._ready&&(this.particleManager.updateTime(),this.skillManager.update(),this.render&&(Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setDepthTest(!0),this.updateStaticDiplay(),this.updateSpriteDisplay(),this.updateMovieDisplay(),Pan3d.Scene_data.context3D.setWriteDepth(!1),this.particleManager.update(),this.bloodManager.update(),Pan3d.Scene_data.context3D.setBlendParticleFactors(0),Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setWriteDepth(!1)),Pan3d.Scene_data.context3D.setDepthTest(!1),Pan3d.UIManager.getInstance().update(),this.cameraMatrix=Pan3d.Scene_data.cam3D.cameraMatrix.clone(),this.viewMatrx3D=Pan3d.Scene_data.viewMatrx3D)},c.sceneNum=0,c}(scene3d.OverrideSceneManager);a.LayaOverride2dSceneManager=b}(layapan||(layapan={}));var layapan;!function(a){var b=function(){function b(){}return b.initData=function(){b.isConfig||(a.LayaOverride2dEngine.initConfig(),Pan3d.Engine.init(mainpan3d.canvas),Pan3d.Engine.resetSize(mainpan3d.canvas.width,mainpan3d.canvas.height),Pan3d.Engine.initPbr(),b.isConfig=!0,Pan3d.SceneManager.getInstance().ready=!0,this.sceneItem=new Array)},b.isConfig=!1,b}();a.LayaScene2dInit=b}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=Pan3d.CombineParticle,c=Pan3d.Scene_data,d=Pan3d.ParticleManager,e=Pan3d.Vector3D,f=Pan3d.BaseRes,g=Pan3d.Display3DSprite,h=Pan3d.ShadowManager,i=function(a){function i(){var b=null!==a&&a.apply(this,arguments)||this;return b._avatar=-1,b._visible=!0,b}return __extends(i,a),Object.defineProperty(i.prototype,"visible",{get:function(){return this._visible},set:function(a){this._visible=a},enumerable:!0,configurable:!0}),i.prototype.setAvatar=function(a){this._avatar!=a&&(this._avatar=a,this.setRoleUrl(this.getSceneCharAvatarUrl(a)))},i.prototype.update=function(){this.visible&&a.prototype.update.call(this),this._shadow&&(this._shadow._visible=this.visible)},i.prototype.getSceneCharAvatarUrl=function(a){getRoleUrl(String(a));return getRoleUrl(String(a))},i.prototype.getSceneCharWeaponUrl=function(a,b){return void 0===b&&(b=""),getModelUrl(String(a+b))},i.prototype.isPlaying=function(){return 1!=this._completeState||!this._curentFrame||this._curentFrame<this._animDic[this.curentAction].matrixAry.length-1},i.prototype.loadPartRes=function(a,b,h){if(!this._hasDestory){for(var i=0;i<b.dataAry.length;i++){var j,k,l,m=b.dataAry[i];if(m.isGroup&&(j=new e(m.x,m.y,m.z),k=new e(m.rotationX,m.rotationY,m.rotationZ),l=new e(m.scaleX,m.scaleY,m.scaleZ)),m.types==f.SCENE_PARTICLE_TYPE){var n=d.getInstance().getParticleByte(c.fileRoot+m.particleUrl);h.push(n),n.bindTarget=this,n.bindSocket=a,n.dynamic=!0,this._scene.particleManager.addParticle(n),m.isGroup&&n.setGroup(j,k,l)}else if(m.types==f.PREFAB_TYPE){var o=new g;o.setObjUrl(m.objUrl),o.setMaterialUrl(m.materialUrl,m.materialInfoArr),o.dynamic=!0,h.push(o),o.setBind(this,a),this._scene.addSpriteDisplay(o),m.isGroup&&o.setGroup(j,k,l)}}this.applyVisible()}},i.prototype.removeStage=function(){this._onStage=!1,this._shadow&&h.getInstance().removeShadow(this._shadow);for(var a in this._partDic)for(var c=this._partDic[a],d=0;d<c.length;d++)c[d]instanceof b?this._scene.particleManager.removeParticle(c[d]):c[d]instanceof g&&this._scene.removeSpriteDisplay(c[d])},Object.defineProperty(i.prototype,"px",{get:function(){return this.x},set:function(a){this.x=a},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"py",{get:function(){return this.y},set:function(a){this.y=a},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"pz",{get:function(){return this.z},set:function(a){this.z=a},enumerable:!0,configurable:!0}),i.prototype.addSkinMeshParticle=function(){if(this._skinMesh){var a=new Array;this._partDic.mesh=a;var b=this._skinMesh.meshAry;if(b)for(var e=0;e<b.length;e++)for(var f=b[e].particleAry,g=0;g<f.length;g++){var h,i=f[g];h=d.getInstance().getParticleByte(c.fileRoot+i.url),h.sourceData||console.log("particle.sourceData error"),h.dynamic=!0,h.bindSocket=i.socketName,a.push(h),h.bindTarget=this,this._scene.particleManager.addParticle(h)}}},i}(Pan3d.Display3dMovie);a.LayaSceneBaseChar=i}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=Pan3d.Display3DSprite,c=Pan3d.ProgrmaManager,d=Pan3d.Vector3D,e=Pan3d.Vector2D,f=Pan3d.MathClass,g=Pan3d.LineDisplayShader,h=Pan3d.LineDisplaySprite,i=Pan3d.CharAction,j=function(j){function k(){var a=j.call(this)||this;return a.isMount=!1,a._px=0,a._py=0,a._pz=0,a._pRotationY=0,a.toRotationY=0,a._pScale=1,a.tittleHeight=50,a._optimization=!1,a._weaponNum=-1,a._resultVisible=!0,a._hpRatio=0,a._bloodEnable=!1,a._angerRatio=0,a._angerEnable=!1,a._nameEnable=!1,a._showHitBox=!1,a._triIndex=[0,1,2,0,2,3,4,5,6,4,6,7,0,4,5,0,5,1,1,5,6,1,6,2,2,6,7,2,7,3,3,7,4,3,4,0],a.skillitem=new Array,a._bloodColor=k.BLOOD_COLOR_HP,a._angerColor=k.BLOOD_COLOR_ANGER,a}return __extends(k,j),Object.defineProperty(k.prototype,"forceRotationY",{set:function(a){this.pRotationY=a,this.rotationY=a,this.toRotationY=a},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"pRotationY",{get:function(){return this._pRotationY},set:function(a){this._pRotationY=a,this.isMount?this._mountChar.rotationY=a:this.rotationY=a},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"pScale",{get:function(){return this._pScale},set:function(a){this._pScale=a,this._mountChar&&(this._mountChar.scale=a),this._wingDisplay&&(this._wingDisplay.scale=a),this.scale=a,this._skinMesh&&(this.tittleHeight=this._skinMesh.tittleHeight*a)},enumerable:!0,configurable:!0}),k.prototype.setMount=function(b){return this.isMount=b&&0!=b.length,this.isMount?(this._mountChar||(this._mountChar=new a.LayaSceneBaseChar,this._mountChar.scale=this._pScale),this._mountChar.setRoleUrl(getRoleUrl(b)),this.setBind(this._mountChar,k.MOUNT_SLOT),this._mountChar._scene=this._scene,this._scene&&this._scene.addMovieDisplay(this._mountChar)):(this.setBind(null,null),this._mountChar&&(this._mountChar=null)),this.isMount},k.prototype.setWing=function(b){b&&b.length?(this._wingDisplay||(this._wingDisplay=new a.LayaSceneBaseChar,this._wingDisplay.scale=this._pScale),this._wingDisplay.setRoleUrl(getRoleUrl(b)),this._wingDisplay.setBind(this,k.WING_SLOT),this._wingDisplay._scene=this._scene,this._scene&&this._scene.addMovieDisplay(this._wingDisplay)):this._wingDisplay&&(this._wingDisplay.setBind(null,null),this._wingDisplay=null)},k.prototype.setWeapon=function(a){this._weaponNum!=a&&(this._weaponNum=a,0>=a?this.removePart(k.WEAPON_PART):this.setWeaponByAvatar(this._weaponNum))},k.prototype.setWeaponByAvatar=function(a,b){void 0===b&&(b=""),this.addPart(k.WEAPON_PART,k.WEAPON_DEFAULT_SLOT,this.getSceneCharWeaponUrl(a,b))},k.prototype.getSceneCharAvatarUrl=function(a){var b=String(a);if(0==a)throw new Error("衣服为getSceneCharAvatarUrl");var c=getRoleUrl(b);return c},k.prototype.onMeshLoaded=function(){this._skinMesh&&(this.tittleHeight=this._skinMesh.tittleHeight*this._pScale)},k.prototype.play=function(a,b,c){return void 0===b&&(b=0),void 0===c&&(c=!0),this.isMount?(this._mountChar.visible=Boolean(a!=i.JUMP),a==i.STANAD?j.prototype.play.call(this,i.STAND_MOUNT):a==i.WALK?j.prototype.play.call(this,i.WALK_MOUNT):this._mountChar.visible?j.prototype.play.call(this,i.STAND_MOUNT):j.prototype.play.call(this,i.JUMP),this._mountChar.play(a,b,c)):j.prototype.play.call(this,a,b,c)},k.prototype.getCurrentAction=function(){return this.isMount?this._mountChar.curentAction:this.curentAction},k.prototype.rotationToNew=function(a,b){void 0===b&&(b=1);var c=a-this.pRotationY;if(0!=c){if(1>c)return void(this.pRotationY=a);var d=((a-this.pRotationY)%360+360)%360;d>180?this.pRotationY-=(360-d)/b:this.pRotationY+=d/b}},k.prototype.stopMove=function(){this.play(i.STANAD)},k.prototype.watch=function(a,b){if(void 0===b&&(b=!1),a){var c=a.x-this.px,d=a.z-this.pz,e=Math.sqrt(c*c+d*d);c/=e,d/=e;var f=Math.asin(c)/Math.PI*180;0>=d&&(f=180-f),isNaN(f)||(this.forceRotationY=f)}},k.prototype.getCurrentPos=function(){return new d(this.px,this.py,this.pz)},k.prototype.msgSpellStop=function(){this.skillVo&&(this.skillVo.removeSkillForce(),this.changeAction(this._defaultAction),this.skillVo=null),this.isSinging=!1},k.prototype.destory=function(){this._hasDestory||(this.skillVo&&(this.skillVo.removeSkillForce(),this.skillVo=null),this._mountChar&&(this._mountChar.destory(),this._mountChar=null),this._wingDisplay&&(this._wingDisplay.destory(),this._wingDisplay=null),this._charNameVo&&(this._charNameVo.destory(),this._charNameVo=null),this._charBloodVo&&(this._charBloodVo.destory(),this._charBloodVo=null),this._charAngerVo&&(this._charAngerVo.destory(),this._charAngerVo=null),this._hasDestory=!0,j.prototype.destory.call(this))},Object.defineProperty(k.prototype,"visible",{get:function(){return this._visible},set:function(a){this._visible=a,this.applyVisible()},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"optimization",{get:function(){return this._optimization},set:function(a){this._optimization=a,this.applyVisible()},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"resultVisible",{get:function(){return this._resultVisible},enumerable:!0,configurable:!0}),k.prototype.applyVisible=function(){var a=this._visible;if(a=this._visible?this._optimization?!1:!0:!1,this._partDic&&this._partDic[k.WEAPON_PART])for(var b=0,c=this._partDic[k.WEAPON_PART];b<c.length;b++){var d=c[b];d.sceneVisible=a}this._resultVisible=a},Object.defineProperty(k.prototype,"isCamera2D",{set:function(a){this._isCamera2D=a},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"bloodColor",{set:function(a){this._bloodColor=a,this._charBloodVo&&(this._charBloodVo.colortype=this._bloodColor)},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"hpRatio",{get:function(){return this._hpRatio},set:function(a){this._hpRatio=a,this._charBloodVo&&(this._charBloodVo.num=this._hpRatio)},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"bloodEnable",{set:function(a){this._bloodEnable=a,this._charBloodVo||(this._charBloodVo=this._scene.bloodManager.getBloodLineMeshVo(),this._charBloodVo.colortype=1)},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"angerColor",{set:function(a){this._angerColor=a,this._charAngerVo&&(this._charAngerVo.colortype=this._angerColor)},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"angerRatio",{get:function(){return this._angerRatio},set:function(a){this._angerRatio=a,this._charAngerVo&&(this._charAngerVo.num=this._angerRatio)},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"angerEnable",{set:function(a){this._angerEnable=a},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"charName",{get:function(){return this._charName||""},set:function(a){this._charName!=a&&(this._charName=a,this._charNameVo&&(this._charNameVo.name=this._charName))},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"nameEnable",{set:function(a){this._nameEnable=a,this._charNameVo?this._charNameVo.name="潘佳治"+random(99):this._charNameVo=this._scene.bloodManager.getCharNameMeshVo("潘佳治"+random(99))},enumerable:!0,configurable:!0}),k.prototype.updateBind=function(){j.prototype.updateBind.call(this),this.updateWeaponScale(),this.refreshPos()},k.prototype.updateWeaponScale=function(){if(this._partDic.hasOwnProperty(k.WEAPON_PART)){var a=this._partDic[k.WEAPON_PART];if(a instanceof Array)for(var c=0;c<a.length;c++){var d=a[c];d instanceof b&&(d.scale=this._pScale)}}},k.prototype.refreshPos=function(){var a=this.py+this.tittleHeight;this.isMount&&(a+=20),this._charAngerVo&&(this._charAngerVo.pos.x=this.px,this._charAngerVo.pos.y=a,this._charAngerVo.pos.z=this.pz,this._charAngerVo.visible=this._resultVisible,this._isCamera2D,a+=5),this._charBloodVo&&(this._charBloodVo.pos.x=this.px,this._charBloodVo.pos.y=a,this._charBloodVo.pos.z=this.pz,this._charBloodVo.visible=this._resultVisible,this._isCamera2D,a+=10),this._charNameVo&&(this._charNameVo.pos.x=this.px,this._charNameVo.pos.y=a,this._charNameVo.pos.z=this.pz,this._charNameVo.visible=this._resultVisible)},Object.defineProperty(k.prototype,"px",{get:function(){return this._px},set:function(a){this._px=a,this._mountChar?this._mountChar.x=this._px:this.x=this.px},enumerable:!0,configurable:!0}),Object.defineProperty(k.prototype,"pz",{get:function(){return this._pz},set:function(a){this._pz=a,this._mountChar?this._mountChar.z=this._pz:this.z=this.pz},enumerable:!0,configurable:!0}),k.prototype.update=function(){if(this._skinMesh&&!this._optimization&&(j.prototype.update.call(this),this._showHitBox)){if(!this.lineSprite){c.getInstance().registe(g.LineShader,new g),this.lineSprite=new h,this.lineSprite.clear();for(var a=0;a<this._triIndex.length/3;a++){var b=this._skinMesh.hitPosItem[this._triIndex[3*a+0]],d=this._skinMesh.hitPosItem[this._triIndex[3*a+1]],e=this._skinMesh.hitPosItem[this._triIndex[3*a+2]];this.lineSprite.makeLineMode(b,d),this.lineSprite.makeLineMode(d,e),this.lineSprite.makeLineMode(e,b)}this.lineSprite.upToGpu()}this.lineSprite.posMatrix=this.posMatrix.clone(),this.lineSprite.update()}},k.prototype.math_distance=function(a){return f.math_distance(this.px,this.pz,a.x,a.z)},k.prototype.get2dPos=function(){var a=new e,b=.25/scene2d.Override2dEngine.htmlScale;return this._mountChar?(a.x=this._mountChar.px,a.y=this._mountChar.pz):(a.x=this.px,a.y=this.pz),a.x=a.x/b,a.y=a.y/-1*Math.sin(45*Math.PI/180)/b,a},k.prototype.set2dPos=function(a,b){var c=.25/scene2d.Override2dEngine.htmlScale,d=a*c,e=b*c/Math.sin(45*Math.PI/180)*-1;this._px=d,this._pz=e,this._mountChar?(this._mountChar.x=d,this._mountChar.z=e):(this.x=d,this.z=e)},k.prototype.mouseClik=function(a,b){return!1},k.prototype.removeStage=function(){j.prototype.removeStage.call(this),this._charNameVo&&(this._charNameVo.visible=!1),this._charBloodVo&&(this._charBloodVo.visible=!1),this._mountChar&&this._scene.removeMovieDisplay(this._mountChar),this._wingDisplay&&this._scene.removeMovieDisplay(this._wingDisplay)},k.prototype.addStage=function(){j.prototype.addStage.call(this),this._charNameVo&&(this._charNameVo.visible=!0),this._charBloodVo&&(this._charBloodVo.visible=!0),this._mountChar&&this._scene.addMovieDisplay(this._mountChar),this._wingDisplay&&this._scene.addMovieDisplay(this._wingDisplay)},k.BLOOD_COLOR_HP=0,k.BLOOD_COLOR_ANGER=1,k.Defaul_Man_Avatar=2002,k.Defaul_WoMan_Avater=2012,k.WEAPON_PART="weapon",k.WEAPON_DEFAULT_SLOT="w_01",k.MOUNT_SLOT="mount_01",k.WING_SLOT="wing_01",k.SEL_PART="select",k.QUEST_ICON="questicon",k.NONE_SLOT="none",k}(a.LayaSceneBaseChar);a.LayaSceneChar=j}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.drawTxtBydigitalAndtext=function(a){var b,c=this.parent.uiAtlas.getRec(this.textureStr),d=Pan3d.UIManager.getInstance().getContext2D(c.pixelWitdh,c.pixelHeight,!1),e=a.type,f=138,g=75;b=Pan3d.ArtFont.num54;var h=Pan3d.ArtFont.getInstance().getAirFontWidth(d,String(this._data.str),b);return Pan3d.UiDraw.cxtDrawImg(d,"TYPE"+e,new Pan3d.Rectangle((c.pixelWitdh-f)/2,0,f,g),Pan3d.UIData.publicUi),Pan3d.ArtFont.getInstance().writeFontToCtxLeft(d,String(this._data.str),b,(c.pixelWitdh-h)/2,g),Pan3d.TextureManager.getInstance().updateTexture(this.parent.uiAtlas.texture,c.pixelX,c.pixelY,d),h},b.prototype.makeData=function(){if(this._data){var a=this._data;this.pos=a.pos,this.dtime=a.endtime,this.drawTxtBydigitalAndtext(a)}},b.prototype.update=function(){if(this._data){if(this.time=Pan3d.TimeUtil.getTimer(),this.time>=this.dtime)return this.ui&&this.ui.parent&&this.ui.parent.removeChild(this.ui),void(this._data=null);var a=this._data,b=(this.time-a.starttime)/1e3*60,c=this.Vector3DToVector2D(new Pan3d.Vector3D(this.pos.x,this.pos.y,this.pos.z));this.ui.width=256,this.ui.height=256,this.ui.y=c.y-b,this.ui.x=c.x,this.ui.alpha=1}},b}(Pan3d.ExpTextJumpUiDrawAndRefreash);a.LayaJumpUiDrawAndRefreash256=b;var c=function(a){function c(){var c=a.call(this)||this;return c._jumpText256_256=new Pan3d.AlphaUiContianer(b,new Pan3d.Rectangle(0,0,256,256),2),c.uiContianerItem.push(c._jumpText256_256),c}return __extends(c,a),c.prototype.setExpJump256_256Num=function(a){this._jumpText256_256.showTemp(a),console.log(a)},c}(Pan3d.BloodManager);a.LayaBloodManager=c}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),layapan;!function(a){var b=laya.webgl.WebGLContext,c=function(){function a(){}return a.overrideMethods=function(){if(!this.inited){this.inited=!0;var a=function(a){for(var b=[],c=1;c<arguments.length;c++)b[c-1]=arguments[c];var d=Pan3d.Scene_data.context3D.renderContext,e=d.getParameter(d.ARRAY_BUFFER_BINDING),f=d.getParameter(d.ELEMENT_ARRAY_BUFFER_BINDING),g=a.apply(this,b);return d.bindBuffer(d.ARRAY_BUFFER,e),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,f),g},b=Pan3d.ParticleBoneData.prototype.setAllByteInfo;Pan3d.ParticleBoneData.prototype.setAllByteInfo=function(c){return a.call(this,b,c)};var c=Pan3d.ParticleFacetData.prototype.setAllByteInfo;Pan3d.ParticleFacetData.prototype.setAllByteInfo=function(b){return a.call(this,c,b)};var d=Pan3d.ParticleFollowData.prototype.setAllByteInfo;Pan3d.ParticleFollowData.prototype.setAllByteInfo=function(b){return a.call(this,d,b)};var e=Pan3d.ParticleFollowLocusData.prototype.setAllByteInfo;Pan3d.ParticleFollowLocusData.prototype.setAllByteInfo=function(b){return a.call(this,e,b)};var f=Pan3d.ParticleLocusData.prototype.setAllByteInfo;Pan3d.ParticleLocusData.prototype.setAllByteInfo=function(b){return a.call(this,f,b)};var g=Pan3d.ParticleLocusballData.prototype.setAllByteInfo;Pan3d.ParticleLocusballData.prototype.setAllByteInfo=function(b){return a.call(this,g,b)};var h=Pan3d.ParticleModelData.prototype.setAllByteInfo;Pan3d.ParticleModelData.prototype.setAllByteInfo=function(b){return a.call(this,h,b)};var i=Pan3d.ParticleBallData.prototype.regShader;Pan3d.ParticleBallData.prototype.regShader=function(){return a.call(this,i)};var j=Pan3d.MeshDataManager.prototype.readData;Pan3d.MeshDataManager.prototype.readData=function(b,c,d,e){return a.call(this,j,b,c,d,e)};var k=Pan3d.ObjDataManager.prototype.loadObjCom;Pan3d.ObjDataManager.prototype.loadObjCom=function(b,c){return a.call(this,k,b,c)};var l=Pan3d.ArtFont.prototype.getAirFontWidth;Pan3d.ArtFont.prototype.getAirFontWidth=function(b,c,d,e){return void 0===d&&(d=Pan3d.ArtFont.White),void 0===e&&(e=0),a.call(this,l,b,c,d,e)+e};var m=Pan3d.ArtFont.prototype.writeFontToCtxLeft;Pan3d.ArtFont.prototype.writeFontToCtxLeft=function(b,c,d,e,f,g){return void 0===d&&(d=Pan3d.ArtFont.num1),void 0===e&&(e=0),void 0===f&&(f=0),void 0===g&&(g=0),a.call(this,m,b,c,d,e,f,g)+g};var n=Pan3d.SkillRes.prototype.loadComplete;Pan3d.SkillRes.prototype.loadComplete=function(b){a.call(this,n,b)};var o=Pan3d.RoleRes.prototype.loadComplete;Pan3d.RoleRes.prototype.loadComplete=function(b){a.call(this,o,b)};var p=Pan3d.RoleResLow.prototype.loadComplete;Pan3d.RoleResLow.prototype.loadComplete=function(b){a.call(this,p,b)};var q=Pan3d.ModelRes.prototype.loadComplete;Pan3d.ModelRes.prototype.loadComplete=function(b){a.call(this,q,b)};var r=Pan3d.GroupRes.prototype.loadComplete;Pan3d.GroupRes.prototype.loadComplete=function(b){a.call(this,r,b)};var s=Pan3d.UIRenderComponent.prototype.applyObjData;Pan3d.UIRenderComponent.prototype.applyObjData=function(){a.call(this,s)};var t=Pan3d.Display3dShadow.prototype.applyObjData;Pan3d.Display3dShadow.prototype.applyObjData=function(){a.call(this,t)}}},a.inited=!1,a}();a.Pan3dInSideLaya=c;var d=function(d){function e(){var a=d.call(this)||this;return a._layaRenderIndex=-1,e.add(a),a.initData(),a}return __extends(e,d),e.add=function(a){e._list.push(a);var b=Laya.Render.context.ctx;b.submitElement=function(a,c){var d=b._submits;if(0>c&&(c=d._length),a==c)e.forEach(function(a,b){a.testRenderPan3d(-1)});else for(;c>a;)a+=d[a].renderSubmit(),e.forEach(function(b,c){b.testRenderPan3d(a)})}},e.forEach=function(a){for(var b=0,c=this._list;b<c.length;b++){var d=c[b];a.call(null,d,0)}},e.prototype.initData=function(){c.overrideMethods(),this.init(null),this.scene=new a.LayaOverride2dSceneManager,this.scene.layaSprite=this,this.scene.ready=!0,this.addOther()},e.prototype.addOther=function(){var b=new a.OtherLayaRectSprite;this.addChild(b)},e.prototype.init=function(a,b,c){var d=this;void 0===b&&(b=null),void 0===c&&(c=null),this.frameLoop(1,this,function(){d.graphics.clear(),d.graphics.drawLine(0,0,1,0,"#000")}),this.customRenderEnable=!0,this.customRender=function(a,b,c){var e=a.ctx;d._layaRenderIndex=e._submits._length}},e.prototype.testRenderPan3d=function(a){this._layaRenderIndex<0||0!=a&&a!=this._layaRenderIndex||(this._layaRenderIndex=-1,e.saveLayaWebGLContext(),this.upFrame(),Pan3d.Scene_data.context3D.setWriteDepth(!1),Pan3d.Scene_data.context3D.setDepthTest(!1),e.revertLayaWebGLContext())},e.prototype.upFrame=function(){},e.saveLayaWebGLContext=function(){var a=laya.webgl.WebGL.mainContext;b._depthTest=a.isEnabled(b.DEPTH_TEST),b._depthMask=a.getParameter(b.DEPTH_WRITEMASK),b._depthFunc=a.getParameter(b.DEPTH_FUNC),b._blend=a.isEnabled(b.BLEND),b._sFactor=a.getParameter(b.BLEND_SRC_RGB),b._dFactor=a.getParameter(b.BLEND_DST_RGB),b._cullFace=a.isEnabled(b.CULL_FACE),b._cullFaceMode=a.getParameter(b.CULL_FACE_MODE),b._arrayBuffer=a.getParameter(b.ARRAY_BUFFER_BINDING),b._arrayBuffer&&a.bindBuffer(b.ARRAY_BUFFER,null),b._elementArrayBuffer=a.getParameter(b.ELEMENT_ARRAY_BUFFER_BINDING),b._elementArrayBuffer&&a.bindBuffer(b.ELEMENT_ARRAY_BUFFER,null),b._frameBuffer=a.getParameter(b.FRAMEBUFFER_BINDING),b._frameBuffer&&a.bindFramebuffer(b.FRAMEBUFFER,null),b._renderBuffer=a.getParameter(b.RENDERBUFFER_BINDING),b._renderBuffer&&a.bindRenderbuffer(b.RENDERBUFFER,null),b._bindTextureCubeMap=a.getParameter(b.TEXTURE_BINDING_CUBE_MAP),b._activeTexture=a.getParameter(b.ACTIVE_TEXTURE)},e.revertLayaWebGLContext=function(){var a=laya.webgl.WebGL.mainContext;b._depthTest?a.enable(b.DEPTH_TEST):a.disable(b.DEPTH_TEST),a.depthMask(b._depthMask),a.depthFunc(b._depthFunc),b._blend?a.enable(b.BLEND):a.disable(b.BLEND),a.blendFunc(b._sFactor,b._dFactor),b._cullFace?a.enable(b.CULL_FACE):a.disable(b.CULL_FACE),a.cullFace(b._cullFaceMode),a.frontFace(b._frontFace),a.bindBuffer(b.ARRAY_BUFFER,b._arrayBuffer),a.bindBuffer(b.ELEMENT_ARRAY_BUFFER,b._elementArrayBuffer),a.bindFramebuffer(b.FRAMEBUFFER,b._frameBuffer),a.bindRenderbuffer(b.RENDERBUFFER,b._renderBuffer),a.useProgram(b._useProgram)},e._list=[],e}(Laya.Sprite);a.LayaInsideSprite=d;var e=function(a){function b(){var b=this,c="attribute vec2 position;attribute vec2 texcoord;attribute vec4 color;uniform vec2 size;uniform mat4 mmat;varying vec2 v_texcoord;varying vec4 v_color;void main(){vec4 pos =mmat*vec4(position.x,position.y,0,1.0);gl_Position = vec4((pos.x/size.x-0.5)*2.0, (0.5-pos.y/size.y)*2.0, pos.z, 1.0);v_color = color;v_texcoord = texcoord;}",d="precision mediump float;varying vec2 v_texcoord;varying vec4 v_color;uniform sampler2D texture;void main(){vec4 t_color = texture2D(texture, v_texcoord);gl_FragColor = vec4(1.0,0.0,1.0,1.0);}";return b=a.call(this,c,d,"myShader")||this}return __extends(b,a),b.shader=new b,b}(Laya.Shader);a.OtherShader=e;var f=function(a){function b(){var b=a.call(this,0,0)||this,c=8*Laya.CONST3D2D.BYTES_PE;return b.position=[2,Laya.WebGLContext.FLOAT,!1,c,0],b.texcoord=[2,Laya.WebGLContext.FLOAT,!1,c,2*Laya.CONST3D2D.BYTES_PE],b.color=[4,Laya.WebGLContext.FLOAT,!1,c,4*Laya.CONST3D2D.BYTES_PE],b}return __extends(b,a),b}(Laya.Value2D);a.OtherShaderValue=f;var g=function(a){function b(){var b=a.call(this)||this;return b.iNum=0,b.init(null),b}return __extends(b,a),b.prototype.init=function(a,b,c){void 0===b&&(b=null),void 0===c&&(c=null),this.vBuffer=Laya.VertexBuffer2D.create(),this.iBuffer=Laya.IndexBuffer2D.create(),this.ibData=new Uint16Array([]);var d,e;if(b)d=b;else{d=[];var g=10,h=10,i=1,j=1,k=1,l=1;d.push(0,0,0,0,i,j,k,l),d.push(g,0,1,0,i,j,k,l),d.push(g,h,1,1,i,j,k,l),d.push(0,h,0,1,i,j,k,l)}c?e=c:(e=[],e.push(0,1,3)),this.iNum=e.length,this.vbData=new Float32Array(d),this.ibData=new Uint16Array(e),this.vBuffer.append(this.vbData),this.iBuffer.append(this.ibData),this.shaderValue=new f,this.shaderValue.textureHost=null,this._renderType|=Laya.RenderSprite.CUSTOM},b.prototype.customRender=function(a,b,c){a.ctx.setIBVB(b,c,this.iBuffer,this.vBuffer,this.iNum,null,e.shader,this.shaderValue,0,0)},b}(Laya.Sprite);a.OtherLayaRectSprite=g}(layapan||(layapan={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),BaseLaya3dSprite=function(a){function b(){var b=this;return layapan.LayaScene2dInit.isConfig||layapan.LayaScene2dInit.initData(),b=a.call(this)||this}return __extends(b,a),b.prototype.upFrame=function(){Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setDepthTest(!0),Pan3d.TimeUtil.update(),Pan3d.Scene_data.focus3D.rotationY=0,Pan3d.Scene_data.focus3D.rotationX=-45,Pan3d.Scene_data.cam3D.distance=250,scene2d.CanvasPostionModel.getInstance().tureMoveV2d=new Pan3d.Vector2D(this.x,this.y),scene2d.CanvasPostionModel.getInstance().resetSize(),Pan3d.Scene_data.context3D.renderContext.clear(Pan3d.Scene_data.context3D.renderContext.DEPTH_BUFFER_BIT),Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D,Pan3d.Scene_data.focus3D),Pan3d.Scene_data.context3D._contextSetTest.clear(),this.scene.upFrame()},b}(layapan.LayaInsideSprite),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),MaskScene3dLaya=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.applyAbsolutePoint=function(){this.absoluteX=this._x,this.absoluteY=this._y,this.absoluteWidth=this._width,this.absoluteHeight=this._height,this.applyRenderSize()},b.prototype.applyRenderSize=function(){
this.renderData[0]=this.absoluteX/Pan3d.Scene_data.stageWidth,this.renderData[1]=this.absoluteY/Pan3d.Scene_data.stageHeight,this.renderData[2]=this.absoluteWidth/Pan3d.Scene_data.stageWidth,this.renderData[3]=this.absoluteHeight/Pan3d.Scene_data.stageHeight},b}(Pan3d.UIMask),GroundPosLaya=function(){function a(){}return a.getGroundPos=function(a,b,c,d,e){this.cam3D=c,this.windowRect=d,this.viewMatrx3D=e;var f=-0;if(!this._plantObjectMath){var g=new Pan3d.Vector3D(0,f,500),h=new Pan3d.Vector3D(-500,f,0),i=new Pan3d.Vector3D(500,f,0);this._plantObjectMath=Pan3d.Calculation._PanelEquationFromThreePt(g,h,i),this._plantnormal=new Pan3d.Vector3D(this._plantObjectMath.a,this._plantObjectMath.b,this._plantObjectMath.c),this._plantnormal.normalize(),this._plane_a=new Pan3d.Vector3D(g.x,g.y,g.z)}var j=this.mathDisplay2Dto3DWorldPos(new Pan3d.Vector2D(a,b),500),k=new Pan3d.Vector3D(this.cam3D.x,this.cam3D.y,this.cam3D.z),l=Pan3d.Calculation.calPlaneLineIntersectPoint(this._plantnormal,this._plane_a,j,k);return l},a.mathDisplay2Dto3DWorldPos=function(a,b){void 0===b&&(b=300);var c=Math.max(this.windowRect.width,this.windowRect.height);c=Math.max(Pan3d.Scene_data.stageWidth,Pan3d.Scene_data.stageHeight);var d=b/(c/2),e=c/2*d,f=this.windowRect.width,g=this.windowRect.height,h=new Pan3d.Matrix3D;h.prependRotation(-this.cam3D.rotationY,Pan3d.Vector3D.Y_AXIS),h.prependRotation(-this.cam3D.rotationX,Pan3d.Vector3D.X_AXIS);var i=this.viewMatrx3D.transformVector(new Pan3d.Vector3D(500,0,500)),j=i.x/i.w,k=f/2/j*d,l=g/2/j*d,m=a.x/f*k*2,n=a.y/g*l*2,o=this.gettempPos(new Pan3d.Vector3D(-k+m,+l-n,e),h);return o},a.gettempPos=function(a,b){var c=b.transformVector(a);return c=c.add(new Pan3d.Vector3D(this.cam3D.x,this.cam3D.y,this.cam3D.z))},a}(),Scene3dLaya3dSprite=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b._windowRect=new Pan3d.Rectangle(0,0,512,512),b.focus3d=new Pan3d.Object3D,b.camDistance=700,b.camRotationX=-35,b.camRotationZ=0,b.camRotationY=0,b.camAotuMove=!0,b}return __extends(b,a),b.prototype.upFrame=function(){Pan3d.Scene_data.context3D.setWriteDepth(!0),Pan3d.Scene_data.context3D.setDepthTest(!0),Pan3d.TimeUtil.update(),Pan3d.Scene_data.focus3D.x=0,Pan3d.Scene_data.focus3D.y=0,Pan3d.Scene_data.focus3D.z=0,Pan3d.Scene_data.context3D.renderContext.clear(Pan3d.Scene_data.context3D.renderContext.DEPTH_BUFFER_BIT);var a=Pan3d.Scene_data.viewMatrx3D.clone(),b=Pan3d.Scene_data.cam3D.distance;if(this.makeNewMatrix(),Pan3d.Scene_data.context3D._contextSetTest.clear(),this._uiMask){this._uiMask.x=this.x-0,this._uiMask.y=this.y-0;var c=Pan3d.Scene_data.context3D.renderContext;c.enable(c.STENCIL_TEST),c.stencilMask(255),c.stencilFunc(c.NEVER,this._uiMask.level,255),c.stencilOp(c.REPLACE,c.REPLACE,c.REPLACE),this._uiMask.update(),c.stencilFunc(c.LESS,this._uiMask.level-1,255),c.stencilOp(c.KEEP,c.KEEP,c.KEEP)}this.scene.upFrame(),this._uiMask&&Pan3d.Scene_data.context3D.renderContext.disable(Pan3d.Scene_data.context3D.renderContext.STENCIL_TEST),Pan3d.Scene_data.viewMatrx3D=a,Pan3d.Scene_data.cam3D.distance=b},b.prototype.getGroundPos=function(a,b){var c=GroundPosLaya.getGroundPos(a-this.x,b-this.y,this.copyCam3d,this._windowRect,this.copyViewMatrx3D);return c},b.prototype.addMaskUi=function(a,c){this._uiMask||(this._uiMask=new MaskScene3dLaya,b.maskeLevel++,this._uiMask.level=b.maskeLevel),this._windowRect.width=a,this._windowRect.height=c,this._uiMask.width=this._windowRect.width,this._uiMask.height=this._windowRect.height},b.prototype.makeNewMatrix=function(){this._windowRect.x=this.x+this._windowRect.width/2,this._windowRect.y=this.y+this._windowRect.height/2;var a=Math.max(this._windowRect.width,this._windowRect.height),b=Pan3d.Scene_data.stageWidth,c=Pan3d.Scene_data.stageHeight,a=Math.max(b,c);Pan3d.Scene_data.viewMatrx3D.perspectiveFieldOfViewLH(1.76,1,10,2e3),Pan3d.Scene_data.viewMatrx3D.appendScale(1*(a/b*2),b/c*(a/b*2),1),this.copyViewMatrx3D=Pan3d.Scene_data.viewMatrx3D.clone(),Pan3d.Scene_data.cam3D.distance=this.camDistance,this.focus3d.rotationX=this.camRotationX,this.focus3d.rotationY=this.camRotationY,this.focus3d.rotationZ=this.camRotationZ,this.camAotuMove&&(this.camRotationY+=.1),Pan3d.Scene_data.viewMatrx3D.appendTranslation(-1+this._windowRect.x/Pan3d.Scene_data.stageWidth*2,1-this._windowRect.y/Pan3d.Scene_data.stageHeight*2,0),Pan3d.MathClass.getCamView(Pan3d.Scene_data.cam3D,this.focus3d),this.cloneCam3d(Pan3d.Scene_data.cam3D)},b.prototype.cloneCam3d=function(a){this.copyCam3d=new Pan3d.Camera3D,this.copyCam3d.x=a.x,this.copyCam3d.y=a.y,this.copyCam3d.z=a.z,this.copyCam3d.rotationX=a.rotationX,this.copyCam3d.rotationY=a.rotationY,this.copyCam3d.rotationZ=a.rotationZ},b.maskeLevel=2,b}(BaseLaya3dSprite),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Game2dChar=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.moveTopos=function(a){this.moveToPosV2d=a;var b=this.pixelPos.sub(this.moveToPosV2d);this.pRotationY=180-180*Math.atan2(b.x,b.y)/Math.PI},b.prototype.set2dPos=function(b,c){a.prototype.set2dPos.call(this,b,c),this.pixelPos=new Pan3d.Vector2D(b,c)},b.prototype.updateFrame=function(b){if(this.moveToPosV2d){var c=Pan3d.Vector2D.distance(this.pixelPos,this.moveToPosV2d);if(c>10){var d=this.pixelPos.sub(this.moveToPosV2d);d.normalize(),d.scaleBy(3),this.pixelPos.x+=d.x,this.pixelPos.y+=d.y,a.prototype.set2dPos.call(this,this.pixelPos.x,this.pixelPos.y),this.play(Pan3d.CharAction.WALK)}else this.play(Pan3d.CharAction.STANAD)}a.prototype.updateFrame.call(this,b)},b}(layapan.LayaSceneChar),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),Game3dChar=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.moveTopos3d=function(a){this.moveToPosV2d=a;var b=new Pan3d.Vector3D(this.px,this.py,this.pz),c=this.moveToPosV2d.subtract(b);c.normalize(),this.pRotationY=180*Math.atan2(c.x,c.z)/Math.PI},b.prototype.updateFrame=function(b){if(this.moveToPosV2d){var c=new Pan3d.Vector3D(this.px,this.py,this.pz),d=Pan3d.Vector3D.distance(c,this.moveToPosV2d);if(d>2){var e=this.moveToPosV2d.subtract(c);e.normalize(),e.scaleBy(1),this.px=c.x+e.x,this.pz=c.z+e.z,this.play(Pan3d.CharAction.WALK)}else this.play(Pan3d.CharAction.STANAD)}a.prototype.updateFrame.call(this,b)},b}(layapan.LayaSceneChar),canonkey;!function(a){var b=Pan3d.Vector3D,c=Pan3d.Quaternion,d=Pan3d.Matrix3D,e=Pan3d.CollisionVo,f=Pan3d.CollisionType,g=function(){function a(){}return a.creatWorld=function(){a.world=new CANNON.World,a.world.gravity=this.Vec3dW2C(new b(0,-100,0)),a.materialDic=new Object},a.makeGround=function(b){var c=new CANNON.Plane,d=new CANNON.Body({mass:0});a.bodyAddShape(d,c),a.world.addBody(d)},a.bodyAddShape=function(a,b,c,d){void 0===c&&(c=null),void 0===d&&(d=null);var e=new CANNON.Quaternion,f=new CANNON.Vec3;d&&(e.x=d.x,e.y=d.z,e.z=d.y),c&&(f=this.Vec3dW2C(c)),a.addShape(b,f,e)},a.Vec3dW2C=function(a){return new CANNON.Vec3(a.x/this.baseScale10,a.z/this.baseScale10,a.y/this.baseScale10)},a.Vect3dC2W=function(a){return new b(a.x*this.baseScale10,a.z*this.baseScale10,a.y*this.baseScale10)},a.QuaternionW2C=function(a){return new CANNON.Quaternion(a.x,a.z,a.y,a.w)},a.setMatrix3DToBody=function(a,b){var d=new c;d.fromMatrix(b),a.quaternion=this.QuaternionW2C(d)},a.MathBody2WMatrix3D=function(b,c){void 0===c&&(c=null),c||(c=new d),c.identity();var e=a.Vect3dC2W(b.position),f=new CANNON.Mat3,g=new CANNON.Quaternion(b.quaternion.x,b.quaternion.z,b.quaternion.y,b.quaternion.w);return f.setRotationFromQuaternion(g),c.m[0]=f.elements[0],c.m[1]=f.elements[1],c.m[2]=f.elements[2],c.m[4]=f.elements[3],c.m[5]=f.elements[4],c.m[6]=f.elements[5],c.m[8]=f.elements[6],c.m[9]=f.elements[7],c.m[10]=f.elements[8],c.appendTranslation(e.x,e.y,e.z),c},a.QuaternionSetW2C=function(a,b,c,d,e){a.set(b,d,c,e)},a.Quaternion2W=function(a){return new c(a.x,a.z,a.y,a.w)},a.makePolyhedronShape=function(b,c){for(var d=b.vertices,e=b.indexs,f=[],g=[],h=a.Vec3dW2C(c),i=0;i<d.length;i+=3)f.push(new CANNON.Vec3(d[i+0]*h.x,d[i+2]*h.y,d[i+1]*h.z));for(var i=0;i<e.length;i+=3)g.push([e[i+0],e[i+1],e[i+2]]);var j=new CANNON.ConvexPolyhedron(f,g);return j},a.makeBoxShape=function(b){return new CANNON.Box(a.Vec3dW2C(b))},a.makeSphereShape=function(a){return new CANNON.Sphere(a)},a.makeCylinderShape=function(a,b,c){return void 0===c&&(c=10),new CANNON.Cylinder(a,a,b,c)},a.getBodyMesh=function(b,c){var d=new CANNON.Body({mass:c,position:a.Vec3dW2C(b)});return a.world.addBody(d),d},a.addDynamicCapsulePhysics=function(c,d,e){var f=a.getBodyMesh(c,100),g=a.makeSphereShape(d);return a.bodyAddShape(f,g,new b(0,d,0)),f.material=this.dynamicMaterial,f.type=CANNON.Body.DYNAMIC,f.fixedRotation=!0,f.updateMassProperties(),a.world.addBody(f),this.dynamicBodyList.push(f),f},a.addStaticPhysics=function(b,c){var d,e=a.makeBuildBodyMesh(b,c),f=String(float2int(100*c.friction));if(this.materialDic[f])d=this.materialDic[f];else{d=new CANNON.Material,d.friction=.001*c.friction,d.restitution=c.restitution;var g=new CANNON.ContactMaterial(this.dynamicMaterial,d,{friction:c.friction,restitution:c.restitution,contactEquationStiffness:1e7,contactEquationRelaxation:500,frictionEquationStiffness:1e7,frictionEquationRelaxation:3});this.world.addContactMaterial(g),this.materialDic[f]=d}return e.material=d,e.type=CANNON.Body.KINEMATIC,a.world.addBody(e),e},a.removePhysics=function(b){a.world.removeBody(b)},a.removeAll=function(){for(var a=this.world.bodies;a.length;)this.removePhysics(a[0])},a.makeBuildBodyMesh=function(e,g){var h=a.getBodyMesh(new b(e.x,e.y,e.z),100),i=new d;i.appendRotation(-e.rotationX,b.Z_AXIS),i.appendRotation(-e.rotationY,b.Y_AXIS),i.appendRotation(-e.rotationZ,b.Y_AXIS);var j=new c;j.fromMatrix(i),a.QuaternionSetW2C(h.quaternion,j.x,j.y,j.z,j.w),h.type=CANNON.Body.KINEMATIC;for(var k=0;k<g.collisionItem.length;k++){var l=g.collisionItem[k],m=new b(l.x*e.scaleX,l.y*e.scaleY,l.z*e.scaleZ),n=new d;n.appendRotation(-l.rotationX,b.X_AXIS),n.appendRotation(-l.rotationY,b.Y_AXIS),n.appendRotation(-l.rotationZ,b.Z_AXIS);var o=new c;switch(o.fromMatrix(n),l.type){case f.BOX:var p=new b;p.x=l.scaleX*e.scaleX*100,p.y=l.scaleY*e.scaleY*100,p.z=l.scaleZ*e.scaleZ*100,a.bodyAddShape(h,a.makeBoxShape(p),m,new b(o.x,o.y,o.z));break;case f.BALL:var q=(e.scaleX+e.scaleY+e.scaleZ)/3;q*=l.radius,a.bodyAddShape(h,a.makeSphereShape(q),m,new b(o.x,o.y,o.z));break;case f.Cylinder:a.bodyAddShape(h,a.makeCylinderShape(l.scaleX*e.scaleX*10,l.scaleY*e.scaleY*10),m,new b(o.x,o.y,o.z));break;case f.Polygon:var r=new b(e.scaleX*l.scaleX,e.scaleY*l.scaleY,e.scaleZ*l.scaleZ),s=a.makePolyhedronShape(l.data,r);a.bodyAddShape(h,s,m,new b(o.x,o.y,o.z))}}return h},a.makeSceneCollision=function(g){for(var h=new Array,i=0;i<g.length;i++){var j=a.getBodyMesh(new b,100);h.push(j);j.type=CANNON.Body.KINEMATIC;var k=new Object;k.x=Number(g[i].x),k.y=Number(g[i].y),k.z=Number(g[i].z),k.scaleX=Number(g[i].scale_x),k.scaleY=Number(g[i].scale_y),k.scaleZ=Number(g[i].scale_z),k.rotationX=Number(g[i].rotationX),k.rotationY=Number(g[i].rotationY),k.rotationZ=Number(g[i].rotationZ),k.posMatrix=new d,k.posMatrix.appendScale(k.scaleX,k.scaleY,k.scaleZ),k.posMatrix.appendRotation(k.rotationX,b.X_AXIS),k.posMatrix.appendRotation(k.rotationY,b.Y_AXIS),k.posMatrix.appendRotation(k.rotationZ,b.Z_AXIS),k.posMatrix.appendTranslation(k.x,k.y,k.z);var l=g[i].collisionVo,m=new e;m.x=Number(l.x),m.y=Number(l.y),m.z=Number(l.z),m.scaleX=Number(l.scale_x),m.scaleY=Number(l.scale_y),m.scaleZ=Number(l.scale_z),m.rotationX=Number(l.rotationX),m.rotationY=Number(l.rotationY),m.rotationZ=Number(l.rotationZ),m.type=Number(l.type);var n=new d;n.appendRotation(-m.rotationZ,b.Z_AXIS),n.appendRotation(-m.rotationY,b.Y_AXIS),n.appendRotation(-m.rotationX,b.X_AXIS),n.appendRotation(-k.rotationZ,b.Z_AXIS),n.appendRotation(-k.rotationY,b.Y_AXIS),n.appendRotation(-k.rotationX,b.X_AXIS);var o=new c;o.fromMatrix(n);var p=k.posMatrix.transformVector(new b(m.x,m.y,m.z));switch(j.position=a.Vec3dW2C(p),j.quaternion=a.QuaternionW2C(o),m.type){case f.BOX:var q=new b;q.x=k.scaleX*m.scaleX*100,q.y=k.scaleY*m.scaleY*100,q.z=k.scaleZ*m.scaleZ*100,a.bodyAddShape(j,a.makeBoxShape(q));break;case f.BALL:m.radius=l.radius;var r=(k.scaleX+k.scaleY+k.scaleZ)/3;r*=m.radius,a.bodyAddShape(j,a.makeSphereShape(r));break;case f.Cylinder:a.bodyAddShape(j,a.makeCylinderShape(m.scaleX*k.scaleX*100,m.scaleY*k.scaleY*100));break;case f.Cone:break;case f.Polygon:m.data=l.data;var s=new b(m.scaleX*k.scaleX,m.scaleY*k.scaleY,m.scaleZ*k.scaleZ),t=a.makePolyhedronShape(m.data,s);a.bodyAddShape(j,t)}}return h},a.makeFieldForArr=function(c,d){var e=c.length,f=c[0].length,g=d,h=new CANNON.Heightfield(c,{elementSize:g}),i=new CANNON.Body({mass:0}),j=new b(-(e*g/2)+g/2,0,-(f*g/2)+g/2);return i.gameType=2,i.type=CANNON.Body.KINEMATIC,a.bodyAddShape(i,h,j),a.world.addBody(i),i},a.update=function(){if(this.world&&this.ready){var b=new Date,c=(b.getTime()-this.cannonLast,1);a.world.step(1/60,1/60,c),this.cannonLast=b.getTime()}},a.cannonLast=0,a.bodyGameRoleType=1,a.bodyGameGroundType=2,a.baseScale10=10,a.ready=!1,a}();a.Physics=g}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),canonkey;!function(a){var b=Pan3d.LineDisplaySprite,c=Pan3d.Vector3D,d=Pan3d.Vector2D,e=Pan3d.Matrix3D,f=Pan3d.CollisionType,g=Pan3d.ObjData,h=function(h){function i(){var a=h.call(this)||this;return a.visible=!0,a.changeBodyPosion=!1,i.ballLineSprite||a.mathBallSptre(),i.boxLineSprite||a.mathBoxSprite(),i.cylinderLineSprite||a.mathCylinderSprite(),i.coneLineSprite||a.mathConeSprite(),a}return __extends(i,h),i.prototype.mathConeSprite=function(){var a=new b;a.clear(),a.baseColor=new c(1,0,1,1);var d=100,f=100;this.clear();var g,h,j=12;for(h=0;j>h;h++){var k=new c(d,-f/2,0),l=new e;l.appendRotation(h*(360/j),c.Y_AXIS);var m=l.transformVector(k);a.makeLineMode(m,new c(0,-f/2,0)),a.makeLineMode(m,new c(0,+f/2,0)),h==j-1&&a.makeLineMode(m,k),g&&a.makeLineMode(m,g),g=m.clone()}a.upToGpu(),i.coneLineSprite=a},i.prototype.mathCylinderSprite=function(){var a=new b;a.clear(),a.baseColor=new c(0,0,1,1);var d,f,g,h=100,j=100,k=12;for(g=0;k>g;g++){var l=new c(h,-j/2,0),m=new c(h,+j/2,0),n=new e;n.appendRotation(g*(360/k),c.Y_AXIS);var o=n.transformVector(l),p=n.transformVector(m);a.makeLineMode(o,p),a.makeLineMode(o,new c(0,-j/2,0)),a.makeLineMode(p,new c(0,+j/2,0)),g==k-1&&(a.makeLineMode(o,l),a.makeLineMode(p,m)),(d||f)&&(a.makeLineMode(o,d),a.makeLineMode(p,f)),d=o.clone(),f=p.clone()}a.upToGpu(),i.cylinderLineSprite=a},i.prototype.mathBoxSprite=function(){var a=new b;a.clear(),a.baseColor=new c(0,1,0,1);var d=new c(100,100,100);a.makeLineMode(new c(-d.x,-d.y,-d.z),new c(+d.x,-d.y,-d.z)),a.makeLineMode(new c(+d.x,-d.y,-d.z),new c(+d.x,-d.y,+d.z)),a.makeLineMode(new c(+d.x,-d.y,+d.z),new c(-d.x,-d.y,+d.z)),a.makeLineMode(new c(-d.x,-d.y,+d.z),new c(-d.x,-d.y,-d.z)),a.makeLineMode(new c(-d.x,+d.y,-d.z),new c(+d.x,+d.y,-d.z)),a.makeLineMode(new c(+d.x,+d.y,-d.z),new c(+d.x,+d.y,+d.z)),a.makeLineMode(new c(+d.x,+d.y,+d.z),new c(-d.x,+d.y,+d.z)),a.makeLineMode(new c(-d.x,+d.y,+d.z),new c(-d.x,+d.y,-d.z)),a.makeLineMode(new c(-d.x,-d.y,-d.z),new c(-d.x,+d.y,-d.z)),a.makeLineMode(new c(+d.x,-d.y,-d.z),new c(+d.x,+d.y,-d.z)),a.makeLineMode(new c(+d.x,-d.y,+d.z),new c(+d.x,+d.y,+d.z)),a.makeLineMode(new c(-d.x,-d.y,+d.z),new c(-d.x,+d.y,+d.z)),a.upToGpu(),i.boxLineSprite=a},i.prototype.mathBallSptre=function(){var a=new b,d=100;a.clear(),a.baseColor=new c(1,0,0,1);var f,g,h,j,k,l,m,n=12;for(k=0;n>=k;k++)for(h=null,j=0;n>j;j++)f=new c(d,0,0),g=new e,g.appendRotation(360/n*j,c.Z_AXIS),f=g.transformVector(f),l=new e,l.appendRotation(360/n*k,c.Y_AXIS),f=l.transformVector(f),h&&a.makeLineMode(h,f),h=f.clone();for(k=0;4>=k;k++)for(l=new e,l.appendRotation(20*k,c.Z_AXIS),m=l.transformVector(new c(d,0,0)),h=null,j=0;n>j;j++)f=m.clone(),g=new e,g.appendRotation(360/n*j,c.Y_AXIS),f=g.transformVector(f),h&&a.makeLineMode(h,f),j==n-1&&a.makeLineMode(m,f),h=f.clone();for(k=1;4>=k;k++)for(l=new e,l.appendRotation(-20*k,c.Z_AXIS),m=l.transformVector(new c(d,0,0)),h=null,j=0;n>j;j++)f=m.clone(),g=new e,g.appendRotation(360/n*j,c.Y_AXIS),f=g.transformVector(f),h&&a.makeLineMode(h,f),j==n-1&&a.makeLineMode(m,f),h=f.clone();a.upToGpu(),i.ballLineSprite=a},i.prototype.setCollsionType=function(a){switch(a.type){case f.BOX:this.objData=i.boxLineSprite.objData;break;case f.BALL:this.objData=i.ballLineSprite.objData;break;case f.Cylinder:this.objData=i.cylinderLineSprite.objData;break;case f.Cone:this.objData=i.coneLineSprite.objData;break;case f.Polygon:this.objData=this.makePolygonObjData(a.data)}},i.prototype.update=function(){if(this.visible&&i.showCollisionLine){if(this.body){var b=new e;a.Physics.MathBody2WMatrix3D(this.body,b),this.posMatrix.m=b.m,this.posMatrix.prependScale(this.scaleX,this.scaleY,this.scaleZ)}i.drawLineVisible&&h.prototype.update.call(this)}},i.prototype.makePolygonObjData=function(a){var d=new b;d.clear(),d.baseColor=new c(0,1,1,1);for(var e,f,g,h,i,j,k=0;k<a.indexs.length/3;k++)e=a.indexs[3*k+0],f=a.indexs[3*k+1],g=a.indexs[3*k+2],h=new c(a.vertices[3*e+0],a.vertices[3*e+1],a.vertices[3*e+2]),i=new c(a.vertices[3*f+0],a.vertices[3*f+1],a.vertices[3*f+2]),j=new c(a.vertices[3*g+0],a.vertices[3*g+1],a.vertices[3*g+2]),d.makeLineMode(h,i),d.makeLineMode(i,j),d.makeLineMode(j,h);return d.upToGpu(),d.objData},i.prototype.setBody=function(b){this.changeBodyPosion=!0,this.body=b;var c=this;c.clear();for(var d=0;d<b.shapes.length;d++){var e=a.Physics.Vect3dC2W(b.shapeOffsets[d]),f=a.Physics.Quaternion2W(b.shapeOrientations[d]);switch(b.shapes[d].type){case 1:var g=b.shapes[d];e.scaleBy(g.radius),this.drawSphereConvexPolyh(g.radius,e,f);break;case 4:var h=b.shapes[d],i=a.Physics.Vect3dC2W(h.halfExtents);this.drawBoxConvexPolyh(i,e,f);break;case 16:var j=b.shapes[d];this.drawCylinderConvexPolyh(j,e,f);break;case 32:var k=b.shapes[d];this.drawFieldPolyh(k,e,f);break;default:console.log(b.shapes[d].type)}}c.upToGpu()},i.prototype.drawFieldPolyh=function(a,b,f){var h=this,i=new e;f.toMatrix3D(i),i.invert(),i.appendTranslation(b.x,b.y,b.z);var j=a.data,k=a.elementSize,l=j.length,m=j[0].length,n=10*k,o=new g;o.vertices=new Array,o.uvs=new Array,o.lightuvs=new Array,o.normals=new Array,o.indexs=new Array;for(var p=0;l-1>p;p++)for(var q=0;m-1>q;q++){var r=new d(p+0,q+0),s=new d(p+1,q+0),t=new d(p+1,q+1),u=new d(p+0,q+1),v=new c(r.x*n,10*j[r.x][r.y],r.y*n),w=new c(s.x*n,10*j[s.x][s.y],s.y*n),x=new c(t.x*n,10*j[t.x][t.y],t.y*n),y=new c(u.x*n,10*j[u.x][u.y],u.y*n);v=i.transformVector(v),w=i.transformVector(w),x=i.transformVector(x),y=i.transformVector(y),h.makeLineMode(v,w),h.makeLineMode(v,y),h.makeLineMode(x,w),h.makeLineMode(x,y)}},i.prototype.drawCylinderConvexPolyh=function(b,c,d){var f=this,g=new e;d.toMatrix3D(g),g.invert(),g.appendTranslation(c.x,c.y,c.z);for(var h=0;h<b.faces.length;h++){var i=b.faces[h][0],j=b.faces[h][1],k=b.faces[h][2],l=b.faces[h][3],m=a.Physics.Vect3dC2W(b.vertices[i]),n=a.Physics.Vect3dC2W(b.vertices[j]),o=a.Physics.Vect3dC2W(b.vertices[k]),p=a.Physics.Vect3dC2W(b.vertices[l]);m=g.transformVector(m),n=g.transformVector(n),o=g.transformVector(o),p=g.transformVector(p),f.makeLineMode(m,n),f.makeLineMode(m,p),f.makeLineMode(o,n),f.makeLineMode(o,p)}},i.prototype.drawSphereConvexPolyh=function(b,d,f){var g=this,h=new e;f.toMatrix3D(h),h.invert(),h.appendTranslation(d.x,d.y,d.z);for(var j=i.ballLineSprite,k=0;k<j.lineVecPos.length/6;k++){var l=new c(j.lineVecPos[6*k+0],j.lineVecPos[6*k+1],j.lineVecPos[6*k+2]),m=new c(j.lineVecPos[6*k+3],j.lineVecPos[6*k+4],j.lineVecPos[6*k+5]);l.scaleBy(b*a.Physics.baseScale10/100),m.scaleBy(b*a.Physics.baseScale10/100),l=h.transformVector(l),m=h.transformVector(m),g.makeLineMode(l,m)}},i.prototype.drawBoxConvexPolyh=function(a,b,d){var f=this,g=new e;d.toMatrix3D(g),g.invert(),g.appendTranslation(b.x,b.y,b.z);for(var h=i.boxLineSprite,j=0;j<h.lineVecPos.length/6;j++){var k=new c(h.lineVecPos[6*j+0],h.lineVecPos[6*j+1],h.lineVecPos[6*j+2]),l=new c(h.lineVecPos[6*j+3],h.lineVecPos[6*j+4],h.lineVecPos[6*j+5]);k.x=k.x*a.x/100,k.y=k.y*a.y/100,k.z=k.z*a.z/100,l.x=l.x*a.x/100,l.y=l.y*a.y/100,l.z=l.z*a.z/100,k=g.transformVector(k),l=g.transformVector(l),f.makeLineMode(k,l)}},i.showCollisionLine=!0,i.drawLineVisible=!0,i}(b);a.CannonLineSprite=h}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),canonkey;!function(a){var b=Pan3d.Display3DSprite,c=Pan3d.Vector3D,d=Pan3d.Quaternion,e=Pan3d.Vector2D,f=Pan3d.Matrix3D,g=shadow.DirectShadowDisplay3DSprite,h=function(b){function h(d){var e=b.call(this)||this;return e.dispList=new Array,e._body=d,e._bodyLineSprite=new a.CannonLineSprite,e._bodyLineSprite.baseColor=new c(.5*Math.random()+.5,.5*Math.random()+.5,.5*Math.random()+.5,1),e._bodyLineSprite.setBody(e._body),e.mathBodyScale(),e}return __extends(h,b),Object.defineProperty(h.prototype,"mass",{get:function(){return this._body.mass},set:function(a){this._body.mass=a},enumerable:!0,configurable:!0}),Object.defineProperty(h.prototype,"bodytype",{get:function(){return this._body.type},set:function(a){this._body.type=a},enumerable:!0,configurable:!0}),h.prototype.mathBodyScale=function(){for(var b=this._body,c=0;c<b.shapes.length;c++){var d=a.Physics.Vect3dC2W(b.shapeOffsets[c]),e=a.Physics.Quaternion2W(b.shapeOrientations[c]),f=new g;switch(b.shapes[c].type){case 1:var h=b.shapes[c];d.scaleBy(100/h.radius),f.setModelById("whiteball"),f.scaleX=2*h.radius,f.scaleY=2*h.radius,f.scaleZ=2*h.radius;break;case 4:var i=b.shapes[c],j=a.Physics.Vect3dC2W(i.halfExtents);f.setModelById("whitebox"),f.scaleX=j.x/5,f.scaleY=j.y/5,f.scaleZ=j.z/5;break;case 16:var k=b.shapes[c],l=this.drawCylinderConvexPolyh(k,d,e);f.setModelById("whitecylinder"),f.scaleX=1.3*l.x,f.scaleY=1.5*l.y,f.scaleZ=1.3*l.x;break;case 32:b.shapes[c]}this._directShadowDisplay3DSprite=f,this.dispList.push(f)}},h.prototype.drawCylinderConvexPolyh=function(b,c,d){var g=new f;d.toMatrix3D(g),g.invert(),g.appendTranslation(c.x,c.y,c.z);for(var h=0,i=0,j=0;j<b.faces.length;j++){var k=b.faces[j][0],l=b.faces[j][1],m=b.faces[j][2],n=b.faces[j][3],o=a.Physics.Vect3dC2W(b.vertices[k]),p=a.Physics.Vect3dC2W(b.vertices[l]),q=a.Physics.Vect3dC2W(b.vertices[m]),r=a.Physics.Vect3dC2W(b.vertices[n]);i=Math.max(i,o.y,p.y,q.y,r.y),h=Math.max(h,o.x*o.x+o.z*o.z),h=Math.max(h,p.x*p.x+p.z*p.z),h=Math.max(h,q.x*q.x+q.z*q.z)}return new e(Math.sqrt(h)/a.Physics.baseScale10,i/a.Physics.baseScale10)},h.prototype.updateMatrix=function(){if(this._body){this._body.position=a.Physics.Vec3dW2C(new c(this._x,this._y,this._z));var b=new f;b.appendRotation(this._rotationZ,c.Z_AXIS),b.appendRotation(this._rotationY,c.Y_AXIS),b.appendRotation(this._rotationX,c.X_AXIS);var e=new d;e.fromMatrix(b),this._body.quaternion=a.Physics.QuaternionW2C(e)}},h.prototype.update=function(){if(this._body){this.mathPosMatrix();for(var b=0;b<this.dispList.length;b++){var c=this.dispList[b],e=new f;a.Physics.MathBody2WMatrix3D(this._body,e);var g=a.Physics.Quaternion2W(this._body.shapeOrientations[b]),h=a.Physics.Vect3dC2W(this._body.shapeOffsets[b]),i=g.toMatrix3D();i.invert();var j=new f;j.append(i),j.appendTranslation(h.x,h.y,h.z),j.append(e);var k=j.position;c.x=k.x,c.y=k.y,c.z=k.z;var g=new d;g.fromMatrix(j);var l=g.toEulerAngles();c.rotationX=180*l.x/Math.PI,c.rotationY=180*l.y/Math.PI,c.rotationZ=180*l.z/Math.PI}}},Object.defineProperty(h.prototype,"body",{get:function(){return this._body},enumerable:!0,configurable:!0}),h.prototype.addToWorld=function(){if(this._body){this._scene.addDisplay(this),this._bodyLineSprite._scene=this._scene;for(var b=0;b<this.dispList.length;b++)this.dispList[b]._scene=this._scene,this._scene.addDisplay(this.dispList[b]);a.Physics.world.addBody(this._body)}},h.prototype.mathPosMatrix=function(){var b=new f;a.Physics.MathBody2WMatrix3D(this._body,b),this.posMatrix.m=b.m;var c=a.Physics.Quaternion2W(this._body.shapeOrientations[0]),e=c.toMatrix3D();this.posMatrix.prepend(e),this.posMatrix.prependScale(this._scaleX,this._scaleY,this._scaleZ);var g=b.position;this._x=g.x,this._y=g.y,this._z=g.z;var c=new d;c.fromMatrix(this.posMatrix);var h=c.toEulerAngles();this._rotationX=180*h.x/Math.PI,this._rotationY=180*h.y/Math.PI,this._rotationZ=180*h.z/Math.PI},h}(b);a.CanonPrefabSprite=h}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),ShadowLaya2dSprite=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.upFrame=function(){Pan3d.Scene_data.context3D._contextSetTest.clear(),shadow.ShadowModel.getInstance().updateDepth(this.scene),a.prototype.upFrame.call(this)},b}(BaseLaya3dSprite),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),ShadowLaya3dSprite=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}return __extends(b,a),b.prototype.upFrame=function(){Pan3d.Scene_data.context3D._contextSetTest.clear(),shadow.ShadowModel.getInstance().updateDepth(this.scene),a.prototype.upFrame.call(this)},b}(Scene3dLaya3dSprite),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),uiview;!function(a){var b=Pan3d.UIConatiner,c=Pan3d.UIRenderComponent,d=function(a){function b(){var b=a.call(this)||this;return b.interfaceUI=!0,b.width=540,b.height=960,b.center=0,b.top=0,b._bottomRender=new c,b.addRender(b._bottomRender),b._midRender=new c,b.addRender(b._midRender),b._topRender=new c,b.addRender(b._topRender),b._midRender.setInfo("ui/topview/topview.xml","ui/topview/topview.png",function(){b.loadConfigCom()}),b}return __extends(b,a),b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.loadConfigCom=function(){this._bottomRender.uiAtlas=this._midRender.uiAtlas,this._topRender.uiAtlas=this._midRender.uiAtlas,this.addEvntBut("top_bg",this._bottomRender),this.tip_bg=this.addEvntBut("tip_bg",this._midRender),this.tip_bg.width=2*this.width,this.tip_bg.height=2*this.height,this.tip_bg.top=0,this.tip_bg.left=-1e4},b.prototype.butClik=function(a){switch(this.tip_bg.data){case this.level_up:CanonModelCheckpoint.getInstance().initXmlModel(Math.min(CanonModelCheckpoint.getInstance().levelNum+1,98006),this),this.clearLevelUp();break;case this.level_lost:CanonModelCheckpoint.getInstance().initXmlModel(CanonModelCheckpoint.getInstance().levelNum,this),this.clearLevelLost()}},b.prototype.showLevelUp=function(){var a=this;this.showFinishEfict(),Pan3d.TimeUtil.addTimeOut(1e3,function(){a.level_up?a.addChild(a.level_up):a.level_up=a.addChild(a._topRender.getComponent("level_up")),a.tip_bg.left=0,a.tip_bg.data=a.level_up})},b.prototype.showFinishEfict=function(){var a=new Pan3d.Vector3D(GunqiuModel.canonPanel.layaSceneLevel.focus3d.x,GunqiuModel.canonPanel.layaSceneLevel.focus3d.y,GunqiuModel.canonPanel.layaSceneLevel.focus3d.z);GunqiuModel.canonPanel.layaSceneLevel.scene.playLyf("model/levelfinish_lyf.txt",a)},b.prototype.clearLevelUp=function(){this.level_up&&this.removeChild(this.level_up),this.tip_bg.left=-1e4},b.prototype.showLevelLost=function(){this.level_lost?this.addChild(this.level_lost):this.level_lost=this.addChild(this._topRender.getComponent("level_lost")),this.tip_bg.left=0,this.tip_bg.data=this.level_lost},b.prototype.clearLevelLost=function(){this.level_lost&&this.removeChild(this.level_lost),this.tip_bg.left=-1e4},b}(b);a.TopMenuView=d}(uiview||(uiview={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),canonkey;!function(a){var b=Pan3d.Vector3D,c=shadow.DirectShadowDisplay3DSprite,d=Pan3d.Scene_data,e=shadow.ShadowModel,f=function(a){function c(){return null!==a&&a.apply(this,arguments)||this}return __extends(c,a),c.prototype.updateMatrix=function(){a.prototype.updateMatrix.call(this)},c.prototype.drawTemp=function(a){if(this._scene.fbo&&e.shadowViewMatx3D){var c=a.objData,f=this.modelShder;if(c&&c.indexBuffer&&this._uvTextureRes){d.context3D.setProgram(f.program);var g=new b(.5,.6,-.7);g.normalize(),d.context3D.setVc3fv(f,"sunDirect",[g.x,g.y,g.z]),d.context3D.setVc3fv(f,"sunColor",[.8,.8,.8]),d.context3D.setVc3fv(f,"ambientColor",[.2,.2,.2]),d.context3D.setVcMatrix4fv(f,"shadowViewMatx3D",e.shadowViewMatx3D.m),d.context3D.setVcMatrix3fv(f,"rotationMatrix3D",a._rotationData),d.context3D.setVcMatrix4fv(f,"vpMatrix3D",d.vpMatrix.m),d.context3D.setVcMatrix4fv(f,"posMatrix3D",this.posMatrix.m),d.context3D.renderContext.bindBuffer(d.context3D.renderContext.ARRAY_BUFFER,c.vertexBuffer),d.context3D.setVaOffset(0,3,c.stride,0),d.context3D.setVaOffset(1,2,c.stride,c.uvsOffsets),d.context3D.setVaOffset(2,3,c.stride,c.normalsOffsets),d.context3D.setRenderTexture(f,"fs0",this._uvTextureRes.texture,0),d.context3D.setRenderTexture(f,"fs1",this._scene.fbo.texture,1),d.context3D.drawCall(c.indexBuffer,c.treNum)}}},c}(c);a.MainDirectShadowDisplay3DSprite=f;var g=function(b){function c(a){return b.call(this,a)||this}return __extends(c,b),c.prototype.update=function(){b.prototype.update.call(this),this._guijiparticle&&(this._guijiparticle.x=this.x,this._guijiparticle.y=this.y-5,this._guijiparticle.z=this.z)},c.prototype.addToWorld=function(){b.prototype.addToWorld.call(this),this._guijiparticle?console.log("有错"):this.playLyf("model/genshui_lyf.txt",new Pan3d.Vector3D(0,0,0))},c.prototype.resetParticlePos=function(){this._guijiparticle&&(this._guijiparticle.x=this.x,this._guijiparticle.y=this.y-5,this._guijiparticle.z=this.z,this._guijiparticle.reset())},c.prototype.playLyf=function(a,b,c){var d=this;void 0===c&&(c=0);var e=this._scene;e.groupDataManager.scene=e,e.groupDataManager.getGroupData(Pan3d.Scene_data.fileRoot+a,function(a){for(var b=0;b<a.dataAry.length;b++){var f=a.dataAry[b];if(f.types==Pan3d.BaseRes.SCENE_PARTICLE_TYPE){var g=e.particleManager.getParticleByte(Pan3d.Scene_data.fileRoot+f.particleUrl);g.x=d.x,g.y=d.y,g.z=d.z,g.rotationY=c,e.particleManager.addParticle(g),d._guijiparticle=g,
d._guijiparticle.reset()}else console.log("播放的不是单纯特效")}})},c.prototype.mathBodyScale=function(){for(var b=this._body,c=0;c<b.shapes.length;c++){var d=a.Physics.Vect3dC2W(b.shapeOffsets[c]),e=(a.Physics.Quaternion2W(b.shapeOrientations[c]),new f);switch(b.shapes[c].type){case 1:var g=b.shapes[c];d.scaleBy(100/g.radius),e.setModelById("whiteball"),e.scaleX=2*g.radius,e.scaleY=2*g.radius,e.scaleZ=2*g.radius}this._directShadowDisplay3DSprite=e,this.dispList.push(e)}},c}(a.CanonPrefabSprite);a.MainCanonPrefabSprite=g}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),bet;!function(a){var b=Pan3d.Shader3D,c=Pan3d.Display3D,d=Pan3d.ObjData,e=Pan3d.ProgrmaManager,f=Pan3d.Scene_data,g=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;varying vec3 posv3d;void main(void){   posv3d= v3Position;   vec4 vt0= vec4(v3Position, 1.0);   gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform vec3 colortop;uniform vec3 colorbottom;varying vec3 posv3d;void main(void)\n{\nvec3 tempcolor=colortop;tempcolor=colortop+(colorbottom-colortop)*(posv3d.y+1.0)/2.0;gl_FragColor =vec4(tempcolor,1.0);\n}";return a},b.BaseDiplay3dShader="BaseDiplay3dShader",b}(b);a.BaseDiplay3dShader=g;var h=function(a){function b(){var b=a.call(this)||this;return b.initData(),b}return __extends(b,a),b.prototype.initData=function(){e.getInstance().registe(g.BaseDiplay3dShader,new g),this.shader=e.getInstance().getProgram(g.BaseDiplay3dShader),this.program=this.shader.program,this.objData=new d,this.objData.vertices=new Array,this.objData.vertices.push(-1,-1,.999),this.objData.vertices.push(1,-1,.999),this.objData.vertices.push(1,1,.999),this.objData.vertices.push(-1,1,.999),this.objData.indexs=new Array,this.objData.indexs.push(0,1,2),this.objData.indexs.push(0,2,3),this.upToGpu()},b.prototype.upToGpu=function(){this.objData.indexs.length&&(this.objData.treNum=this.objData.indexs.length,this.objData.vertexBuffer=f.context3D.uploadBuff3D(this.objData.vertices),this.objData.indexBuffer=f.context3D.uploadIndexBuff3D(this.objData.indexs))},b.prototype.update=function(){this.objData&&this.objData.indexBuffer&&(f.context3D.setProgram(this.program),f.context3D.setVc3fv(this.shader,"colortop",[GunqiuModel.useColor.bgTop.x,GunqiuModel.useColor.bgTop.y,GunqiuModel.useColor.bgTop.z]),f.context3D.setVc3fv(this.shader,"colorbottom",[GunqiuModel.useColor.bgBottom.x,GunqiuModel.useColor.bgBottom.y,GunqiuModel.useColor.bgBottom.z]),f.context3D.setVa(0,3,this.objData.vertexBuffer),f.context3D.drawCall(this.objData.indexBuffer,this.objData.treNum))},b}(c);a.GameBgSprite=h}(bet||(bet={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),canonkey;!function(a){var b=Pan3d.Display3DSprite,c=Pan3d.Scene_data,d=Pan3d.Shader3D,e=Pan3d.ProgrmaManager,f=shadow.DirectShadowDisplay3DSprite,g=shadow.ShadowModel,h=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.binLocation=function(a){a.bindAttribLocation(this.program,0,"v3Position"),a.bindAttribLocation(this.program,1,"v2CubeTexST"),a.bindAttribLocation(this.program,2,"v3Normal")},b.prototype.getVertexShaderString=function(){var a="attribute vec3 v3Position;attribute vec2 v2CubeTexST;varying vec2 v0;varying vec3 v_PositionFromLight;varying vec3 v2;varying float heighty;varying float cosTheta;varying float onsunFace;varying vec3 ambientColorF;attribute vec3 v3Normal;uniform vec3 sunDirect;uniform vec3 sunColor;uniform vec3 ambientColor;uniform mat4 vpMatrix3D;uniform mat4 posMatrix3D;uniform mat4 shadowViewMatx3D;uniform mat3 rotationMatrix3D;void main(void){;ambientColorF =ambientColor;v0 = vec2(v2CubeTexST.x, v2CubeTexST.y); vec4 vt0= vec4(v3Position, 1.0);vt0 = posMatrix3D * vt0;vt0 = vpMatrix3D * vt0;   vec4 vt1= vec4(v3Position, 1.0);   vt1 = posMatrix3D * vt1;   heighty = vt1.y;   vt1 = shadowViewMatx3D * vt1;   v_PositionFromLight = vec3(vt1.x, vt1.y,vt1.z);vec3 n = rotationMatrix3D * v3Normal;float suncos = dot(n.xyz,sunDirect.xyz);onsunFace = suncos;cosTheta =1.0-abs(suncos);suncos = clamp(suncos,0.0,1.0);v2 = sunColor * suncos ;gl_Position = vt0;}";return a},b.prototype.getFragmentShaderString=function(){var a="precision mediump float;\nuniform sampler2D fs0;\nuniform sampler2D fs1;\nuniform vec4 focus3d;uniform vec3 toColor;varying vec2 v0;\nvarying vec3 v_PositionFromLight;\nvarying vec3 v2;varying float heighty;varying float cosTheta;varying float onsunFace;varying vec3 ambientColorF;void main(void)\n{\nvec4 ft5 = texture2D(fs1, v_PositionFromLight.xy); float  bias  = 0.01*cosTheta; bias = clamp(bias, 0.003, 0.01); float visibility = (v_PositionFromLight.z > ft5.x + bias) ? 0.9 : 1.0;\nvisibility =onsunFace<0.0?1.0:visibility ; vec4 ft0 = texture2D(fs0, v0); float  a=  focus3d.w-heighty; a =a/100.0; a = clamp(a, 0.0, 1.0); vec4 ft1 = vec4(v2.xyz, 1.0); vec4 ft2 = vec4(1, 1, 1, 1); float isalp = (ft5.z >0.1254) ? 1.0 : 0.2;\nvec4 colorend =vec4((ft1.xyz*visibility+ambientColorF.xyz)*ft0.rgb , 1.0); colorend.xyz=colorend.xyz+(toColor.xyz-colorend.xyz)*a; gl_FragColor = colorend; }";return a},b.DirectShadowColorShader="DirectShadowColorShader",b}(d);a.DirectShadowColorShader=h;var i=function(a){function d(){return null!==a&&a.apply(this,arguments)||this}return __extends(d,a),d.prototype.initData=function(){e.getInstance().registe(h.DirectShadowColorShader,new h),this.modelShder=e.getInstance().getProgram(h.DirectShadowColorShader)},d.prototype.drawTemp=function(a){if(this._scene.fbo&&g.shadowViewMatx3D){var b=a.objData,d=this.modelShder;if(b&&b.indexBuffer&&this._uvTextureRes){c.context3D.setProgram(d.program),c.context3D.setVc3fv(d,"sunDirect",this._scene.light.sunDirect),c.context3D.setVc3fv(d,"sunColor",this._scene.light.sunColor),c.context3D.setVc3fv(d,"ambientColor",this._scene.light.ambientColor);var e=this._scene.layaSprite;c.context3D.setVc4fv(d,"focus3d",[e.focus3d.x,e.focus3d.y,e.focus3d.z,this.y+0]),c.context3D.setVc3fv(d,"toColor",[GunqiuModel.useColor.modelcolor.x,GunqiuModel.useColor.modelcolor.y,GunqiuModel.useColor.modelcolor.z]),c.context3D.setVcMatrix4fv(d,"shadowViewMatx3D",g.shadowViewMatx3D.m),c.context3D.setVcMatrix3fv(d,"rotationMatrix3D",a._rotationData),c.context3D.setVcMatrix4fv(d,"vpMatrix3D",c.vpMatrix.m),c.context3D.setVcMatrix4fv(d,"posMatrix3D",this.posMatrix.m),c.context3D.renderContext.bindBuffer(c.context3D.renderContext.ARRAY_BUFFER,b.vertexBuffer),c.context3D.setVaOffset(0,3,b.stride,0),c.context3D.setVaOffset(1,2,b.stride,b.uvsOffsets),c.context3D.setVaOffset(2,3,b.stride,b.normalsOffsets),c.context3D.setRenderTexture(d,"fs0",this._uvTextureRes.texture,0),c.context3D.setRenderTexture(d,"fs1",this._scene.fbo.texture,1),this.y>e.focus3d.y+180||this.y<e.focus3d.y-450||c.context3D.drawCall(b.indexBuffer,b.treNum);var f=Math.abs(this.y-e.focus3d.y);100>f?this.needScanShadow=!0:this.needScanShadow=!1}}},d.prototype.setModelInfoData=function(a){this.groupItem=new Array;var c=new b;c.setObjUrl(a.objsurl),c._rotationData=new Float32Array(9),this.groupItem.push(c),a.materialInfoArr&&a.materialInfoArr.length?this.setPicUrl(a.materialInfoArr[0].url):console.log("没有指定贴图"),this.updateRotationMatrix()},d}(f);a.DirectShadowColorSprite=i}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),canonkey;!function(a){var b=Pan3d.Display3DSprite,c=Pan3d.Vector3D,d=Pan3d.Quaternion,e=Pan3d.Matrix3D,f=function(b){function f(a){var c=b.call(this)||this;return c.dispList=new Array,c._body=a,c}return __extends(f,b),Object.defineProperty(f.prototype,"mass",{get:function(){return this._body.mass},set:function(a){this._body.mass=a},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"bodytype",{get:function(){return this._body.type},set:function(a){this._body.type=a},enumerable:!0,configurable:!0}),f.prototype.mathBodyScale=function(){},f.prototype.updateMatrix=function(){if(this._body){this._body.position=a.Physics.Vec3dW2C(new c(this._x,this._y,this._z));var b=new e;b.appendRotation(this._rotationZ,c.Z_AXIS),b.appendRotation(this._rotationY,c.Y_AXIS),b.appendRotation(this._rotationX,c.X_AXIS);var f=new d;f.fromMatrix(b),this._body.quaternion=a.Physics.QuaternionW2C(f)}},f.prototype.update=function(){if(this._body){this.mathPosMatrix();for(var b=0;b<this.dispList.length;b++){var c=this.dispList[b],f=new e;a.Physics.MathBody2WMatrix3D(this._body,f);var g=a.Physics.Quaternion2W(this._body.shapeOrientations[b]),h=a.Physics.Vect3dC2W(this._body.shapeOffsets[b]),i=g.toMatrix3D();i.invert();var j=new e;this.dispList.length>1&&(j.append(i),j.appendTranslation(h.x,h.y,h.z)),j.append(f);var k=j.position;c.x=k.x,c.y=k.y,c.z=k.z;var g=new d;g.fromMatrix(j);var l=g.toEulerAngles();c.rotationX=180*l.x/Math.PI,c.rotationY=180*l.y/Math.PI,c.rotationZ=180*l.z/Math.PI}}},Object.defineProperty(f.prototype,"body",{get:function(){return this._body},enumerable:!0,configurable:!0}),f.prototype.addToWorld=function(){if(this._body){this._scene.addDisplay(this);for(var b=0;b<this.dispList.length;b++)this.dispList[b]._scene=this._scene,this._scene.addDisplay(this.dispList[b]);a.Physics.world.addBody(this._body)}},f.prototype.destory=function(){for(b.prototype.destory.call(this),a.Physics.world.removeBody(this._body);this.dispList.length;)this._scene.removeDisplay(this.dispList.pop());this._scene.removeDisplay(this)},f.prototype.mathPosMatrix=function(){var b=new e;a.Physics.MathBody2WMatrix3D(this._body,b),this.posMatrix.m=b.m;var c=a.Physics.Quaternion2W(this._body.shapeOrientations[0]),f=c.toMatrix3D();this.posMatrix.prepend(f),this.posMatrix.prependScale(this._scaleX,this._scaleY,this._scaleZ);var g=b.position;this._x=g.x,this._y=g.y,this._z=g.z;var c=new d;c.fromMatrix(this.posMatrix);var h=c.toEulerAngles();this._rotationX=180*h.x/Math.PI,this._rotationY=180*h.y/Math.PI,this._rotationZ=180*h.z/Math.PI},f}(b);a.CanonSceneSprite=f}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),canonkey;!function(a){var b=function(a){function b(){var b=null!==a&&a.apply(this,arguments)||this;return b.type=0,b}return __extends(b,a),b}(Pan3d.Object3D);a.GravityVo=b;var c=function(){function c(){}return c.getInstance=function(){return this._instance||(this._instance=new c),this._instance},c.prototype.clear=function(){this._gravityItem=new Array,this.isAotuTrue=!1,this.isLevelFinish=!1,console.log("清理连接下落")},c.prototype.addPointByObj=function(a){var c=new b;switch(c.x=a.x,c.y=a.y,c.z=a.z,c.type=1,a.name){case"sign_begin":c.type=1;break;case"sign_end":c.type=2;break;case"level_finish":c.type=3;break;default:console.log("注意还没有这个类型")}this._gravityItem.push(c)},c.prototype.jumpToNextLevel=function(){uiview.TopMenuView.getInstance().showLevelUp()},c.prototype.showJumddd=function(){},c.prototype.showJumpText=function(a,b){var c=new Pan3d.TextJumpUiVo;c.str=String("1"),c.pos=new Pan3d.Vector3D,c.pos.x=b.x,c.pos.z=b.z,c.pos.y=b.y,c.type=4,c.starttime=Pan3d.TimeUtil.getTimer(),c.endtime=Pan3d.TimeUtil.getTimer()+1200,a.bloodManager.setJumpNum(c)},c.prototype.upFrame=function(b){if(!this.isLevelFinish)if(this.isAotuTrue){if(this.nextGravityVo){var c=new Pan3d.Vector3D(b.x,b.y,b.z),d=new Pan3d.Vector3D(this.nextGravityVo.x,this.nextGravityVo.y,this.nextGravityVo.z),e=d.subtract(c);e.normalize(),e.scaleBy(980),Math.abs(b.y-this.nextGravityVo.y)<10?(b.x=this.nextGravityVo.x,b.y=this.nextGravityVo.y,b.z=this.nextGravityVo.z,this.isAotuTrue=!1,this.nextGravityVo=null,b.body.sleep(),b.body.wakeUp(),console.log("下落到结点"),this.showJumpText(b._scene,new Pan3d.Vector3D(b.x,b.y,b.z))):a.Physics.world.gravity=a.Physics.Vec3dW2C(e)}}else for(var f=0;this._gravityItem&&f<this._gravityItem.length;f++){var g=Pan3d.Vector3D.distance(new Pan3d.Vector3D(b.x,b.y,b.z),new Pan3d.Vector3D(this._gravityItem[f].x,this._gravityItem[f].y,this._gravityItem[f].z));if(1==this._gravityItem[f].type&&10>g)return this.isAotuTrue=!0,this.nextGravityVo=this.getNextToVo(new Pan3d.Vector3D(b.x,b.y,b.z)),void(this.nextGravityVo&&(b.body.sleep(),b.body.wakeUp(),console.log("连接点开始自动&&&&&&&&&&&")));if(3==this._gravityItem[f].type&&12>g)return b.body.sleep(),console.log("等级完成"),this.isLevelFinish=!0,void this.jumpToNextLevel()}},c.prototype.getNextToVo=function(a){for(var b,c,d=0;this._gravityItem&&d<this._gravityItem.length;d++){var e=a.y-this._gravityItem[d].y;2==this._gravityItem[d].type&&e>0&&(isNaN(c)?(b=this._gravityItem[d],c=e):c>e&&(b=this._gravityItem[d],c=e))}return b},c}();a.AotuGravityManager=c}(canonkey||(canonkey={}));var CannoSoundManager=function(){function a(){this._volume=1,this.audio=new Audio(Pan3d.Scene_data.fileRoot+"basesound2.mp3"),this.audio.loop=!0,this.audio.volume=this._volume,this.audio.play()}return a.getInstance=function(){return this._instance||(this._instance=new a),this._instance},a.prototype.updata=function(){for(var a=CanonModelCheckpoint.getInstance().centenBall.body,b=new Pan3d.Vector3D(a.velocity.x,a.velocity.y,a.velocity.z),c=!1,d=0;d<canonkey.Physics.world.contacts.length;d++){var e=canonkey.Physics.world.contacts[d];(e.bi==a||e.bj==a)&&(c=!0)}if(c){var f=b.dot(b);f=Math.min(1,Math.max(0,Math.sqrt(f)/30)),this.audio.volume=f}else this.audio.volume=0},a}(),canonkey;!function(a){var b=Pan3d.Vector3D,c=function(){function c(a){this._scene=a,this.initData()}return c.prototype.initData=function(){a.Physics.world=new CANNON.World,a.Physics.world.gravity=a.Physics.Vec3dW2C(new b(0,-980,0))},c.prototype.makeGround=function(b){var c=new CANNON.Plane,d=new CANNON.Body({mass:0});d.addShape(c),d.position=a.Physics.Vec3dW2C(b),d.gameType=2,a.Physics.world.addBody(d)},c.prototype.addMoveSphere=function(b){void 0===b&&(b=10);var c=new CANNON.Sphere(b/a.Physics.baseScale10),d=new CANNON.Body({mass:1});d.addShape(c);var e=new a.CanonPrefabSprite(d);return e._scene=this._scene,e.addToWorld(),e},c.prototype.addMoveCylinder=function(b){var c=a.Physics.Vec3dW2C(b),d=new CANNON.Cylinder(c.x,c.y,c.z,20),e=new CANNON.Body({mass:1});e.addShape(d);var f=new a.CanonPrefabSprite(e);return f._scene=this._scene,f.addToWorld(),f},c.prototype.addMoveBox=function(b){var c=new CANNON.Box(a.Physics.Vec3dW2C(b)),d=new CANNON.Body({mass:1});d.addShape(c);var e=new a.CanonPrefabSprite(d);return e._scene=this._scene,e.addToWorld(),e},c.prototype.getFloadNum=function(a){return Math.floor(1e3*a)/1e3},c.prototype.makeBodyByItem=function(a){var b=new Pan3d.CollisionItemVo;b.collisionItem=new Array;for(var c=0;c<a.length;c++){var d=new Pan3d.CollisionVo,e=a[c].collisionVo;d.scaleX=e.scale_x,d.scaleY=e.scale_y,d.scaleZ=e.scale_z,d.x=e.x,d.y=e.y,d.z=e.z,d.rotationX=e.rotationX,d.rotationY=e.rotationY,d.rotationZ=e.rotationZ,d.scaleX=this.getFloadNum(d.scaleX),d.scaleY=this.getFloadNum(d.scaleY),d.scaleZ=this.getFloadNum(d.scaleZ),d.rotationX=this.getFloadNum(d.rotationX),d.rotationY=this.getFloadNum(d.rotationY),d.rotationZ=this.getFloadNum(d.rotationZ),d.type=e.type,d.data=e.data,b.collisionItem.push(d)}return b},c}();a.CannoSceneManager=c}(canonkey||(canonkey={}));var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),CanonModelCheckpoint=function(a){function b(){var b=a.call(this)||this;return b.modelItems=new Array,b}return __extends(b,a),b.getInstance=function(){return this._instance||(this._instance=new b),this._instance},b.prototype.initScene=function(a){this._cannoSceneManager=a},b.prototype.addEvents=function(){this.centenBall.body.addEventListener("collide",function(a){})},b.prototype.addMoveSphereMain=function(a){var b=new CANNON.Sphere(a/canonkey.Physics.baseScale10),c=new CANNON.Body({mass:1});c.addShape(b);var d=new canonkey.MainCanonPrefabSprite(c);return d._scene=this._scene,d.addToWorld(),d},b.prototype.clear=function(){for(console.log("清理场景"),canonkey.Physics.ready=!1,canonkey.AotuGravityManager.getInstance().clear();this.modelItems.length;){var a=this.modelItems.pop();a.destory()}console.log("等级准备====》",this.levelNum)},b.prototype.initXmlModel=function(a,b){var c=this;canonkey.Physics.world.gravity=canonkey.Physics.Vec3dW2C(new Pan3d.Vector3D(0,-980,0)),this.levelNum=a,this.clear();var d,e=String(this.levelNum);switch(this.centenBall?(d=this.centenBall,this.centenBall.body.sleep(),this.centenBall.body.wakeUp()):(d=this.addMoveSphereMain(12),d.body.mass=.98,this.centenBall=d,this.addEvents()),e){case"98001":d.z=0,d.x=-0,d.y=30;break;case"98002":d.z=0,d.x=0,d.y=30;break;case"98003":d.z=0,d.x=0,d.y=25;break;case"98004":d.z=0,d.x=0,d.y=40;break;case"98005":d.z=0,d.x=0,d.y=40;break;case"98007":d.z=30,d.x=0,d.y=40;break;case"98008":d.z=0,d.x=0,d.y=55;break;default:d.z=0,d.x=0,d.y=40}this.centenBall.resetParticlePos(),Pan3d.ResManager.getInstance().loadSceneRes(e,this.mainSceneComplete,this.mainSceneProgress,function(a){c.loadSceneConfigCom(a),canonkey.Physics.ready=!0})},b.prototype.addModelConlltion=function(a){var b=new canonkey.DirectShadowColorSprite;b.setModelInfoData(a);var c=this.getSceneCollisionItemByUid(a.id),d=new CANNON.Body({mass:1});if(d.type=CANNON.Body.KINEMATIC,c.length){var e=this._cannoSceneManager.makeBodyByItem(c),f=new Pan3d.Display3D;f.y=a.y,f.x=a.x,f.z=a.z,f.scaleX=a.scaleX,f.scaleY=a.scaleY,f.scaleZ=a.scaleZ,f.rotationX=a.rotationX,f.rotationY=a.rotationY,f.rotationZ=a.rotationZ,d=canonkey.Physics.makeBuildBodyMesh(f,e)}else canonkey.Physics.bodyAddShape(d,canonkey.Physics.makeBoxShape(new Pan3d.Vector3D(.01,.01,.01)));var g=new canonkey.CanonSceneSprite(d);g._directShadowDisplay3DSprite=b,g.dispList.push(b),g._scene=this._scene,g.addToWorld(),g.x=a.x,g.y=a.y,g.z=a.z,b.scaleX=a.scaleX,b.scaleY=a.scaleY,b.scaleZ=a.scaleZ,g.rotationX=a.rotationX,g.rotationY=a.rotationY,g.rotationZ=0,this.modelItems.push(g)},b.prototype.getSceneCollisionItemByUid=function(a){for(var b=new Array,c=0;c<this._sceneCollisionItem.length;c++)this._sceneCollisionItem[c].uid=="build"+a&&b.push(this._sceneCollisionItem[c]);return b},b.prototype.loadSceneConfigCom=function(a){var b=a.buildItem;this._sceneCollisionItem=a.sceneCollisionItem;for(var c=0;c<b.length;c++){var d=b[c];d.type==Pan3d.BaseRes.PREFAB_TYPE&&("sign_begin"==d.name||"sign_end"==d.name||"level_finish"==d.name?canonkey.AotuGravityManager.getInstance().addPointByObj(d):this.addModelConlltion(d))}},b.prototype.mainSceneComplete=function(){},b.prototype.mainSceneProgress=function(a){},b}(Pan3d.Display3D),GunqiuColorVo=function(){function a(){}return a}(),GunqiuModel=function(){function a(){}return a.initData=function(a){this.canonPanel=a,this.lightVo=new Pan3d.LightVo,this.canonPanel.layaSceneLevel.scene.light=this.lightVo;var b=0;b=random(5),getUrlParam("color")&&(b=Number(getUrlParam("color"))%5),this.changeSceneColor(b),Pan3d.Display3DFollowLocusPartilce.waitCdTime=10},a.changeSceneColor=function(a){switch(a){case 0:this.makeBaseColor_0();break;case 1:this.makeBaseColor_1();break;case 2:this.makeBaseColor_2();break;case 3:this.makeBaseColor_3();break;case 4:this.makeBaseColor_4();break;default:alert("还没有这组数据")}},a.makeBaseColor_0=function(){var a=new GunqiuColorVo;a.bgTop=new Pan3d.Vector3D(246/255,220/255,198/255),a.bgBottom=new Pan3d.Vector3D(246/255,200/255,166/255),a.modelcolor=new Pan3d.Vector3D(250/255,220/255,198/255),this.useColor=a;var b=new Pan3d.Vector3D(0,1,0),c=new Pan3d.Vector3D(30/255,50/255,60/255),d=new Pan3d.Vector3D(220/255,150/255,100/255);this.lightVo.setData(b,c,d)},a.makeBaseColor_1=function(){var a=new GunqiuColorVo;a.bgTop=new Pan3d.Vector3D(115/255,178/255,168/255),a.bgBottom=new Pan3d.Vector3D(96/255,170/255,220/255),a.modelcolor=new Pan3d.Vector3D(115/255,178/255,168/255),this.useColor=a;var b=new Pan3d.Vector3D(1,1,1);b.normalize();var c=new Pan3d.Vector3D(40/255,56/255,65/255),d=new Pan3d.Vector3D(64/255,100/255,110/255);this.lightVo.setData(b,c,d)},a.makeBaseColor_2=function(){var a=new GunqiuColorVo;a.bgTop=new Pan3d.Vector3D(90/255,100/255,160/255),a.bgBottom=new Pan3d.Vector3D(110/255,60/255,180/255),a.modelcolor=new Pan3d.Vector3D(90/255,100/255,160/255),this.useColor=a;var b=new Pan3d.Vector3D(1,1,1);b.normalize();var c=new Pan3d.Vector3D(35/255,15/255,60/255),d=new Pan3d.Vector3D(76/255,36/255,126/255);this.lightVo.setData(b,c,d)},a.makeBaseColor_3=function(){var a=new GunqiuColorVo;a.bgTop=new Pan3d.Vector3D(218/255,199/255,219/255),a.bgBottom=new Pan3d.Vector3D(233/255,201/255,202/255),a.modelcolor=new Pan3d.Vector3D(218/255,199/255,219/255),this.useColor=a;var b=new Pan3d.Vector3D(1,1,1);b.normalize();var c=new Pan3d.Vector3D(13/255,35/255,39/255),d=new Pan3d.Vector3D(226/255,167/255,159/255);this.lightVo.setData(b,c,d)},a.makeBaseColor_4=function(){var a=new GunqiuColorVo;a.bgTop=new Pan3d.Vector3D(82/255,82/255,82/255),a.bgBottom=new Pan3d.Vector3D(55/255,55/255,55/255),a.modelcolor=new Pan3d.Vector3D(82/255,82/255,82/255),this.useColor=a;var b=new Pan3d.Vector3D(-1,1,-1);b.normalize();var c=new Pan3d.Vector3D(36/255,36/255,36/255),d=new Pan3d.Vector3D(39/255,39/255,39/255);this.lightVo.setData(b,c,d)},a}(),__extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),CanonPanel=function(a){function b(){var b=a.call(this)||this;b.ape=new Laya.Sprite,b.addChild(b.ape),b.ape.pos(0,0),b.layaSceneLevel=new ShadowLaya3dSprite,b.layaSceneLevel.camDistance=350,b.layaSceneLevel.camRotationY=0,b.layaSceneLevel.camAotuMove=!1,b.addChild(b.layaSceneLevel),b.layaSceneLevel.addMaskUi(750,1334),GunqiuModel.initData(b);var c=new bet.GameBgSprite;return c._scene=b.layaSceneLevel.scene,b.layaSceneLevel.scene.addDisplay(c),b.initModel(),b.addEvents(),Pan3d.UIManager.getInstance().addUIContainer(uiview.TopMenuView.getInstance()),b}return __extends(b,a),b.prototype.initModel=function(){this.modelRotation=new Pan3d.Vector3D,this.lastRotation=new Pan3d.Vector3D,this._cannoSceneManager=new canonkey.CannoSceneManager(this.layaSceneLevel.scene),CanonModelCheckpoint.getInstance()._scene=this.layaSceneLevel.scene,CanonModelCheckpoint.getInstance().initScene(this._cannoSceneManager),Pan3d.ProgrmaManager.getInstance().registe(Pan3d.LineDisplayShader.LineShader,new Pan3d.LineDisplayShader),getUrlParam("id")?CanonModelCheckpoint.getInstance().initXmlModel(Number(getUrlParam("id")),this):CanonModelCheckpoint.getInstance().initXmlModel(98001,this)},b.prototype.addEvents=function(){Laya.stage.on(Pan3d.MouseType.MouseDown,this,this.onMouseDown),Laya.stage.on(Pan3d.MouseType.MouseUp,this,this.onMouseUp),Laya.stage.on(Pan3d.MouseType.MouseMove,this,this.onMouseMove),Laya.stage.on(Pan3d.MouseType.MouseWheel,this,this.onMouseWheel)},b.prototype.onMouseDown=function(a){this.mouseDownPosint=new Pan3d.Vector2D(Laya.stage.mouseX,Laya.stage.mouseY),this.lastRotation.x=this.modelRotation.x,this.lastRotation.y=this.modelRotation.y,this.lastRotation.z=this.modelRotation.z,Pan3d.UIManager.getInstance().mouseEvetData(new Pan3d.InteractiveEvent(Pan3d.InteractiveEvent.Down),new Pan3d.Vector2D(Laya.stage.mouseX,Laya.stage.mouseY))},b.prototype.onMouseUp=function(a){this.mouseDownPosint=null},b.prototype.onMouseMove=function(a){if(this.mouseDownPosint){var b=new Pan3d.Vector2D(Laya.stage.mouseX,Laya.stage.mouseY);b=b.subtract(this.mouseDownPosint),this.modelRotation.x=this.lastRotation.x+b.x/15,this.modelRotation.z=this.lastRotation.z+b.y/15;var c=40;if(this.modelRotation.x=Math.min(c,Math.max(this.modelRotation.x,-c)),this.modelRotation.z=Math.min(c,Math.max(this.modelRotation.z,-c)),!canonkey.AotuGravityManager.getInstance().isAotuTrue){var d=new Pan3d.Matrix3D;d.appendRotation(this.modelRotation.z,Pan3d.Vector3D.X_AXIS),d.appendRotation(this.modelRotation.x,Pan3d.Vector3D.Z_AXIS);var e=d.transformVector(new Pan3d.Vector3D(0,-980,0));canonkey.Physics.world.gravity=canonkey.Physics.Vec3dW2C(e)}this.layaSceneLevel.camRotationX=-35-this.modelRotation.z,this.layaSceneLevel.camRotationZ=-this.modelRotation.x}},b.prototype.onMouseWheel=function(a){this.layaSceneLevel.camDistance+=a.delta},b.prototype.addGridLineSprite=function(){Pan3d.ProgrmaManager.getInstance().registe(Pan3d.LineDisplayShader.LineShader,new Pan3d.LineDisplayShader);var a=new Pan3d.GridLineSprite;this.layaSceneLevel.scene.addDisplay(a)},b.prototype.render=function(b,c,d){a.prototype.render.call(this,b,c,d),this.layaSceneLevel.x=this.ape.x,this.layaSceneLevel.y=this.ape.y,this.layaSceneLevel.focus3d.x=CanonModelCheckpoint.getInstance().centenBall.x,this.layaSceneLevel.focus3d.y=CanonModelCheckpoint.getInstance().centenBall.y,this.layaSceneLevel.focus3d.z=CanonModelCheckpoint.getInstance().centenBall.z,canonkey.Physics.ready&&(CannoSoundManager.getInstance().updata(),CanonModelCheckpoint.getInstance().centenBall.y<-3e3&&canonkey.Physics.ready&&(this.modelRotation.x=0,this.modelRotation.z=0,this.layaSceneLevel.camRotationX=-35-this.modelRotation.z,this.layaSceneLevel.camRotationZ=-this.modelRotation.x,canonkey.Physics.ready=!1,uiview.TopMenuView.getInstance().showLevelLost()),canonkey.Physics.update(),canonkey.AotuGravityManager.getInstance().upFrame(CanonModelCheckpoint.getInstance().centenBall))},b}(Laya.Sprite);
var Browser = Laya.Browser;
var LEvent = Laya.Event;
var Stage = Laya.Stage;
// 打印
var MAX_LOG_LEVEL = 4;
var log_level = MAX_LOG_LEVEL;
// 本地调试
var isDebug = false;
var getTimeShortStr = function (v) {
    return v;
};
function logd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (log_level < 4)
        return;
    args.unshift(getTimeShortStr(Laya.timer.currTimer));
    args.unshift("[D]");
    console.debug(args.join(" "));
}
function logl() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (log_level < 3)
        return;
    args.unshift(getTimeShortStr(Laya.timer.currTimer));
    args.unshift("[L]");
    console.log(args.join(" "));
}
function logw() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (log_level < 2)
        return;
    args.unshift(getTimeShortStr(Laya.timer.currTimer));
    args.unshift("[W]");
    console.warn(args.join(" "));
}
function loge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (log_level < 1)
        return;
    args.unshift(getTimeShortStr(Laya.timer.currTimer));
    args.unshift("[E]");
    console.error(args.join(" "));
}
// 是否iphoneX
var onIPhoneX = false;
//初始化微信小游戏
Laya.MiniAdpter.init();
/*
//程序入口
Laya.init(600, 400, WebGL);
//激活资源版本控制
Laya.ResourceVersion.enable("version.json", Handler.create(null, beginLoad), Laya.ResourceVersion.FILENAME_VERSION);

function beginLoad(){
    Laya.loader.load("res/atlas/comp.atlas", Handler.create(null, onLoaded));
}

function onLoaded(): void {
    //实例UI界面
    var testUI: LayaUiBase = new LayaUiBase();

    Laya.stage.addChild(testUI);

    var _xhr:XMLHttpRequest= new XMLHttpRequest();
              _xhr.onreadystatechange = () => {
                if (!_xhr || _xhr.readyState !== 4) {
                    return;
                }
                if (_xhr.status !== 0 && _xhr.status !== 200) {
                    return;
                }
         console.log("XMLHttpRequest加载正确")
            }
    _xhr.open("GET", "http://h5key.com/cannondemo/res/level1.xml", true);
    _xhr.responseType = "text";
    _xhr.send();


  console.log("1111111111111111111111")
  console.log( CANNON);
  console.log( new CANNON.Vec3());


       Pan3d.LoadManager.getInstance().load( "http://h5key.com/cannondemo/res/level1.xml",  Pan3d.LoadManager.XML_TYPE,
                ($data: string) => {
            //  console.log($data)
                });

}

*/
var Launch = (function () {
    function Launch() {
        var _this = this;
        // 美术设计画布像素高宽
        this.widthDesginPixelw = 480;
        this.heightDesginPixelw = 800;
        // 浏览器可视高宽（在设备上的像素高宽）
        this._designWidth = 0;
        this._designHeight = 0;
        // 客户端画布缩放比
        this._clientScale = 1;
        // 场景缩放比(基于客户端画布缩放比)
        this._sceneScale = 1 * .5;
        // 机器人模式
        this._robotMode = false;
        // 是否休眠
        this.isBlur = false;
        this._showStat = false;
        // 浏览器可视原始高宽
        this._browserClientWidth = 0;
        this._browserClientHeight = 0;
        this._lockOrientation = true;
        this.onPC = false;
        window.onload = function () {
            _this.init();
        };
    }
    Object.defineProperty(Launch.prototype, "showStat", {
        get: function () {
            return this._showStat;
        },
        set: function (v) {
            this._showStat = v;
            this._showStat ? Laya.Stat.show() : Laya.Stat.hide();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Launch.prototype, "canvas", {
        get: function () {
            return this._canvas;
        },
        enumerable: true,
        configurable: true
    });
    Launch.prototype.init = function () {
        isDebug = (location.href.indexOf("file") == 0);
        Laya.MiniAdpter.init();
        // 初始化舞台
        this._canvas = Laya.init(Browser.clientWidth * Browser.pixelRatio, Browser.clientHeight * Browser.pixelRatio, Laya.WebGL);
        // 主心跳
        Laya.stage.frameLoop(1, this, this.onUpdate);
        //   Laya.stage.mouseThrough = true;
        // 监听窗口大小变化
        Laya.stage.on(LEvent.RESIZE, this, this.onResize);
        this.onResize();
        mainpan3d.canvas = main.canvas;
        Pan3d.Scene_data.fileRoot = "http://h5key.com/panres/res/";
        this.loadBaseUiArt();
    };
    Launch.prototype.addLaya3dScene = function () {
        setTimeout(function () {
            //  Laya.stage.addChild(new Scene2dSprite); //基本2d场景 行走
            //Laya.stage.addChild(new SceneUiPanel()); //2dui场景 行走
            //Laya.stage.addChild(new Skill2dUiPanel()); //2d 技能播放
            //Laya.stage.addChild(new Avatar3dUiPanel()); //3d场景行走
            //Laya.stage.addChild(new Game3dScene());      //3d包含地图
            //Laya.stage.addChild(new Skill3dUiPanel());   //3d场景播技能
            //Laya.stage.addChild(new Particle3dPanel());   //播放3d特效
            //Laya.stage.addChild(new Particle2dPanel());   //播放2d特效
            //Laya.stage.addChild(new DeleteRolePanel); //删除与添加角色
            //Laya.stage.addChild(new Sanguo3dScenePanel); //三国角色特效
            //Laya.stage.addChild(new Scale2dScenePanel); //鼠标中键滚动控制2D场景比例
            Laya.stage.addChild(new CanonPanel);
        }, 100);
    };
    Launch.prototype.loadBaseUiArt = function () {
        var _this = this;
        var $baseUiList = new Array;
        $baseUiList.push({ xmlurl: "ui/textlist/textlist.xml", picurl: "ui/textlist/textlist.png", name: Pan3d.UIData.textlist });
        $baseUiList.push({ xmlurl: "ui/public/public.xml", picurl: "ui/public/public.png", name: Pan3d.UIData.publicUi });
        Pan3d.UIData.init($baseUiList, function () {
            console.log("ui加载完成");
            _this.addLaya3dScene();
        }, function (num) {
            console.log(num, "/", $baseUiList.length);
        });
    };
    Launch.prototype.addOther = function () {
        var $imag = new Laya.Image('res/ui/logo.png');
        $imag.pos(200, 500);
        Laya.stage.addChild($imag);
        var $imag = new Laya.Image('res/ui/blood.png');
        $imag.pos(500, 400);
        $imag.pos(500, 500);
        Laya.stage.addChild($imag);
    };
    // 心跳更新
    Launch.prototype.onUpdate = function () {
        var timer = Laya.timer.currTimer;
        var diff = timer - this._prevUpdateTimer;
        // logd('Launch.onUpdate', timer - this._prevUpdateTimer, diff);   
        this._prevUpdateTimer = timer;
        if (!diff) {
            return;
        }
        // 这样做才能防止白边
        this.checkClientSize();
        // 更新设计分辨率
        // Laya.stage.designWidth = this._designWidth;
        if (Laya.stage.width != this._designWidth)
            Laya.stage.width = this._designWidth;
        // Laya.stage.designHeight = this._designHeight;
        if (Laya.stage.height != this._designHeight)
            Laya.stage.height = this._designHeight;
        // this._scene2dStart && this._scene2dStart.update();
    };
    // 竖屏的缩放值
    //private _verticalClientScale: number = 0;
    // 游戏窗口尺寸发生变化
    Launch.prototype.onResize = function () {
        logd('Browser:', Browser.width, Browser.height, Browser.clientWidth, Browser.clientHeight, Browser.pixelRatio);
        logd('window:', window.innerWidth, window.innerHeight, window.outerWidth, window.outerHeight, window.devicePixelRatio);
        logd('screen:', screen.width, screen.height, screen.availWidth, screen.availHeight, screen.deviceXDPI, screen.deviceYDPI, screen.pixelDepth);
        logd('onIPhoneX', onIPhoneX);
        this.checkClientSize();
        var sceneScale = this._sceneScale;
        var clientScale = this._clientScale;
        var clientWidth = this._clientWidth;
        var clientHeight = this._clientHeight;
        if (Pan3d.Scene_data.canvas3D) {
            Pan3d.Engine.resetSize(clientWidth, clientHeight);
        }
    };
    Object.defineProperty(Launch.prototype, "lockOrientation", {
        set: function (v) {
            this._lockOrientation = v;
        },
        enumerable: true,
        configurable: true
    });
    // 校验浏览器可视屏幕像素
    Launch.prototype.checkClientSize = function () {
        var browser_clientWidth = Browser.clientWidth;
        var browser_clientHeight = Browser.clientHeight;
        this.onPC = Browser.onPC;
        if (!this.onPC && this._prevBrowserClientWidth) {
            if ((browser_clientWidth == this._prevBrowserClientWidth
                && browser_clientHeight != this._prevBrowserClientHeight)
                || (browser_clientHeight == this._prevBrowserClientHeight
                    && browser_clientWidth != this._prevBrowserClientWidth)) {
                // 呼出软键盘了
                // if(Laya.stage.screenMode == Stage.SCREEN_HORIZONTAL){
                //     // 如果自动横屏改成竖屏
                //     Laya.stage.screenMode = Stage.SCREEN_VERTICAL;
                //     this.verticalByInput = true;
                // }
                return;
            }
        }
        var __width = browser_clientWidth;
        var __height = browser_clientHeight;
        switch (Laya.stage.screenMode) {
            case Stage.SCREEN_VERTICAL:
                browser_clientHeight = Math.max(__width, __height);
                browser_clientWidth = Math.min(__width, __height);
                break;
            case Stage.SCREEN_HORIZONTAL:
                browser_clientHeight = Math.min(__width, __height);
                browser_clientWidth = Math.max(__width, __height);
                break;
        }
        if (this._browserClientWidth == browser_clientWidth && this._browserClientHeight == browser_clientHeight) {
            return;
        }
        this._browserClientWidth = browser_clientWidth;
        this._browserClientHeight = browser_clientHeight;
        this._prevBrowserClientWidth = browser_clientWidth;
        this._prevBrowserClientHeight = browser_clientHeight;
        this._designWidth = this._browserClientWidth * Browser.pixelRatio;
        this._designHeight = this._browserClientHeight * Browser.pixelRatio;
        if (this._designWidth < this._designHeight && (this._designWidth < 960 || this._designHeight < 576)) {
            // 屏幕太小适应手机的适配方案
            this.onPC = false;
        }
        if (this.onPC) {
            this.widthDesginPixelw = 576;
            this.heightDesginPixelw = 960;
            this._clientScale = Browser.pixelRatio / 1.25;
            if (this._clientScale < 1) {
                this._clientScale = 1;
            }
            this._clientWidth = this._designWidth / this._clientScale;
            this._clientHeight = this._designHeight / this._clientScale;
        }
        else {
            this.widthDesginPixelw = 480;
            this.heightDesginPixelw = 800;
            var wScale = this._designWidth / this.widthDesginPixelw;
            var hScale = this._designHeight / this.heightDesginPixelw;
            this._clientScale = Math.min(wScale, hScale);
            if (wScale > hScale) {
                this._clientWidth = this.heightDesginPixelw * (this._designWidth / this._designHeight);
                this._clientHeight = this.heightDesginPixelw;
            }
            else {
                this._clientWidth = this.widthDesginPixelw;
                this._clientHeight = this.widthDesginPixelw * (this._designHeight / this._designWidth);
            }
        }
    };
    return Launch;
}());
var main = new Launch();
//# sourceMappingURL=Launch.js.map