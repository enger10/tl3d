import { LayaSceneBaseChar } from "./LayaSceneBaseChar";
import { Skill } from "../../tl3d/engine/skill/Skill";
import { Display3D } from "../../tl3d/engine/display3D/Display3D";
import { Vector3D } from "../../tl3d/engine/math/Vector3D";
import { Display3dMovie } from "../../tl3d/engine/display3D/Display3dMovie";
import { Vector2D } from "../../tl3d/engine/math/Vector2D";
export declare class LayaSceneChar extends LayaSceneBaseChar {
    static BLOOD_COLOR_HP: number;
    static BLOOD_COLOR_ANGER: number;
    skillitem: Array<Skill>;
    isMount: boolean;
    static Defaul_Man_Avatar: number;
    static Defaul_WoMan_Avater: number;
    static WEAPON_PART: string;
    static WEAPON_DEFAULT_SLOT: string;
    static MOUNT_SLOT: string;
    static WING_SLOT: string;
    static SEL_PART: string;
    static QUEST_ICON: string;
    static NONE_SLOT: string;
    protected _px: number;
    protected _py: number;
    protected _pz: number;
    private _pRotationY;
    toRotationY: number;
    private _pScale;
    tittleHeight: number;
    private _optimization;
    constructor();
    /**强制角度 */
    set forceRotationY(val: number);
    get pRotationY(): number;
    set pRotationY(val: number);
    get pScale(): number;
    set pScale(v: number);
    protected _mountChar: LayaSceneBaseChar;
    setMount(v: number): boolean;
    private _wingDisplay;
    setWing(v: number): void;
    private _weaponNum;
    setWeapon(num: number): void;
    setWeaponByAvatar(avatar: number, $suffix?: string): void;
    protected getSceneCharAvatarUrl(num: number): string;
    onMeshLoaded(): void;
    play($action: string, $completeState?: number, needFollow?: boolean): boolean;
    getCurrentAction(): string;
    protected rotationToNew(value: number, num?: number): void;
    stopMove(): void;
    watch($obj: Display3D, $syn?: boolean): void;
    getCurrentPos(): Vector3D;
    skillVo: Skill;
    msgSpellStop(): void;
    destory(): void;
    set visible(value: boolean);
    get visible(): boolean;
    set optimization(value: boolean);
    get optimization(): boolean;
    private _resultVisible;
    get resultVisible(): boolean;
    applyVisible(): void;
    protected _isCamera2D: boolean;
    set isCamera2D(v: boolean);
    updateBind(): void;
    private updateWeaponScale;
    get px(): number;
    set px(value: number);
    get pz(): number;
    set pz(value: number);
    private lineSprite;
    update(): void;
    math_distance($other: Display3dMovie): number;
    get2dPos(): Vector2D;
    set2dPos($x: number, $y: number): void;
    private _showHitBox;
    protected _triIndex: Array<number>;
    protected _hitBox2DItem: Array<Vector2D>;
    mouseClik(lineA: Vector3D, lineB: Vector3D): boolean;
    removeStage(): void;
    addStage(): void;
}
