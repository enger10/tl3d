import { Vector3D } from "../engine/math/Vector3D";
import { SceneBaseChar } from "./SceneBaseChar";
import { Skill } from "../engine/skill/Skill";
import { MountChar } from "./MountChar";
import { Vector2D } from "../engine/math/Vector2D";
import { Display3D } from "../engine/display3D/Display3D";
import { Display3dMovie } from "../engine/display3D/Display3dMovie";
export declare class SceneChar extends SceneBaseChar {
    _speedDirect: Vector3D;
    speedTX: number;
    life: number;
    protected _walkPath: Array<Vector3D>;
    private _astarDirect;
    private _astatTopos;
    skillitem: Array<Skill>;
    mountChar: MountChar;
    isMount: boolean;
    static WEAPON_PART: string;
    static WEAPON_DEFAULT_SLOT: string;
    static MOUNT_SLOT: string;
    static WING_SLOT: string;
    static SEL_PART: string;
    static QUEST_ICON: string;
    static NONE_SLOT: string;
    protected _px: number;
    protected _py: number;
    protected _pz: number;
    private _pRotationY;
    private _isBoss;
    private _optimization;
    constructor();
    get isDeath(): boolean;
    get isBoss(): boolean;
    set isBoss(val: boolean);
    get px(): number;
    set px(val: number);
    get py(): number;
    set py(val: number);
    get pz(): number;
    set pz(val: number);
    /**强制角度 */
    set forceRotationY(val: number);
    get pRotationY(): number;
    set pRotationY(val: number);
    play($action: string, $completeState?: number, needFollow?: boolean): boolean;
    getCurrentAction(): string;
    protected getSceneCharAvatarUrl(num: number): string;
    static Defaul_Man_Avatar: number;
    static Defaul_WoMan_Avater: number;
    setMount(): void;
    private _weaponNum;
    setWeapon(num: number): void;
    setWeaponByAvatar(avatar: number, $suffix?: string): void;
    private _wingID;
    protected _wingDisplay: SceneBaseChar;
    addTestWeapon(): void;
    tittleHeight: number;
    onMeshLoaded(): void;
    set walkPath($wp: Array<Vector3D>);
    fixAstartData(pos: Vector2D): void;
    applyWalk($item: Array<Vector2D>): void;
    set moveToPos2D($v2d: Vector2D);
    private stopToPos;
    private moveTile;
    refreshY(): void;
    refreshHP(): void;
    protected rotationToNew(value: number, num?: number): void;
    set speedUseTime(value: number);
    refreshSpeed(): void;
    private lastPos;
    protected walkAstar(t: number): void;
    protected walkComplete(): void;
    walkCompleteBackFun: Function;
    protected setTarget(): void;
    setAstarNrmAndRotation(): void;
    toRotationY: number;
    protected mathAngle(x1: number, y1: number, x2: number, y2: number): number;
    setSpeedDirect(value: Vector3D): void;
    stopMove(): void;
    getEndWalkPathPos(): Vector3D;
    watch($obj: Display3D, $syn?: boolean): void;
    getCurrentPos(): Vector3D;
    getAstarPos(): Vector2D;
    protected changeAction($action: string): void;
    skillVo: Skill;
    playSkill($skill: Skill): void;
    msgSpellStop(): void;
    destory(): void;
    removeStage(): void;
    addStage(): void;
    math_distance($other: Display3dMovie): number;
    set visible(value: boolean);
    get visible(): boolean;
    set optimization(value: boolean);
    get optimization(): boolean;
    private _resultVisible;
    get resultVisible(): boolean;
    applyVisible(): void;
    private lineSprite;
    update(): void;
    private _showHitBox;
    private triIndex;
    private hitBox2DItem;
    mouseClik($lineA: Vector3D, $lineB: Vector3D): boolean;
}
