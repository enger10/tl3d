import { EventDispatcher } from "../events/EventDispatcher";
import { Matrix3D } from "../math/Matrix3D";
import { Vector3D } from "../math/Vector3D";
import { IBind } from "../display3D/interfaces/IBind";
import { CombineParticleData } from "./CombineParticleData";
import { Display3DParticle } from "./Display3DParticle";
import { Pan3dByteArray } from "../math/Pan3dByteArray";
export declare class CombineParticle extends EventDispatcher {
    sourceData: CombineParticleData;
    url: string;
    private _displayAry;
    private _time;
    private _maxTime;
    type: number;
    bindMatrix: Matrix3D;
    bindVecter3d: Vector3D;
    bindScale: Vector3D;
    invertBindMatrix: Matrix3D;
    private _bindTarget;
    private _bindSocket;
    private _rotationX;
    private _rotationY;
    private _rotationZ;
    private _isInGroup;
    private _groupPos;
    private _groupRotation;
    private _groupScale;
    groupMatrix: Matrix3D;
    groupRotationMatrix: Matrix3D;
    hasMulItem: boolean;
    sceneVisible: boolean;
    dynamic: boolean;
    hasDestory: boolean;
    constructor();
    get displayAry(): Array<Display3DParticle>;
    set displayAry(value: Array<Display3DParticle>);
    set maxTime(value: number);
    set bindTarget(value: IBind);
    set bindSocket(value: string);
    set x(value: number);
    set y(value: number);
    set z(value: number);
    get x(): number;
    get y(): number;
    get z(): number;
    setPos($xpos: number, $ypos: number, $zpos: number): void;
    setMulPos(ary: Array<Array<Array<number>>>): void;
    set scaleX(value: number);
    set scaleY(value: number);
    set scaleZ(value: number);
    set rotationX(value: number);
    set rotationY(value: number);
    set rotationZ(value: number);
    applyRotation(): void;
    setGroup($pos: Vector3D, $rotaion: Vector3D, $scale: Vector3D): void;
    setDataByte(byte: Pan3dByteArray): void;
    addPrticleItem($dis: Display3DParticle): void;
    private getDisplay3DById;
    updateTime(t: number): void;
    updateBind(): void;
    reset(): void;
    update(): void;
    updateItem(idx: number): void;
    get size(): number;
    private getDisplay3D;
    destory(): void;
}
