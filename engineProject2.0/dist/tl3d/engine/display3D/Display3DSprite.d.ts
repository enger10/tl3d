import { Display3D } from "./Display3D";
import { Matrix3D } from "../math/Matrix3D";
import { IBind } from "./interfaces/IBind";
import { Vector3D } from "../math/Vector3D";
import { Material } from "../material/Material";
import { MaterialBaseParam } from "../material/MaterialBaseParam";
import { TextureRes } from "../material/TextureRes";
import { QuadTreeNode } from "../scene/tree/QuadTreeNode";
export declare class Display3DSprite extends Display3D {
    isPerspective: boolean;
    name: string;
    id: number;
    objurl: string;
    picUrl: string;
    materialUrl: string;
    materialInfoArr: Array<any>;
    material: Material;
    materialParam: MaterialBaseParam;
    time: number;
    lightMapTextureRes: TextureRes;
    protected _rotationMatrix: Matrix3D;
    _rotationData: Float32Array;
    bindMatrix: Matrix3D;
    bindTarget: IBind;
    bindSocket: string;
    private _isInGroup;
    private _groupPos;
    private _groupRotation;
    private _groupScale;
    groupMatrix: Matrix3D;
    groupRotationMatrix: Matrix3D;
    private _lightProbe;
    protected resultSHVec: Array<Vector3D>;
    aabb: QuadTreeNode;
    dynamic: boolean;
    constructor();
    private _aabbVect;
    get aabbVect(): Array<Vector3D>;
    setObjUrl(value: string): void;
    baseTexture: TextureRes;
    setPicUrl($str: string): void;
    setLightMapUrl(value: string): void;
    get lightMapTexture(): WebGLTexture;
    setMaterialUrl(value: string, $paramData?: Array<any>): void;
    get lightProbe(): boolean;
    set lightProbe(value: boolean);
    update(): void;
    updateMaterial(): void;
    setMaterialVa(): void;
    setMaterialVaIndependent(): void;
    setMaterialVaCompress(): void;
    setDirectLight($material: Material): void;
    setCam(): void;
    setBind($bindTarget: IBind, $bindSocket: string): void;
    setGroup($pos: Vector3D, $rotaion: Vector3D, $scale: Vector3D): void;
    updateBind(): void;
    protected setBaseMaterialVc($material: Material): void;
    setCamPos($material: Material): void;
    setMaterialVc($material: Material, $mp?: MaterialBaseParam): void;
    setMaterialTexture($material: Material, $mp?: MaterialBaseParam): void;
    checkMaterialTexture($material: Material): boolean;
    updateRotationMatrix(): void;
    setPos($v3d: Vector3D): void;
    destory(): void;
}
